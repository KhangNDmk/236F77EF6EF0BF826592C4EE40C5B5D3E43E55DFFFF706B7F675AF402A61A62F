
final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c0c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08006d98  08006d98  00016d98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006e38  08006e38  00016e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006e40  08006e40  00016e40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006e44  08006e44  00016e44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000084  20000000  08006e48  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020084  2**0
                  CONTENTS
  8 .bss          000005a0  20000088  20000088  00020088  2**3
                  ALLOC
  9 ._user_heap_stack 00000600  20000628  20000628  00020088  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002580f  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00004337  00000000  00000000  000458c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000dd2b  00000000  00000000  00049bfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000dd0  00000000  00000000  00057928  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011b0  00000000  00000000  000586f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000980e  00000000  00000000  000598a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000053ca  00000000  00000000  000630b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00068480  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003074  00000000  00000000  000684fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000088 	.word	0x20000088
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006d7c 	.word	0x08006d7c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000008c 	.word	0x2000008c
 80001c4:	08006d7c 	.word	0x08006d7c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__gedf2>:
 800095c:	f04f 3cff 	mov.w	ip, #4294967295
 8000960:	e006      	b.n	8000970 <__cmpdf2+0x4>
 8000962:	bf00      	nop

08000964 <__ledf2>:
 8000964:	f04f 0c01 	mov.w	ip, #1
 8000968:	e002      	b.n	8000970 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__cmpdf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000986:	d01b      	beq.n	80009c0 <__cmpdf2+0x54>
 8000988:	b001      	add	sp, #4
 800098a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800098e:	bf0c      	ite	eq
 8000990:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000994:	ea91 0f03 	teqne	r1, r3
 8000998:	bf02      	ittt	eq
 800099a:	ea90 0f02 	teqeq	r0, r2
 800099e:	2000      	moveq	r0, #0
 80009a0:	4770      	bxeq	lr
 80009a2:	f110 0f00 	cmn.w	r0, #0
 80009a6:	ea91 0f03 	teq	r1, r3
 80009aa:	bf58      	it	pl
 80009ac:	4299      	cmppl	r1, r3
 80009ae:	bf08      	it	eq
 80009b0:	4290      	cmpeq	r0, r2
 80009b2:	bf2c      	ite	cs
 80009b4:	17d8      	asrcs	r0, r3, #31
 80009b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ba:	f040 0001 	orr.w	r0, r0, #1
 80009be:	4770      	bx	lr
 80009c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c8:	d102      	bne.n	80009d0 <__cmpdf2+0x64>
 80009ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ce:	d107      	bne.n	80009e0 <__cmpdf2+0x74>
 80009d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d1d6      	bne.n	8000988 <__cmpdf2+0x1c>
 80009da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009de:	d0d3      	beq.n	8000988 <__cmpdf2+0x1c>
 80009e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop

080009e8 <__aeabi_cdrcmple>:
 80009e8:	4684      	mov	ip, r0
 80009ea:	4610      	mov	r0, r2
 80009ec:	4662      	mov	r2, ip
 80009ee:	468c      	mov	ip, r1
 80009f0:	4619      	mov	r1, r3
 80009f2:	4663      	mov	r3, ip
 80009f4:	e000      	b.n	80009f8 <__aeabi_cdcmpeq>
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdcmpeq>:
 80009f8:	b501      	push	{r0, lr}
 80009fa:	f7ff ffb7 	bl	800096c <__cmpdf2>
 80009fe:	2800      	cmp	r0, #0
 8000a00:	bf48      	it	mi
 8000a02:	f110 0f00 	cmnmi.w	r0, #0
 8000a06:	bd01      	pop	{r0, pc}

08000a08 <__aeabi_dcmpeq>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff fff4 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a10:	bf0c      	ite	eq
 8000a12:	2001      	moveq	r0, #1
 8000a14:	2000      	movne	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <__aeabi_dcmplt>:
 8000a1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a20:	f7ff ffea 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a24:	bf34      	ite	cc
 8000a26:	2001      	movcc	r0, #1
 8000a28:	2000      	movcs	r0, #0
 8000a2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2e:	bf00      	nop

08000a30 <__aeabi_dcmple>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff ffe0 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a38:	bf94      	ite	ls
 8000a3a:	2001      	movls	r0, #1
 8000a3c:	2000      	movhi	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmpge>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffce 	bl	80009e8 <__aeabi_cdrcmple>
 8000a4c:	bf94      	ite	ls
 8000a4e:	2001      	movls	r0, #1
 8000a50:	2000      	movhi	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmpgt>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffc4 	bl	80009e8 <__aeabi_cdrcmple>
 8000a60:	bf34      	ite	cc
 8000a62:	2001      	movcc	r0, #1
 8000a64:	2000      	movcs	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmpun>:
 8000a6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a74:	d102      	bne.n	8000a7c <__aeabi_dcmpun+0x10>
 8000a76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7a:	d10a      	bne.n	8000a92 <__aeabi_dcmpun+0x26>
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x20>
 8000a86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8a:	d102      	bne.n	8000a92 <__aeabi_dcmpun+0x26>
 8000a8c:	f04f 0000 	mov.w	r0, #0
 8000a90:	4770      	bx	lr
 8000a92:	f04f 0001 	mov.w	r0, #1
 8000a96:	4770      	bx	lr

08000a98 <__aeabi_d2iz>:
 8000a98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa0:	d215      	bcs.n	8000ace <__aeabi_d2iz+0x36>
 8000aa2:	d511      	bpl.n	8000ac8 <__aeabi_d2iz+0x30>
 8000aa4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aa8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aac:	d912      	bls.n	8000ad4 <__aeabi_d2iz+0x3c>
 8000aae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ab6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	bf18      	it	ne
 8000ac4:	4240      	negne	r0, r0
 8000ac6:	4770      	bx	lr
 8000ac8:	f04f 0000 	mov.w	r0, #0
 8000acc:	4770      	bx	lr
 8000ace:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad2:	d105      	bne.n	8000ae0 <__aeabi_d2iz+0x48>
 8000ad4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ad8:	bf08      	it	eq
 8000ada:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_d2uiz>:
 8000ae8:	004a      	lsls	r2, r1, #1
 8000aea:	d211      	bcs.n	8000b10 <__aeabi_d2uiz+0x28>
 8000aec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af0:	d211      	bcs.n	8000b16 <__aeabi_d2uiz+0x2e>
 8000af2:	d50d      	bpl.n	8000b10 <__aeabi_d2uiz+0x28>
 8000af4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000afc:	d40e      	bmi.n	8000b1c <__aeabi_d2uiz+0x34>
 8000afe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1a:	d102      	bne.n	8000b22 <__aeabi_d2uiz+0x3a>
 8000b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b20:	4770      	bx	lr
 8000b22:	f04f 0000 	mov.w	r0, #0
 8000b26:	4770      	bx	lr

08000b28 <__aeabi_d2f>:
 8000b28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b30:	bf24      	itt	cs
 8000b32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b3a:	d90d      	bls.n	8000b58 <__aeabi_d2f+0x30>
 8000b3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b50:	bf08      	it	eq
 8000b52:	f020 0001 	biceq.w	r0, r0, #1
 8000b56:	4770      	bx	lr
 8000b58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b5c:	d121      	bne.n	8000ba2 <__aeabi_d2f+0x7a>
 8000b5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b62:	bfbc      	itt	lt
 8000b64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b68:	4770      	bxlt	lr
 8000b6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b72:	f1c2 0218 	rsb	r2, r2, #24
 8000b76:	f1c2 0c20 	rsb	ip, r2, #32
 8000b7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b82:	bf18      	it	ne
 8000b84:	f040 0001 	orrne.w	r0, r0, #1
 8000b88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b94:	ea40 000c 	orr.w	r0, r0, ip
 8000b98:	fa23 f302 	lsr.w	r3, r3, r2
 8000b9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba0:	e7cc      	b.n	8000b3c <__aeabi_d2f+0x14>
 8000ba2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ba6:	d107      	bne.n	8000bb8 <__aeabi_d2f+0x90>
 8000ba8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bac:	bf1e      	ittt	ne
 8000bae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bb6:	4770      	bxne	lr
 8000bb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b97a 	b.w	8000ed4 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	468c      	mov	ip, r1
 8000bfe:	460d      	mov	r5, r1
 8000c00:	4604      	mov	r4, r0
 8000c02:	9e08      	ldr	r6, [sp, #32]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d151      	bne.n	8000cac <__udivmoddi4+0xb4>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4617      	mov	r7, r2
 8000c0c:	d96d      	bls.n	8000cea <__udivmoddi4+0xf2>
 8000c0e:	fab2 fe82 	clz	lr, r2
 8000c12:	f1be 0f00 	cmp.w	lr, #0
 8000c16:	d00b      	beq.n	8000c30 <__udivmoddi4+0x38>
 8000c18:	f1ce 0c20 	rsb	ip, lr, #32
 8000c1c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000c20:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000c24:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c28:	ea4c 0c05 	orr.w	ip, ip, r5
 8000c2c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c30:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000c34:	0c25      	lsrs	r5, r4, #16
 8000c36:	fbbc f8fa 	udiv	r8, ip, sl
 8000c3a:	fa1f f987 	uxth.w	r9, r7
 8000c3e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000c42:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c46:	fb08 f309 	mul.w	r3, r8, r9
 8000c4a:	42ab      	cmp	r3, r5
 8000c4c:	d90a      	bls.n	8000c64 <__udivmoddi4+0x6c>
 8000c4e:	19ed      	adds	r5, r5, r7
 8000c50:	f108 32ff 	add.w	r2, r8, #4294967295
 8000c54:	f080 8123 	bcs.w	8000e9e <__udivmoddi4+0x2a6>
 8000c58:	42ab      	cmp	r3, r5
 8000c5a:	f240 8120 	bls.w	8000e9e <__udivmoddi4+0x2a6>
 8000c5e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c62:	443d      	add	r5, r7
 8000c64:	1aed      	subs	r5, r5, r3
 8000c66:	b2a4      	uxth	r4, r4
 8000c68:	fbb5 f0fa 	udiv	r0, r5, sl
 8000c6c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000c70:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c74:	fb00 f909 	mul.w	r9, r0, r9
 8000c78:	45a1      	cmp	r9, r4
 8000c7a:	d909      	bls.n	8000c90 <__udivmoddi4+0x98>
 8000c7c:	19e4      	adds	r4, r4, r7
 8000c7e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c82:	f080 810a 	bcs.w	8000e9a <__udivmoddi4+0x2a2>
 8000c86:	45a1      	cmp	r9, r4
 8000c88:	f240 8107 	bls.w	8000e9a <__udivmoddi4+0x2a2>
 8000c8c:	3802      	subs	r0, #2
 8000c8e:	443c      	add	r4, r7
 8000c90:	eba4 0409 	sub.w	r4, r4, r9
 8000c94:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c98:	2100      	movs	r1, #0
 8000c9a:	2e00      	cmp	r6, #0
 8000c9c:	d061      	beq.n	8000d62 <__udivmoddi4+0x16a>
 8000c9e:	fa24 f40e 	lsr.w	r4, r4, lr
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	6034      	str	r4, [r6, #0]
 8000ca6:	6073      	str	r3, [r6, #4]
 8000ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cac:	428b      	cmp	r3, r1
 8000cae:	d907      	bls.n	8000cc0 <__udivmoddi4+0xc8>
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d054      	beq.n	8000d5e <__udivmoddi4+0x166>
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	e886 0021 	stmia.w	r6, {r0, r5}
 8000cba:	4608      	mov	r0, r1
 8000cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc0:	fab3 f183 	clz	r1, r3
 8000cc4:	2900      	cmp	r1, #0
 8000cc6:	f040 808e 	bne.w	8000de6 <__udivmoddi4+0x1ee>
 8000cca:	42ab      	cmp	r3, r5
 8000ccc:	d302      	bcc.n	8000cd4 <__udivmoddi4+0xdc>
 8000cce:	4282      	cmp	r2, r0
 8000cd0:	f200 80fa 	bhi.w	8000ec8 <__udivmoddi4+0x2d0>
 8000cd4:	1a84      	subs	r4, r0, r2
 8000cd6:	eb65 0503 	sbc.w	r5, r5, r3
 8000cda:	2001      	movs	r0, #1
 8000cdc:	46ac      	mov	ip, r5
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d03f      	beq.n	8000d62 <__udivmoddi4+0x16a>
 8000ce2:	e886 1010 	stmia.w	r6, {r4, ip}
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	b912      	cbnz	r2, 8000cf2 <__udivmoddi4+0xfa>
 8000cec:	2701      	movs	r7, #1
 8000cee:	fbb7 f7f2 	udiv	r7, r7, r2
 8000cf2:	fab7 fe87 	clz	lr, r7
 8000cf6:	f1be 0f00 	cmp.w	lr, #0
 8000cfa:	d134      	bne.n	8000d66 <__udivmoddi4+0x16e>
 8000cfc:	1beb      	subs	r3, r5, r7
 8000cfe:	0c3a      	lsrs	r2, r7, #16
 8000d00:	fa1f fc87 	uxth.w	ip, r7
 8000d04:	2101      	movs	r1, #1
 8000d06:	fbb3 f8f2 	udiv	r8, r3, r2
 8000d0a:	0c25      	lsrs	r5, r4, #16
 8000d0c:	fb02 3318 	mls	r3, r2, r8, r3
 8000d10:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d14:	fb0c f308 	mul.w	r3, ip, r8
 8000d18:	42ab      	cmp	r3, r5
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x134>
 8000d1c:	19ed      	adds	r5, r5, r7
 8000d1e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x132>
 8000d24:	42ab      	cmp	r3, r5
 8000d26:	f200 80d1 	bhi.w	8000ecc <__udivmoddi4+0x2d4>
 8000d2a:	4680      	mov	r8, r0
 8000d2c:	1aed      	subs	r5, r5, r3
 8000d2e:	b2a3      	uxth	r3, r4
 8000d30:	fbb5 f0f2 	udiv	r0, r5, r2
 8000d34:	fb02 5510 	mls	r5, r2, r0, r5
 8000d38:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000d3c:	fb0c fc00 	mul.w	ip, ip, r0
 8000d40:	45a4      	cmp	ip, r4
 8000d42:	d907      	bls.n	8000d54 <__udivmoddi4+0x15c>
 8000d44:	19e4      	adds	r4, r4, r7
 8000d46:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x15a>
 8000d4c:	45a4      	cmp	ip, r4
 8000d4e:	f200 80b8 	bhi.w	8000ec2 <__udivmoddi4+0x2ca>
 8000d52:	4618      	mov	r0, r3
 8000d54:	eba4 040c 	sub.w	r4, r4, ip
 8000d58:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d5c:	e79d      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000d5e:	4631      	mov	r1, r6
 8000d60:	4630      	mov	r0, r6
 8000d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d66:	f1ce 0420 	rsb	r4, lr, #32
 8000d6a:	fa05 f30e 	lsl.w	r3, r5, lr
 8000d6e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d72:	fa20 f804 	lsr.w	r8, r0, r4
 8000d76:	0c3a      	lsrs	r2, r7, #16
 8000d78:	fa25 f404 	lsr.w	r4, r5, r4
 8000d7c:	ea48 0803 	orr.w	r8, r8, r3
 8000d80:	fbb4 f1f2 	udiv	r1, r4, r2
 8000d84:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000d88:	fb02 4411 	mls	r4, r2, r1, r4
 8000d8c:	fa1f fc87 	uxth.w	ip, r7
 8000d90:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000d94:	fb01 f30c 	mul.w	r3, r1, ip
 8000d98:	42ab      	cmp	r3, r5
 8000d9a:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x1bc>
 8000da0:	19ed      	adds	r5, r5, r7
 8000da2:	f101 30ff 	add.w	r0, r1, #4294967295
 8000da6:	f080 808a 	bcs.w	8000ebe <__udivmoddi4+0x2c6>
 8000daa:	42ab      	cmp	r3, r5
 8000dac:	f240 8087 	bls.w	8000ebe <__udivmoddi4+0x2c6>
 8000db0:	3902      	subs	r1, #2
 8000db2:	443d      	add	r5, r7
 8000db4:	1aeb      	subs	r3, r5, r3
 8000db6:	fa1f f588 	uxth.w	r5, r8
 8000dba:	fbb3 f0f2 	udiv	r0, r3, r2
 8000dbe:	fb02 3310 	mls	r3, r2, r0, r3
 8000dc2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000dc6:	fb00 f30c 	mul.w	r3, r0, ip
 8000dca:	42ab      	cmp	r3, r5
 8000dcc:	d907      	bls.n	8000dde <__udivmoddi4+0x1e6>
 8000dce:	19ed      	adds	r5, r5, r7
 8000dd0:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dd4:	d26f      	bcs.n	8000eb6 <__udivmoddi4+0x2be>
 8000dd6:	42ab      	cmp	r3, r5
 8000dd8:	d96d      	bls.n	8000eb6 <__udivmoddi4+0x2be>
 8000dda:	3802      	subs	r0, #2
 8000ddc:	443d      	add	r5, r7
 8000dde:	1aeb      	subs	r3, r5, r3
 8000de0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000de4:	e78f      	b.n	8000d06 <__udivmoddi4+0x10e>
 8000de6:	f1c1 0720 	rsb	r7, r1, #32
 8000dea:	fa22 f807 	lsr.w	r8, r2, r7
 8000dee:	408b      	lsls	r3, r1
 8000df0:	fa05 f401 	lsl.w	r4, r5, r1
 8000df4:	ea48 0303 	orr.w	r3, r8, r3
 8000df8:	fa20 fe07 	lsr.w	lr, r0, r7
 8000dfc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000e00:	40fd      	lsrs	r5, r7
 8000e02:	ea4e 0e04 	orr.w	lr, lr, r4
 8000e06:	fbb5 f9fc 	udiv	r9, r5, ip
 8000e0a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000e0e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000e12:	fa1f f883 	uxth.w	r8, r3
 8000e16:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000e1a:	fb09 f408 	mul.w	r4, r9, r8
 8000e1e:	42ac      	cmp	r4, r5
 8000e20:	fa02 f201 	lsl.w	r2, r2, r1
 8000e24:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e28:	d908      	bls.n	8000e3c <__udivmoddi4+0x244>
 8000e2a:	18ed      	adds	r5, r5, r3
 8000e2c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e30:	d243      	bcs.n	8000eba <__udivmoddi4+0x2c2>
 8000e32:	42ac      	cmp	r4, r5
 8000e34:	d941      	bls.n	8000eba <__udivmoddi4+0x2c2>
 8000e36:	f1a9 0902 	sub.w	r9, r9, #2
 8000e3a:	441d      	add	r5, r3
 8000e3c:	1b2d      	subs	r5, r5, r4
 8000e3e:	fa1f fe8e 	uxth.w	lr, lr
 8000e42:	fbb5 f0fc 	udiv	r0, r5, ip
 8000e46:	fb0c 5510 	mls	r5, ip, r0, r5
 8000e4a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000e4e:	fb00 f808 	mul.w	r8, r0, r8
 8000e52:	45a0      	cmp	r8, r4
 8000e54:	d907      	bls.n	8000e66 <__udivmoddi4+0x26e>
 8000e56:	18e4      	adds	r4, r4, r3
 8000e58:	f100 35ff 	add.w	r5, r0, #4294967295
 8000e5c:	d229      	bcs.n	8000eb2 <__udivmoddi4+0x2ba>
 8000e5e:	45a0      	cmp	r8, r4
 8000e60:	d927      	bls.n	8000eb2 <__udivmoddi4+0x2ba>
 8000e62:	3802      	subs	r0, #2
 8000e64:	441c      	add	r4, r3
 8000e66:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e6a:	eba4 0408 	sub.w	r4, r4, r8
 8000e6e:	fba0 8902 	umull	r8, r9, r0, r2
 8000e72:	454c      	cmp	r4, r9
 8000e74:	46c6      	mov	lr, r8
 8000e76:	464d      	mov	r5, r9
 8000e78:	d315      	bcc.n	8000ea6 <__udivmoddi4+0x2ae>
 8000e7a:	d012      	beq.n	8000ea2 <__udivmoddi4+0x2aa>
 8000e7c:	b156      	cbz	r6, 8000e94 <__udivmoddi4+0x29c>
 8000e7e:	ebba 030e 	subs.w	r3, sl, lr
 8000e82:	eb64 0405 	sbc.w	r4, r4, r5
 8000e86:	fa04 f707 	lsl.w	r7, r4, r7
 8000e8a:	40cb      	lsrs	r3, r1
 8000e8c:	431f      	orrs	r7, r3
 8000e8e:	40cc      	lsrs	r4, r1
 8000e90:	6037      	str	r7, [r6, #0]
 8000e92:	6074      	str	r4, [r6, #4]
 8000e94:	2100      	movs	r1, #0
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	e6f8      	b.n	8000c90 <__udivmoddi4+0x98>
 8000e9e:	4690      	mov	r8, r2
 8000ea0:	e6e0      	b.n	8000c64 <__udivmoddi4+0x6c>
 8000ea2:	45c2      	cmp	sl, r8
 8000ea4:	d2ea      	bcs.n	8000e7c <__udivmoddi4+0x284>
 8000ea6:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eaa:	eb69 0503 	sbc.w	r5, r9, r3
 8000eae:	3801      	subs	r0, #1
 8000eb0:	e7e4      	b.n	8000e7c <__udivmoddi4+0x284>
 8000eb2:	4628      	mov	r0, r5
 8000eb4:	e7d7      	b.n	8000e66 <__udivmoddi4+0x26e>
 8000eb6:	4640      	mov	r0, r8
 8000eb8:	e791      	b.n	8000dde <__udivmoddi4+0x1e6>
 8000eba:	4681      	mov	r9, r0
 8000ebc:	e7be      	b.n	8000e3c <__udivmoddi4+0x244>
 8000ebe:	4601      	mov	r1, r0
 8000ec0:	e778      	b.n	8000db4 <__udivmoddi4+0x1bc>
 8000ec2:	3802      	subs	r0, #2
 8000ec4:	443c      	add	r4, r7
 8000ec6:	e745      	b.n	8000d54 <__udivmoddi4+0x15c>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e708      	b.n	8000cde <__udivmoddi4+0xe6>
 8000ecc:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed0:	443d      	add	r5, r7
 8000ed2:	e72b      	b.n	8000d2c <__udivmoddi4+0x134>

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ed8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eda:	4a0e      	ldr	r2, [pc, #56]	; (8000f14 <HAL_InitTick+0x3c>)
 8000edc:	4b0e      	ldr	r3, [pc, #56]	; (8000f18 <HAL_InitTick+0x40>)
{
 8000ede:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ee0:	7818      	ldrb	r0, [r3, #0]
 8000ee2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ee6:	fbb3 f3f0 	udiv	r3, r3, r0
 8000eea:	6810      	ldr	r0, [r2, #0]
 8000eec:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ef0:	f000 fa7c 	bl	80013ec <HAL_SYSTICK_Config>
 8000ef4:	4604      	mov	r4, r0
 8000ef6:	b958      	cbnz	r0, 8000f10 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef8:	2d0f      	cmp	r5, #15
 8000efa:	d809      	bhi.n	8000f10 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000efc:	4602      	mov	r2, r0
 8000efe:	4629      	mov	r1, r5
 8000f00:	f04f 30ff 	mov.w	r0, #4294967295
 8000f04:	f000 fa32 	bl	800136c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f08:	4b04      	ldr	r3, [pc, #16]	; (8000f1c <HAL_InitTick+0x44>)
 8000f0a:	4620      	mov	r0, r4
 8000f0c:	601d      	str	r5, [r3, #0]
 8000f0e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000f10:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000f12:	bd38      	pop	{r3, r4, r5, pc}
 8000f14:	20000018 	.word	0x20000018
 8000f18:	20000000 	.word	0x20000000
 8000f1c:	20000004 	.word	0x20000004

08000f20 <HAL_Init>:
{
 8000f20:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f22:	4b0b      	ldr	r3, [pc, #44]	; (8000f50 <HAL_Init+0x30>)
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f2a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f32:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f3a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f3c:	2003      	movs	r0, #3
 8000f3e:	f000 fa03 	bl	8001348 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f42:	2000      	movs	r0, #0
 8000f44:	f7ff ffc8 	bl	8000ed8 <HAL_InitTick>
  HAL_MspInit();
 8000f48:	f004 fd30 	bl	80059ac <HAL_MspInit>
}
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	bd08      	pop	{r3, pc}
 8000f50:	40023c00 	.word	0x40023c00

08000f54 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000f54:	4a03      	ldr	r2, [pc, #12]	; (8000f64 <HAL_IncTick+0x10>)
 8000f56:	4b04      	ldr	r3, [pc, #16]	; (8000f68 <HAL_IncTick+0x14>)
 8000f58:	6811      	ldr	r1, [r2, #0]
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	440b      	add	r3, r1
 8000f5e:	6013      	str	r3, [r2, #0]
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	200000d0 	.word	0x200000d0
 8000f68:	20000000 	.word	0x20000000

08000f6c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000f6c:	4b01      	ldr	r3, [pc, #4]	; (8000f74 <HAL_GetTick+0x8>)
 8000f6e:	6818      	ldr	r0, [r3, #0]
}
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	200000d0 	.word	0x200000d0

08000f78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f78:	b538      	push	{r3, r4, r5, lr}
 8000f7a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000f7c:	f7ff fff6 	bl	8000f6c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f80:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000f82:	bf1c      	itt	ne
 8000f84:	4b05      	ldrne	r3, [pc, #20]	; (8000f9c <HAL_Delay+0x24>)
 8000f86:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000f88:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000f8a:	bf18      	it	ne
 8000f8c:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f8e:	f7ff ffed 	bl	8000f6c <HAL_GetTick>
 8000f92:	1b40      	subs	r0, r0, r5
 8000f94:	4284      	cmp	r4, r0
 8000f96:	d8fa      	bhi.n	8000f8e <HAL_Delay+0x16>
  {
  }
}
 8000f98:	bd38      	pop	{r3, r4, r5, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20000000 	.word	0x20000000

08000fa0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000fa0:	b510      	push	{r4, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	2800      	cmp	r0, #0
 8000fa6:	f000 8099 	beq.w	80010dc <HAL_ADC_Init+0x13c>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000faa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000fac:	b923      	cbnz	r3, 8000fb8 <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fae:	6443      	str	r3, [r0, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000fb0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fb4:	f004 f95e 	bl	8005274 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fb8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000fba:	06db      	lsls	r3, r3, #27
 8000fbc:	f100 808c 	bmi.w	80010d8 <HAL_ADC_Init+0x138>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fc0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000fc2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000fc6:	f023 0302 	bic.w	r3, r3, #2
 8000fca:	f043 0302 	orr.w	r3, r3, #2
 8000fce:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000fd0:	4b43      	ldr	r3, [pc, #268]	; (80010e0 <HAL_ADC_Init+0x140>)
 8000fd2:	685a      	ldr	r2, [r3, #4]
 8000fd4:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000fd8:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000fda:	685a      	ldr	r2, [r3, #4]
 8000fdc:	6861      	ldr	r1, [r4, #4]
 8000fde:	430a      	orrs	r2, r1
 8000fe0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000fe2:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000fe4:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000fe6:	685a      	ldr	r2, [r3, #4]
 8000fe8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000fec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000fee:	685a      	ldr	r2, [r3, #4]
 8000ff0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000ff4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000ff6:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000ff8:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000ffa:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000ffe:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001000:	685a      	ldr	r2, [r3, #4]
 8001002:	430a      	orrs	r2, r1
 8001004:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001006:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001008:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800100a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800100e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001010:	689a      	ldr	r2, [r3, #8]
 8001012:	430a      	orrs	r2, r1
 8001014:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001016:	4933      	ldr	r1, [pc, #204]	; (80010e4 <HAL_ADC_Init+0x144>)
 8001018:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800101a:	428a      	cmp	r2, r1
 800101c:	d050      	beq.n	80010c0 <HAL_ADC_Init+0x120>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800101e:	6899      	ldr	r1, [r3, #8]
 8001020:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8001024:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001026:	6899      	ldr	r1, [r3, #8]
 8001028:	430a      	orrs	r2, r1
 800102a:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800102c:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800102e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001030:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001034:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001036:	689a      	ldr	r2, [r3, #8]
 8001038:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800103a:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800103c:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 800103e:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001040:	f022 0202 	bic.w	r2, r2, #2
 8001044:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8001046:	689a      	ldr	r2, [r3, #8]
 8001048:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800104c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800104e:	6a22      	ldr	r2, [r4, #32]
 8001050:	2a00      	cmp	r2, #0
 8001052:	d03d      	beq.n	80010d0 <HAL_ADC_Init+0x130>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001054:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001056:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001058:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800105c:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800105e:	685a      	ldr	r2, [r3, #4]
 8001060:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001064:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001066:	685a      	ldr	r2, [r3, #4]
 8001068:	3901      	subs	r1, #1
 800106a:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800106e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001072:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001074:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001078:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800107a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800107c:	3901      	subs	r1, #1
 800107e:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8001082:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001084:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8001086:	6b21      	ldr	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001088:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800108c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 800108e:	689a      	ldr	r2, [r3, #8]
 8001090:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8001094:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001096:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001098:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800109a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800109e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80010a0:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80010a2:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80010a4:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 80010a8:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80010aa:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80010ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80010ae:	f023 0303 	bic.w	r3, r3, #3
 80010b2:	f043 0301 	orr.w	r3, r3, #1
 80010b6:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 80010b8:	2300      	movs	r3, #0
 80010ba:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 80010be:	bd10      	pop	{r4, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80010c0:	689a      	ldr	r2, [r3, #8]
 80010c2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80010c6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80010c8:	689a      	ldr	r2, [r3, #8]
 80010ca:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80010ce:	e7b4      	b.n	800103a <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80010d0:	685a      	ldr	r2, [r3, #4]
 80010d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80010d6:	e7ca      	b.n	800106e <HAL_ADC_Init+0xce>
    tmp_hal_status = HAL_ERROR;
 80010d8:	2001      	movs	r0, #1
 80010da:	e7ed      	b.n	80010b8 <HAL_ADC_Init+0x118>
    return HAL_ERROR;
 80010dc:	2001      	movs	r0, #1
}
 80010de:	bd10      	pop	{r4, pc}
 80010e0:	40012300 	.word	0x40012300
 80010e4:	0f000001 	.word	0x0f000001

080010e8 <HAL_ADC_ConvCpltCallback>:
 80010e8:	4770      	bx	lr

080010ea <HAL_ADC_LevelOutOfWindowCallback>:
 80010ea:	4770      	bx	lr

080010ec <HAL_ADC_ErrorCallback>:
{
 80010ec:	4770      	bx	lr

080010ee <HAL_ADC_IRQHandler>:
{
 80010ee:	b538      	push	{r3, r4, r5, lr}
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80010f0:	6803      	ldr	r3, [r0, #0]
 80010f2:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80010f4:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 80010f6:	078d      	lsls	r5, r1, #30
{
 80010f8:	4604      	mov	r4, r0
  if(tmp1 && tmp2)
 80010fa:	d52b      	bpl.n	8001154 <HAL_ADC_IRQHandler+0x66>
 80010fc:	0690      	lsls	r0, r2, #26
 80010fe:	d529      	bpl.n	8001154 <HAL_ADC_IRQHandler+0x66>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001100:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001102:	06d1      	lsls	r1, r2, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001104:	bf5e      	ittt	pl
 8001106:	6c22      	ldrpl	r2, [r4, #64]	; 0x40
 8001108:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 800110c:	6422      	strpl	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800110e:	689a      	ldr	r2, [r3, #8]
 8001110:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8001114:	d117      	bne.n	8001146 <HAL_ADC_IRQHandler+0x58>
 8001116:	69a2      	ldr	r2, [r4, #24]
 8001118:	b9aa      	cbnz	r2, 8001146 <HAL_ADC_IRQHandler+0x58>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800111a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800111c:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8001120:	d002      	beq.n	8001128 <HAL_ADC_IRQHandler+0x3a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001122:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001124:	0552      	lsls	r2, r2, #21
 8001126:	d40e      	bmi.n	8001146 <HAL_ADC_IRQHandler+0x58>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001128:	685a      	ldr	r2, [r3, #4]
 800112a:	f022 0220 	bic.w	r2, r2, #32
 800112e:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001130:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001132:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001136:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001138:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800113a:	04db      	lsls	r3, r3, #19
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800113c:	bf5e      	ittt	pl
 800113e:	6c23      	ldrpl	r3, [r4, #64]	; 0x40
 8001140:	f043 0301 	orrpl.w	r3, r3, #1
 8001144:	6423      	strpl	r3, [r4, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8001146:	4620      	mov	r0, r4
 8001148:	f7ff ffce 	bl	80010e8 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800114c:	6823      	ldr	r3, [r4, #0]
 800114e:	f06f 0212 	mvn.w	r2, #18
 8001152:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8001154:	6823      	ldr	r3, [r4, #0]
 8001156:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8001158:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 800115a:	074d      	lsls	r5, r1, #29
 800115c:	d532      	bpl.n	80011c4 <HAL_ADC_IRQHandler+0xd6>
 800115e:	0610      	lsls	r0, r2, #24
 8001160:	d530      	bpl.n	80011c4 <HAL_ADC_IRQHandler+0xd6>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001162:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001164:	06d1      	lsls	r1, r2, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001166:	bf5e      	ittt	pl
 8001168:	6c22      	ldrpl	r2, [r4, #64]	; 0x40
 800116a:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 800116e:	6422      	strpl	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001170:	689a      	ldr	r2, [r3, #8]
 8001172:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8001176:	d11e      	bne.n	80011b6 <HAL_ADC_IRQHandler+0xc8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001178:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800117a:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 800117e:	d002      	beq.n	8001186 <HAL_ADC_IRQHandler+0x98>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001180:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001182:	0552      	lsls	r2, r2, #21
 8001184:	d417      	bmi.n	80011b6 <HAL_ADC_IRQHandler+0xc8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001186:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001188:	0555      	lsls	r5, r2, #21
 800118a:	d414      	bmi.n	80011b6 <HAL_ADC_IRQHandler+0xc8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800118c:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800118e:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8001192:	d110      	bne.n	80011b6 <HAL_ADC_IRQHandler+0xc8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001194:	69a2      	ldr	r2, [r4, #24]
 8001196:	b972      	cbnz	r2, 80011b6 <HAL_ADC_IRQHandler+0xc8>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001198:	685a      	ldr	r2, [r3, #4]
 800119a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800119e:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80011a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80011a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80011a6:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80011a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80011aa:	05d8      	lsls	r0, r3, #23
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011ac:	bf5e      	ittt	pl
 80011ae:	6c23      	ldrpl	r3, [r4, #64]	; 0x40
 80011b0:	f043 0301 	orrpl.w	r3, r3, #1
 80011b4:	6423      	strpl	r3, [r4, #64]	; 0x40
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80011b6:	4620      	mov	r0, r4
 80011b8:	f000 f8c4 	bl	8001344 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80011bc:	6823      	ldr	r3, [r4, #0]
 80011be:	f06f 020c 	mvn.w	r2, #12
 80011c2:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80011c4:	6823      	ldr	r3, [r4, #0]
 80011c6:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80011c8:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 80011ca:	07c9      	lsls	r1, r1, #31
 80011cc:	d50f      	bpl.n	80011ee <HAL_ADC_IRQHandler+0x100>
 80011ce:	0655      	lsls	r5, r2, #25
 80011d0:	d50d      	bpl.n	80011ee <HAL_ADC_IRQHandler+0x100>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	07d8      	lsls	r0, r3, #31
 80011d6:	d50a      	bpl.n	80011ee <HAL_ADC_IRQHandler+0x100>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80011d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80011da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011de:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80011e0:	4620      	mov	r0, r4
 80011e2:	f7ff ff82 	bl	80010ea <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80011e6:	6823      	ldr	r3, [r4, #0]
 80011e8:	f06f 0201 	mvn.w	r2, #1
 80011ec:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80011ee:	6823      	ldr	r3, [r4, #0]
 80011f0:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80011f2:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 80011f4:	0689      	lsls	r1, r1, #26
 80011f6:	d50d      	bpl.n	8001214 <HAL_ADC_IRQHandler+0x126>
 80011f8:	0152      	lsls	r2, r2, #5
 80011fa:	d50b      	bpl.n	8001214 <HAL_ADC_IRQHandler+0x126>
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80011fc:	6c62      	ldr	r2, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80011fe:	f06f 0520 	mvn.w	r5, #32
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001202:	f042 0202 	orr.w	r2, r2, #2
 8001206:	6462      	str	r2, [r4, #68]	; 0x44
    HAL_ADC_ErrorCallback(hadc);
 8001208:	4620      	mov	r0, r4
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800120a:	601d      	str	r5, [r3, #0]
    HAL_ADC_ErrorCallback(hadc);
 800120c:	f7ff ff6e 	bl	80010ec <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001210:	6823      	ldr	r3, [r4, #0]
 8001212:	601d      	str	r5, [r3, #0]
 8001214:	bd38      	pop	{r3, r4, r5, pc}
	...

08001218 <HAL_ADC_ConfigChannel>:
{
 8001218:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 800121a:	2300      	movs	r3, #0
 800121c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800121e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001222:	2b01      	cmp	r3, #1
 8001224:	f000 8083 	beq.w	800132e <HAL_ADC_ConfigChannel+0x116>
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001228:	680d      	ldr	r5, [r1, #0]
 800122a:	6804      	ldr	r4, [r0, #0]
 800122c:	688a      	ldr	r2, [r1, #8]
  __HAL_LOCK(hadc);
 800122e:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001230:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 8001232:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8001236:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001238:	d92a      	bls.n	8001290 <HAL_ADC_ConfigChannel+0x78>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800123a:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 800123e:	68e7      	ldr	r7, [r4, #12]
 8001240:	3b1e      	subs	r3, #30
 8001242:	f04f 0e07 	mov.w	lr, #7
 8001246:	fa0e fe03 	lsl.w	lr, lr, r3
 800124a:	ea27 070e 	bic.w	r7, r7, lr
 800124e:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001250:	68e7      	ldr	r7, [r4, #12]
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	433b      	orrs	r3, r7
 8001258:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 800125a:	684a      	ldr	r2, [r1, #4]
 800125c:	2a06      	cmp	r2, #6
 800125e:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8001262:	d825      	bhi.n	80012b0 <HAL_ADC_ConfigChannel+0x98>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001264:	4413      	add	r3, r2
 8001266:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8001268:	1f59      	subs	r1, r3, #5
 800126a:	231f      	movs	r3, #31
 800126c:	408b      	lsls	r3, r1
 800126e:	ea27 0303 	bic.w	r3, r7, r3
 8001272:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001274:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001276:	fa06 f101 	lsl.w	r1, r6, r1
 800127a:	4311      	orrs	r1, r2
 800127c:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800127e:	4b2d      	ldr	r3, [pc, #180]	; (8001334 <HAL_ADC_ConfigChannel+0x11c>)
 8001280:	429c      	cmp	r4, r3
 8001282:	d034      	beq.n	80012ee <HAL_ADC_ConfigChannel+0xd6>
  __HAL_UNLOCK(hadc);
 8001284:	2300      	movs	r3, #0
 8001286:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800128a:	4618      	mov	r0, r3
}
 800128c:	b003      	add	sp, #12
 800128e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001290:	6927      	ldr	r7, [r4, #16]
 8001292:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8001296:	f04f 0e07 	mov.w	lr, #7
 800129a:	fa0e fe03 	lsl.w	lr, lr, r3
 800129e:	ea27 070e 	bic.w	r7, r7, lr
 80012a2:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80012a4:	6927      	ldr	r7, [r4, #16]
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	433b      	orrs	r3, r7
 80012ac:	6123      	str	r3, [r4, #16]
 80012ae:	e7d4      	b.n	800125a <HAL_ADC_ConfigChannel+0x42>
  else if (sConfig->Rank < 13U)
 80012b0:	2a0c      	cmp	r2, #12
 80012b2:	d80e      	bhi.n	80012d2 <HAL_ADC_ConfigChannel+0xba>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80012b4:	4413      	add	r3, r2
 80012b6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80012b8:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 80012bc:	231f      	movs	r3, #31
 80012be:	4093      	lsls	r3, r2
 80012c0:	ea21 0303 	bic.w	r3, r1, r3
 80012c4:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80012c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80012c8:	fa06 f202 	lsl.w	r2, r6, r2
 80012cc:	431a      	orrs	r2, r3
 80012ce:	6322      	str	r2, [r4, #48]	; 0x30
 80012d0:	e7d5      	b.n	800127e <HAL_ADC_ConfigChannel+0x66>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80012d2:	4413      	add	r3, r2
 80012d4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80012d6:	3b41      	subs	r3, #65	; 0x41
 80012d8:	221f      	movs	r2, #31
 80012da:	409a      	lsls	r2, r3
 80012dc:	ea21 0202 	bic.w	r2, r1, r2
 80012e0:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80012e2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80012e4:	fa06 f103 	lsl.w	r1, r6, r3
 80012e8:	4311      	orrs	r1, r2
 80012ea:	62e1      	str	r1, [r4, #44]	; 0x2c
 80012ec:	e7c7      	b.n	800127e <HAL_ADC_ConfigChannel+0x66>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80012ee:	2d12      	cmp	r5, #18
 80012f0:	d104      	bne.n	80012fc <HAL_ADC_ConfigChannel+0xe4>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80012f2:	4a11      	ldr	r2, [pc, #68]	; (8001338 <HAL_ADC_ConfigChannel+0x120>)
 80012f4:	6853      	ldr	r3, [r2, #4]
 80012f6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012fa:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80012fc:	f1a5 0310 	sub.w	r3, r5, #16
 8001300:	2b01      	cmp	r3, #1
 8001302:	d8bf      	bhi.n	8001284 <HAL_ADC_ConfigChannel+0x6c>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001304:	4a0c      	ldr	r2, [pc, #48]	; (8001338 <HAL_ADC_ConfigChannel+0x120>)
 8001306:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001308:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800130a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800130e:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001310:	d1b8      	bne.n	8001284 <HAL_ADC_ConfigChannel+0x6c>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001312:	4b0a      	ldr	r3, [pc, #40]	; (800133c <HAL_ADC_ConfigChannel+0x124>)
 8001314:	4a0a      	ldr	r2, [pc, #40]	; (8001340 <HAL_ADC_ConfigChannel+0x128>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	fbb3 f2f2 	udiv	r2, r3, r2
 800131c:	230a      	movs	r3, #10
 800131e:	4353      	muls	r3, r2
        counter--;
 8001320:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8001322:	9b01      	ldr	r3, [sp, #4]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d0ad      	beq.n	8001284 <HAL_ADC_ConfigChannel+0x6c>
        counter--;
 8001328:	9b01      	ldr	r3, [sp, #4]
 800132a:	3b01      	subs	r3, #1
 800132c:	e7f8      	b.n	8001320 <HAL_ADC_ConfigChannel+0x108>
  __HAL_LOCK(hadc);
 800132e:	2002      	movs	r0, #2
 8001330:	e7ac      	b.n	800128c <HAL_ADC_ConfigChannel+0x74>
 8001332:	bf00      	nop
 8001334:	40012000 	.word	0x40012000
 8001338:	40012300 	.word	0x40012300
 800133c:	20000018 	.word	0x20000018
 8001340:	000f4240 	.word	0x000f4240

08001344 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001344:	4770      	bx	lr
	...

08001348 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001348:	4a07      	ldr	r2, [pc, #28]	; (8001368 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800134a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800134c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001350:	041b      	lsls	r3, r3, #16
 8001352:	0c1b      	lsrs	r3, r3, #16
 8001354:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001358:	0200      	lsls	r0, r0, #8
 800135a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800135e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8001362:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001364:	60d3      	str	r3, [r2, #12]
 8001366:	4770      	bx	lr
 8001368:	e000ed00 	.word	0xe000ed00

0800136c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800136c:	4b17      	ldr	r3, [pc, #92]	; (80013cc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800136e:	b530      	push	{r4, r5, lr}
 8001370:	68dc      	ldr	r4, [r3, #12]
 8001372:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001376:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800137a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800137c:	2b04      	cmp	r3, #4
 800137e:	bf28      	it	cs
 8001380:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001382:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001384:	f04f 0501 	mov.w	r5, #1
 8001388:	fa05 f303 	lsl.w	r3, r5, r3
 800138c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001390:	bf8c      	ite	hi
 8001392:	3c03      	subhi	r4, #3
 8001394:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001396:	4019      	ands	r1, r3
 8001398:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800139a:	fa05 f404 	lsl.w	r4, r5, r4
 800139e:	3c01      	subs	r4, #1
 80013a0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80013a2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a4:	ea42 0201 	orr.w	r2, r2, r1
 80013a8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ac:	bfaf      	iteee	ge
 80013ae:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b2:	f000 000f 	andlt.w	r0, r0, #15
 80013b6:	4b06      	ldrlt	r3, [pc, #24]	; (80013d0 <HAL_NVIC_SetPriority+0x64>)
 80013b8:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ba:	bfa5      	ittet	ge
 80013bc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80013c0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80013c8:	bd30      	pop	{r4, r5, pc}
 80013ca:	bf00      	nop
 80013cc:	e000ed00 	.word	0xe000ed00
 80013d0:	e000ed14 	.word	0xe000ed14

080013d4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80013d4:	0942      	lsrs	r2, r0, #5
 80013d6:	2301      	movs	r3, #1
 80013d8:	f000 001f 	and.w	r0, r0, #31
 80013dc:	fa03 f000 	lsl.w	r0, r3, r0
 80013e0:	4b01      	ldr	r3, [pc, #4]	; (80013e8 <HAL_NVIC_EnableIRQ+0x14>)
 80013e2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80013e6:	4770      	bx	lr
 80013e8:	e000e100 	.word	0xe000e100

080013ec <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013ec:	3801      	subs	r0, #1
 80013ee:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80013f2:	d20a      	bcs.n	800140a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013f4:	4b06      	ldr	r3, [pc, #24]	; (8001410 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f6:	4a07      	ldr	r2, [pc, #28]	; (8001414 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013f8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013fa:	21f0      	movs	r1, #240	; 0xf0
 80013fc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001400:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001402:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001404:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800140a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	e000e010 	.word	0xe000e010
 8001414:	e000ed00 	.word	0xe000ed00

08001418 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001418:	4b04      	ldr	r3, [pc, #16]	; (800142c <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800141a:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800141c:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800141e:	bf0c      	ite	eq
 8001420:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001424:	f022 0204 	bicne.w	r2, r2, #4
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	4770      	bx	lr
 800142c:	e000e010 	.word	0xe000e010

08001430 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001430:	4770      	bx	lr

08001432 <HAL_SYSTICK_IRQHandler>:
{
 8001432:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8001434:	f7ff fffc 	bl	8001430 <HAL_SYSTICK_Callback>
 8001438:	bd08      	pop	{r3, pc}
	...

0800143c <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800143c:	6803      	ldr	r3, [r0, #0]
 800143e:	b2da      	uxtb	r2, r3
 8001440:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001444:	f023 0303 	bic.w	r3, r3, #3
 8001448:	2118      	movs	r1, #24
 800144a:	3a10      	subs	r2, #16
 800144c:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001450:	4904      	ldr	r1, [pc, #16]	; (8001464 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8001452:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001454:	bf88      	it	hi
 8001456:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001458:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800145a:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800145c:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 800145e:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	08006d98 	.word	0x08006d98

08001468 <HAL_DMA_Init>:
{
 8001468:	b570      	push	{r4, r5, r6, lr}
 800146a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800146c:	f7ff fd7e 	bl	8000f6c <HAL_GetTick>
 8001470:	4605      	mov	r5, r0
  if(hdma == NULL)
 8001472:	2c00      	cmp	r4, #0
 8001474:	d071      	beq.n	800155a <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 8001476:	2300      	movs	r3, #0
 8001478:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 800147c:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 800147e:	2302      	movs	r3, #2
 8001480:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8001484:	6813      	ldr	r3, [r2, #0]
 8001486:	f023 0301 	bic.w	r3, r3, #1
 800148a:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800148c:	6821      	ldr	r1, [r4, #0]
 800148e:	680b      	ldr	r3, [r1, #0]
 8001490:	07d8      	lsls	r0, r3, #31
 8001492:	d43c      	bmi.n	800150e <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 8001494:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001496:	4d32      	ldr	r5, [pc, #200]	; (8001560 <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001498:	6862      	ldr	r2, [r4, #4]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800149a:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800149c:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800149e:	68a3      	ldr	r3, [r4, #8]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	68e2      	ldr	r2, [r4, #12]
 80014a4:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014a6:	6922      	ldr	r2, [r4, #16]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	6962      	ldr	r2, [r4, #20]
 80014ac:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014ae:	69e2      	ldr	r2, [r4, #28]
 80014b0:	4303      	orrs	r3, r0
 80014b2:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 80014b4:	6a22      	ldr	r2, [r4, #32]
 80014b6:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014b8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80014ba:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014bc:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80014c0:	bf01      	itttt	eq
 80014c2:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 80014c4:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 80014c6:	4335      	orreq	r5, r6
 80014c8:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 80014ca:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 80014cc:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014ce:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80014d0:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 80014d4:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014d8:	d10b      	bne.n	80014f2 <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 80014da:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80014dc:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 80014de:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80014e0:	b13d      	cbz	r5, 80014f2 <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80014e2:	b9f8      	cbnz	r0, 8001524 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 80014e4:	2a01      	cmp	r2, #1
 80014e6:	d02d      	beq.n	8001544 <HAL_DMA_Init+0xdc>
 80014e8:	d301      	bcc.n	80014ee <HAL_DMA_Init+0x86>
 80014ea:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80014ec:	d101      	bne.n	80014f2 <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80014ee:	01ea      	lsls	r2, r5, #7
 80014f0:	d42b      	bmi.n	800154a <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 80014f2:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80014f4:	4620      	mov	r0, r4
 80014f6:	f7ff ffa1 	bl	800143c <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014fa:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80014fc:	233f      	movs	r3, #63	; 0x3f
 80014fe:	4093      	lsls	r3, r2
 8001500:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001502:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001504:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001506:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001508:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 800150c:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800150e:	f7ff fd2d 	bl	8000f6c <HAL_GetTick>
 8001512:	1b40      	subs	r0, r0, r5
 8001514:	2805      	cmp	r0, #5
 8001516:	d9b9      	bls.n	800148c <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001518:	2320      	movs	r3, #32
 800151a:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800151c:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 800151e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8001522:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001524:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8001528:	d113      	bne.n	8001552 <HAL_DMA_Init+0xea>
    switch (tmp)
 800152a:	2a03      	cmp	r2, #3
 800152c:	d8e1      	bhi.n	80014f2 <HAL_DMA_Init+0x8a>
 800152e:	a001      	add	r0, pc, #4	; (adr r0, 8001534 <HAL_DMA_Init+0xcc>)
 8001530:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8001534:	0800154b 	.word	0x0800154b
 8001538:	080014ef 	.word	0x080014ef
 800153c:	0800154b 	.word	0x0800154b
 8001540:	08001545 	.word	0x08001545
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001544:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8001548:	d1d3      	bne.n	80014f2 <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800154a:	2340      	movs	r3, #64	; 0x40
 800154c:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800154e:	2001      	movs	r0, #1
 8001550:	e7e5      	b.n	800151e <HAL_DMA_Init+0xb6>
    switch (tmp)
 8001552:	2a02      	cmp	r2, #2
 8001554:	d9f9      	bls.n	800154a <HAL_DMA_Init+0xe2>
 8001556:	2a03      	cmp	r2, #3
 8001558:	e7c8      	b.n	80014ec <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 800155a:	2001      	movs	r0, #1
 800155c:	bd70      	pop	{r4, r5, r6, pc}
 800155e:	bf00      	nop
 8001560:	f010803f 	.word	0xf010803f

08001564 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001564:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001568:	2b02      	cmp	r3, #2
 800156a:	d003      	beq.n	8001574 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800156c:	2380      	movs	r3, #128	; 0x80
 800156e:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8001570:	2001      	movs	r0, #1
 8001572:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8001574:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8001576:	2305      	movs	r3, #5
 8001578:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 800157c:	6813      	ldr	r3, [r2, #0]
 800157e:	f023 0301 	bic.w	r3, r3, #1
 8001582:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8001584:	2000      	movs	r0, #0
}
 8001586:	4770      	bx	lr

08001588 <HAL_DMA_IRQHandler>:
{
 8001588:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 800158a:	2300      	movs	r3, #0
 800158c:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 800158e:	4b5a      	ldr	r3, [pc, #360]	; (80016f8 <HAL_DMA_IRQHandler+0x170>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001590:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8001592:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001594:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8001596:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001598:	2208      	movs	r2, #8
 800159a:	409a      	lsls	r2, r3
 800159c:	4216      	tst	r6, r2
{
 800159e:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80015a0:	d00c      	beq.n	80015bc <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80015a2:	6801      	ldr	r1, [r0, #0]
 80015a4:	6808      	ldr	r0, [r1, #0]
 80015a6:	0740      	lsls	r0, r0, #29
 80015a8:	d508      	bpl.n	80015bc <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80015aa:	6808      	ldr	r0, [r1, #0]
 80015ac:	f020 0004 	bic.w	r0, r0, #4
 80015b0:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80015b2:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80015b4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80015b6:	f042 0201 	orr.w	r2, r2, #1
 80015ba:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80015bc:	2201      	movs	r2, #1
 80015be:	409a      	lsls	r2, r3
 80015c0:	4216      	tst	r6, r2
 80015c2:	d008      	beq.n	80015d6 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80015c4:	6821      	ldr	r1, [r4, #0]
 80015c6:	6949      	ldr	r1, [r1, #20]
 80015c8:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80015ca:	bf41      	itttt	mi
 80015cc:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80015ce:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80015d0:	f042 0202 	orrmi.w	r2, r2, #2
 80015d4:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80015d6:	2204      	movs	r2, #4
 80015d8:	409a      	lsls	r2, r3
 80015da:	4216      	tst	r6, r2
 80015dc:	d008      	beq.n	80015f0 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80015de:	6821      	ldr	r1, [r4, #0]
 80015e0:	6809      	ldr	r1, [r1, #0]
 80015e2:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80015e4:	bf41      	itttt	mi
 80015e6:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80015e8:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80015ea:	f042 0204 	orrmi.w	r2, r2, #4
 80015ee:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80015f0:	2210      	movs	r2, #16
 80015f2:	409a      	lsls	r2, r3
 80015f4:	4216      	tst	r6, r2
 80015f6:	d010      	beq.n	800161a <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80015f8:	6823      	ldr	r3, [r4, #0]
 80015fa:	6819      	ldr	r1, [r3, #0]
 80015fc:	0709      	lsls	r1, r1, #28
 80015fe:	d50c      	bpl.n	800161a <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001600:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	0350      	lsls	r0, r2, #13
 8001606:	d535      	bpl.n	8001674 <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	0319      	lsls	r1, r3, #12
 800160c:	d401      	bmi.n	8001612 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 800160e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001610:	e000      	b.n	8001614 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001612:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8001614:	b10b      	cbz	r3, 800161a <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8001616:	4620      	mov	r0, r4
 8001618:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800161a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800161c:	2220      	movs	r2, #32
 800161e:	408a      	lsls	r2, r1
 8001620:	4216      	tst	r6, r2
 8001622:	d038      	beq.n	8001696 <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001624:	6823      	ldr	r3, [r4, #0]
 8001626:	6818      	ldr	r0, [r3, #0]
 8001628:	06c6      	lsls	r6, r0, #27
 800162a:	d534      	bpl.n	8001696 <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800162c:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800162e:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8001632:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001634:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001636:	d125      	bne.n	8001684 <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001638:	f022 0216 	bic.w	r2, r2, #22
 800163c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800163e:	695a      	ldr	r2, [r3, #20]
 8001640:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001644:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001646:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001648:	b90a      	cbnz	r2, 800164e <HAL_DMA_IRQHandler+0xc6>
 800164a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800164c:	b11a      	cbz	r2, 8001656 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	f022 0208 	bic.w	r2, r2, #8
 8001654:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001656:	233f      	movs	r3, #63	; 0x3f
 8001658:	408b      	lsls	r3, r1
 800165a:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 800165c:	2300      	movs	r3, #0
 800165e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8001662:	2301      	movs	r3, #1
 8001664:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8001668:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 800166a:	b10b      	cbz	r3, 8001670 <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 800166c:	4620      	mov	r0, r4
 800166e:	4798      	blx	r3
}
 8001670:	b003      	add	sp, #12
 8001672:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001678:	bf5e      	ittt	pl
 800167a:	681a      	ldrpl	r2, [r3, #0]
 800167c:	f022 0208 	bicpl.w	r2, r2, #8
 8001680:	601a      	strpl	r2, [r3, #0]
 8001682:	e7c4      	b.n	800160e <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001684:	0350      	lsls	r0, r2, #13
 8001686:	d528      	bpl.n	80016da <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	0319      	lsls	r1, r3, #12
 800168c:	d432      	bmi.n	80016f4 <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 800168e:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8001690:	b10b      	cbz	r3, 8001696 <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 8001692:	4620      	mov	r0, r4
 8001694:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001696:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001698:	2b00      	cmp	r3, #0
 800169a:	d0e9      	beq.n	8001670 <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800169c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800169e:	07da      	lsls	r2, r3, #31
 80016a0:	d519      	bpl.n	80016d6 <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 80016a2:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 80016a4:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 80016a6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80016aa:	6813      	ldr	r3, [r2, #0]
 80016ac:	f023 0301 	bic.w	r3, r3, #1
 80016b0:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80016b2:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80016b6:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 80016ba:	9b01      	ldr	r3, [sp, #4]
 80016bc:	3301      	adds	r3, #1
 80016be:	429f      	cmp	r7, r3
 80016c0:	9301      	str	r3, [sp, #4]
 80016c2:	d302      	bcc.n	80016ca <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80016c4:	6813      	ldr	r3, [r2, #0]
 80016c6:	07db      	lsls	r3, r3, #31
 80016c8:	d4f7      	bmi.n	80016ba <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 80016ca:	2300      	movs	r3, #0
 80016cc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80016d0:	2301      	movs	r3, #1
 80016d2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 80016d6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80016d8:	e7c7      	b.n	800166a <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 80016e0:	d108      	bne.n	80016f4 <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80016e2:	6819      	ldr	r1, [r3, #0]
 80016e4:	f021 0110 	bic.w	r1, r1, #16
 80016e8:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80016ea:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 80016ec:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80016f0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 80016f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80016f6:	e7cb      	b.n	8001690 <HAL_DMA_IRQHandler+0x108>
 80016f8:	20000018 	.word	0x20000018

080016fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001700:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001702:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001704:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80018b4 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001708:	4a68      	ldr	r2, [pc, #416]	; (80018ac <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800170a:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 80018b8 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800170e:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001710:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8001712:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001716:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8001718:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800171c:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8001720:	45b6      	cmp	lr, r6
 8001722:	f040 80ae 	bne.w	8001882 <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001726:	684c      	ldr	r4, [r1, #4]
 8001728:	f024 0710 	bic.w	r7, r4, #16
 800172c:	2f02      	cmp	r7, #2
 800172e:	d116      	bne.n	800175e <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8001730:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001734:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001738:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800173c:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001740:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001744:	f04f 0c0f 	mov.w	ip, #15
 8001748:	fa0c fc0b 	lsl.w	ip, ip, fp
 800174c:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001750:	690d      	ldr	r5, [r1, #16]
 8001752:	fa05 f50b 	lsl.w	r5, r5, fp
 8001756:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 800175a:	f8ca 5020 	str.w	r5, [sl, #32]
 800175e:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001762:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8001764:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001768:	fa05 f50a 	lsl.w	r5, r5, sl
 800176c:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800176e:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001772:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001776:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800177a:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800177c:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001780:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8001782:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001786:	d811      	bhi.n	80017ac <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8001788:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800178a:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 800178e:	68cf      	ldr	r7, [r1, #12]
 8001790:	fa07 fc0a 	lsl.w	ip, r7, sl
 8001794:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8001798:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800179a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800179c:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80017a0:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80017a4:	409f      	lsls	r7, r3
 80017a6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80017aa:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80017ac:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017ae:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017b0:	688f      	ldr	r7, [r1, #8]
 80017b2:	fa07 f70a 	lsl.w	r7, r7, sl
 80017b6:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80017b8:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017ba:	00e5      	lsls	r5, r4, #3
 80017bc:	d561      	bpl.n	8001882 <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017be:	f04f 0b00 	mov.w	fp, #0
 80017c2:	f8cd b00c 	str.w	fp, [sp, #12]
 80017c6:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017ca:	4d39      	ldr	r5, [pc, #228]	; (80018b0 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017cc:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80017d0:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80017d4:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80017d8:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80017dc:	9703      	str	r7, [sp, #12]
 80017de:	9f03      	ldr	r7, [sp, #12]
 80017e0:	f023 0703 	bic.w	r7, r3, #3
 80017e4:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80017e8:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017ec:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80017f0:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017f4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80017f8:	f04f 0e0f 	mov.w	lr, #15
 80017fc:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001800:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001802:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001806:	d043      	beq.n	8001890 <HAL_GPIO_Init+0x194>
 8001808:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800180c:	42a8      	cmp	r0, r5
 800180e:	d041      	beq.n	8001894 <HAL_GPIO_Init+0x198>
 8001810:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001814:	42a8      	cmp	r0, r5
 8001816:	d03f      	beq.n	8001898 <HAL_GPIO_Init+0x19c>
 8001818:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800181c:	42a8      	cmp	r0, r5
 800181e:	d03d      	beq.n	800189c <HAL_GPIO_Init+0x1a0>
 8001820:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001824:	42a8      	cmp	r0, r5
 8001826:	d03b      	beq.n	80018a0 <HAL_GPIO_Init+0x1a4>
 8001828:	4548      	cmp	r0, r9
 800182a:	d03b      	beq.n	80018a4 <HAL_GPIO_Init+0x1a8>
 800182c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001830:	42a8      	cmp	r0, r5
 8001832:	d039      	beq.n	80018a8 <HAL_GPIO_Init+0x1ac>
 8001834:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001838:	42a8      	cmp	r0, r5
 800183a:	bf14      	ite	ne
 800183c:	2508      	movne	r5, #8
 800183e:	2507      	moveq	r5, #7
 8001840:	fa05 f50c 	lsl.w	r5, r5, ip
 8001844:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001848:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 800184a:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800184c:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800184e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001852:	bf0c      	ite	eq
 8001854:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001856:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8001858:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 800185a:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800185c:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001860:	bf0c      	ite	eq
 8001862:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001864:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8001866:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001868:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800186a:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800186e:	bf0c      	ite	eq
 8001870:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001872:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8001874:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8001876:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001878:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800187a:	bf54      	ite	pl
 800187c:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 800187e:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8001880:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001882:	3301      	adds	r3, #1
 8001884:	2b10      	cmp	r3, #16
 8001886:	f47f af44 	bne.w	8001712 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 800188a:	b005      	add	sp, #20
 800188c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001890:	465d      	mov	r5, fp
 8001892:	e7d5      	b.n	8001840 <HAL_GPIO_Init+0x144>
 8001894:	2501      	movs	r5, #1
 8001896:	e7d3      	b.n	8001840 <HAL_GPIO_Init+0x144>
 8001898:	2502      	movs	r5, #2
 800189a:	e7d1      	b.n	8001840 <HAL_GPIO_Init+0x144>
 800189c:	2503      	movs	r5, #3
 800189e:	e7cf      	b.n	8001840 <HAL_GPIO_Init+0x144>
 80018a0:	2504      	movs	r5, #4
 80018a2:	e7cd      	b.n	8001840 <HAL_GPIO_Init+0x144>
 80018a4:	2505      	movs	r5, #5
 80018a6:	e7cb      	b.n	8001840 <HAL_GPIO_Init+0x144>
 80018a8:	2506      	movs	r5, #6
 80018aa:	e7c9      	b.n	8001840 <HAL_GPIO_Init+0x144>
 80018ac:	40013c00 	.word	0x40013c00
 80018b0:	40020000 	.word	0x40020000
 80018b4:	40023800 	.word	0x40023800
 80018b8:	40021400 	.word	0x40021400

080018bc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018bc:	b10a      	cbz	r2, 80018c2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018be:	6181      	str	r1, [r0, #24]
 80018c0:	4770      	bx	lr
 80018c2:	0409      	lsls	r1, r1, #16
 80018c4:	e7fb      	b.n	80018be <HAL_GPIO_WritePin+0x2>

080018c6 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80018c6:	6802      	ldr	r2, [r0, #0]
 80018c8:	6953      	ldr	r3, [r2, #20]
 80018ca:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 80018ce:	d00d      	beq.n	80018ec <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018d0:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80018d4:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80018d6:	2304      	movs	r3, #4
 80018d8:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 80018da:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 80018dc:	2300      	movs	r3, #0
 80018de:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018e0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 80018e4:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_ERROR;
 80018e8:	2001      	movs	r0, #1
 80018ea:	4770      	bx	lr
  }
  return HAL_OK;
 80018ec:	4618      	mov	r0, r3
}
 80018ee:	4770      	bx	lr

080018f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80018f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80018f4:	4604      	mov	r4, r0
 80018f6:	4617      	mov	r7, r2
 80018f8:	4699      	mov	r9, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80018fa:	f3c1 4807 	ubfx	r8, r1, #16, #8
 80018fe:	b28e      	uxth	r6, r1
 8001900:	6825      	ldr	r5, [r4, #0]
 8001902:	f1b8 0f01 	cmp.w	r8, #1
 8001906:	bf0c      	ite	eq
 8001908:	696b      	ldreq	r3, [r5, #20]
 800190a:	69ab      	ldrne	r3, [r5, #24]
 800190c:	ea36 0303 	bics.w	r3, r6, r3
 8001910:	bf14      	ite	ne
 8001912:	2001      	movne	r0, #1
 8001914:	2000      	moveq	r0, #0
 8001916:	b908      	cbnz	r0, 800191c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 8001918:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800191c:	696b      	ldr	r3, [r5, #20]
 800191e:	055a      	lsls	r2, r3, #21
 8001920:	d512      	bpl.n	8001948 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001922:	682b      	ldr	r3, [r5, #0]
 8001924:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001928:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800192a:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 800192e:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001930:	2304      	movs	r3, #4
 8001932:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8001934:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 8001936:	2300      	movs	r3, #0
 8001938:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 800193a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 800193e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8001942:	2001      	movs	r0, #1
 8001944:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001948:	1c7b      	adds	r3, r7, #1
 800194a:	d0d9      	beq.n	8001900 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800194c:	b94f      	cbnz	r7, 8001962 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState = I2C_STATE_NONE;
 800194e:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8001950:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001952:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001954:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001958:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 800195c:	2003      	movs	r0, #3
 800195e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001962:	f7ff fb03 	bl	8000f6c <HAL_GetTick>
 8001966:	eba0 0009 	sub.w	r0, r0, r9
 800196a:	4287      	cmp	r7, r0
 800196c:	d2c8      	bcs.n	8001900 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 800196e:	e7ee      	b.n	800194e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

08001970 <I2C_WaitOnFlagUntilTimeout>:
{
 8001970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001974:	9e08      	ldr	r6, [sp, #32]
 8001976:	4604      	mov	r4, r0
 8001978:	4690      	mov	r8, r2
 800197a:	461f      	mov	r7, r3
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 800197c:	f3c1 4907 	ubfx	r9, r1, #16, #8
 8001980:	b28d      	uxth	r5, r1
 8001982:	6823      	ldr	r3, [r4, #0]
 8001984:	f1b9 0f01 	cmp.w	r9, #1
 8001988:	bf0c      	ite	eq
 800198a:	695b      	ldreq	r3, [r3, #20]
 800198c:	699b      	ldrne	r3, [r3, #24]
 800198e:	ea35 0303 	bics.w	r3, r5, r3
 8001992:	bf0c      	ite	eq
 8001994:	2301      	moveq	r3, #1
 8001996:	2300      	movne	r3, #0
 8001998:	4543      	cmp	r3, r8
 800199a:	d002      	beq.n	80019a2 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 800199c:	2000      	movs	r0, #0
}
 800199e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 80019a2:	1c7b      	adds	r3, r7, #1
 80019a4:	d0ed      	beq.n	8001982 <I2C_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80019a6:	b95f      	cbnz	r7, 80019c0 <I2C_WaitOnFlagUntilTimeout+0x50>
        hi2c->PreviousState = I2C_STATE_NONE;
 80019a8:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 80019aa:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80019ac:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80019ae:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80019b2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 80019b6:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80019b8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80019bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80019c0:	f7ff fad4 	bl	8000f6c <HAL_GetTick>
 80019c4:	1b80      	subs	r0, r0, r6
 80019c6:	4287      	cmp	r7, r0
 80019c8:	d2db      	bcs.n	8001982 <I2C_WaitOnFlagUntilTimeout+0x12>
 80019ca:	e7ed      	b.n	80019a8 <I2C_WaitOnFlagUntilTimeout+0x38>

080019cc <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 80019cc:	b570      	push	{r4, r5, r6, lr}
 80019ce:	4604      	mov	r4, r0
 80019d0:	460d      	mov	r5, r1
 80019d2:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80019d4:	6823      	ldr	r3, [r4, #0]
 80019d6:	695b      	ldr	r3, [r3, #20]
 80019d8:	061b      	lsls	r3, r3, #24
 80019da:	d501      	bpl.n	80019e0 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 80019dc:	2000      	movs	r0, #0
 80019de:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80019e0:	4620      	mov	r0, r4
 80019e2:	f7ff ff70 	bl	80018c6 <I2C_IsAcknowledgeFailed>
 80019e6:	b9a8      	cbnz	r0, 8001a14 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 80019e8:	1c6a      	adds	r2, r5, #1
 80019ea:	d0f3      	beq.n	80019d4 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80019ec:	b965      	cbnz	r5, 8001a08 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80019f0:	f043 0320 	orr.w	r3, r3, #32
 80019f4:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 80019f6:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80019f8:	2300      	movs	r3, #0
 80019fa:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80019fc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001a00:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8001a04:	2003      	movs	r0, #3
 8001a06:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001a08:	f7ff fab0 	bl	8000f6c <HAL_GetTick>
 8001a0c:	1b80      	subs	r0, r0, r6
 8001a0e:	4285      	cmp	r5, r0
 8001a10:	d2e0      	bcs.n	80019d4 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 8001a12:	e7ec      	b.n	80019ee <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8001a14:	2001      	movs	r0, #1
}
 8001a16:	bd70      	pop	{r4, r5, r6, pc}

08001a18 <I2C_RequestMemoryWrite>:
{
 8001a18:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001a1c:	4615      	mov	r5, r2
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8001a1e:	6802      	ldr	r2, [r0, #0]
{
 8001a20:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8001a22:	4698      	mov	r8, r3
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8001a24:	6813      	ldr	r3, [r2, #0]
 8001a26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a2a:	6013      	str	r3, [r2, #0]
{
 8001a2c:	460f      	mov	r7, r1
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001a2e:	9600      	str	r6, [sp, #0]
 8001a30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001a32:	2200      	movs	r2, #0
 8001a34:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8001a38:	4604      	mov	r4, r0
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001a3a:	f7ff ff99 	bl	8001970 <I2C_WaitOnFlagUntilTimeout>
 8001a3e:	b968      	cbnz	r0, 8001a5c <I2C_RequestMemoryWrite+0x44>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001a40:	6823      	ldr	r3, [r4, #0]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001a42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001a44:	491c      	ldr	r1, [pc, #112]	; (8001ab8 <I2C_RequestMemoryWrite+0xa0>)
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001a46:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 8001a4a:	611f      	str	r7, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001a4c:	4620      	mov	r0, r4
 8001a4e:	4633      	mov	r3, r6
 8001a50:	f7ff ff4e 	bl	80018f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a54:	b130      	cbz	r0, 8001a64 <I2C_RequestMemoryWrite+0x4c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a58:	2b04      	cmp	r3, #4
 8001a5a:	d018      	beq.n	8001a8e <I2C_RequestMemoryWrite+0x76>
      return HAL_TIMEOUT;
 8001a5c:	2003      	movs	r0, #3
}
 8001a5e:	b004      	add	sp, #16
 8001a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a64:	6823      	ldr	r3, [r4, #0]
 8001a66:	9003      	str	r0, [sp, #12]
 8001a68:	695a      	ldr	r2, [r3, #20]
 8001a6a:	9203      	str	r2, [sp, #12]
 8001a6c:	699b      	ldr	r3, [r3, #24]
 8001a6e:	9303      	str	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a70:	4632      	mov	r2, r6
 8001a72:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a74:	9b03      	ldr	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a76:	4620      	mov	r0, r4
 8001a78:	f7ff ffa8 	bl	80019cc <I2C_WaitOnTXEFlagUntilTimeout>
 8001a7c:	b148      	cbz	r0, 8001a92 <I2C_RequestMemoryWrite+0x7a>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a80:	2b04      	cmp	r3, #4
 8001a82:	d1eb      	bne.n	8001a5c <I2C_RequestMemoryWrite+0x44>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001a84:	6822      	ldr	r2, [r4, #0]
 8001a86:	6813      	ldr	r3, [r2, #0]
 8001a88:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a8c:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 8001a8e:	2001      	movs	r0, #1
 8001a90:	e7e5      	b.n	8001a5e <I2C_RequestMemoryWrite+0x46>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001a92:	f1b8 0f01 	cmp.w	r8, #1
 8001a96:	6823      	ldr	r3, [r4, #0]
 8001a98:	d102      	bne.n	8001aa0 <I2C_RequestMemoryWrite+0x88>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001a9a:	b2ed      	uxtb	r5, r5
 8001a9c:	611d      	str	r5, [r3, #16]
 8001a9e:	e7de      	b.n	8001a5e <I2C_RequestMemoryWrite+0x46>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001aa0:	0a2a      	lsrs	r2, r5, #8
 8001aa2:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001aa4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001aa6:	4632      	mov	r2, r6
 8001aa8:	4620      	mov	r0, r4
 8001aaa:	f7ff ff8f 	bl	80019cc <I2C_WaitOnTXEFlagUntilTimeout>
 8001aae:	2800      	cmp	r0, #0
 8001ab0:	d1e5      	bne.n	8001a7e <I2C_RequestMemoryWrite+0x66>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001ab2:	6823      	ldr	r3, [r4, #0]
 8001ab4:	e7f1      	b.n	8001a9a <I2C_RequestMemoryWrite+0x82>
 8001ab6:	bf00      	nop
 8001ab8:	00010002 	.word	0x00010002

08001abc <I2C_RequestMemoryRead>:
{
 8001abc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001ac0:	4698      	mov	r8, r3
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001ac2:	6803      	ldr	r3, [r0, #0]
{
 8001ac4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8001ac6:	4616      	mov	r6, r2
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001ace:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ad6:	601a      	str	r2, [r3, #0]
{
 8001ad8:	460f      	mov	r7, r1
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ada:	9500      	str	r5, [sp, #0]
 8001adc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8001ae4:	4604      	mov	r4, r0
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ae6:	f7ff ff43 	bl	8001970 <I2C_WaitOnFlagUntilTimeout>
 8001aea:	b980      	cbnz	r0, 8001b0e <I2C_RequestMemoryRead+0x52>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001aec:	6823      	ldr	r3, [r4, #0]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001aee:	492f      	ldr	r1, [pc, #188]	; (8001bac <I2C_RequestMemoryRead+0xf0>)
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001af0:	b2ff      	uxtb	r7, r7
 8001af2:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
 8001af6:	611a      	str	r2, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001af8:	4620      	mov	r0, r4
 8001afa:	462b      	mov	r3, r5
 8001afc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001afe:	f7ff fef7 	bl	80018f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b02:	b140      	cbz	r0, 8001b16 <I2C_RequestMemoryRead+0x5a>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b04:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b06:	2b04      	cmp	r3, #4
 8001b08:	d101      	bne.n	8001b0e <I2C_RequestMemoryRead+0x52>
      return HAL_ERROR;
 8001b0a:	2001      	movs	r0, #1
 8001b0c:	e000      	b.n	8001b10 <I2C_RequestMemoryRead+0x54>
      return HAL_TIMEOUT;
 8001b0e:	2003      	movs	r0, #3
}
 8001b10:	b004      	add	sp, #16
 8001b12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b16:	6823      	ldr	r3, [r4, #0]
 8001b18:	9003      	str	r0, [sp, #12]
 8001b1a:	695a      	ldr	r2, [r3, #20]
 8001b1c:	9203      	str	r2, [sp, #12]
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	9303      	str	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b22:	462a      	mov	r2, r5
 8001b24:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b26:	9b03      	ldr	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b28:	4620      	mov	r0, r4
 8001b2a:	f7ff ff4f 	bl	80019cc <I2C_WaitOnTXEFlagUntilTimeout>
 8001b2e:	b140      	cbz	r0, 8001b42 <I2C_RequestMemoryRead+0x86>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b30:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b32:	2b04      	cmp	r3, #4
 8001b34:	d1eb      	bne.n	8001b0e <I2C_RequestMemoryRead+0x52>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001b36:	6822      	ldr	r2, [r4, #0]
 8001b38:	6813      	ldr	r3, [r2, #0]
 8001b3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b3e:	6013      	str	r3, [r2, #0]
 8001b40:	e7e3      	b.n	8001b0a <I2C_RequestMemoryRead+0x4e>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001b42:	f1b8 0f01 	cmp.w	r8, #1
 8001b46:	6823      	ldr	r3, [r4, #0]
 8001b48:	d124      	bne.n	8001b94 <I2C_RequestMemoryRead+0xd8>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001b4a:	b2f6      	uxtb	r6, r6
 8001b4c:	611e      	str	r6, [r3, #16]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b4e:	462a      	mov	r2, r5
 8001b50:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001b52:	4620      	mov	r0, r4
 8001b54:	f7ff ff3a 	bl	80019cc <I2C_WaitOnTXEFlagUntilTimeout>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	2800      	cmp	r0, #0
 8001b5c:	d1e8      	bne.n	8001b30 <I2C_RequestMemoryRead+0x74>
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8001b5e:	6821      	ldr	r1, [r4, #0]
 8001b60:	680b      	ldr	r3, [r1, #0]
 8001b62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b66:	600b      	str	r3, [r1, #0]
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001b68:	4620      	mov	r0, r4
 8001b6a:	9500      	str	r5, [sp, #0]
 8001b6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001b6e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001b72:	f7ff fefd 	bl	8001970 <I2C_WaitOnFlagUntilTimeout>
 8001b76:	2800      	cmp	r0, #0
 8001b78:	d1c9      	bne.n	8001b0e <I2C_RequestMemoryRead+0x52>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001b7a:	6823      	ldr	r3, [r4, #0]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001b7e:	490b      	ldr	r1, [pc, #44]	; (8001bac <I2C_RequestMemoryRead+0xf0>)
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001b80:	f047 0701 	orr.w	r7, r7, #1
 8001b84:	611f      	str	r7, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b86:	4620      	mov	r0, r4
 8001b88:	462b      	mov	r3, r5
 8001b8a:	f7ff feb1 	bl	80018f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b8e:	2800      	cmp	r0, #0
 8001b90:	d1b8      	bne.n	8001b04 <I2C_RequestMemoryRead+0x48>
 8001b92:	e7bd      	b.n	8001b10 <I2C_RequestMemoryRead+0x54>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001b94:	0a32      	lsrs	r2, r6, #8
 8001b96:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b98:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001b9a:	462a      	mov	r2, r5
 8001b9c:	4620      	mov	r0, r4
 8001b9e:	f7ff ff15 	bl	80019cc <I2C_WaitOnTXEFlagUntilTimeout>
 8001ba2:	2800      	cmp	r0, #0
 8001ba4:	d1c4      	bne.n	8001b30 <I2C_RequestMemoryRead+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001ba6:	6823      	ldr	r3, [r4, #0]
 8001ba8:	e7cf      	b.n	8001b4a <I2C_RequestMemoryRead+0x8e>
 8001baa:	bf00      	nop
 8001bac:	00010002 	.word	0x00010002

08001bb0 <I2C_WaitOnRXNEFlagUntilTimeout>:
{  
 8001bb0:	b570      	push	{r4, r5, r6, lr}
 8001bb2:	4604      	mov	r4, r0
 8001bb4:	460d      	mov	r5, r1
 8001bb6:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001bb8:	6820      	ldr	r0, [r4, #0]
 8001bba:	6943      	ldr	r3, [r0, #20]
 8001bbc:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8001bc0:	d001      	beq.n	8001bc6 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8001bc2:	2000      	movs	r0, #0
}
 8001bc4:	bd70      	pop	{r4, r5, r6, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001bc6:	6942      	ldr	r2, [r0, #20]
 8001bc8:	06d2      	lsls	r2, r2, #27
 8001bca:	d50b      	bpl.n	8001be4 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bcc:	f06f 0210 	mvn.w	r2, #16
 8001bd0:	6142      	str	r2, [r0, #20]
      hi2c->State= HAL_I2C_STATE_READY;
 8001bd2:	2220      	movs	r2, #32
      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bd4:	6423      	str	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001bd6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->PreviousState = I2C_STATE_NONE;
 8001bda:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8001bdc:	2001      	movs	r0, #1
      hi2c->State= HAL_I2C_STATE_READY;
 8001bde:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8001be2:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001be4:	b95d      	cbnz	r5, 8001bfe <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001be6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001be8:	f043 0320 	orr.w	r3, r3, #32
 8001bec:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8001bee:	2320      	movs	r3, #32
 8001bf0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      __HAL_UNLOCK(hi2c);
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8001bfa:	2003      	movs	r0, #3
 8001bfc:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001bfe:	f7ff f9b5 	bl	8000f6c <HAL_GetTick>
 8001c02:	1b80      	subs	r0, r0, r6
 8001c04:	4285      	cmp	r5, r0
 8001c06:	d2d7      	bcs.n	8001bb8 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 8001c08:	e7ed      	b.n	8001be6 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>

08001c0a <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 8001c0a:	b570      	push	{r4, r5, r6, lr}
 8001c0c:	4604      	mov	r4, r0
 8001c0e:	460d      	mov	r5, r1
 8001c10:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001c12:	6823      	ldr	r3, [r4, #0]
 8001c14:	695b      	ldr	r3, [r3, #20]
 8001c16:	075b      	lsls	r3, r3, #29
 8001c18:	d501      	bpl.n	8001c1e <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8001c1a:	2000      	movs	r0, #0
 8001c1c:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c1e:	4620      	mov	r0, r4
 8001c20:	f7ff fe51 	bl	80018c6 <I2C_IsAcknowledgeFailed>
 8001c24:	b9a8      	cbnz	r0, 8001c52 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8001c26:	1c6a      	adds	r2, r5, #1
 8001c28:	d0f3      	beq.n	8001c12 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001c2a:	b965      	cbnz	r5, 8001c46 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c2c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c2e:	f043 0320 	orr.w	r3, r3, #32
 8001c32:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8001c34:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001c36:	2300      	movs	r3, #0
 8001c38:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001c3a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001c3e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8001c42:	2003      	movs	r0, #3
 8001c44:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001c46:	f7ff f991 	bl	8000f6c <HAL_GetTick>
 8001c4a:	1b80      	subs	r0, r0, r6
 8001c4c:	4285      	cmp	r5, r0
 8001c4e:	d2e0      	bcs.n	8001c12 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 8001c50:	e7ec      	b.n	8001c2c <I2C_WaitOnBTFFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8001c52:	2001      	movs	r0, #1
}
 8001c54:	bd70      	pop	{r4, r5, r6, pc}
	...

08001c58 <HAL_I2C_Init>:
{
 8001c58:	b570      	push	{r4, r5, r6, lr}
  if(hi2c == NULL)
 8001c5a:	4604      	mov	r4, r0
 8001c5c:	2800      	cmp	r0, #0
 8001c5e:	d062      	beq.n	8001d26 <HAL_I2C_Init+0xce>
  if(hi2c->State == HAL_I2C_STATE_RESET)
 8001c60:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001c64:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001c68:	b91b      	cbnz	r3, 8001c72 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8001c6a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001c6e:	f003 fc53 	bl	8005518 <HAL_I2C_MspInit>
  __HAL_I2C_DISABLE(hi2c);
 8001c72:	6822      	ldr	r2, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001c74:	4e2d      	ldr	r6, [pc, #180]	; (8001d2c <HAL_I2C_Init+0xd4>)
  freqrange = I2C_FREQRANGE(pclk1);
 8001c76:	4d2e      	ldr	r5, [pc, #184]	; (8001d30 <HAL_I2C_Init+0xd8>)
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c78:	2324      	movs	r3, #36	; 0x24
 8001c7a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001c7e:	6813      	ldr	r3, [r2, #0]
 8001c80:	f023 0301 	bic.w	r3, r3, #1
 8001c84:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c86:	f001 f913 	bl	8002eb0 <HAL_RCC_GetPCLK1Freq>
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001c8a:	6863      	ldr	r3, [r4, #4]
  hi2c->Instance->CR2 = freqrange;
 8001c8c:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001c8e:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001c92:	42b3      	cmp	r3, r6
 8001c94:	bf84      	itt	hi
 8001c96:	f44f 7196 	movhi.w	r1, #300	; 0x12c
 8001c9a:	4369      	mulhi	r1, r5
  hi2c->Instance->CR2 = freqrange;
 8001c9c:	6055      	str	r5, [r2, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001c9e:	bf91      	iteee	ls
 8001ca0:	1c69      	addls	r1, r5, #1
 8001ca2:	f44f 757a 	movhi.w	r5, #1000	; 0x3e8
 8001ca6:	fbb1 f1f5 	udivhi	r1, r1, r5
 8001caa:	3101      	addhi	r1, #1
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001cac:	42b3      	cmp	r3, r6
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001cae:	6211      	str	r1, [r2, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001cb0:	d821      	bhi.n	8001cf6 <HAL_I2C_Init+0x9e>
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	fbb0 f0f3 	udiv	r0, r0, r3
 8001cb8:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001cbc:	2b03      	cmp	r3, #3
 8001cbe:	bf98      	it	ls
 8001cc0:	2004      	movls	r0, #4
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001cc2:	6a21      	ldr	r1, [r4, #32]
 8001cc4:	69e3      	ldr	r3, [r4, #28]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001cc6:	61d0      	str	r0, [r2, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001cc8:	430b      	orrs	r3, r1
 8001cca:	6013      	str	r3, [r2, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8001ccc:	68e1      	ldr	r1, [r4, #12]
 8001cce:	6923      	ldr	r3, [r4, #16]
 8001cd0:	430b      	orrs	r3, r1
 8001cd2:	6093      	str	r3, [r2, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8001cd4:	69a1      	ldr	r1, [r4, #24]
 8001cd6:	6963      	ldr	r3, [r4, #20]
 8001cd8:	430b      	orrs	r3, r1
 8001cda:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8001cdc:	6813      	ldr	r3, [r2, #0]
 8001cde:	f043 0301 	orr.w	r3, r3, #1
 8001ce2:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ce4:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8001ce6:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ce8:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001cea:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cee:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cf0:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8001cf4:	bd70      	pop	{r4, r5, r6, pc}
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001cf6:	68a1      	ldr	r1, [r4, #8]
 8001cf8:	b949      	cbnz	r1, 8001d0e <HAL_I2C_Init+0xb6>
 8001cfa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001cfe:	fbb0 f0f3 	udiv	r0, r0, r3
 8001d02:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001d06:	b163      	cbz	r3, 8001d22 <HAL_I2C_Init+0xca>
 8001d08:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8001d0c:	e7d9      	b.n	8001cc2 <HAL_I2C_Init+0x6a>
 8001d0e:	2119      	movs	r1, #25
 8001d10:	434b      	muls	r3, r1
 8001d12:	fbb0 f0f3 	udiv	r0, r0, r3
 8001d16:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001d1a:	b113      	cbz	r3, 8001d22 <HAL_I2C_Init+0xca>
 8001d1c:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8001d20:	e7cf      	b.n	8001cc2 <HAL_I2C_Init+0x6a>
 8001d22:	2001      	movs	r0, #1
 8001d24:	e7cd      	b.n	8001cc2 <HAL_I2C_Init+0x6a>
    return HAL_ERROR;
 8001d26:	2001      	movs	r0, #1
}
 8001d28:	bd70      	pop	{r4, r5, r6, pc}
 8001d2a:	bf00      	nop
 8001d2c:	000186a0 	.word	0x000186a0
 8001d30:	000f4240 	.word	0x000f4240

08001d34 <HAL_I2C_Mem_Write>:
{
 8001d34:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8001d38:	4604      	mov	r4, r0
 8001d3a:	469a      	mov	sl, r3
 8001d3c:	4688      	mov	r8, r1
 8001d3e:	4691      	mov	r9, r2
 8001d40:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  tickstart = HAL_GetTick();
 8001d42:	f7ff f913 	bl	8000f6c <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001d46:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001d4a:	2b20      	cmp	r3, #32
  tickstart = HAL_GetTick();
 8001d4c:	4605      	mov	r5, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001d4e:	d003      	beq.n	8001d58 <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 8001d50:	2002      	movs	r0, #2
}
 8001d52:	b002      	add	sp, #8
 8001d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d58:	9000      	str	r0, [sp, #0]
 8001d5a:	2319      	movs	r3, #25
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	493e      	ldr	r1, [pc, #248]	; (8001e58 <HAL_I2C_Mem_Write+0x124>)
 8001d60:	4620      	mov	r0, r4
 8001d62:	f7ff fe05 	bl	8001970 <I2C_WaitOnFlagUntilTimeout>
 8001d66:	2800      	cmp	r0, #0
 8001d68:	d1f2      	bne.n	8001d50 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 8001d6a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d0ee      	beq.n	8001d50 <HAL_I2C_Mem_Write+0x1c>
 8001d72:	2301      	movs	r3, #1
 8001d74:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d78:	6823      	ldr	r3, [r4, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001d7e:	bf5e      	ittt	pl
 8001d80:	681a      	ldrpl	r2, [r3, #0]
 8001d82:	f042 0201 	orrpl.w	r2, r2, #1
 8001d86:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d8e:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001d90:	2321      	movs	r3, #33	; 0x21
 8001d92:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001d96:	2340      	movs	r3, #64	; 0x40
 8001d98:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->pBuffPtr    = pData;
 8001d9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001d9e:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001da0:	2700      	movs	r7, #0
    hi2c->XferCount   = Size;
 8001da2:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001da6:	6427      	str	r7, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8001da8:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001daa:	4b2c      	ldr	r3, [pc, #176]	; (8001e5c <HAL_I2C_Mem_Write+0x128>)
 8001dac:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001dae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001db0:	8523      	strh	r3, [r4, #40]	; 0x28
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001db2:	9501      	str	r5, [sp, #4]
 8001db4:	9600      	str	r6, [sp, #0]
 8001db6:	4653      	mov	r3, sl
 8001db8:	464a      	mov	r2, r9
 8001dba:	4641      	mov	r1, r8
 8001dbc:	4620      	mov	r0, r4
 8001dbe:	f7ff fe2b 	bl	8001a18 <I2C_RequestMemoryWrite>
 8001dc2:	2800      	cmp	r0, #0
 8001dc4:	d02a      	beq.n	8001e1c <HAL_I2C_Mem_Write+0xe8>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001dc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001dc8:	f884 703c 	strb.w	r7, [r4, #60]	; 0x3c
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001dcc:	2b04      	cmp	r3, #4
 8001dce:	d107      	bne.n	8001de0 <HAL_I2C_Mem_Write+0xac>
        return HAL_ERROR;
 8001dd0:	2001      	movs	r0, #1
 8001dd2:	e7be      	b.n	8001d52 <HAL_I2C_Mem_Write+0x1e>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dd4:	f7ff fdfa 	bl	80019cc <I2C_WaitOnTXEFlagUntilTimeout>
 8001dd8:	b120      	cbz	r0, 8001de4 <HAL_I2C_Mem_Write+0xb0>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001dda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ddc:	2b04      	cmp	r3, #4
 8001dde:	d034      	beq.n	8001e4a <HAL_I2C_Mem_Write+0x116>
          return HAL_TIMEOUT;
 8001de0:	2003      	movs	r0, #3
 8001de2:	e7b6      	b.n	8001d52 <HAL_I2C_Mem_Write+0x1e>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001de4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001de6:	6827      	ldr	r7, [r4, #0]
      hi2c->XferSize--;
 8001de8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001dea:	1c4b      	adds	r3, r1, #1
 8001dec:	6263      	str	r3, [r4, #36]	; 0x24
 8001dee:	780b      	ldrb	r3, [r1, #0]
 8001df0:	613b      	str	r3, [r7, #16]
      hi2c->XferCount--;
 8001df2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001df4:	3b01      	subs	r3, #1
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001dfa:	697b      	ldr	r3, [r7, #20]
      hi2c->XferSize--;
 8001dfc:	1e50      	subs	r0, r2, #1
 8001dfe:	b280      	uxth	r0, r0
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e00:	075b      	lsls	r3, r3, #29
      hi2c->XferSize--;
 8001e02:	8520      	strh	r0, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e04:	d50a      	bpl.n	8001e1c <HAL_I2C_Mem_Write+0xe8>
 8001e06:	b148      	cbz	r0, 8001e1c <HAL_I2C_Mem_Write+0xe8>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001e08:	1c8b      	adds	r3, r1, #2
 8001e0a:	6263      	str	r3, [r4, #36]	; 0x24
 8001e0c:	784b      	ldrb	r3, [r1, #1]
 8001e0e:	613b      	str	r3, [r7, #16]
        hi2c->XferCount--;
 8001e10:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001e12:	3b01      	subs	r3, #1
        hi2c->XferSize--;
 8001e14:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 8001e16:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8001e18:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001e1a:	8563      	strh	r3, [r4, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 8001e1c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e1e:	462a      	mov	r2, r5
 8001e20:	4631      	mov	r1, r6
 8001e22:	4620      	mov	r0, r4
    while(hi2c->XferSize > 0U)
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d1d5      	bne.n	8001dd4 <HAL_I2C_Mem_Write+0xa0>
    if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e28:	f7ff feef 	bl	8001c0a <I2C_WaitOnBTFFlagUntilTimeout>
 8001e2c:	2800      	cmp	r0, #0
 8001e2e:	d1d4      	bne.n	8001dda <HAL_I2C_Mem_Write+0xa6>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001e30:	6822      	ldr	r2, [r4, #0]
 8001e32:	6813      	ldr	r3, [r2, #0]
 8001e34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e38:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001e3a:	2320      	movs	r3, #32
 8001e3c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8001e40:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e44:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 8001e48:	e783      	b.n	8001d52 <HAL_I2C_Mem_Write+0x1e>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001e4a:	6822      	ldr	r2, [r4, #0]
 8001e4c:	6813      	ldr	r3, [r2, #0]
 8001e4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e52:	6013      	str	r3, [r2, #0]
 8001e54:	e7bc      	b.n	8001dd0 <HAL_I2C_Mem_Write+0x9c>
 8001e56:	bf00      	nop
 8001e58:	00100002 	.word	0x00100002
 8001e5c:	ffff0000 	.word	0xffff0000

08001e60 <HAL_I2C_Mem_Read>:
{
 8001e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e64:	4604      	mov	r4, r0
 8001e66:	b086      	sub	sp, #24
 8001e68:	469a      	mov	sl, r3
 8001e6a:	460d      	mov	r5, r1
 8001e6c:	4691      	mov	r9, r2
 8001e6e:	9f10      	ldr	r7, [sp, #64]	; 0x40
  tickstart = HAL_GetTick();
 8001e70:	f7ff f87c 	bl	8000f6c <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001e74:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001e78:	2b20      	cmp	r3, #32
  tickstart = HAL_GetTick();
 8001e7a:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001e7c:	d004      	beq.n	8001e88 <HAL_I2C_Mem_Read+0x28>
    return HAL_BUSY;
 8001e7e:	2502      	movs	r5, #2
}
 8001e80:	4628      	mov	r0, r5
 8001e82:	b006      	add	sp, #24
 8001e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e88:	9000      	str	r0, [sp, #0]
 8001e8a:	2319      	movs	r3, #25
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	4979      	ldr	r1, [pc, #484]	; (8002074 <HAL_I2C_Mem_Read+0x214>)
 8001e90:	4620      	mov	r0, r4
 8001e92:	f7ff fd6d 	bl	8001970 <I2C_WaitOnFlagUntilTimeout>
 8001e96:	2800      	cmp	r0, #0
 8001e98:	d1f1      	bne.n	8001e7e <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 8001e9a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d0ed      	beq.n	8001e7e <HAL_I2C_Mem_Read+0x1e>
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ea8:	6823      	ldr	r3, [r4, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001eae:	bf5e      	ittt	pl
 8001eb0:	681a      	ldrpl	r2, [r3, #0]
 8001eb2:	f042 0201 	orrpl.w	r2, r2, #1
 8001eb6:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ebe:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001ec0:	2322      	movs	r3, #34	; 0x22
 8001ec2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ec6:	2340      	movs	r3, #64	; 0x40
 8001ec8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->pBuffPtr    = pData;
 8001ecc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001ece:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ed0:	f04f 0800 	mov.w	r8, #0
    hi2c->XferCount   = Size;
 8001ed4:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ed8:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8001edc:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ede:	4b66      	ldr	r3, [pc, #408]	; (8002078 <HAL_I2C_Mem_Read+0x218>)
 8001ee0:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001ee2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001ee4:	8523      	strh	r3, [r4, #40]	; 0x28
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001ee6:	4629      	mov	r1, r5
 8001ee8:	9601      	str	r6, [sp, #4]
 8001eea:	9700      	str	r7, [sp, #0]
 8001eec:	4653      	mov	r3, sl
 8001eee:	464a      	mov	r2, r9
 8001ef0:	4620      	mov	r0, r4
 8001ef2:	f7ff fde3 	bl	8001abc <I2C_RequestMemoryRead>
 8001ef6:	4605      	mov	r5, r0
 8001ef8:	b130      	cbz	r0, 8001f08 <HAL_I2C_Mem_Read+0xa8>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001efa:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001efc:	f884 803c 	strb.w	r8, [r4, #60]	; 0x3c
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f00:	2b04      	cmp	r3, #4
 8001f02:	d13a      	bne.n	8001f7a <HAL_I2C_Mem_Read+0x11a>
              return HAL_ERROR;
 8001f04:	2501      	movs	r5, #1
 8001f06:	e7bb      	b.n	8001e80 <HAL_I2C_Mem_Read+0x20>
    if(hi2c->XferSize == 0U)
 8001f08:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001f0a:	6823      	ldr	r3, [r4, #0]
 8001f0c:	b992      	cbnz	r2, 8001f34 <HAL_I2C_Mem_Read+0xd4>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f0e:	9002      	str	r0, [sp, #8]
 8001f10:	695a      	ldr	r2, [r3, #20]
 8001f12:	9202      	str	r2, [sp, #8]
 8001f14:	699a      	ldr	r2, [r3, #24]
 8001f16:	9202      	str	r2, [sp, #8]
 8001f18:	9a02      	ldr	r2, [sp, #8]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f20:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001f22:	2320      	movs	r3, #32
 8001f24:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8001f2e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8001f32:	e7a5      	b.n	8001e80 <HAL_I2C_Mem_Read+0x20>
    else if(hi2c->XferSize == 1U)
 8001f34:	2a01      	cmp	r2, #1
 8001f36:	d122      	bne.n	8001f7e <HAL_I2C_Mem_Read+0x11e>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f3e:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f40:	9003      	str	r0, [sp, #12]
 8001f42:	695a      	ldr	r2, [r3, #20]
 8001f44:	9203      	str	r2, [sp, #12]
 8001f46:	699a      	ldr	r2, [r3, #24]
 8001f48:	9203      	str	r2, [sp, #12]
 8001f4a:	9a03      	ldr	r2, [sp, #12]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f52:	601a      	str	r2, [r3, #0]
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f54:	f8df 8124 	ldr.w	r8, [pc, #292]	; 800207c <HAL_I2C_Mem_Read+0x21c>
    while(hi2c->XferSize > 0U)
 8001f58:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d0e1      	beq.n	8001f22 <HAL_I2C_Mem_Read+0xc2>
      if(hi2c->XferSize <= 3U)
 8001f5e:	2b03      	cmp	r3, #3
 8001f60:	d86b      	bhi.n	800203a <HAL_I2C_Mem_Read+0x1da>
        if(hi2c->XferSize== 1U)
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d123      	bne.n	8001fae <HAL_I2C_Mem_Read+0x14e>
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8001f66:	4632      	mov	r2, r6
 8001f68:	4639      	mov	r1, r7
 8001f6a:	4620      	mov	r0, r4
 8001f6c:	f7ff fe20 	bl	8001bb0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f70:	2800      	cmp	r0, #0
 8001f72:	d039      	beq.n	8001fe8 <HAL_I2C_Mem_Read+0x188>
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8001f74:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f76:	2b20      	cmp	r3, #32
 8001f78:	d1c4      	bne.n	8001f04 <HAL_I2C_Mem_Read+0xa4>
              return HAL_TIMEOUT;
 8001f7a:	2503      	movs	r5, #3
 8001f7c:	e780      	b.n	8001e80 <HAL_I2C_Mem_Read+0x20>
    else if(hi2c->XferSize == 2U)
 8001f7e:	2a02      	cmp	r2, #2
 8001f80:	d10e      	bne.n	8001fa0 <HAL_I2C_Mem_Read+0x140>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f88:	601a      	str	r2, [r3, #0]
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f90:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f92:	9004      	str	r0, [sp, #16]
 8001f94:	695a      	ldr	r2, [r3, #20]
 8001f96:	9204      	str	r2, [sp, #16]
 8001f98:	699b      	ldr	r3, [r3, #24]
 8001f9a:	9304      	str	r3, [sp, #16]
 8001f9c:	9b04      	ldr	r3, [sp, #16]
 8001f9e:	e7d9      	b.n	8001f54 <HAL_I2C_Mem_Read+0xf4>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fa0:	9005      	str	r0, [sp, #20]
 8001fa2:	695a      	ldr	r2, [r3, #20]
 8001fa4:	9205      	str	r2, [sp, #20]
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	9305      	str	r3, [sp, #20]
 8001faa:	9b05      	ldr	r3, [sp, #20]
 8001fac:	e7d2      	b.n	8001f54 <HAL_I2C_Mem_Read+0xf4>
        else if(hi2c->XferSize == 2U)
 8001fae:	2b02      	cmp	r3, #2
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001fb0:	9600      	str	r6, [sp, #0]
 8001fb2:	463b      	mov	r3, r7
 8001fb4:	f04f 0200 	mov.w	r2, #0
 8001fb8:	4641      	mov	r1, r8
 8001fba:	4620      	mov	r0, r4
        else if(hi2c->XferSize == 2U)
 8001fbc:	d122      	bne.n	8002004 <HAL_I2C_Mem_Read+0x1a4>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001fbe:	f7ff fcd7 	bl	8001970 <I2C_WaitOnFlagUntilTimeout>
 8001fc2:	2800      	cmp	r0, #0
 8001fc4:	d1d9      	bne.n	8001f7a <HAL_I2C_Mem_Read+0x11a>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001fc6:	6823      	ldr	r3, [r4, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fce:	601a      	str	r2, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001fd0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001fd2:	691b      	ldr	r3, [r3, #16]
 8001fd4:	1c51      	adds	r1, r2, #1
 8001fd6:	6261      	str	r1, [r4, #36]	; 0x24
 8001fd8:	7013      	strb	r3, [r2, #0]
          hi2c->XferSize--;
 8001fda:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001fdc:	3b01      	subs	r3, #1
 8001fde:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001fe0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	8563      	strh	r3, [r4, #42]	; 0x2a
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001fe8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001fea:	1c5a      	adds	r2, r3, #1
 8001fec:	6262      	str	r2, [r4, #36]	; 0x24
 8001fee:	6822      	ldr	r2, [r4, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001ff0:	6912      	ldr	r2, [r2, #16]
 8001ff2:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001ff4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001ffa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001ffc:	3b01      	subs	r3, #1
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	8563      	strh	r3, [r4, #42]	; 0x2a
 8002002:	e7a9      	b.n	8001f58 <HAL_I2C_Mem_Read+0xf8>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002004:	f7ff fcb4 	bl	8001970 <I2C_WaitOnFlagUntilTimeout>
 8002008:	4602      	mov	r2, r0
 800200a:	2800      	cmp	r0, #0
 800200c:	d1b5      	bne.n	8001f7a <HAL_I2C_Mem_Read+0x11a>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800200e:	6823      	ldr	r3, [r4, #0]
 8002010:	6819      	ldr	r1, [r3, #0]
 8002012:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8002016:	6019      	str	r1, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002018:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	1c48      	adds	r0, r1, #1
 800201e:	6260      	str	r0, [r4, #36]	; 0x24
 8002020:	700b      	strb	r3, [r1, #0]
          hi2c->XferSize--;
 8002022:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002024:	9600      	str	r6, [sp, #0]
          hi2c->XferSize--;
 8002026:	3b01      	subs	r3, #1
 8002028:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800202a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800202c:	3b01      	subs	r3, #1
 800202e:	b29b      	uxth	r3, r3
 8002030:	8563      	strh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002032:	4641      	mov	r1, r8
 8002034:	463b      	mov	r3, r7
 8002036:	4620      	mov	r0, r4
 8002038:	e7c1      	b.n	8001fbe <HAL_I2C_Mem_Read+0x15e>
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800203a:	4632      	mov	r2, r6
 800203c:	4639      	mov	r1, r7
 800203e:	4620      	mov	r0, r4
 8002040:	f7ff fdb6 	bl	8001bb0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002044:	2800      	cmp	r0, #0
 8002046:	d195      	bne.n	8001f74 <HAL_I2C_Mem_Read+0x114>
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002048:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800204a:	1c5a      	adds	r2, r3, #1
 800204c:	6262      	str	r2, [r4, #36]	; 0x24
 800204e:	6822      	ldr	r2, [r4, #0]
 8002050:	6912      	ldr	r2, [r2, #16]
 8002052:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8002054:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002056:	6822      	ldr	r2, [r4, #0]
        hi2c->XferSize--;
 8002058:	3b01      	subs	r3, #1
 800205a:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800205c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800205e:	3b01      	subs	r3, #1
 8002060:	b29b      	uxth	r3, r3
 8002062:	8563      	strh	r3, [r4, #42]	; 0x2a
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002064:	6953      	ldr	r3, [r2, #20]
 8002066:	075b      	lsls	r3, r3, #29
 8002068:	f57f af76 	bpl.w	8001f58 <HAL_I2C_Mem_Read+0xf8>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800206c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800206e:	1c59      	adds	r1, r3, #1
 8002070:	6261      	str	r1, [r4, #36]	; 0x24
 8002072:	e7bd      	b.n	8001ff0 <HAL_I2C_Mem_Read+0x190>
 8002074:	00100002 	.word	0x00100002
 8002078:	ffff0000 	.word	0xffff0000
 800207c:	00010004 	.word	0x00010004

08002080 <HAL_I2C_MasterTxCpltCallback>:
 8002080:	4770      	bx	lr

08002082 <HAL_I2C_MasterRxCpltCallback>:
 8002082:	4770      	bx	lr

08002084 <HAL_I2C_SlaveTxCpltCallback>:
 8002084:	4770      	bx	lr

08002086 <HAL_I2C_SlaveRxCpltCallback>:
 8002086:	4770      	bx	lr

08002088 <HAL_I2C_AddrCallback>:
{
 8002088:	4770      	bx	lr

0800208a <HAL_I2C_ListenCpltCallback>:
 800208a:	4770      	bx	lr

0800208c <HAL_I2C_MemTxCpltCallback>:
 800208c:	4770      	bx	lr

0800208e <HAL_I2C_MemRxCpltCallback>:
 800208e:	4770      	bx	lr

08002090 <HAL_I2C_ErrorCallback>:
 8002090:	4770      	bx	lr

08002092 <HAL_I2C_AbortCpltCallback>:
{
 8002092:	4770      	bx	lr

08002094 <I2C_ITError>:
  uint32_t CurrentState = hi2c->State;
 8002094:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
  if((CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002098:	3b29      	subs	r3, #41	; 0x29
 800209a:	2b01      	cmp	r3, #1
{
 800209c:	b510      	push	{r4, lr}
 800209e:	6803      	ldr	r3, [r0, #0]
 80020a0:	4604      	mov	r4, r0
  if((CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80020a2:	d839      	bhi.n	8002118 <I2C_ITError+0x84>
    hi2c->PreviousState = I2C_STATE_NONE;
 80020a4:	2200      	movs	r2, #0
 80020a6:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80020a8:	2228      	movs	r2, #40	; 0x28
 80020aa:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020b4:	601a      	str	r2, [r3, #0]
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80020b6:	685a      	ldr	r2, [r3, #4]
 80020b8:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 80020bc:	d054      	beq.n	8002168 <I2C_ITError+0xd4>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80020be:	685a      	ldr	r2, [r3, #4]
    if(hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80020c0:	6b60      	ldr	r0, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80020c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020c6:	605a      	str	r2, [r3, #4]
    if(hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80020c8:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	4b39      	ldr	r3, [pc, #228]	; (80021b4 <I2C_ITError+0x120>)
 80020d0:	d031      	beq.n	8002136 <I2C_ITError+0xa2>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80020d2:	6503      	str	r3, [r0, #80]	; 0x50
      if(HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80020d4:	f7ff fa46 	bl	8001564 <HAL_DMA_Abort_IT>
 80020d8:	b150      	cbz	r0, 80020f0 <I2C_ITError+0x5c>
        __HAL_I2C_DISABLE(hi2c);
 80020da:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80020dc:	6b60      	ldr	r0, [r4, #52]	; 0x34
        __HAL_I2C_DISABLE(hi2c);
 80020de:	6813      	ldr	r3, [r2, #0]
 80020e0:	f023 0301 	bic.w	r3, r3, #1
 80020e4:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 80020e6:	2320      	movs	r3, #32
 80020e8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80020ec:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80020ee:	4798      	blx	r3
  if((hi2c->State == HAL_I2C_STATE_LISTEN) && ((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF))
 80020f0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80020f4:	2b28      	cmp	r3, #40	; 0x28
 80020f6:	d10e      	bne.n	8002116 <I2C_ITError+0x82>
 80020f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80020fa:	075b      	lsls	r3, r3, #29
 80020fc:	d50b      	bpl.n	8002116 <I2C_ITError+0x82>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020fe:	4b2e      	ldr	r3, [pc, #184]	; (80021b8 <I2C_ITError+0x124>)
 8002100:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002102:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 8002104:	2300      	movs	r3, #0
 8002106:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 8002108:	4620      	mov	r0, r4
    hi2c->State = HAL_I2C_STATE_READY;
 800210a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800210e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8002112:	f7ff ffba 	bl	800208a <HAL_I2C_ListenCpltCallback>
 8002116:	bd10      	pop	{r4, pc}
    if((hi2c->State != HAL_I2C_STATE_ABORT) && ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) != I2C_CR2_DMAEN))
 8002118:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 800211c:	2a60      	cmp	r2, #96	; 0x60
 800211e:	d005      	beq.n	800212c <I2C_ITError+0x98>
 8002120:	685a      	ldr	r2, [r3, #4]
 8002122:	0512      	lsls	r2, r2, #20
      hi2c->State = HAL_I2C_STATE_READY;
 8002124:	bf5c      	itt	pl
 8002126:	2220      	movpl	r2, #32
 8002128:	f880 203d 	strbpl.w	r2, [r0, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 800212c:	2200      	movs	r2, #0
 800212e:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002130:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
 8002134:	e7bb      	b.n	80020ae <I2C_ITError+0x1a>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002136:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002138:	6503      	str	r3, [r0, #80]	; 0x50
      if(HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800213a:	f7ff fa13 	bl	8001564 <HAL_DMA_Abort_IT>
 800213e:	2800      	cmp	r0, #0
 8002140:	d0d6      	beq.n	80020f0 <I2C_ITError+0x5c>
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002142:	6822      	ldr	r2, [r4, #0]
 8002144:	6953      	ldr	r3, [r2, #20]
 8002146:	0658      	lsls	r0, r3, #25
 8002148:	d504      	bpl.n	8002154 <I2C_ITError+0xc0>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800214a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800214c:	6912      	ldr	r2, [r2, #16]
 800214e:	1c59      	adds	r1, r3, #1
 8002150:	6261      	str	r1, [r4, #36]	; 0x24
 8002152:	701a      	strb	r2, [r3, #0]
        __HAL_I2C_DISABLE(hi2c);
 8002154:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002156:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        __HAL_I2C_DISABLE(hi2c);
 8002158:	6813      	ldr	r3, [r2, #0]
 800215a:	f023 0301 	bic.w	r3, r3, #1
 800215e:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8002160:	2320      	movs	r3, #32
 8002162:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8002166:	e7c1      	b.n	80020ec <I2C_ITError+0x58>
  else if(hi2c->State == HAL_I2C_STATE_ABORT)
 8002168:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 800216c:	2960      	cmp	r1, #96	; 0x60
 800216e:	d114      	bne.n	800219a <I2C_ITError+0x106>
    hi2c->State = HAL_I2C_STATE_READY;
 8002170:	2120      	movs	r1, #32
 8002172:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002176:	6422      	str	r2, [r4, #64]	; 0x40
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002178:	695a      	ldr	r2, [r3, #20]
 800217a:	0651      	lsls	r1, r2, #25
 800217c:	d504      	bpl.n	8002188 <I2C_ITError+0xf4>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800217e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	1c51      	adds	r1, r2, #1
 8002184:	6261      	str	r1, [r4, #36]	; 0x24
 8002186:	7013      	strb	r3, [r2, #0]
    __HAL_I2C_DISABLE(hi2c);
 8002188:	6822      	ldr	r2, [r4, #0]
 800218a:	6813      	ldr	r3, [r2, #0]
 800218c:	f023 0301 	bic.w	r3, r3, #1
 8002190:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8002192:	4620      	mov	r0, r4
 8002194:	f7ff ff7d 	bl	8002092 <HAL_I2C_AbortCpltCallback>
 8002198:	e7aa      	b.n	80020f0 <I2C_ITError+0x5c>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800219a:	695a      	ldr	r2, [r3, #20]
 800219c:	0652      	lsls	r2, r2, #25
 800219e:	d504      	bpl.n	80021aa <I2C_ITError+0x116>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80021a0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	1c51      	adds	r1, r2, #1
 80021a6:	6261      	str	r1, [r4, #36]	; 0x24
 80021a8:	7013      	strb	r3, [r2, #0]
    HAL_I2C_ErrorCallback(hi2c);
 80021aa:	4620      	mov	r0, r4
 80021ac:	f7ff ff70 	bl	8002090 <HAL_I2C_ErrorCallback>
 80021b0:	e79e      	b.n	80020f0 <I2C_ITError+0x5c>
 80021b2:	bf00      	nop
 80021b4:	080029c5 	.word	0x080029c5
 80021b8:	ffff0000 	.word	0xffff0000

080021bc <HAL_I2C_EV_IRQHandler>:
  uint32_t sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80021bc:	6803      	ldr	r3, [r0, #0]
{
 80021be:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80021c0:	699d      	ldr	r5, [r3, #24]
  uint32_t sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80021c2:	6959      	ldr	r1, [r3, #20]
  uint32_t itsources    = READ_REG(hi2c->Instance->CR2);
 80021c4:	685a      	ldr	r2, [r3, #4]
  uint32_t CurrentMode  = hi2c->Mode;
 80021c6:	f890 403e 	ldrb.w	r4, [r0, #62]	; 0x3e
 80021ca:	b2e4      	uxtb	r4, r4
  if((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80021cc:	2c10      	cmp	r4, #16
{
 80021ce:	b08d      	sub	sp, #52	; 0x34
  if((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80021d0:	d002      	beq.n	80021d8 <HAL_I2C_EV_IRQHandler+0x1c>
 80021d2:	2c40      	cmp	r4, #64	; 0x40
 80021d4:	f040 8255 	bne.w	8002682 <HAL_I2C_EV_IRQHandler+0x4c6>
    if(((sr1itflags & I2C_FLAG_SB) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80021d8:	f011 1f01 	tst.w	r1, #65537	; 0x10001
 80021dc:	d066      	beq.n	80022ac <HAL_I2C_EV_IRQHandler+0xf0>
 80021de:	0597      	lsls	r7, r2, #22
 80021e0:	d564      	bpl.n	80022ac <HAL_I2C_EV_IRQHandler+0xf0>
  if(hi2c->Mode == HAL_I2C_MODE_MEM)
 80021e2:	f890 403e 	ldrb.w	r4, [r0, #62]	; 0x3e
 80021e6:	2c40      	cmp	r4, #64	; 0x40
 80021e8:	d143      	bne.n	8002272 <HAL_I2C_EV_IRQHandler+0xb6>
    if(hi2c->EventCount == 0U)
 80021ea:	6d04      	ldr	r4, [r0, #80]	; 0x50
 80021ec:	2c00      	cmp	r4, #0
 80021ee:	d13b      	bne.n	8002268 <HAL_I2C_EV_IRQHandler+0xac>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80021f0:	6c44      	ldr	r4, [r0, #68]	; 0x44
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80021f2:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80021f6:	611c      	str	r4, [r3, #16]
    if((sr2itflags & I2C_FLAG_TRA) != RESET)
 80021f8:	4e98      	ldr	r6, [pc, #608]	; (800245c <HAL_I2C_EV_IRQHandler+0x2a0>)
 80021fa:	4c99      	ldr	r4, [pc, #612]	; (8002460 <HAL_I2C_EV_IRQHandler+0x2a4>)
 80021fc:	402e      	ands	r6, r5
 80021fe:	400c      	ands	r4, r1
 8002200:	2e00      	cmp	r6, #0
 8002202:	f000 819f 	beq.w	8002544 <HAL_I2C_EV_IRQHandler+0x388>
      if(((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 8002206:	4d97      	ldr	r5, [pc, #604]	; (8002464 <HAL_I2C_EV_IRQHandler+0x2a8>)
 8002208:	400d      	ands	r5, r1
 800220a:	2d00      	cmp	r5, #0
 800220c:	f000 8166 	beq.w	80024dc <HAL_I2C_EV_IRQHandler+0x320>
 8002210:	0555      	lsls	r5, r2, #21
 8002212:	f140 8163 	bpl.w	80024dc <HAL_I2C_EV_IRQHandler+0x320>
 8002216:	2c00      	cmp	r4, #0
 8002218:	f040 8160 	bne.w	80024dc <HAL_I2C_EV_IRQHandler+0x320>
  uint32_t CurrentState       = hi2c->State;
 800221c:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  if((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002220:	8d05      	ldrh	r5, [r0, #40]	; 0x28
  uint32_t CurrentMode        = hi2c->Mode;
 8002222:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002226:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  uint32_t CurrentState       = hi2c->State;
 8002228:	b2d2      	uxtb	r2, r2
  uint32_t CurrentMode        = hi2c->Mode;
 800222a:	b2c9      	uxtb	r1, r1
  if((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800222c:	2d00      	cmp	r5, #0
 800222e:	f040 8105 	bne.w	800243c <HAL_I2C_EV_IRQHandler+0x280>
 8002232:	2a21      	cmp	r2, #33	; 0x21
 8002234:	f040 8104 	bne.w	8002440 <HAL_I2C_EV_IRQHandler+0x284>
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002238:	2c04      	cmp	r4, #4
 800223a:	f000 816c 	beq.w	8002516 <HAL_I2C_EV_IRQHandler+0x35a>
 800223e:	2c08      	cmp	r4, #8
 8002240:	f000 8169 	beq.w	8002516 <HAL_I2C_EV_IRQHandler+0x35a>
 8002244:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
 8002248:	f000 8165 	beq.w	8002516 <HAL_I2C_EV_IRQHandler+0x35a>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800224c:	685a      	ldr	r2, [r3, #4]
 800224e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002252:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002254:	2311      	movs	r3, #17
 8002256:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002258:	f880 503e 	strb.w	r5, [r0, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800225c:	2320      	movs	r3, #32
 800225e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002262:	f7ff ff0d 	bl	8002080 <HAL_I2C_MasterTxCpltCallback>
 8002266:	e0f6      	b.n	8002456 <HAL_I2C_EV_IRQHandler+0x29a>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002268:	6c44      	ldr	r4, [r0, #68]	; 0x44
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800226a:	f044 0401 	orr.w	r4, r4, #1
 800226e:	b2e4      	uxtb	r4, r4
 8002270:	e7c1      	b.n	80021f6 <HAL_I2C_EV_IRQHandler+0x3a>
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002272:	6904      	ldr	r4, [r0, #16]
 8002274:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
 8002278:	d105      	bne.n	8002286 <HAL_I2C_EV_IRQHandler+0xca>
      if(hi2c->State == HAL_I2C_STATE_BUSY_TX) 
 800227a:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 800227e:	2c21      	cmp	r4, #33	; 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002280:	6c44      	ldr	r4, [r0, #68]	; 0x44
      if(hi2c->State == HAL_I2C_STATE_BUSY_TX) 
 8002282:	d1f2      	bne.n	800226a <HAL_I2C_EV_IRQHandler+0xae>
 8002284:	e7b5      	b.n	80021f2 <HAL_I2C_EV_IRQHandler+0x36>
      if(hi2c->EventCount == 0U)
 8002286:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8002288:	b934      	cbnz	r4, 8002298 <HAL_I2C_EV_IRQHandler+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800228a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800228c:	11e4      	asrs	r4, r4, #7
 800228e:	f004 0406 	and.w	r4, r4, #6
 8002292:	f044 04f0 	orr.w	r4, r4, #240	; 0xf0
 8002296:	e7ae      	b.n	80021f6 <HAL_I2C_EV_IRQHandler+0x3a>
      else if(hi2c->EventCount == 1U)
 8002298:	6d04      	ldr	r4, [r0, #80]	; 0x50
 800229a:	2c01      	cmp	r4, #1
 800229c:	d1ac      	bne.n	80021f8 <HAL_I2C_EV_IRQHandler+0x3c>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800229e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80022a0:	11e4      	asrs	r4, r4, #7
 80022a2:	f004 0406 	and.w	r4, r4, #6
 80022a6:	f044 04f1 	orr.w	r4, r4, #241	; 0xf1
 80022aa:	e7a4      	b.n	80021f6 <HAL_I2C_EV_IRQHandler+0x3a>
    else if(((sr1itflags & I2C_FLAG_ADD10) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80022ac:	4c6e      	ldr	r4, [pc, #440]	; (8002468 <HAL_I2C_EV_IRQHandler+0x2ac>)
 80022ae:	400c      	ands	r4, r1
 80022b0:	b11c      	cbz	r4, 80022ba <HAL_I2C_EV_IRQHandler+0xfe>
 80022b2:	0596      	lsls	r6, r2, #22
 80022b4:	d501      	bpl.n	80022ba <HAL_I2C_EV_IRQHandler+0xfe>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80022b6:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80022b8:	e7d9      	b.n	800226e <HAL_I2C_EV_IRQHandler+0xb2>
    else if(((sr1itflags & I2C_FLAG_ADDR) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80022ba:	4c6c      	ldr	r4, [pc, #432]	; (800246c <HAL_I2C_EV_IRQHandler+0x2b0>)
 80022bc:	400c      	ands	r4, r1
 80022be:	2c00      	cmp	r4, #0
 80022c0:	d09a      	beq.n	80021f8 <HAL_I2C_EV_IRQHandler+0x3c>
 80022c2:	0594      	lsls	r4, r2, #22
 80022c4:	d598      	bpl.n	80021f8 <HAL_I2C_EV_IRQHandler+0x3c>
  uint32_t CurrentMode        = hi2c->Mode;
 80022c6:	f890 403e 	ldrb.w	r4, [r0, #62]	; 0x3e
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80022ca:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  uint32_t Prev_State         = hi2c->PreviousState;
 80022cc:	f8d0 e030 	ldr.w	lr, [r0, #48]	; 0x30
  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80022d0:	f890 703d 	ldrb.w	r7, [r0, #61]	; 0x3d
 80022d4:	2f22      	cmp	r7, #34	; 0x22
  uint32_t CurrentMode        = hi2c->Mode;
 80022d6:	b2e4      	uxtb	r4, r4
  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80022d8:	f040 80a8 	bne.w	800242c <HAL_I2C_EV_IRQHandler+0x270>
    if((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80022dc:	6d07      	ldr	r7, [r0, #80]	; 0x50
 80022de:	b947      	cbnz	r7, 80022f2 <HAL_I2C_EV_IRQHandler+0x136>
 80022e0:	2c40      	cmp	r4, #64	; 0x40
 80022e2:	d106      	bne.n	80022f2 <HAL_I2C_EV_IRQHandler+0x136>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022e4:	9701      	str	r7, [sp, #4]
 80022e6:	695c      	ldr	r4, [r3, #20]
 80022e8:	9401      	str	r4, [sp, #4]
 80022ea:	699c      	ldr	r4, [r3, #24]
 80022ec:	9401      	str	r4, [sp, #4]
 80022ee:	9c01      	ldr	r4, [sp, #4]
 80022f0:	e782      	b.n	80021f8 <HAL_I2C_EV_IRQHandler+0x3c>
    else if((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80022f2:	6d04      	ldr	r4, [r0, #80]	; 0x50
 80022f4:	b98c      	cbnz	r4, 800231a <HAL_I2C_EV_IRQHandler+0x15e>
 80022f6:	6907      	ldr	r7, [r0, #16]
 80022f8:	f5b7 4f40 	cmp.w	r7, #49152	; 0xc000
 80022fc:	d10d      	bne.n	800231a <HAL_I2C_EV_IRQHandler+0x15e>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022fe:	9402      	str	r4, [sp, #8]
 8002300:	695c      	ldr	r4, [r3, #20]
 8002302:	9402      	str	r4, [sp, #8]
 8002304:	699c      	ldr	r4, [r3, #24]
 8002306:	9402      	str	r4, [sp, #8]
 8002308:	9c02      	ldr	r4, [sp, #8]
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800230a:	681c      	ldr	r4, [r3, #0]
 800230c:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8002310:	601c      	str	r4, [r3, #0]
      hi2c->EventCount++;
 8002312:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8002314:	3401      	adds	r4, #1
      hi2c->EventCount = 0U;
 8002316:	6504      	str	r4, [r0, #80]	; 0x50
 8002318:	e76e      	b.n	80021f8 <HAL_I2C_EV_IRQHandler+0x3c>
      if(hi2c->XferCount == 0U)
 800231a:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 800231c:	b2a4      	uxth	r4, r4
 800231e:	b954      	cbnz	r4, 8002336 <HAL_I2C_EV_IRQHandler+0x17a>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002320:	9403      	str	r4, [sp, #12]
 8002322:	695c      	ldr	r4, [r3, #20]
 8002324:	9403      	str	r4, [sp, #12]
 8002326:	699c      	ldr	r4, [r3, #24]
 8002328:	9403      	str	r4, [sp, #12]
 800232a:	9c03      	ldr	r4, [sp, #12]
            hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800232c:	681c      	ldr	r4, [r3, #0]
 800232e:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 8002332:	601c      	str	r4, [r3, #0]
 8002334:	e019      	b.n	800236a <HAL_I2C_EV_IRQHandler+0x1ae>
      else if(hi2c->XferCount == 1U)   
 8002336:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 8002338:	b2a4      	uxth	r4, r4
 800233a:	2c01      	cmp	r4, #1
 800233c:	d142      	bne.n	80023c4 <HAL_I2C_EV_IRQHandler+0x208>
        if(CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800233e:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
 8002342:	d11b      	bne.n	800237c <HAL_I2C_EV_IRQHandler+0x1c0>
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002344:	681c      	ldr	r4, [r3, #0]
 8002346:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 800234a:	601c      	str	r4, [r3, #0]
          if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800234c:	685c      	ldr	r4, [r3, #4]
 800234e:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
 8002352:	d00c      	beq.n	800236e <HAL_I2C_EV_IRQHandler+0x1b2>
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002354:	681c      	ldr	r4, [r3, #0]
 8002356:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 800235a:	601c      	str	r4, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800235c:	2400      	movs	r4, #0
 800235e:	9404      	str	r4, [sp, #16]
 8002360:	695c      	ldr	r4, [r3, #20]
 8002362:	9404      	str	r4, [sp, #16]
 8002364:	699c      	ldr	r4, [r3, #24]
 8002366:	9404      	str	r4, [sp, #16]
 8002368:	9c04      	ldr	r4, [sp, #16]
      hi2c->EventCount = 0U;
 800236a:	2400      	movs	r4, #0
 800236c:	e7d3      	b.n	8002316 <HAL_I2C_EV_IRQHandler+0x15a>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800236e:	9405      	str	r4, [sp, #20]
 8002370:	695c      	ldr	r4, [r3, #20]
 8002372:	9405      	str	r4, [sp, #20]
 8002374:	699c      	ldr	r4, [r3, #24]
 8002376:	9405      	str	r4, [sp, #20]
 8002378:	9c05      	ldr	r4, [sp, #20]
 800237a:	e7d7      	b.n	800232c <HAL_I2C_EV_IRQHandler+0x170>
        else if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800237c:	2e04      	cmp	r6, #4
 800237e:	d015      	beq.n	80023ac <HAL_I2C_EV_IRQHandler+0x1f0>
 8002380:	2e08      	cmp	r6, #8
 8002382:	d013      	beq.n	80023ac <HAL_I2C_EV_IRQHandler+0x1f0>
          && (Prev_State != I2C_STATE_MASTER_BUSY_RX))
 8002384:	f1be 0f12 	cmp.w	lr, #18
 8002388:	d010      	beq.n	80023ac <HAL_I2C_EV_IRQHandler+0x1f0>
          if(hi2c->XferOptions != I2C_NEXT_FRAME)
 800238a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800238c:	2c02      	cmp	r4, #2
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800238e:	681c      	ldr	r4, [r3, #0]
 8002390:	bf14      	ite	ne
 8002392:	f424 6480 	bicne.w	r4, r4, #1024	; 0x400
            hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8002396:	f444 6480 	orreq.w	r4, r4, #1024	; 0x400
 800239a:	601c      	str	r4, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800239c:	2400      	movs	r4, #0
 800239e:	9406      	str	r4, [sp, #24]
 80023a0:	695c      	ldr	r4, [r3, #20]
 80023a2:	9406      	str	r4, [sp, #24]
 80023a4:	699c      	ldr	r4, [r3, #24]
 80023a6:	9406      	str	r4, [sp, #24]
 80023a8:	9c06      	ldr	r4, [sp, #24]
 80023aa:	e7de      	b.n	800236a <HAL_I2C_EV_IRQHandler+0x1ae>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80023ac:	681c      	ldr	r4, [r3, #0]
 80023ae:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 80023b2:	601c      	str	r4, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023b4:	2400      	movs	r4, #0
 80023b6:	9407      	str	r4, [sp, #28]
 80023b8:	695c      	ldr	r4, [r3, #20]
 80023ba:	9407      	str	r4, [sp, #28]
 80023bc:	699c      	ldr	r4, [r3, #24]
 80023be:	9407      	str	r4, [sp, #28]
 80023c0:	9c07      	ldr	r4, [sp, #28]
 80023c2:	e7b3      	b.n	800232c <HAL_I2C_EV_IRQHandler+0x170>
      else if(hi2c->XferCount == 2U)
 80023c4:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 80023c6:	b2a4      	uxth	r4, r4
 80023c8:	2c02      	cmp	r4, #2
 80023ca:	d11c      	bne.n	8002406 <HAL_I2C_EV_IRQHandler+0x24a>
        if(hi2c->XferOptions != I2C_NEXT_FRAME)
 80023cc:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80023ce:	2c02      	cmp	r4, #2
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80023d0:	681c      	ldr	r4, [r3, #0]
 80023d2:	bf1d      	ittte	ne
 80023d4:	f424 6480 	bicne.w	r4, r4, #1024	; 0x400
 80023d8:	601c      	strne	r4, [r3, #0]
          hi2c->Instance->CR1 |= I2C_CR1_POS;
 80023da:	681c      	ldrne	r4, [r3, #0]
          hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80023dc:	f444 6480 	orreq.w	r4, r4, #1024	; 0x400
          hi2c->Instance->CR1 |= I2C_CR1_POS;
 80023e0:	bf18      	it	ne
 80023e2:	f444 6400 	orrne.w	r4, r4, #2048	; 0x800
          hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80023e6:	601c      	str	r4, [r3, #0]
        if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80023e8:	685c      	ldr	r4, [r3, #4]
 80023ea:	0527      	lsls	r7, r4, #20
          hi2c->Instance->CR2 |= I2C_CR2_LAST;
 80023ec:	bf42      	ittt	mi
 80023ee:	685c      	ldrmi	r4, [r3, #4]
 80023f0:	f444 5480 	orrmi.w	r4, r4, #4096	; 0x1000
 80023f4:	605c      	strmi	r4, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023f6:	2400      	movs	r4, #0
 80023f8:	9408      	str	r4, [sp, #32]
 80023fa:	695c      	ldr	r4, [r3, #20]
 80023fc:	9408      	str	r4, [sp, #32]
 80023fe:	699c      	ldr	r4, [r3, #24]
 8002400:	9408      	str	r4, [sp, #32]
 8002402:	9c08      	ldr	r4, [sp, #32]
 8002404:	e7b1      	b.n	800236a <HAL_I2C_EV_IRQHandler+0x1ae>
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8002406:	681c      	ldr	r4, [r3, #0]
 8002408:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 800240c:	601c      	str	r4, [r3, #0]
        if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800240e:	685c      	ldr	r4, [r3, #4]
 8002410:	0526      	lsls	r6, r4, #20
          hi2c->Instance->CR2 |= I2C_CR2_LAST;
 8002412:	bf42      	ittt	mi
 8002414:	685c      	ldrmi	r4, [r3, #4]
 8002416:	f444 5480 	orrmi.w	r4, r4, #4096	; 0x1000
 800241a:	605c      	strmi	r4, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800241c:	2400      	movs	r4, #0
 800241e:	9409      	str	r4, [sp, #36]	; 0x24
 8002420:	695c      	ldr	r4, [r3, #20]
 8002422:	9409      	str	r4, [sp, #36]	; 0x24
 8002424:	699c      	ldr	r4, [r3, #24]
 8002426:	9409      	str	r4, [sp, #36]	; 0x24
 8002428:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800242a:	e79e      	b.n	800236a <HAL_I2C_EV_IRQHandler+0x1ae>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800242c:	2400      	movs	r4, #0
 800242e:	940a      	str	r4, [sp, #40]	; 0x28
 8002430:	695c      	ldr	r4, [r3, #20]
 8002432:	940a      	str	r4, [sp, #40]	; 0x28
 8002434:	699c      	ldr	r4, [r3, #24]
 8002436:	940a      	str	r4, [sp, #40]	; 0x28
 8002438:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800243a:	e6dd      	b.n	80021f8 <HAL_I2C_EV_IRQHandler+0x3c>
  else if((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800243c:	2a21      	cmp	r2, #33	; 0x21
 800243e:	d003      	beq.n	8002448 <HAL_I2C_EV_IRQHandler+0x28c>
 8002440:	2940      	cmp	r1, #64	; 0x40
 8002442:	d108      	bne.n	8002456 <HAL_I2C_EV_IRQHandler+0x29a>
    ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002444:	2a22      	cmp	r2, #34	; 0x22
 8002446:	d106      	bne.n	8002456 <HAL_I2C_EV_IRQHandler+0x29a>
    if(hi2c->XferCount == 0U)
 8002448:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 800244a:	b292      	uxth	r2, r2
 800244c:	b982      	cbnz	r2, 8002470 <HAL_I2C_EV_IRQHandler+0x2b4>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800244e:	685a      	ldr	r2, [r3, #4]
 8002450:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002454:	605a      	str	r2, [r3, #4]
}
 8002456:	b00d      	add	sp, #52	; 0x34
 8002458:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800245a:	bf00      	nop
 800245c:	00100004 	.word	0x00100004
 8002460:	00010004 	.word	0x00010004
 8002464:	00010080 	.word	0x00010080
 8002468:	00010008 	.word	0x00010008
 800246c:	00010002 	.word	0x00010002
      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8002470:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8002474:	2a40      	cmp	r2, #64	; 0x40
 8002476:	d127      	bne.n	80024c8 <HAL_I2C_EV_IRQHandler+0x30c>
        if(hi2c->EventCount == 0)
 8002478:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800247a:	b97a      	cbnz	r2, 800249c <HAL_I2C_EV_IRQHandler+0x2e0>
          if(hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800247c:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800247e:	2a01      	cmp	r2, #1
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002480:	6c82      	ldr	r2, [r0, #72]	; 0x48
          if(hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002482:	d105      	bne.n	8002490 <HAL_I2C_EV_IRQHandler+0x2d4>
 8002484:	b2d2      	uxtb	r2, r2
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002486:	611a      	str	r2, [r3, #16]
            hi2c->EventCount += 2;
 8002488:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800248a:	3302      	adds	r3, #2
            hi2c->EventCount++;
 800248c:	6503      	str	r3, [r0, #80]	; 0x50
 800248e:	e7e2      	b.n	8002456 <HAL_I2C_EV_IRQHandler+0x29a>
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002490:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002494:	611a      	str	r2, [r3, #16]
            hi2c->EventCount++;
 8002496:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002498:	3301      	adds	r3, #1
 800249a:	e7f7      	b.n	800248c <HAL_I2C_EV_IRQHandler+0x2d0>
        else if(hi2c->EventCount == 1)
 800249c:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800249e:	2a01      	cmp	r2, #1
 80024a0:	d102      	bne.n	80024a8 <HAL_I2C_EV_IRQHandler+0x2ec>
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80024a2:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80024a4:	b2d2      	uxtb	r2, r2
 80024a6:	e7f5      	b.n	8002494 <HAL_I2C_EV_IRQHandler+0x2d8>
        else if(hi2c->EventCount == 2)
 80024a8:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80024aa:	2a02      	cmp	r2, #2
 80024ac:	d1d3      	bne.n	8002456 <HAL_I2C_EV_IRQHandler+0x29a>
          if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80024ae:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 80024b2:	2a22      	cmp	r2, #34	; 0x22
 80024b4:	d104      	bne.n	80024c0 <HAL_I2C_EV_IRQHandler+0x304>
            hi2c->Instance->CR1 |= I2C_CR1_START;
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	e7ca      	b.n	8002456 <HAL_I2C_EV_IRQHandler+0x29a>
          else if(hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80024c0:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 80024c4:	2a21      	cmp	r2, #33	; 0x21
 80024c6:	d1c6      	bne.n	8002456 <HAL_I2C_EV_IRQHandler+0x29a>
    hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80024c8:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80024ca:	1c51      	adds	r1, r2, #1
 80024cc:	6241      	str	r1, [r0, #36]	; 0x24
 80024ce:	7812      	ldrb	r2, [r2, #0]
 80024d0:	611a      	str	r2, [r3, #16]
    hi2c->XferCount--;
 80024d2:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80024d4:	3b01      	subs	r3, #1
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	8543      	strh	r3, [r0, #42]	; 0x2a
}
 80024da:	e7bc      	b.n	8002456 <HAL_I2C_EV_IRQHandler+0x29a>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80024dc:	2c00      	cmp	r4, #0
 80024de:	d0ba      	beq.n	8002456 <HAL_I2C_EV_IRQHandler+0x29a>
 80024e0:	0594      	lsls	r4, r2, #22
 80024e2:	d5b8      	bpl.n	8002456 <HAL_I2C_EV_IRQHandler+0x29a>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80024e4:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  if(hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80024e6:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 80024ea:	2a21      	cmp	r2, #33	; 0x21
 80024ec:	d1b3      	bne.n	8002456 <HAL_I2C_EV_IRQHandler+0x29a>
    if(hi2c->XferCount != 0U)
 80024ee:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80024f0:	b292      	uxth	r2, r2
 80024f2:	2a00      	cmp	r2, #0
 80024f4:	d1e8      	bne.n	80024c8 <HAL_I2C_EV_IRQHandler+0x30c>
      if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80024f6:	2904      	cmp	r1, #4
 80024f8:	d00d      	beq.n	8002516 <HAL_I2C_EV_IRQHandler+0x35a>
 80024fa:	2908      	cmp	r1, #8
 80024fc:	d00b      	beq.n	8002516 <HAL_I2C_EV_IRQHandler+0x35a>
 80024fe:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8002502:	d008      	beq.n	8002516 <HAL_I2C_EV_IRQHandler+0x35a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002504:	6859      	ldr	r1, [r3, #4]
 8002506:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 800250a:	6059      	str	r1, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800250c:	2311      	movs	r3, #17
 800250e:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002510:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
 8002514:	e6a2      	b.n	800225c <HAL_I2C_EV_IRQHandler+0xa0>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002516:	685a      	ldr	r2, [r3, #4]
 8002518:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800251c:	605a      	str	r2, [r3, #4]
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002524:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002526:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8002528:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 800252a:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800252c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
        if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8002530:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002534:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8002538:	2a40      	cmp	r2, #64	; 0x40
 800253a:	f47f ae92 	bne.w	8002262 <HAL_I2C_EV_IRQHandler+0xa6>
          HAL_I2C_MemTxCpltCallback(hi2c);
 800253e:	f7ff fda5 	bl	800208c <HAL_I2C_MemTxCpltCallback>
 8002542:	e788      	b.n	8002456 <HAL_I2C_EV_IRQHandler+0x29a>
      if(((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 8002544:	4d90      	ldr	r5, [pc, #576]	; (8002788 <HAL_I2C_EV_IRQHandler+0x5cc>)
 8002546:	400d      	ands	r5, r1
 8002548:	2d00      	cmp	r5, #0
 800254a:	d041      	beq.n	80025d0 <HAL_I2C_EV_IRQHandler+0x414>
 800254c:	0551      	lsls	r1, r2, #21
 800254e:	d53f      	bpl.n	80025d0 <HAL_I2C_EV_IRQHandler+0x414>
 8002550:	2c00      	cmp	r4, #0
 8002552:	d13d      	bne.n	80025d0 <HAL_I2C_EV_IRQHandler+0x414>
  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002554:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8002558:	2a22      	cmp	r2, #34	; 0x22
 800255a:	f47f af7c 	bne.w	8002456 <HAL_I2C_EV_IRQHandler+0x29a>
    tmp = hi2c->XferCount;
 800255e:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8002560:	b292      	uxth	r2, r2
    if(tmp > 3U)
 8002562:	2a03      	cmp	r2, #3
 8002564:	d913      	bls.n	800258e <HAL_I2C_EV_IRQHandler+0x3d2>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002566:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	1c51      	adds	r1, r2, #1
 800256c:	6241      	str	r1, [r0, #36]	; 0x24
 800256e:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 8002570:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002572:	3b01      	subs	r3, #1
 8002574:	b29b      	uxth	r3, r3
 8002576:	8543      	strh	r3, [r0, #42]	; 0x2a
      if(hi2c->XferCount == 3)
 8002578:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800257a:	b29b      	uxth	r3, r3
 800257c:	2b03      	cmp	r3, #3
 800257e:	f47f af6a 	bne.w	8002456 <HAL_I2C_EV_IRQHandler+0x29a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002582:	6802      	ldr	r2, [r0, #0]
 8002584:	6853      	ldr	r3, [r2, #4]
 8002586:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800258a:	6053      	str	r3, [r2, #4]
 800258c:	e763      	b.n	8002456 <HAL_I2C_EV_IRQHandler+0x29a>
    else if((tmp == 1U) || (tmp == 0U))
 800258e:	2a01      	cmp	r2, #1
 8002590:	f63f af61 	bhi.w	8002456 <HAL_I2C_EV_IRQHandler+0x29a>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800259a:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800259c:	685a      	ldr	r2, [r3, #4]
 800259e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80025a2:	605a      	str	r2, [r3, #4]
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80025a4:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80025a6:	691b      	ldr	r3, [r3, #16]
 80025a8:	1c51      	adds	r1, r2, #1
 80025aa:	6241      	str	r1, [r0, #36]	; 0x24
 80025ac:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 80025ae:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80025b0:	3b01      	subs	r3, #1
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 80025b6:	2320      	movs	r3, #32
 80025b8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      hi2c->PreviousState = I2C_STATE_NONE;
 80025bc:	6304      	str	r4, [r0, #48]	; 0x30
      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 80025be:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80025c2:	f880 403e 	strb.w	r4, [r0, #62]	; 0x3e
      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 80025c6:	2b40      	cmp	r3, #64	; 0x40
    if(hi2c->Mode == HAL_I2C_MODE_MEM)
 80025c8:	d158      	bne.n	800267c <HAL_I2C_EV_IRQHandler+0x4c0>
      HAL_I2C_MemRxCpltCallback(hi2c);
 80025ca:	f7ff fd60 	bl	800208e <HAL_I2C_MemRxCpltCallback>
 80025ce:	e742      	b.n	8002456 <HAL_I2C_EV_IRQHandler+0x29a>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80025d0:	2c00      	cmp	r4, #0
 80025d2:	f43f af40 	beq.w	8002456 <HAL_I2C_EV_IRQHandler+0x29a>
 80025d6:	0597      	lsls	r7, r2, #22
 80025d8:	f57f af3d 	bpl.w	8002456 <HAL_I2C_EV_IRQHandler+0x29a>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80025dc:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  if(hi2c->XferCount == 4U)
 80025de:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80025e0:	b292      	uxth	r2, r2
 80025e2:	2a04      	cmp	r2, #4
 80025e4:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80025e6:	d108      	bne.n	80025fa <HAL_I2C_EV_IRQHandler+0x43e>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80025e8:	6859      	ldr	r1, [r3, #4]
 80025ea:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80025ee:	6059      	str	r1, [r3, #4]
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80025f0:	1c51      	adds	r1, r2, #1
 80025f2:	691b      	ldr	r3, [r3, #16]
 80025f4:	6241      	str	r1, [r0, #36]	; 0x24
 80025f6:	7013      	strb	r3, [r2, #0]
 80025f8:	e76b      	b.n	80024d2 <HAL_I2C_EV_IRQHandler+0x316>
  else if(hi2c->XferCount == 3U)
 80025fa:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 80025fc:	b2a4      	uxth	r4, r4
 80025fe:	2c03      	cmp	r4, #3
 8002600:	d108      	bne.n	8002614 <HAL_I2C_EV_IRQHandler+0x458>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002602:	6859      	ldr	r1, [r3, #4]
 8002604:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8002608:	6059      	str	r1, [r3, #4]
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800260a:	6819      	ldr	r1, [r3, #0]
 800260c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8002610:	6019      	str	r1, [r3, #0]
 8002612:	e7ed      	b.n	80025f0 <HAL_I2C_EV_IRQHandler+0x434>
  else if(hi2c->XferCount == 2U)
 8002614:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 8002616:	b2a4      	uxth	r4, r4
 8002618:	2c02      	cmp	r4, #2
 800261a:	d1e9      	bne.n	80025f0 <HAL_I2C_EV_IRQHandler+0x434>
    if((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME))
 800261c:	3901      	subs	r1, #1
 800261e:	2901      	cmp	r1, #1
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002620:	6819      	ldr	r1, [r3, #0]
 8002622:	bf9d      	ittte	ls
 8002624:	f421 6180 	bicls.w	r1, r1, #1024	; 0x400
 8002628:	6019      	strls	r1, [r3, #0]
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800262a:	6819      	ldrls	r1, [r3, #0]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800262c:	f441 7100 	orrhi.w	r1, r1, #512	; 0x200
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002630:	bf98      	it	ls
 8002632:	f441 7180 	orrls.w	r1, r1, #256	; 0x100
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002636:	6019      	str	r1, [r3, #0]
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	1c51      	adds	r1, r2, #1
 800263c:	6241      	str	r1, [r0, #36]	; 0x24
 800263e:	7013      	strb	r3, [r2, #0]
    hi2c->XferCount--;
 8002640:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002642:	3b01      	subs	r3, #1
 8002644:	b29b      	uxth	r3, r3
 8002646:	8543      	strh	r3, [r0, #42]	; 0x2a
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002648:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800264a:	1c5a      	adds	r2, r3, #1
 800264c:	6242      	str	r2, [r0, #36]	; 0x24
 800264e:	6802      	ldr	r2, [r0, #0]
 8002650:	6912      	ldr	r2, [r2, #16]
 8002652:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8002654:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002656:	6802      	ldr	r2, [r0, #0]
    hi2c->XferCount--;
 8002658:	3b01      	subs	r3, #1
 800265a:	b29b      	uxth	r3, r3
 800265c:	8543      	strh	r3, [r0, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800265e:	6853      	ldr	r3, [r2, #4]
 8002660:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002664:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002666:	2320      	movs	r3, #32
 8002668:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 800266c:	2300      	movs	r3, #0
 800266e:	6303      	str	r3, [r0, #48]	; 0x30
    if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8002670:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002674:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8002678:	2a40      	cmp	r2, #64	; 0x40
 800267a:	e7a5      	b.n	80025c8 <HAL_I2C_EV_IRQHandler+0x40c>
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800267c:	f7ff fd01 	bl	8002082 <HAL_I2C_MasterRxCpltCallback>
 8002680:	e6e9      	b.n	8002456 <HAL_I2C_EV_IRQHandler+0x29a>
    if(((sr1itflags & I2C_FLAG_ADDR) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8002682:	4c42      	ldr	r4, [pc, #264]	; (800278c <HAL_I2C_EV_IRQHandler+0x5d0>)
 8002684:	400c      	ands	r4, r1
 8002686:	b174      	cbz	r4, 80026a6 <HAL_I2C_EV_IRQHandler+0x4ea>
 8002688:	0596      	lsls	r6, r2, #22
 800268a:	d50c      	bpl.n	80026a6 <HAL_I2C_EV_IRQHandler+0x4ea>
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TRA) == RESET)
 800268c:	6999      	ldr	r1, [r3, #24]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_DUALF) == RESET)
 800268e:	699b      	ldr	r3, [r3, #24]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TRA) == RESET)
 8002690:	f081 0104 	eor.w	r1, r1, #4
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_DUALF) == RESET)
 8002694:	061d      	lsls	r5, r3, #24
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002696:	f3c1 0180 	ubfx	r1, r1, #2, #1
    SlaveAddrCode = hi2c->Init.OwnAddress1;
 800269a:	bf54      	ite	pl
 800269c:	8982      	ldrhpl	r2, [r0, #12]
    SlaveAddrCode = hi2c->Init.OwnAddress2;
 800269e:	8b02      	ldrhmi	r2, [r0, #24]
  HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80026a0:	f7ff fcf2 	bl	8002088 <HAL_I2C_AddrCallback>
 80026a4:	e6d7      	b.n	8002456 <HAL_I2C_EV_IRQHandler+0x29a>
    else if(((sr1itflags & I2C_FLAG_STOPF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80026a6:	4c3a      	ldr	r4, [pc, #232]	; (8002790 <HAL_I2C_EV_IRQHandler+0x5d4>)
 80026a8:	400c      	ands	r4, r1
 80026aa:	2c00      	cmp	r4, #0
 80026ac:	d074      	beq.n	8002798 <HAL_I2C_EV_IRQHandler+0x5dc>
 80026ae:	0594      	lsls	r4, r2, #22
 80026b0:	d572      	bpl.n	8002798 <HAL_I2C_EV_IRQHandler+0x5dc>
  uint32_t CurrentState = hi2c->State;
 80026b2:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80026b6:	6859      	ldr	r1, [r3, #4]
 80026b8:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 80026bc:	6059      	str	r1, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80026be:	2100      	movs	r1, #0
 80026c0:	910b      	str	r1, [sp, #44]	; 0x2c
 80026c2:	6959      	ldr	r1, [r3, #20]
 80026c4:	910b      	str	r1, [sp, #44]	; 0x2c
 80026c6:	6819      	ldr	r1, [r3, #0]
 80026c8:	f041 0101 	orr.w	r1, r1, #1
 80026cc:	6019      	str	r1, [r3, #0]
 80026ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80026d0:	6819      	ldr	r1, [r3, #0]
 80026d2:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80026d6:	6019      	str	r1, [r3, #0]
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80026d8:	6859      	ldr	r1, [r3, #4]
 80026da:	0509      	lsls	r1, r1, #20
  uint32_t CurrentState = hi2c->State;
 80026dc:	b2d2      	uxtb	r2, r2
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80026de:	d50c      	bpl.n	80026fa <HAL_I2C_EV_IRQHandler+0x53e>
    if((hi2c->State == HAL_I2C_STATE_BUSY_RX) || (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80026e0:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 80026e4:	2922      	cmp	r1, #34	; 0x22
 80026e6:	d003      	beq.n	80026f0 <HAL_I2C_EV_IRQHandler+0x534>
 80026e8:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 80026ec:	292a      	cmp	r1, #42	; 0x2a
 80026ee:	d129      	bne.n	8002744 <HAL_I2C_EV_IRQHandler+0x588>
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 80026f0:	6b81      	ldr	r1, [r0, #56]	; 0x38
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80026f2:	6809      	ldr	r1, [r1, #0]
 80026f4:	6849      	ldr	r1, [r1, #4]
 80026f6:	b289      	uxth	r1, r1
 80026f8:	8541      	strh	r1, [r0, #42]	; 0x2a
  if(hi2c->XferCount != 0U)
 80026fa:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 80026fc:	b289      	uxth	r1, r1
 80026fe:	b1e1      	cbz	r1, 800273a <HAL_I2C_EV_IRQHandler+0x57e>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002700:	6959      	ldr	r1, [r3, #20]
 8002702:	074f      	lsls	r7, r1, #29
 8002704:	d508      	bpl.n	8002718 <HAL_I2C_EV_IRQHandler+0x55c>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002706:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	1c4c      	adds	r4, r1, #1
 800270c:	6244      	str	r4, [r0, #36]	; 0x24
 800270e:	700b      	strb	r3, [r1, #0]
      hi2c->XferCount--;
 8002710:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002712:	3b01      	subs	r3, #1
 8002714:	b29b      	uxth	r3, r3
 8002716:	8543      	strh	r3, [r0, #42]	; 0x2a
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002718:	6801      	ldr	r1, [r0, #0]
 800271a:	694b      	ldr	r3, [r1, #20]
 800271c:	065e      	lsls	r6, r3, #25
 800271e:	d508      	bpl.n	8002732 <HAL_I2C_EV_IRQHandler+0x576>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002720:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002722:	6909      	ldr	r1, [r1, #16]
 8002724:	1c5c      	adds	r4, r3, #1
 8002726:	6244      	str	r4, [r0, #36]	; 0x24
 8002728:	7019      	strb	r1, [r3, #0]
      hi2c->XferCount--;
 800272a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800272c:	3b01      	subs	r3, #1
 800272e:	b29b      	uxth	r3, r3
 8002730:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002732:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002734:	f043 0304 	orr.w	r3, r3, #4
 8002738:	6403      	str	r3, [r0, #64]	; 0x40
  if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800273a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800273c:	b123      	cbz	r3, 8002748 <HAL_I2C_EV_IRQHandler+0x58c>
    I2C_ITError(hi2c);
 800273e:	f7ff fca9 	bl	8002094 <I2C_ITError>
 8002742:	e688      	b.n	8002456 <HAL_I2C_EV_IRQHandler+0x29a>
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8002744:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8002746:	e7d4      	b.n	80026f2 <HAL_I2C_EV_IRQHandler+0x536>
    if((CurrentState == HAL_I2C_STATE_LISTEN ) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN) || \
 8002748:	f1a2 0128 	sub.w	r1, r2, #40	; 0x28
 800274c:	2902      	cmp	r1, #2
 800274e:	d80a      	bhi.n	8002766 <HAL_I2C_EV_IRQHandler+0x5aa>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002750:	4a10      	ldr	r2, [pc, #64]	; (8002794 <HAL_I2C_EV_IRQHandler+0x5d8>)
 8002752:	62c2      	str	r2, [r0, #44]	; 0x2c
      hi2c->State = HAL_I2C_STATE_READY;
 8002754:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 8002756:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002758:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800275c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002760:	f7ff fc93 	bl	800208a <HAL_I2C_ListenCpltCallback>
 8002764:	e677      	b.n	8002456 <HAL_I2C_EV_IRQHandler+0x29a>
      if((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002766:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002768:	2b22      	cmp	r3, #34	; 0x22
 800276a:	d002      	beq.n	8002772 <HAL_I2C_EV_IRQHandler+0x5b6>
 800276c:	2a22      	cmp	r2, #34	; 0x22
 800276e:	f47f ae72 	bne.w	8002456 <HAL_I2C_EV_IRQHandler+0x29a>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002772:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8002774:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8002776:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002778:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800277c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002780:	f7ff fc81 	bl	8002086 <HAL_I2C_SlaveRxCpltCallback>
 8002784:	e667      	b.n	8002456 <HAL_I2C_EV_IRQHandler+0x29a>
 8002786:	bf00      	nop
 8002788:	00010040 	.word	0x00010040
 800278c:	00010002 	.word	0x00010002
 8002790:	00010010 	.word	0x00010010
 8002794:	ffff0000 	.word	0xffff0000
    else if((sr2itflags & I2C_FLAG_TRA) != RESET)
 8002798:	4e39      	ldr	r6, [pc, #228]	; (8002880 <HAL_I2C_EV_IRQHandler+0x6c4>)
 800279a:	4c3a      	ldr	r4, [pc, #232]	; (8002884 <HAL_I2C_EV_IRQHandler+0x6c8>)
 800279c:	402e      	ands	r6, r5
 800279e:	400c      	ands	r4, r1
 80027a0:	2e00      	cmp	r6, #0
 80027a2:	d036      	beq.n	8002812 <HAL_I2C_EV_IRQHandler+0x656>
      if(((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 80027a4:	4d38      	ldr	r5, [pc, #224]	; (8002888 <HAL_I2C_EV_IRQHandler+0x6cc>)
 80027a6:	400d      	ands	r5, r1
 80027a8:	b33d      	cbz	r5, 80027fa <HAL_I2C_EV_IRQHandler+0x63e>
 80027aa:	0555      	lsls	r5, r2, #21
 80027ac:	d525      	bpl.n	80027fa <HAL_I2C_EV_IRQHandler+0x63e>
 80027ae:	bb24      	cbnz	r4, 80027fa <HAL_I2C_EV_IRQHandler+0x63e>
  uint32_t CurrentState = hi2c->State;
 80027b0:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
  if(hi2c->XferCount != 0U)
 80027b4:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80027b6:	b292      	uxth	r2, r2
  uint32_t CurrentState = hi2c->State;
 80027b8:	b2c9      	uxtb	r1, r1
  if(hi2c->XferCount != 0U)
 80027ba:	2a00      	cmp	r2, #0
 80027bc:	f43f ae4b 	beq.w	8002456 <HAL_I2C_EV_IRQHandler+0x29a>
    hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80027c0:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80027c2:	1c54      	adds	r4, r2, #1
 80027c4:	6244      	str	r4, [r0, #36]	; 0x24
 80027c6:	7812      	ldrb	r2, [r2, #0]
 80027c8:	611a      	str	r2, [r3, #16]
    hi2c->XferCount--;
 80027ca:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80027cc:	3a01      	subs	r2, #1
 80027ce:	b292      	uxth	r2, r2
 80027d0:	8542      	strh	r2, [r0, #42]	; 0x2a
    if((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80027d2:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80027d4:	b292      	uxth	r2, r2
 80027d6:	2a00      	cmp	r2, #0
 80027d8:	f47f ae3d 	bne.w	8002456 <HAL_I2C_EV_IRQHandler+0x29a>
 80027dc:	2929      	cmp	r1, #41	; 0x29
 80027de:	f47f ae3a 	bne.w	8002456 <HAL_I2C_EV_IRQHandler+0x29a>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80027e2:	685a      	ldr	r2, [r3, #4]
 80027e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027e8:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80027ea:	2321      	movs	r3, #33	; 0x21
 80027ec:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80027ee:	2328      	movs	r3, #40	; 0x28
 80027f0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80027f4:	f7ff fc46 	bl	8002084 <HAL_I2C_SlaveTxCpltCallback>
 80027f8:	e62d      	b.n	8002456 <HAL_I2C_EV_IRQHandler+0x29a>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80027fa:	2c00      	cmp	r4, #0
 80027fc:	f43f ae2b 	beq.w	8002456 <HAL_I2C_EV_IRQHandler+0x29a>
 8002800:	0594      	lsls	r4, r2, #22
 8002802:	f57f ae28 	bpl.w	8002456 <HAL_I2C_EV_IRQHandler+0x29a>
  if(hi2c->XferCount != 0U)
 8002806:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8002808:	b292      	uxth	r2, r2
 800280a:	2a00      	cmp	r2, #0
 800280c:	f47f ae5c 	bne.w	80024c8 <HAL_I2C_EV_IRQHandler+0x30c>
 8002810:	e621      	b.n	8002456 <HAL_I2C_EV_IRQHandler+0x29a>
      if(((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 8002812:	4d1e      	ldr	r5, [pc, #120]	; (800288c <HAL_I2C_EV_IRQHandler+0x6d0>)
 8002814:	400d      	ands	r5, r1
 8002816:	b335      	cbz	r5, 8002866 <HAL_I2C_EV_IRQHandler+0x6aa>
 8002818:	0551      	lsls	r1, r2, #21
 800281a:	d524      	bpl.n	8002866 <HAL_I2C_EV_IRQHandler+0x6aa>
 800281c:	bb1c      	cbnz	r4, 8002866 <HAL_I2C_EV_IRQHandler+0x6aa>
  uint32_t CurrentState = hi2c->State;
 800281e:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  if(hi2c->XferCount != 0U)
 8002822:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 8002824:	b289      	uxth	r1, r1
  uint32_t CurrentState = hi2c->State;
 8002826:	b2d2      	uxtb	r2, r2
  if(hi2c->XferCount != 0U)
 8002828:	2900      	cmp	r1, #0
 800282a:	f43f ae14 	beq.w	8002456 <HAL_I2C_EV_IRQHandler+0x29a>
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800282e:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	1c4c      	adds	r4, r1, #1
 8002834:	6244      	str	r4, [r0, #36]	; 0x24
 8002836:	700b      	strb	r3, [r1, #0]
    hi2c->XferCount--;
 8002838:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800283a:	3b01      	subs	r3, #1
 800283c:	b29b      	uxth	r3, r3
 800283e:	8543      	strh	r3, [r0, #42]	; 0x2a
    if((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002840:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002842:	b29b      	uxth	r3, r3
 8002844:	2b00      	cmp	r3, #0
 8002846:	f47f ae06 	bne.w	8002456 <HAL_I2C_EV_IRQHandler+0x29a>
 800284a:	2a2a      	cmp	r2, #42	; 0x2a
 800284c:	f47f ae03 	bne.w	8002456 <HAL_I2C_EV_IRQHandler+0x29a>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002850:	6802      	ldr	r2, [r0, #0]
 8002852:	6853      	ldr	r3, [r2, #4]
 8002854:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002858:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800285a:	2322      	movs	r3, #34	; 0x22
 800285c:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800285e:	2328      	movs	r3, #40	; 0x28
 8002860:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 8002864:	e78c      	b.n	8002780 <HAL_I2C_EV_IRQHandler+0x5c4>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8002866:	2c00      	cmp	r4, #0
 8002868:	f43f adf5 	beq.w	8002456 <HAL_I2C_EV_IRQHandler+0x29a>
 800286c:	0592      	lsls	r2, r2, #22
 800286e:	f57f adf2 	bpl.w	8002456 <HAL_I2C_EV_IRQHandler+0x29a>
  if(hi2c->XferCount != 0U)
 8002872:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8002874:	b292      	uxth	r2, r2
 8002876:	2a00      	cmp	r2, #0
 8002878:	f43f aded 	beq.w	8002456 <HAL_I2C_EV_IRQHandler+0x29a>
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800287c:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800287e:	e6b7      	b.n	80025f0 <HAL_I2C_EV_IRQHandler+0x434>
 8002880:	00100004 	.word	0x00100004
 8002884:	00010004 	.word	0x00010004
 8002888:	00010080 	.word	0x00010080
 800288c:	00010040 	.word	0x00010040

08002890 <HAL_I2C_ER_IRQHandler>:
{
 8002890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002892:	6803      	ldr	r3, [r0, #0]
  if(((sr1itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 8002894:	4a49      	ldr	r2, [pc, #292]	; (80029bc <HAL_I2C_ER_IRQHandler+0x12c>)
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002896:	695e      	ldr	r6, [r3, #20]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002898:	685d      	ldr	r5, [r3, #4]
  if(((sr1itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 800289a:	4216      	tst	r6, r2
{
 800289c:	4604      	mov	r4, r0
  if(((sr1itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 800289e:	d008      	beq.n	80028b2 <HAL_I2C_ER_IRQHandler+0x22>
 80028a0:	05e8      	lsls	r0, r5, #23
 80028a2:	d506      	bpl.n	80028b2 <HAL_I2C_ER_IRQHandler+0x22>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80028a4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80028a6:	f042 0201 	orr.w	r2, r2, #1
 80028aa:	6422      	str	r2, [r4, #64]	; 0x40
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80028ac:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80028b0:	615a      	str	r2, [r3, #20]
  if(((sr1itflags & I2C_FLAG_ARLO) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 80028b2:	f416 3f81 	tst.w	r6, #66048	; 0x10200
 80028b6:	d008      	beq.n	80028ca <HAL_I2C_ER_IRQHandler+0x3a>
 80028b8:	05e9      	lsls	r1, r5, #23
 80028ba:	d506      	bpl.n	80028ca <HAL_I2C_ER_IRQHandler+0x3a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80028bc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80028be:	f042 0202 	orr.w	r2, r2, #2
 80028c2:	6422      	str	r2, [r4, #64]	; 0x40
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80028c4:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80028c8:	615a      	str	r2, [r3, #20]
  if(((sr1itflags & I2C_FLAG_AF) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 80028ca:	f416 3f82 	tst.w	r6, #66560	; 0x10400
 80028ce:	d036      	beq.n	800293e <HAL_I2C_ER_IRQHandler+0xae>
 80028d0:	05ea      	lsls	r2, r5, #23
 80028d2:	d534      	bpl.n	800293e <HAL_I2C_ER_IRQHandler+0xae>
    tmp1 = hi2c->Mode;
 80028d4:	f894 703e 	ldrb.w	r7, [r4, #62]	; 0x3e
    tmp2 = hi2c->XferCount;
 80028d8:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    tmp3 = hi2c->State;
 80028da:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
    tmp4 = hi2c->PreviousState;
 80028de:	6b20      	ldr	r0, [r4, #48]	; 0x30
    if((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80028e0:	2f20      	cmp	r7, #32
    tmp2 = hi2c->XferCount;
 80028e2:	b289      	uxth	r1, r1
    tmp3 = hi2c->State;
 80028e4:	b2d2      	uxtb	r2, r2
    if((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80028e6:	d158      	bne.n	800299a <HAL_I2C_ER_IRQHandler+0x10a>
 80028e8:	2900      	cmp	r1, #0
 80028ea:	d156      	bne.n	800299a <HAL_I2C_ER_IRQHandler+0x10a>
 80028ec:	f002 01f7 	and.w	r1, r2, #247	; 0xf7
 80028f0:	2921      	cmp	r1, #33	; 0x21
 80028f2:	d003      	beq.n	80028fc <HAL_I2C_ER_IRQHandler+0x6c>
      ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80028f4:	2a28      	cmp	r2, #40	; 0x28
 80028f6:	d150      	bne.n	800299a <HAL_I2C_ER_IRQHandler+0x10a>
      ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80028f8:	2821      	cmp	r0, #33	; 0x21
 80028fa:	d14e      	bne.n	800299a <HAL_I2C_ER_IRQHandler+0x10a>
  uint32_t CurrentState       = hi2c->State;
 80028fc:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002900:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if(((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002902:	2904      	cmp	r1, #4
  uint32_t CurrentState       = hi2c->State;
 8002904:	b2d2      	uxtb	r2, r2
  if(((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002906:	d001      	beq.n	800290c <HAL_I2C_ER_IRQHandler+0x7c>
 8002908:	2908      	cmp	r1, #8
 800290a:	d12c      	bne.n	8002966 <HAL_I2C_ER_IRQHandler+0xd6>
 800290c:	2a28      	cmp	r2, #40	; 0x28
 800290e:	d12a      	bne.n	8002966 <HAL_I2C_ER_IRQHandler+0xd6>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002910:	4a2b      	ldr	r2, [pc, #172]	; (80029c0 <HAL_I2C_ER_IRQHandler+0x130>)
 8002912:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002914:	685a      	ldr	r2, [r3, #4]
 8002916:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800291a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800291c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002920:	615a      	str	r2, [r3, #20]
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002928:	601a      	str	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 800292a:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800292c:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 800292e:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 8002930:	4620      	mov	r0, r4
    hi2c->State = HAL_I2C_STATE_READY;
 8002932:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002936:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 800293a:	f7ff fba6 	bl	800208a <HAL_I2C_ListenCpltCallback>
  if(((sr1itflags & I2C_FLAG_OVR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 800293e:	f416 3f84 	tst.w	r6, #67584	; 0x10800
 8002942:	d009      	beq.n	8002958 <HAL_I2C_ER_IRQHandler+0xc8>
 8002944:	05eb      	lsls	r3, r5, #23
 8002946:	d507      	bpl.n	8002958 <HAL_I2C_ER_IRQHandler+0xc8>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002948:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800294a:	f043 0308 	orr.w	r3, r3, #8
 800294e:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002950:	6823      	ldr	r3, [r4, #0]
 8002952:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8002956:	615a      	str	r2, [r3, #20]
  if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002958:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800295a:	b373      	cbz	r3, 80029ba <HAL_I2C_ER_IRQHandler+0x12a>
    I2C_ITError(hi2c);
 800295c:	4620      	mov	r0, r4
}
 800295e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    I2C_ITError(hi2c);
 8002962:	f7ff bb97 	b.w	8002094 <I2C_ITError>
  else if(CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002966:	2a21      	cmp	r2, #33	; 0x21
 8002968:	d123      	bne.n	80029b2 <HAL_I2C_ER_IRQHandler+0x122>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800296a:	4915      	ldr	r1, [pc, #84]	; (80029c0 <HAL_I2C_ER_IRQHandler+0x130>)
 800296c:	62e1      	str	r1, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800296e:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 8002970:	2220      	movs	r2, #32
 8002972:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002976:	2200      	movs	r2, #0
 8002978:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800297c:	685a      	ldr	r2, [r3, #4]
 800297e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002982:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002984:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002988:	615a      	str	r2, [r3, #20]
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002990:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002992:	4620      	mov	r0, r4
 8002994:	f7ff fb76 	bl	8002084 <HAL_I2C_SlaveTxCpltCallback>
 8002998:	e7d1      	b.n	800293e <HAL_I2C_ER_IRQHandler+0xae>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800299a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800299c:	f042 0204 	orr.w	r2, r2, #4
 80029a0:	6422      	str	r2, [r4, #64]	; 0x40
      if(hi2c->Mode == HAL_I2C_MODE_MASTER)
 80029a2:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 80029a6:	2a10      	cmp	r2, #16
        SET_BIT(hi2c->Instance->CR1,I2C_CR1_STOP);
 80029a8:	bf02      	ittt	eq
 80029aa:	681a      	ldreq	r2, [r3, #0]
 80029ac:	f442 7200 	orreq.w	r2, r2, #512	; 0x200
 80029b0:	601a      	streq	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029b6:	615a      	str	r2, [r3, #20]
 80029b8:	e7c1      	b.n	800293e <HAL_I2C_ER_IRQHandler+0xae>
 80029ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80029bc:	00010100 	.word	0x00010100
 80029c0:	ffff0000 	.word	0xffff0000

080029c4 <I2C_DMAAbort>:
  I2C_HandleTypeDef* hi2c = ( I2C_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80029c4:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 80029c6:	b508      	push	{r3, lr}
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80029c8:	6803      	ldr	r3, [r0, #0]
  hi2c->hdmatx->XferAbortCallback = NULL;
 80029ca:	6b41      	ldr	r1, [r0, #52]	; 0x34
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029d2:	601a      	str	r2, [r3, #0]
  hi2c->XferCount = 0U;
 80029d4:	2200      	movs	r2, #0
 80029d6:	8542      	strh	r2, [r0, #42]	; 0x2a
  hi2c->hdmatx->XferAbortCallback = NULL;
 80029d8:	650a      	str	r2, [r1, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 80029da:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80029dc:	650a      	str	r2, [r1, #80]	; 0x50
  if(hi2c->State == HAL_I2C_STATE_ABORT)
 80029de:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 80029e2:	2960      	cmp	r1, #96	; 0x60
 80029e4:	f04f 0120 	mov.w	r1, #32
    hi2c->State = HAL_I2C_STATE_READY;
 80029e8:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029ec:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  if(hi2c->State == HAL_I2C_STATE_ABORT)
 80029f0:	d107      	bne.n	8002a02 <I2C_DMAAbort+0x3e>
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029f2:	6402      	str	r2, [r0, #64]	; 0x40
    __HAL_I2C_DISABLE(hi2c);
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	f022 0201 	bic.w	r2, r2, #1
 80029fa:	601a      	str	r2, [r3, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 80029fc:	f7ff fb49 	bl	8002092 <HAL_I2C_AbortCpltCallback>
 8002a00:	bd08      	pop	{r3, pc}
    __HAL_I2C_DISABLE(hi2c);
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	f022 0201 	bic.w	r2, r2, #1
 8002a08:	601a      	str	r2, [r3, #0]
    HAL_I2C_ErrorCallback(hi2c);
 8002a0a:	f7ff fb41 	bl	8002090 <HAL_I2C_ErrorCallback>
 8002a0e:	bd08      	pop	{r3, pc}

08002a10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a10:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a14:	4604      	mov	r4, r0
 8002a16:	b918      	cbnz	r0, 8002a20 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8002a18:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8002a1a:	b002      	add	sp, #8
 8002a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a20:	6803      	ldr	r3, [r0, #0]
 8002a22:	07dd      	lsls	r5, r3, #31
 8002a24:	d410      	bmi.n	8002a48 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a26:	6823      	ldr	r3, [r4, #0]
 8002a28:	0798      	lsls	r0, r3, #30
 8002a2a:	d458      	bmi.n	8002ade <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a2c:	6823      	ldr	r3, [r4, #0]
 8002a2e:	071a      	lsls	r2, r3, #28
 8002a30:	f100 809a 	bmi.w	8002b68 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a34:	6823      	ldr	r3, [r4, #0]
 8002a36:	075b      	lsls	r3, r3, #29
 8002a38:	f100 80b8 	bmi.w	8002bac <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a3c:	69a2      	ldr	r2, [r4, #24]
 8002a3e:	2a00      	cmp	r2, #0
 8002a40:	f040 8119 	bne.w	8002c76 <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8002a44:	2000      	movs	r0, #0
 8002a46:	e7e8      	b.n	8002a1a <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a48:	4ba6      	ldr	r3, [pc, #664]	; (8002ce4 <HAL_RCC_OscConfig+0x2d4>)
 8002a4a:	689a      	ldr	r2, [r3, #8]
 8002a4c:	f002 020c 	and.w	r2, r2, #12
 8002a50:	2a04      	cmp	r2, #4
 8002a52:	d007      	beq.n	8002a64 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a54:	689a      	ldr	r2, [r3, #8]
 8002a56:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a5a:	2a08      	cmp	r2, #8
 8002a5c:	d10a      	bne.n	8002a74 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	0259      	lsls	r1, r3, #9
 8002a62:	d507      	bpl.n	8002a74 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a64:	4b9f      	ldr	r3, [pc, #636]	; (8002ce4 <HAL_RCC_OscConfig+0x2d4>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	039a      	lsls	r2, r3, #14
 8002a6a:	d5dc      	bpl.n	8002a26 <HAL_RCC_OscConfig+0x16>
 8002a6c:	6863      	ldr	r3, [r4, #4]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1d9      	bne.n	8002a26 <HAL_RCC_OscConfig+0x16>
 8002a72:	e7d1      	b.n	8002a18 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a74:	6863      	ldr	r3, [r4, #4]
 8002a76:	4d9b      	ldr	r5, [pc, #620]	; (8002ce4 <HAL_RCC_OscConfig+0x2d4>)
 8002a78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a7c:	d111      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x92>
 8002a7e:	682b      	ldr	r3, [r5, #0]
 8002a80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a84:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002a86:	f7fe fa71 	bl	8000f6c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a8a:	4d96      	ldr	r5, [pc, #600]	; (8002ce4 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8002a8c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a8e:	682b      	ldr	r3, [r5, #0]
 8002a90:	039b      	lsls	r3, r3, #14
 8002a92:	d4c8      	bmi.n	8002a26 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a94:	f7fe fa6a 	bl	8000f6c <HAL_GetTick>
 8002a98:	1b80      	subs	r0, r0, r6
 8002a9a:	2864      	cmp	r0, #100	; 0x64
 8002a9c:	d9f7      	bls.n	8002a8e <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8002a9e:	2003      	movs	r0, #3
 8002aa0:	e7bb      	b.n	8002a1a <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aa2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002aa6:	d104      	bne.n	8002ab2 <HAL_RCC_OscConfig+0xa2>
 8002aa8:	682b      	ldr	r3, [r5, #0]
 8002aaa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002aae:	602b      	str	r3, [r5, #0]
 8002ab0:	e7e5      	b.n	8002a7e <HAL_RCC_OscConfig+0x6e>
 8002ab2:	682a      	ldr	r2, [r5, #0]
 8002ab4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002ab8:	602a      	str	r2, [r5, #0]
 8002aba:	682a      	ldr	r2, [r5, #0]
 8002abc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002ac0:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d1df      	bne.n	8002a86 <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 8002ac6:	f7fe fa51 	bl	8000f6c <HAL_GetTick>
 8002aca:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002acc:	682b      	ldr	r3, [r5, #0]
 8002ace:	039f      	lsls	r7, r3, #14
 8002ad0:	d5a9      	bpl.n	8002a26 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ad2:	f7fe fa4b 	bl	8000f6c <HAL_GetTick>
 8002ad6:	1b80      	subs	r0, r0, r6
 8002ad8:	2864      	cmp	r0, #100	; 0x64
 8002ada:	d9f7      	bls.n	8002acc <HAL_RCC_OscConfig+0xbc>
 8002adc:	e7df      	b.n	8002a9e <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ade:	4b81      	ldr	r3, [pc, #516]	; (8002ce4 <HAL_RCC_OscConfig+0x2d4>)
 8002ae0:	689a      	ldr	r2, [r3, #8]
 8002ae2:	f012 0f0c 	tst.w	r2, #12
 8002ae6:	d007      	beq.n	8002af8 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ae8:	689a      	ldr	r2, [r3, #8]
 8002aea:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002aee:	2a08      	cmp	r2, #8
 8002af0:	d111      	bne.n	8002b16 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	025e      	lsls	r6, r3, #9
 8002af6:	d40e      	bmi.n	8002b16 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002af8:	4b7a      	ldr	r3, [pc, #488]	; (8002ce4 <HAL_RCC_OscConfig+0x2d4>)
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	0795      	lsls	r5, r2, #30
 8002afe:	d502      	bpl.n	8002b06 <HAL_RCC_OscConfig+0xf6>
 8002b00:	68e2      	ldr	r2, [r4, #12]
 8002b02:	2a01      	cmp	r2, #1
 8002b04:	d188      	bne.n	8002a18 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	6921      	ldr	r1, [r4, #16]
 8002b0a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002b0e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8002b12:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b14:	e78a      	b.n	8002a2c <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b16:	68e2      	ldr	r2, [r4, #12]
 8002b18:	4b73      	ldr	r3, [pc, #460]	; (8002ce8 <HAL_RCC_OscConfig+0x2d8>)
 8002b1a:	b1b2      	cbz	r2, 8002b4a <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002b20:	f7fe fa24 	bl	8000f6c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b24:	4d6f      	ldr	r5, [pc, #444]	; (8002ce4 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8002b26:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b28:	682b      	ldr	r3, [r5, #0]
 8002b2a:	0798      	lsls	r0, r3, #30
 8002b2c:	d507      	bpl.n	8002b3e <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b2e:	682b      	ldr	r3, [r5, #0]
 8002b30:	6922      	ldr	r2, [r4, #16]
 8002b32:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002b36:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002b3a:	602b      	str	r3, [r5, #0]
 8002b3c:	e776      	b.n	8002a2c <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b3e:	f7fe fa15 	bl	8000f6c <HAL_GetTick>
 8002b42:	1b80      	subs	r0, r0, r6
 8002b44:	2802      	cmp	r0, #2
 8002b46:	d9ef      	bls.n	8002b28 <HAL_RCC_OscConfig+0x118>
 8002b48:	e7a9      	b.n	8002a9e <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8002b4a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002b4c:	f7fe fa0e 	bl	8000f6c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b50:	4d64      	ldr	r5, [pc, #400]	; (8002ce4 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8002b52:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b54:	682b      	ldr	r3, [r5, #0]
 8002b56:	0799      	lsls	r1, r3, #30
 8002b58:	f57f af68 	bpl.w	8002a2c <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b5c:	f7fe fa06 	bl	8000f6c <HAL_GetTick>
 8002b60:	1b80      	subs	r0, r0, r6
 8002b62:	2802      	cmp	r0, #2
 8002b64:	d9f6      	bls.n	8002b54 <HAL_RCC_OscConfig+0x144>
 8002b66:	e79a      	b.n	8002a9e <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b68:	6962      	ldr	r2, [r4, #20]
 8002b6a:	4b60      	ldr	r3, [pc, #384]	; (8002cec <HAL_RCC_OscConfig+0x2dc>)
 8002b6c:	b17a      	cbz	r2, 8002b8e <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8002b6e:	2201      	movs	r2, #1
 8002b70:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002b72:	f7fe f9fb 	bl	8000f6c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b76:	4d5b      	ldr	r5, [pc, #364]	; (8002ce4 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8002b78:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b7a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002b7c:	079f      	lsls	r7, r3, #30
 8002b7e:	f53f af59 	bmi.w	8002a34 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b82:	f7fe f9f3 	bl	8000f6c <HAL_GetTick>
 8002b86:	1b80      	subs	r0, r0, r6
 8002b88:	2802      	cmp	r0, #2
 8002b8a:	d9f6      	bls.n	8002b7a <HAL_RCC_OscConfig+0x16a>
 8002b8c:	e787      	b.n	8002a9e <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8002b8e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002b90:	f7fe f9ec 	bl	8000f6c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b94:	4d53      	ldr	r5, [pc, #332]	; (8002ce4 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8002b96:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b98:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002b9a:	0798      	lsls	r0, r3, #30
 8002b9c:	f57f af4a 	bpl.w	8002a34 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ba0:	f7fe f9e4 	bl	8000f6c <HAL_GetTick>
 8002ba4:	1b80      	subs	r0, r0, r6
 8002ba6:	2802      	cmp	r0, #2
 8002ba8:	d9f6      	bls.n	8002b98 <HAL_RCC_OscConfig+0x188>
 8002baa:	e778      	b.n	8002a9e <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bac:	4b4d      	ldr	r3, [pc, #308]	; (8002ce4 <HAL_RCC_OscConfig+0x2d4>)
 8002bae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bb0:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8002bb4:	d128      	bne.n	8002c08 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bb6:	9201      	str	r2, [sp, #4]
 8002bb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bba:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002bbe:	641a      	str	r2, [r3, #64]	; 0x40
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc6:	9301      	str	r3, [sp, #4]
 8002bc8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002bca:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bcc:	4d48      	ldr	r5, [pc, #288]	; (8002cf0 <HAL_RCC_OscConfig+0x2e0>)
 8002bce:	682b      	ldr	r3, [r5, #0]
 8002bd0:	05d9      	lsls	r1, r3, #23
 8002bd2:	d51b      	bpl.n	8002c0c <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bd4:	68a3      	ldr	r3, [r4, #8]
 8002bd6:	4d43      	ldr	r5, [pc, #268]	; (8002ce4 <HAL_RCC_OscConfig+0x2d4>)
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d127      	bne.n	8002c2c <HAL_RCC_OscConfig+0x21c>
 8002bdc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002bde:	f043 0301 	orr.w	r3, r3, #1
 8002be2:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002be4:	f7fe f9c2 	bl	8000f6c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002be8:	4d3e      	ldr	r5, [pc, #248]	; (8002ce4 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8002bea:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bec:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bf0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002bf2:	079b      	lsls	r3, r3, #30
 8002bf4:	d539      	bpl.n	8002c6a <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8002bf6:	2e00      	cmp	r6, #0
 8002bf8:	f43f af20 	beq.w	8002a3c <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bfc:	4a39      	ldr	r2, [pc, #228]	; (8002ce4 <HAL_RCC_OscConfig+0x2d4>)
 8002bfe:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002c00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c04:	6413      	str	r3, [r2, #64]	; 0x40
 8002c06:	e719      	b.n	8002a3c <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8002c08:	2600      	movs	r6, #0
 8002c0a:	e7df      	b.n	8002bcc <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c0c:	682b      	ldr	r3, [r5, #0]
 8002c0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c12:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002c14:	f7fe f9aa 	bl	8000f6c <HAL_GetTick>
 8002c18:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c1a:	682b      	ldr	r3, [r5, #0]
 8002c1c:	05da      	lsls	r2, r3, #23
 8002c1e:	d4d9      	bmi.n	8002bd4 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c20:	f7fe f9a4 	bl	8000f6c <HAL_GetTick>
 8002c24:	1bc0      	subs	r0, r0, r7
 8002c26:	2802      	cmp	r0, #2
 8002c28:	d9f7      	bls.n	8002c1a <HAL_RCC_OscConfig+0x20a>
 8002c2a:	e738      	b.n	8002a9e <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c2c:	2b05      	cmp	r3, #5
 8002c2e:	d104      	bne.n	8002c3a <HAL_RCC_OscConfig+0x22a>
 8002c30:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002c32:	f043 0304 	orr.w	r3, r3, #4
 8002c36:	672b      	str	r3, [r5, #112]	; 0x70
 8002c38:	e7d0      	b.n	8002bdc <HAL_RCC_OscConfig+0x1cc>
 8002c3a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002c3c:	f022 0201 	bic.w	r2, r2, #1
 8002c40:	672a      	str	r2, [r5, #112]	; 0x70
 8002c42:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002c44:	f022 0204 	bic.w	r2, r2, #4
 8002c48:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d1ca      	bne.n	8002be4 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8002c4e:	f7fe f98d 	bl	8000f6c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c52:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002c56:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c58:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002c5a:	0798      	lsls	r0, r3, #30
 8002c5c:	d5cb      	bpl.n	8002bf6 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c5e:	f7fe f985 	bl	8000f6c <HAL_GetTick>
 8002c62:	1bc0      	subs	r0, r0, r7
 8002c64:	4540      	cmp	r0, r8
 8002c66:	d9f7      	bls.n	8002c58 <HAL_RCC_OscConfig+0x248>
 8002c68:	e719      	b.n	8002a9e <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c6a:	f7fe f97f 	bl	8000f6c <HAL_GetTick>
 8002c6e:	1bc0      	subs	r0, r0, r7
 8002c70:	4540      	cmp	r0, r8
 8002c72:	d9bd      	bls.n	8002bf0 <HAL_RCC_OscConfig+0x1e0>
 8002c74:	e713      	b.n	8002a9e <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c76:	4d1b      	ldr	r5, [pc, #108]	; (8002ce4 <HAL_RCC_OscConfig+0x2d4>)
 8002c78:	68ab      	ldr	r3, [r5, #8]
 8002c7a:	f003 030c 	and.w	r3, r3, #12
 8002c7e:	2b08      	cmp	r3, #8
 8002c80:	f43f aeca 	beq.w	8002a18 <HAL_RCC_OscConfig+0x8>
 8002c84:	4e1b      	ldr	r6, [pc, #108]	; (8002cf4 <HAL_RCC_OscConfig+0x2e4>)
 8002c86:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c88:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8002c8a:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c8c:	d134      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8002c8e:	f7fe f96d 	bl	8000f6c <HAL_GetTick>
 8002c92:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c94:	682b      	ldr	r3, [r5, #0]
 8002c96:	0199      	lsls	r1, r3, #6
 8002c98:	d41e      	bmi.n	8002cd8 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c9a:	6a22      	ldr	r2, [r4, #32]
 8002c9c:	69e3      	ldr	r3, [r4, #28]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002ca2:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002ca6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002ca8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002cac:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cae:	4c0d      	ldr	r4, [pc, #52]	; (8002ce4 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002cb0:	0852      	lsrs	r2, r2, #1
 8002cb2:	3a01      	subs	r2, #1
 8002cb4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002cb8:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002cba:	2301      	movs	r3, #1
 8002cbc:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002cbe:	f7fe f955 	bl	8000f6c <HAL_GetTick>
 8002cc2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cc4:	6823      	ldr	r3, [r4, #0]
 8002cc6:	019a      	lsls	r2, r3, #6
 8002cc8:	f53f aebc 	bmi.w	8002a44 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ccc:	f7fe f94e 	bl	8000f6c <HAL_GetTick>
 8002cd0:	1b40      	subs	r0, r0, r5
 8002cd2:	2802      	cmp	r0, #2
 8002cd4:	d9f6      	bls.n	8002cc4 <HAL_RCC_OscConfig+0x2b4>
 8002cd6:	e6e2      	b.n	8002a9e <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cd8:	f7fe f948 	bl	8000f6c <HAL_GetTick>
 8002cdc:	1bc0      	subs	r0, r0, r7
 8002cde:	2802      	cmp	r0, #2
 8002ce0:	d9d8      	bls.n	8002c94 <HAL_RCC_OscConfig+0x284>
 8002ce2:	e6dc      	b.n	8002a9e <HAL_RCC_OscConfig+0x8e>
 8002ce4:	40023800 	.word	0x40023800
 8002ce8:	42470000 	.word	0x42470000
 8002cec:	42470e80 	.word	0x42470e80
 8002cf0:	40007000 	.word	0x40007000
 8002cf4:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8002cf8:	f7fe f938 	bl	8000f6c <HAL_GetTick>
 8002cfc:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cfe:	682b      	ldr	r3, [r5, #0]
 8002d00:	019b      	lsls	r3, r3, #6
 8002d02:	f57f ae9f 	bpl.w	8002a44 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d06:	f7fe f931 	bl	8000f6c <HAL_GetTick>
 8002d0a:	1b00      	subs	r0, r0, r4
 8002d0c:	2802      	cmp	r0, #2
 8002d0e:	d9f6      	bls.n	8002cfe <HAL_RCC_OscConfig+0x2ee>
 8002d10:	e6c5      	b.n	8002a9e <HAL_RCC_OscConfig+0x8e>
 8002d12:	bf00      	nop

08002d14 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d14:	4913      	ldr	r1, [pc, #76]	; (8002d64 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8002d16:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d18:	688b      	ldr	r3, [r1, #8]
 8002d1a:	f003 030c 	and.w	r3, r3, #12
 8002d1e:	2b04      	cmp	r3, #4
 8002d20:	d003      	beq.n	8002d2a <HAL_RCC_GetSysClockFreq+0x16>
 8002d22:	2b08      	cmp	r3, #8
 8002d24:	d003      	beq.n	8002d2e <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d26:	4810      	ldr	r0, [pc, #64]	; (8002d68 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002d28:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8002d2a:	4810      	ldr	r0, [pc, #64]	; (8002d6c <HAL_RCC_GetSysClockFreq+0x58>)
 8002d2c:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d2e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d30:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d32:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d34:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d38:	bf14      	ite	ne
 8002d3a:	480c      	ldrne	r0, [pc, #48]	; (8002d6c <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d3c:	480a      	ldreq	r0, [pc, #40]	; (8002d68 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d3e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002d42:	bf18      	it	ne
 8002d44:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d46:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d4a:	fba1 0100 	umull	r0, r1, r1, r0
 8002d4e:	f7fd ff3b 	bl	8000bc8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d52:	4b04      	ldr	r3, [pc, #16]	; (8002d64 <HAL_RCC_GetSysClockFreq+0x50>)
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8002d5e:	fbb0 f0f3 	udiv	r0, r0, r3
 8002d62:	bd08      	pop	{r3, pc}
 8002d64:	40023800 	.word	0x40023800
 8002d68:	00f42400 	.word	0x00f42400
 8002d6c:	007a1200 	.word	0x007a1200

08002d70 <HAL_RCC_ClockConfig>:
{
 8002d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d74:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8002d76:	4604      	mov	r4, r0
 8002d78:	b910      	cbnz	r0, 8002d80 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002d7a:	2001      	movs	r0, #1
 8002d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d80:	4b44      	ldr	r3, [pc, #272]	; (8002e94 <HAL_RCC_ClockConfig+0x124>)
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	f002 020f 	and.w	r2, r2, #15
 8002d88:	428a      	cmp	r2, r1
 8002d8a:	d328      	bcc.n	8002dde <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d8c:	6821      	ldr	r1, [r4, #0]
 8002d8e:	078f      	lsls	r7, r1, #30
 8002d90:	d42d      	bmi.n	8002dee <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d92:	07c8      	lsls	r0, r1, #31
 8002d94:	d440      	bmi.n	8002e18 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d96:	4b3f      	ldr	r3, [pc, #252]	; (8002e94 <HAL_RCC_ClockConfig+0x124>)
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	f002 020f 	and.w	r2, r2, #15
 8002d9e:	4295      	cmp	r5, r2
 8002da0:	d366      	bcc.n	8002e70 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002da2:	6822      	ldr	r2, [r4, #0]
 8002da4:	0751      	lsls	r1, r2, #29
 8002da6:	d46c      	bmi.n	8002e82 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002da8:	0713      	lsls	r3, r2, #28
 8002daa:	d507      	bpl.n	8002dbc <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dac:	4a3a      	ldr	r2, [pc, #232]	; (8002e98 <HAL_RCC_ClockConfig+0x128>)
 8002dae:	6921      	ldr	r1, [r4, #16]
 8002db0:	6893      	ldr	r3, [r2, #8]
 8002db2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002db6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002dba:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002dbc:	f7ff ffaa 	bl	8002d14 <HAL_RCC_GetSysClockFreq>
 8002dc0:	4b35      	ldr	r3, [pc, #212]	; (8002e98 <HAL_RCC_ClockConfig+0x128>)
 8002dc2:	4a36      	ldr	r2, [pc, #216]	; (8002e9c <HAL_RCC_ClockConfig+0x12c>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002dca:	5cd3      	ldrb	r3, [r2, r3]
 8002dcc:	40d8      	lsrs	r0, r3
 8002dce:	4b34      	ldr	r3, [pc, #208]	; (8002ea0 <HAL_RCC_ClockConfig+0x130>)
 8002dd0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002dd2:	2000      	movs	r0, #0
 8002dd4:	f7fe f880 	bl	8000ed8 <HAL_InitTick>
  return HAL_OK;
 8002dd8:	2000      	movs	r0, #0
 8002dda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dde:	b2ca      	uxtb	r2, r1
 8002de0:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 030f 	and.w	r3, r3, #15
 8002de8:	4299      	cmp	r1, r3
 8002dea:	d1c6      	bne.n	8002d7a <HAL_RCC_ClockConfig+0xa>
 8002dec:	e7ce      	b.n	8002d8c <HAL_RCC_ClockConfig+0x1c>
 8002dee:	4b2a      	ldr	r3, [pc, #168]	; (8002e98 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002df0:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002df4:	bf1e      	ittt	ne
 8002df6:	689a      	ldrne	r2, [r3, #8]
 8002df8:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8002dfc:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dfe:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e00:	bf42      	ittt	mi
 8002e02:	689a      	ldrmi	r2, [r3, #8]
 8002e04:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8002e08:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e0a:	689a      	ldr	r2, [r3, #8]
 8002e0c:	68a0      	ldr	r0, [r4, #8]
 8002e0e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002e12:	4302      	orrs	r2, r0
 8002e14:	609a      	str	r2, [r3, #8]
 8002e16:	e7bc      	b.n	8002d92 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e18:	6862      	ldr	r2, [r4, #4]
 8002e1a:	4b1f      	ldr	r3, [pc, #124]	; (8002e98 <HAL_RCC_ClockConfig+0x128>)
 8002e1c:	2a01      	cmp	r2, #1
 8002e1e:	d11d      	bne.n	8002e5c <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e26:	d0a8      	beq.n	8002d7a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e28:	4e1b      	ldr	r6, [pc, #108]	; (8002e98 <HAL_RCC_ClockConfig+0x128>)
 8002e2a:	68b3      	ldr	r3, [r6, #8]
 8002e2c:	f023 0303 	bic.w	r3, r3, #3
 8002e30:	4313      	orrs	r3, r2
 8002e32:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002e34:	f7fe f89a 	bl	8000f6c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e38:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002e3c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e3e:	68b3      	ldr	r3, [r6, #8]
 8002e40:	6862      	ldr	r2, [r4, #4]
 8002e42:	f003 030c 	and.w	r3, r3, #12
 8002e46:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002e4a:	d0a4      	beq.n	8002d96 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e4c:	f7fe f88e 	bl	8000f6c <HAL_GetTick>
 8002e50:	1bc0      	subs	r0, r0, r7
 8002e52:	4540      	cmp	r0, r8
 8002e54:	d9f3      	bls.n	8002e3e <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8002e56:	2003      	movs	r0, #3
}
 8002e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e5c:	1e91      	subs	r1, r2, #2
 8002e5e:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e60:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e62:	d802      	bhi.n	8002e6a <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e64:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002e68:	e7dd      	b.n	8002e26 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e6a:	f013 0f02 	tst.w	r3, #2
 8002e6e:	e7da      	b.n	8002e26 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e70:	b2ea      	uxtb	r2, r5
 8002e72:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 030f 	and.w	r3, r3, #15
 8002e7a:	429d      	cmp	r5, r3
 8002e7c:	f47f af7d 	bne.w	8002d7a <HAL_RCC_ClockConfig+0xa>
 8002e80:	e78f      	b.n	8002da2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e82:	4905      	ldr	r1, [pc, #20]	; (8002e98 <HAL_RCC_ClockConfig+0x128>)
 8002e84:	68e0      	ldr	r0, [r4, #12]
 8002e86:	688b      	ldr	r3, [r1, #8]
 8002e88:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002e8c:	4303      	orrs	r3, r0
 8002e8e:	608b      	str	r3, [r1, #8]
 8002e90:	e78a      	b.n	8002da8 <HAL_RCC_ClockConfig+0x38>
 8002e92:	bf00      	nop
 8002e94:	40023c00 	.word	0x40023c00
 8002e98:	40023800 	.word	0x40023800
 8002e9c:	08006dba 	.word	0x08006dba
 8002ea0:	20000018 	.word	0x20000018

08002ea4 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002ea4:	4b01      	ldr	r3, [pc, #4]	; (8002eac <HAL_RCC_GetHCLKFreq+0x8>)
 8002ea6:	6818      	ldr	r0, [r3, #0]
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	20000018 	.word	0x20000018

08002eb0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002eb0:	4b04      	ldr	r3, [pc, #16]	; (8002ec4 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002eb2:	4a05      	ldr	r2, [pc, #20]	; (8002ec8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002eba:	5cd3      	ldrb	r3, [r2, r3]
 8002ebc:	4a03      	ldr	r2, [pc, #12]	; (8002ecc <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002ebe:	6810      	ldr	r0, [r2, #0]
}
 8002ec0:	40d8      	lsrs	r0, r3
 8002ec2:	4770      	bx	lr
 8002ec4:	40023800 	.word	0x40023800
 8002ec8:	08006dca 	.word	0x08006dca
 8002ecc:	20000018 	.word	0x20000018

08002ed0 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ed0:	4b04      	ldr	r3, [pc, #16]	; (8002ee4 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002ed2:	4a05      	ldr	r2, [pc, #20]	; (8002ee8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002eda:	5cd3      	ldrb	r3, [r2, r3]
 8002edc:	4a03      	ldr	r2, [pc, #12]	; (8002eec <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002ede:	6810      	ldr	r0, [r2, #0]
}
 8002ee0:	40d8      	lsrs	r0, r3
 8002ee2:	4770      	bx	lr
 8002ee4:	40023800 	.word	0x40023800
 8002ee8:	08006dca 	.word	0x08006dca
 8002eec:	20000018 	.word	0x20000018

08002ef0 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ef0:	6a03      	ldr	r3, [r0, #32]
 8002ef2:	f023 0301 	bic.w	r3, r3, #1
 8002ef6:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ef8:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002efa:	6842      	ldr	r2, [r0, #4]
{
 8002efc:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002efe:	6984      	ldr	r4, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f00:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f02:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002f06:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002f08:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8002f0a:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8002f0e:	4323      	orrs	r3, r4

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002f10:	4c0c      	ldr	r4, [pc, #48]	; (8002f44 <TIM_OC1_SetConfig+0x54>)
 8002f12:	42a0      	cmp	r0, r4
 8002f14:	d009      	beq.n	8002f2a <TIM_OC1_SetConfig+0x3a>
 8002f16:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002f1a:	42a0      	cmp	r0, r4
 8002f1c:	d005      	beq.n	8002f2a <TIM_OC1_SetConfig+0x3a>
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f1e:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002f20:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002f22:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8002f24:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002f26:	6203      	str	r3, [r0, #32]
} 
 8002f28:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= OC_Config->OCNPolarity;
 8002f2a:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f2c:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 8002f2e:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8002f32:	4323      	orrs	r3, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f34:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002f36:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f3a:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8002f3c:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f40:	4322      	orrs	r2, r4
 8002f42:	e7ec      	b.n	8002f1e <TIM_OC1_SetConfig+0x2e>
 8002f44:	40010000 	.word	0x40010000

08002f48 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f48:	6a03      	ldr	r3, [r0, #32]
 8002f4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f4e:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f50:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002f52:	6842      	ldr	r2, [r0, #4]
{
 8002f54:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f56:	69c4      	ldr	r4, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f58:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8002f5a:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002f5e:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002f60:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8002f62:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002f66:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002f6a:	4c0e      	ldr	r4, [pc, #56]	; (8002fa4 <TIM_OC3_SetConfig+0x5c>)
 8002f6c:	42a0      	cmp	r0, r4
 8002f6e:	d009      	beq.n	8002f84 <TIM_OC3_SetConfig+0x3c>
 8002f70:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002f74:	42a0      	cmp	r0, r4
 8002f76:	d005      	beq.n	8002f84 <TIM_OC3_SetConfig+0x3c>
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f78:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002f7a:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002f7c:	61c5      	str	r5, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8002f7e:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f80:	6203      	str	r3, [r0, #32]
}
 8002f82:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002f84:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002f86:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 8002f88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002f8c:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002f90:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002f92:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002f96:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8002f98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002f9c:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 8002fa0:	e7ea      	b.n	8002f78 <TIM_OC3_SetConfig+0x30>
 8002fa2:	bf00      	nop
 8002fa4:	40010000 	.word	0x40010000

08002fa8 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002fa8:	6a03      	ldr	r3, [r0, #32]
 8002faa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002fae:	6203      	str	r3, [r0, #32]
{
 8002fb0:	b530      	push	{r4, r5, lr}
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fb2:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002fb4:	6843      	ldr	r3, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002fb6:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fb8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002fba:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fbe:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002fc2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8002fc4:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002fc8:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002fcc:	4d09      	ldr	r5, [pc, #36]	; (8002ff4 <TIM_OC4_SetConfig+0x4c>)
 8002fce:	42a8      	cmp	r0, r5
 8002fd0:	d009      	beq.n	8002fe6 <TIM_OC4_SetConfig+0x3e>
 8002fd2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002fd6:	42a8      	cmp	r0, r5
 8002fd8:	d005      	beq.n	8002fe6 <TIM_OC4_SetConfig+0x3e>
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fda:	6043      	str	r3, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002fdc:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002fde:	61c2      	str	r2, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8002fe0:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fe2:	6204      	str	r4, [r0, #32]
}
 8002fe4:	bd30      	pop	{r4, r5, pc}
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002fe6:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002fe8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002fec:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8002ff0:	e7f3      	b.n	8002fda <TIM_OC4_SetConfig+0x32>
 8002ff2:	bf00      	nop
 8002ff4:	40010000 	.word	0x40010000

08002ff8 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ff8:	6803      	ldr	r3, [r0, #0]
 8002ffa:	68da      	ldr	r2, [r3, #12]
 8002ffc:	f042 0201 	orr.w	r2, r2, #1
 8003000:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	f042 0201 	orr.w	r2, r2, #1
 8003008:	601a      	str	r2, [r3, #0]
}
 800300a:	2000      	movs	r0, #0
 800300c:	4770      	bx	lr

0800300e <HAL_TIM_PWM_MspInit>:
 800300e:	4770      	bx	lr

08003010 <HAL_TIM_Encoder_Start>:
{
 8003010:	6803      	ldr	r3, [r0, #0]
  switch (Channel)
 8003012:	b189      	cbz	r1, 8003038 <HAL_TIM_Encoder_Start+0x28>
 8003014:	2904      	cmp	r1, #4
 8003016:	d007      	beq.n	8003028 <HAL_TIM_Encoder_Start+0x18>
  TIMx->CCER &= ~tmp;
 8003018:	6a1a      	ldr	r2, [r3, #32]
 800301a:	f022 0201 	bic.w	r2, r2, #1
 800301e:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8003020:	6a1a      	ldr	r2, [r3, #32]
 8003022:	f042 0201 	orr.w	r2, r2, #1
 8003026:	621a      	str	r2, [r3, #32]
  TIMx->CCER &= ~tmp;
 8003028:	6a1a      	ldr	r2, [r3, #32]
 800302a:	f022 0210 	bic.w	r2, r2, #16
 800302e:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8003030:	6a1a      	ldr	r2, [r3, #32]
 8003032:	f042 0210 	orr.w	r2, r2, #16
 8003036:	e006      	b.n	8003046 <HAL_TIM_Encoder_Start+0x36>
  TIMx->CCER &= ~tmp;
 8003038:	6a1a      	ldr	r2, [r3, #32]
 800303a:	f022 0201 	bic.w	r2, r2, #1
 800303e:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8003040:	6a1a      	ldr	r2, [r3, #32]
 8003042:	f042 0201 	orr.w	r2, r2, #1
 8003046:	621a      	str	r2, [r3, #32]
  __HAL_TIM_ENABLE(htim);
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	f042 0201 	orr.w	r2, r2, #1
 800304e:	601a      	str	r2, [r3, #0]
}
 8003050:	2000      	movs	r0, #0
 8003052:	4770      	bx	lr

08003054 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003054:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003058:	2b01      	cmp	r3, #1
{
 800305a:	b570      	push	{r4, r5, r6, lr}
 800305c:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8003060:	d01c      	beq.n	800309c <HAL_TIM_ConfigClockSource+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 8003062:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  tmpsmcr = htim->Instance->SMCR;
 8003066:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8003068:	2201      	movs	r2, #1
 800306a:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  tmpsmcr = htim->Instance->SMCR;
 800306e:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003070:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003074:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8003078:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 800307a:	680a      	ldr	r2, [r1, #0]
 800307c:	2a40      	cmp	r2, #64	; 0x40
 800307e:	d079      	beq.n	8003174 <HAL_TIM_ConfigClockSource+0x120>
 8003080:	d819      	bhi.n	80030b6 <HAL_TIM_ConfigClockSource+0x62>
 8003082:	2a10      	cmp	r2, #16
 8003084:	f000 8093 	beq.w	80031ae <HAL_TIM_ConfigClockSource+0x15a>
 8003088:	d80a      	bhi.n	80030a0 <HAL_TIM_ConfigClockSource+0x4c>
 800308a:	2a00      	cmp	r2, #0
 800308c:	f000 8089 	beq.w	80031a2 <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 8003090:	2301      	movs	r3, #1
 8003092:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8003096:	2300      	movs	r3, #0
 8003098:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 800309c:	4618      	mov	r0, r3
}
 800309e:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80030a0:	2a20      	cmp	r2, #32
 80030a2:	f000 808a 	beq.w	80031ba <HAL_TIM_ConfigClockSource+0x166>
 80030a6:	2a30      	cmp	r2, #48	; 0x30
 80030a8:	d1f2      	bne.n	8003090 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80030aa:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80030ac:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80030b0:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 80030b4:	e036      	b.n	8003124 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 80030b6:	2a70      	cmp	r2, #112	; 0x70
 80030b8:	d036      	beq.n	8003128 <HAL_TIM_ConfigClockSource+0xd4>
 80030ba:	d81b      	bhi.n	80030f4 <HAL_TIM_ConfigClockSource+0xa0>
 80030bc:	2a50      	cmp	r2, #80	; 0x50
 80030be:	d042      	beq.n	8003146 <HAL_TIM_ConfigClockSource+0xf2>
 80030c0:	2a60      	cmp	r2, #96	; 0x60
 80030c2:	d1e5      	bne.n	8003090 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030c4:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance, 
 80030c6:	684d      	ldr	r5, [r1, #4]
 80030c8:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030ca:	f024 0410 	bic.w	r4, r4, #16
 80030ce:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030d0:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 80030d2:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030d4:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030d8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80030dc:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80030e0:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80030e4:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 80030e6:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80030e8:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80030ea:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80030ee:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 80030f2:	e017      	b.n	8003124 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 80030f4:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80030f8:	d011      	beq.n	800311e <HAL_TIM_ConfigClockSource+0xca>
 80030fa:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80030fe:	d1c7      	bne.n	8003090 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8003100:	688a      	ldr	r2, [r1, #8]
 8003102:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8003104:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8003106:	68c9      	ldr	r1, [r1, #12]
 8003108:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800310a:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800310e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003112:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003114:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003116:	689a      	ldr	r2, [r3, #8]
 8003118:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800311c:	e002      	b.n	8003124 <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800311e:	689a      	ldr	r2, [r3, #8]
 8003120:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8003124:	609a      	str	r2, [r3, #8]
 8003126:	e7b3      	b.n	8003090 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8003128:	688a      	ldr	r2, [r1, #8]
 800312a:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800312c:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800312e:	68c9      	ldr	r1, [r1, #12]
 8003130:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003132:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8003136:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800313a:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 800313c:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 800313e:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003140:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8003144:	e7ee      	b.n	8003124 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8003146:	684c      	ldr	r4, [r1, #4]
 8003148:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800314a:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800314c:	6a1d      	ldr	r5, [r3, #32]
 800314e:	f025 0501 	bic.w	r5, r5, #1
 8003152:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8003154:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003156:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800315a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800315e:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8003162:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8003164:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003166:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8003168:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800316a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800316e:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8003172:	e7d7      	b.n	8003124 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8003174:	684c      	ldr	r4, [r1, #4]
 8003176:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8003178:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800317a:	6a1d      	ldr	r5, [r3, #32]
 800317c:	f025 0501 	bic.w	r5, r5, #1
 8003180:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8003182:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003184:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003188:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800318c:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8003190:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8003192:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003194:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8003196:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8003198:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800319c:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 80031a0:	e7c0      	b.n	8003124 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80031a2:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80031a4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80031a8:	f042 0207 	orr.w	r2, r2, #7
 80031ac:	e7ba      	b.n	8003124 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80031ae:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80031b0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80031b4:	f042 0217 	orr.w	r2, r2, #23
 80031b8:	e7b4      	b.n	8003124 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80031ba:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80031bc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80031c0:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 80031c4:	e7ae      	b.n	8003124 <HAL_TIM_ConfigClockSource+0xd0>

080031c6 <HAL_TIM_OC_DelayElapsedCallback>:
 80031c6:	4770      	bx	lr

080031c8 <HAL_TIM_IC_CaptureCallback>:
 80031c8:	4770      	bx	lr

080031ca <HAL_TIM_PWM_PulseFinishedCallback>:
 80031ca:	4770      	bx	lr

080031cc <HAL_TIM_TriggerCallback>:
 80031cc:	4770      	bx	lr

080031ce <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80031ce:	6803      	ldr	r3, [r0, #0]
 80031d0:	691a      	ldr	r2, [r3, #16]
 80031d2:	0791      	lsls	r1, r2, #30
{
 80031d4:	b510      	push	{r4, lr}
 80031d6:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80031d8:	d50e      	bpl.n	80031f8 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80031da:	68da      	ldr	r2, [r3, #12]
 80031dc:	0792      	lsls	r2, r2, #30
 80031de:	d50b      	bpl.n	80031f8 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80031e0:	f06f 0202 	mvn.w	r2, #2
 80031e4:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031e6:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031e8:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031ea:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031ec:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031ee:	d077      	beq.n	80032e0 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 80031f0:	f7ff ffea 	bl	80031c8 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031f4:	2300      	movs	r3, #0
 80031f6:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80031f8:	6823      	ldr	r3, [r4, #0]
 80031fa:	691a      	ldr	r2, [r3, #16]
 80031fc:	0750      	lsls	r0, r2, #29
 80031fe:	d510      	bpl.n	8003222 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8003200:	68da      	ldr	r2, [r3, #12]
 8003202:	0751      	lsls	r1, r2, #29
 8003204:	d50d      	bpl.n	8003222 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003206:	f06f 0204 	mvn.w	r2, #4
 800320a:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800320c:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800320e:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003210:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003214:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8003216:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003218:	d068      	beq.n	80032ec <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 800321a:	f7ff ffd5 	bl	80031c8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800321e:	2300      	movs	r3, #0
 8003220:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003222:	6823      	ldr	r3, [r4, #0]
 8003224:	691a      	ldr	r2, [r3, #16]
 8003226:	0712      	lsls	r2, r2, #28
 8003228:	d50f      	bpl.n	800324a <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800322a:	68da      	ldr	r2, [r3, #12]
 800322c:	0710      	lsls	r0, r2, #28
 800322e:	d50c      	bpl.n	800324a <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003230:	f06f 0208 	mvn.w	r2, #8
 8003234:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003236:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003238:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800323a:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800323c:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 800323e:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003240:	d05a      	beq.n	80032f8 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8003242:	f7ff ffc1 	bl	80031c8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003246:	2300      	movs	r3, #0
 8003248:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800324a:	6823      	ldr	r3, [r4, #0]
 800324c:	691a      	ldr	r2, [r3, #16]
 800324e:	06d2      	lsls	r2, r2, #27
 8003250:	d510      	bpl.n	8003274 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8003252:	68da      	ldr	r2, [r3, #12]
 8003254:	06d0      	lsls	r0, r2, #27
 8003256:	d50d      	bpl.n	8003274 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003258:	f06f 0210 	mvn.w	r2, #16
 800325c:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800325e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003260:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003262:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003266:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8003268:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800326a:	d04b      	beq.n	8003304 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 800326c:	f7ff ffac 	bl	80031c8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003270:	2300      	movs	r3, #0
 8003272:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003274:	6823      	ldr	r3, [r4, #0]
 8003276:	691a      	ldr	r2, [r3, #16]
 8003278:	07d1      	lsls	r1, r2, #31
 800327a:	d508      	bpl.n	800328e <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800327c:	68da      	ldr	r2, [r3, #12]
 800327e:	07d2      	lsls	r2, r2, #31
 8003280:	d505      	bpl.n	800328e <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003282:	f06f 0201 	mvn.w	r2, #1
 8003286:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003288:	4620      	mov	r0, r4
 800328a:	f002 fa2d 	bl	80056e8 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800328e:	6823      	ldr	r3, [r4, #0]
 8003290:	691a      	ldr	r2, [r3, #16]
 8003292:	0610      	lsls	r0, r2, #24
 8003294:	d508      	bpl.n	80032a8 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8003296:	68da      	ldr	r2, [r3, #12]
 8003298:	0611      	lsls	r1, r2, #24
 800329a:	d505      	bpl.n	80032a8 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800329c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80032a0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80032a2:	4620      	mov	r0, r4
 80032a4:	f000 fa19 	bl	80036da <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80032a8:	6823      	ldr	r3, [r4, #0]
 80032aa:	691a      	ldr	r2, [r3, #16]
 80032ac:	0652      	lsls	r2, r2, #25
 80032ae:	d508      	bpl.n	80032c2 <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80032b0:	68da      	ldr	r2, [r3, #12]
 80032b2:	0650      	lsls	r0, r2, #25
 80032b4:	d505      	bpl.n	80032c2 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032b6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032ba:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80032bc:	4620      	mov	r0, r4
 80032be:	f7ff ff85 	bl	80031cc <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032c2:	6823      	ldr	r3, [r4, #0]
 80032c4:	691a      	ldr	r2, [r3, #16]
 80032c6:	0691      	lsls	r1, r2, #26
 80032c8:	d522      	bpl.n	8003310 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80032ca:	68da      	ldr	r2, [r3, #12]
 80032cc:	0692      	lsls	r2, r2, #26
 80032ce:	d51f      	bpl.n	8003310 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032d0:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 80032d4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032d6:	611a      	str	r2, [r3, #16]
}
 80032d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 80032dc:	f000 b9fc 	b.w	80036d8 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032e0:	f7ff ff71 	bl	80031c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032e4:	4620      	mov	r0, r4
 80032e6:	f7ff ff70 	bl	80031ca <HAL_TIM_PWM_PulseFinishedCallback>
 80032ea:	e783      	b.n	80031f4 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032ec:	f7ff ff6b 	bl	80031c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032f0:	4620      	mov	r0, r4
 80032f2:	f7ff ff6a 	bl	80031ca <HAL_TIM_PWM_PulseFinishedCallback>
 80032f6:	e792      	b.n	800321e <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032f8:	f7ff ff65 	bl	80031c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80032fc:	4620      	mov	r0, r4
 80032fe:	f7ff ff64 	bl	80031ca <HAL_TIM_PWM_PulseFinishedCallback>
 8003302:	e7a0      	b.n	8003246 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003304:	f7ff ff5f 	bl	80031c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003308:	4620      	mov	r0, r4
 800330a:	f7ff ff5e 	bl	80031ca <HAL_TIM_PWM_PulseFinishedCallback>
 800330e:	e7af      	b.n	8003270 <HAL_TIM_IRQHandler+0xa2>
 8003310:	bd10      	pop	{r4, pc}
	...

08003314 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8003314:	4a2e      	ldr	r2, [pc, #184]	; (80033d0 <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 8003316:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8003318:	4290      	cmp	r0, r2
 800331a:	d012      	beq.n	8003342 <TIM_Base_SetConfig+0x2e>
 800331c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003320:	d00f      	beq.n	8003342 <TIM_Base_SetConfig+0x2e>
 8003322:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003326:	4290      	cmp	r0, r2
 8003328:	d00b      	beq.n	8003342 <TIM_Base_SetConfig+0x2e>
 800332a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800332e:	4290      	cmp	r0, r2
 8003330:	d007      	beq.n	8003342 <TIM_Base_SetConfig+0x2e>
 8003332:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003336:	4290      	cmp	r0, r2
 8003338:	d003      	beq.n	8003342 <TIM_Base_SetConfig+0x2e>
 800333a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800333e:	4290      	cmp	r0, r2
 8003340:	d11d      	bne.n	800337e <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 8003342:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003344:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003348:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800334a:	4a21      	ldr	r2, [pc, #132]	; (80033d0 <TIM_Base_SetConfig+0xbc>)
 800334c:	4290      	cmp	r0, r2
 800334e:	d104      	bne.n	800335a <TIM_Base_SetConfig+0x46>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003350:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003352:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003356:	4313      	orrs	r3, r2
 8003358:	e028      	b.n	80033ac <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800335a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800335e:	d0f7      	beq.n	8003350 <TIM_Base_SetConfig+0x3c>
 8003360:	4a1c      	ldr	r2, [pc, #112]	; (80033d4 <TIM_Base_SetConfig+0xc0>)
 8003362:	4290      	cmp	r0, r2
 8003364:	d0f4      	beq.n	8003350 <TIM_Base_SetConfig+0x3c>
 8003366:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800336a:	4290      	cmp	r0, r2
 800336c:	d0f0      	beq.n	8003350 <TIM_Base_SetConfig+0x3c>
 800336e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003372:	4290      	cmp	r0, r2
 8003374:	d0ec      	beq.n	8003350 <TIM_Base_SetConfig+0x3c>
 8003376:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800337a:	4290      	cmp	r0, r2
 800337c:	d0e8      	beq.n	8003350 <TIM_Base_SetConfig+0x3c>
 800337e:	4a16      	ldr	r2, [pc, #88]	; (80033d8 <TIM_Base_SetConfig+0xc4>)
 8003380:	4290      	cmp	r0, r2
 8003382:	d0e5      	beq.n	8003350 <TIM_Base_SetConfig+0x3c>
 8003384:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003388:	4290      	cmp	r0, r2
 800338a:	d0e1      	beq.n	8003350 <TIM_Base_SetConfig+0x3c>
 800338c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003390:	4290      	cmp	r0, r2
 8003392:	d0dd      	beq.n	8003350 <TIM_Base_SetConfig+0x3c>
 8003394:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8003398:	4290      	cmp	r0, r2
 800339a:	d0d9      	beq.n	8003350 <TIM_Base_SetConfig+0x3c>
 800339c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80033a0:	4290      	cmp	r0, r2
 80033a2:	d0d5      	beq.n	8003350 <TIM_Base_SetConfig+0x3c>
 80033a4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80033a8:	4290      	cmp	r0, r2
 80033aa:	d0d1      	beq.n	8003350 <TIM_Base_SetConfig+0x3c>
  TIMx->CR1 = tmpcr1;
 80033ac:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033ae:	688b      	ldr	r3, [r1, #8]
 80033b0:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80033b2:	680b      	ldr	r3, [r1, #0]
 80033b4:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80033b6:	4b06      	ldr	r3, [pc, #24]	; (80033d0 <TIM_Base_SetConfig+0xbc>)
 80033b8:	4298      	cmp	r0, r3
 80033ba:	d006      	beq.n	80033ca <TIM_Base_SetConfig+0xb6>
 80033bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80033c0:	4298      	cmp	r0, r3
 80033c2:	d002      	beq.n	80033ca <TIM_Base_SetConfig+0xb6>
  TIMx->EGR = TIM_EGR_UG;
 80033c4:	2301      	movs	r3, #1
 80033c6:	6143      	str	r3, [r0, #20]
}
 80033c8:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 80033ca:	690b      	ldr	r3, [r1, #16]
 80033cc:	6303      	str	r3, [r0, #48]	; 0x30
 80033ce:	e7f9      	b.n	80033c4 <TIM_Base_SetConfig+0xb0>
 80033d0:	40010000 	.word	0x40010000
 80033d4:	40000400 	.word	0x40000400
 80033d8:	40014000 	.word	0x40014000

080033dc <HAL_TIM_Base_Init>:
{ 
 80033dc:	b510      	push	{r4, lr}
  if(htim == NULL)
 80033de:	4604      	mov	r4, r0
 80033e0:	b1a0      	cbz	r0, 800340c <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80033e2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80033e6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80033ea:	b91b      	cbnz	r3, 80033f4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80033ec:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 80033f0:	f002 fc20 	bl	8005c34 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80033f4:	2302      	movs	r3, #2
 80033f6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80033fa:	6820      	ldr	r0, [r4, #0]
 80033fc:	1d21      	adds	r1, r4, #4
 80033fe:	f7ff ff89 	bl	8003314 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8003402:	2301      	movs	r3, #1
 8003404:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8003408:	2000      	movs	r0, #0
 800340a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800340c:	2001      	movs	r0, #1
}
 800340e:	bd10      	pop	{r4, pc}

08003410 <HAL_TIM_PWM_Init>:
{
 8003410:	b510      	push	{r4, lr}
  if(htim == NULL)
 8003412:	4604      	mov	r4, r0
 8003414:	b1a0      	cbz	r0, 8003440 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8003416:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800341a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800341e:	b91b      	cbnz	r3, 8003428 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003420:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 8003424:	f7ff fdf3 	bl	800300e <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;  
 8003428:	2302      	movs	r3, #2
 800342a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800342e:	6820      	ldr	r0, [r4, #0]
 8003430:	1d21      	adds	r1, r4, #4
 8003432:	f7ff ff6f 	bl	8003314 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8003436:	2301      	movs	r3, #1
 8003438:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 800343c:	2000      	movs	r0, #0
 800343e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003440:	2001      	movs	r0, #1
}  
 8003442:	bd10      	pop	{r4, pc}

08003444 <HAL_TIM_Encoder_Init>:
{
 8003444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003446:	460c      	mov	r4, r1
  if(htim == NULL)
 8003448:	4605      	mov	r5, r0
 800344a:	2800      	cmp	r0, #0
 800344c:	d041      	beq.n	80034d2 <HAL_TIM_Encoder_Init+0x8e>
  if(htim->State == HAL_TIM_STATE_RESET)
 800344e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003452:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003456:	b91b      	cbnz	r3, 8003460 <HAL_TIM_Encoder_Init+0x1c>
    htim->Lock = HAL_UNLOCKED;
 8003458:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Encoder_MspInit(htim);
 800345c:	f002 fbc6 	bl	8005bec <HAL_TIM_Encoder_MspInit>
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8003460:	4629      	mov	r1, r5
  htim->State= HAL_TIM_STATE_BUSY;   
 8003462:	2302      	movs	r3, #2
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8003464:	f851 0b04 	ldr.w	r0, [r1], #4
  htim->State= HAL_TIM_STATE_BUSY;   
 8003468:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800346c:	6883      	ldr	r3, [r0, #8]
 800346e:	f023 0307 	bic.w	r3, r3, #7
 8003472:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);  
 8003474:	f7ff ff4e 	bl	8003314 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8003478:	6828      	ldr	r0, [r5, #0]
  tmpsmcr |= sConfig->EncoderMode;
 800347a:	6823      	ldr	r3, [r4, #0]
  tmpsmcr = htim->Instance->SMCR;
 800347c:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 800347e:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003480:	68a1      	ldr	r1, [r4, #8]
  tmpccer = htim->Instance->CCER;
 8003482:	6a07      	ldr	r7, [r0, #32]
  tmpsmcr |= sConfig->EncoderMode;
 8003484:	431e      	orrs	r6, r3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003486:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003488:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800348c:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003490:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 8003494:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003496:	f423 427c 	bic.w	r2, r3, #64512	; 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800349a:	6923      	ldr	r3, [r4, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800349c:	69e1      	ldr	r1, [r4, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800349e:	011b      	lsls	r3, r3, #4
 80034a0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80034a4:	68e1      	ldr	r1, [r4, #12]
 80034a6:	430b      	orrs	r3, r1
 80034a8:	6a21      	ldr	r1, [r4, #32]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80034aa:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80034ae:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 80034b2:	4313      	orrs	r3, r2
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80034b4:	6961      	ldr	r1, [r4, #20]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80034b6:	f027 02aa 	bic.w	r2, r7, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80034ba:	6867      	ldr	r7, [r4, #4]
  htim->Instance->SMCR = tmpsmcr;
 80034bc:	6086      	str	r6, [r0, #8]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80034be:	ea47 1701 	orr.w	r7, r7, r1, lsl #4
  htim->Instance->CCMR1 = tmpccmr1;
 80034c2:	6183      	str	r3, [r0, #24]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80034c4:	4317      	orrs	r7, r2
  htim->State= HAL_TIM_STATE_READY;
 80034c6:	2301      	movs	r3, #1
  htim->Instance->CCER = tmpccer;
 80034c8:	6207      	str	r7, [r0, #32]
  htim->State= HAL_TIM_STATE_READY;
 80034ca:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
  return HAL_OK;
 80034ce:	2000      	movs	r0, #0
 80034d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80034d2:	2001      	movs	r0, #1
}
 80034d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080034d8 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034d8:	6a03      	ldr	r3, [r0, #32]
 80034da:	f023 0310 	bic.w	r3, r3, #16
 80034de:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80034e0:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 80034e2:	6842      	ldr	r2, [r0, #4]
{
 80034e4:	b570      	push	{r4, r5, r6, lr}
  tmpccmrx = TIMx->CCMR1;
 80034e6:	6984      	ldr	r4, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034e8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80034ea:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034ee:	ea44 2505 	orr.w	r5, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034f2:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80034f4:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034f8:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80034fc:	4c0d      	ldr	r4, [pc, #52]	; (8003534 <TIM_OC2_SetConfig+0x5c>)
 80034fe:	42a0      	cmp	r0, r4
 8003500:	d009      	beq.n	8003516 <TIM_OC2_SetConfig+0x3e>
 8003502:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003506:	42a0      	cmp	r0, r4
 8003508:	d005      	beq.n	8003516 <TIM_OC2_SetConfig+0x3e>
  TIMx->CR2 = tmpcr2;
 800350a:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 800350c:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 800350e:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003510:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8003512:	6203      	str	r3, [r0, #32]
}
 8003514:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003516:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003518:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 800351a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800351e:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003522:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003524:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003528:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 800352a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800352e:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
 8003532:	e7ea      	b.n	800350a <TIM_OC2_SetConfig+0x32>
 8003534:	40010000 	.word	0x40010000

08003538 <HAL_TIM_PWM_ConfigChannel>:
{
 8003538:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800353a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800353e:	2b01      	cmp	r3, #1
{
 8003540:	4604      	mov	r4, r0
 8003542:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8003546:	d025      	beq.n	8003594 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8003548:	2301      	movs	r3, #1
 800354a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 800354e:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  switch (Channel)
 8003552:	2a0c      	cmp	r2, #12
 8003554:	d818      	bhi.n	8003588 <HAL_TIM_PWM_ConfigChannel+0x50>
 8003556:	e8df f002 	tbb	[pc, r2]
 800355a:	1707      	.short	0x1707
 800355c:	171e1717 	.word	0x171e1717
 8003560:	172f1717 	.word	0x172f1717
 8003564:	1717      	.short	0x1717
 8003566:	40          	.byte	0x40
 8003567:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003568:	6820      	ldr	r0, [r4, #0]
 800356a:	f7ff fcc1 	bl	8002ef0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800356e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003570:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003572:	699a      	ldr	r2, [r3, #24]
 8003574:	f042 0208 	orr.w	r2, r2, #8
 8003578:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800357a:	699a      	ldr	r2, [r3, #24]
 800357c:	f022 0204 	bic.w	r2, r2, #4
 8003580:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003582:	699a      	ldr	r2, [r3, #24]
 8003584:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003586:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8003588:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800358a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800358c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8003590:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 8003594:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003596:	6820      	ldr	r0, [r4, #0]
 8003598:	f7ff ff9e 	bl	80034d8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800359c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800359e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80035a0:	699a      	ldr	r2, [r3, #24]
 80035a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80035a8:	699a      	ldr	r2, [r3, #24]
 80035aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80035b0:	699a      	ldr	r2, [r3, #24]
 80035b2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80035b6:	e7e6      	b.n	8003586 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80035b8:	6820      	ldr	r0, [r4, #0]
 80035ba:	f7ff fcc5 	bl	8002f48 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80035be:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80035c0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80035c2:	69da      	ldr	r2, [r3, #28]
 80035c4:	f042 0208 	orr.w	r2, r2, #8
 80035c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80035ca:	69da      	ldr	r2, [r3, #28]
 80035cc:	f022 0204 	bic.w	r2, r2, #4
 80035d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80035d2:	69da      	ldr	r2, [r3, #28]
 80035d4:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 80035d6:	61da      	str	r2, [r3, #28]
    break;
 80035d8:	e7d6      	b.n	8003588 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80035da:	6820      	ldr	r0, [r4, #0]
 80035dc:	f7ff fce4 	bl	8002fa8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80035e0:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 80035e2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80035e4:	69da      	ldr	r2, [r3, #28]
 80035e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035ea:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80035ec:	69da      	ldr	r2, [r3, #28]
 80035ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035f2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 80035f4:	69da      	ldr	r2, [r3, #28]
 80035f6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80035fa:	e7ec      	b.n	80035d6 <HAL_TIM_PWM_ConfigChannel+0x9e>

080035fc <TIM_CCxChannelCmd>:
  TIMx->CCER &= ~tmp;
 80035fc:	6a03      	ldr	r3, [r0, #32]
{
 80035fe:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << Channel;
 8003600:	2401      	movs	r4, #1
 8003602:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8003604:	ea23 0304 	bic.w	r3, r3, r4
 8003608:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 800360a:	6a03      	ldr	r3, [r0, #32]
 800360c:	408a      	lsls	r2, r1
 800360e:	431a      	orrs	r2, r3
 8003610:	6202      	str	r2, [r0, #32]
 8003612:	bd10      	pop	{r4, pc}

08003614 <HAL_TIM_PWM_Start>:
{
 8003614:	b510      	push	{r4, lr}
 8003616:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003618:	2201      	movs	r2, #1
 800361a:	6800      	ldr	r0, [r0, #0]
 800361c:	f7ff ffee 	bl	80035fc <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8003620:	6823      	ldr	r3, [r4, #0]
 8003622:	4a08      	ldr	r2, [pc, #32]	; (8003644 <HAL_TIM_PWM_Start+0x30>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d003      	beq.n	8003630 <HAL_TIM_PWM_Start+0x1c>
 8003628:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800362c:	4293      	cmp	r3, r2
 800362e:	d103      	bne.n	8003638 <HAL_TIM_PWM_Start+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 8003630:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003632:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003636:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	f042 0201 	orr.w	r2, r2, #1
 800363e:	601a      	str	r2, [r3, #0]
} 
 8003640:	2000      	movs	r0, #0
 8003642:	bd10      	pop	{r4, pc}
 8003644:	40010000 	.word	0x40010000

08003648 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8003648:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800364c:	2b01      	cmp	r3, #1
{
 800364e:	b510      	push	{r4, lr}
 8003650:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8003654:	d018      	beq.n	8003688 <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 8003656:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800365a:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 800365c:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800365e:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8003660:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8003662:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003666:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8003668:	685a      	ldr	r2, [r3, #4]
 800366a:	4322      	orrs	r2, r4
 800366c:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800366e:	689a      	ldr	r2, [r3, #8]
 8003670:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003674:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8003676:	689a      	ldr	r2, [r3, #8]
 8003678:	430a      	orrs	r2, r1
 800367a:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 800367c:	2301      	movs	r3, #1
 800367e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8003682:	2300      	movs	r3, #0
 8003684:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8003688:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 800368a:	bd10      	pop	{r4, pc}

0800368c <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 800368c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003690:	2b01      	cmp	r3, #1
 8003692:	d01f      	beq.n	80036d4 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003694:	68cb      	ldr	r3, [r1, #12]
 8003696:	688a      	ldr	r2, [r1, #8]
 8003698:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800369c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800369e:	684a      	ldr	r2, [r1, #4]
 80036a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036a4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80036a6:	680a      	ldr	r2, [r1, #0]
 80036a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036ac:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80036ae:	690a      	ldr	r2, [r1, #16]
 80036b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80036b4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80036b6:	694a      	ldr	r2, [r1, #20]
 80036b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036bc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80036be:	698a      	ldr	r2, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 80036c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80036c4:	4313      	orrs	r3, r2
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80036c6:	6802      	ldr	r2, [r0, #0]
 80036c8:	6453      	str	r3, [r2, #68]	; 0x44
  
  __HAL_UNLOCK(htim);
 80036ca:	2300      	movs	r3, #0
 80036cc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  return HAL_OK;
 80036d0:	4618      	mov	r0, r3
 80036d2:	4770      	bx	lr
  __HAL_LOCK(htim);
 80036d4:	2002      	movs	r0, #2
}
 80036d6:	4770      	bx	lr

080036d8 <HAL_TIMEx_CommutationCallback>:
 80036d8:	4770      	bx	lr

080036da <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036da:	4770      	bx	lr

080036dc <USART_EndRxTransfer>:
  * @retval None
  */
static void USART_EndRxTransfer(USART_HandleTypeDef *husart)
{
  /* Disable RXNE, PE and ERR interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036dc:	6803      	ldr	r3, [r0, #0]
 80036de:	68da      	ldr	r2, [r3, #12]
 80036e0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80036e4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 80036e6:	695a      	ldr	r2, [r3, #20]
 80036e8:	f022 0201 	bic.w	r2, r2, #1
 80036ec:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 80036ee:	2301      	movs	r3, #1
 80036f0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 80036f4:	4770      	bx	lr
	...

080036f8 <HAL_USART_Init>:
{
 80036f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(husart == NULL)
 80036fc:	4605      	mov	r5, r0
 80036fe:	2800      	cmp	r0, #0
 8003700:	f000 808c 	beq.w	800381c <HAL_USART_Init+0x124>
  if(husart->State == HAL_USART_STATE_RESET)
 8003704:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003708:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800370c:	b91b      	cbnz	r3, 8003716 <HAL_USART_Init+0x1e>
    husart->Lock = HAL_UNLOCKED;
 800370e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_USART_MspInit(husart);
 8003712:	f002 fc9b 	bl	800604c <HAL_USART_MspInit>
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8003716:	682e      	ldr	r6, [r5, #0]
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE| husart->Init.CLKPolarity |
 8003718:	69e9      	ldr	r1, [r5, #28]
  husart->State = HAL_USART_STATE_BUSY;
 800371a:	2302      	movs	r3, #2
 800371c:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8003720:	68f3      	ldr	r3, [r6, #12]
 8003722:	f023 030c 	bic.w	r3, r3, #12
 8003726:	60f3      	str	r3, [r6, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE| husart->Init.CLKPolarity |
 8003728:	69ab      	ldr	r3, [r5, #24]
  tmpreg = husart->Instance->CR2;
 800372a:	6932      	ldr	r2, [r6, #16]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE| husart->Init.CLKPolarity |
 800372c:	430b      	orrs	r3, r1
 800372e:	6a29      	ldr	r1, [r5, #32]
 8003730:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003734:	430b      	orrs	r3, r1
 8003736:	68e9      	ldr	r1, [r5, #12]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 8003738:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE| husart->Init.CLKPolarity |
 800373c:	430b      	orrs	r3, r1
 800373e:	4313      	orrs	r3, r2
                       husart->Init.CLKPhase| husart->Init.CLKLastBit | husart->Init.StopBits);
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 8003740:	6133      	str	r3, [r6, #16]
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
     Force OVER8 bit to 1 in order to reach the max USART frequencies */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8003742:	6929      	ldr	r1, [r5, #16]
 8003744:	68ab      	ldr	r3, [r5, #8]
  tmpreg = husart->Instance->CR1;
 8003746:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8003748:	430b      	orrs	r3, r1
 800374a:	6969      	ldr	r1, [r5, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800374c:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8003750:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8003754:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8003758:	430b      	orrs	r3, r1
 800375a:	4313      	orrs	r3, r2

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 800375c:	60f3      	str	r3, [r6, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 800375e:	6973      	ldr	r3, [r6, #20]
 8003760:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003764:	6173      	str	r3, [r6, #20]

  /*-------------------------- USART BRR Configuration -----------------------*/
#if defined(USART6) 
  if((husart->Instance == USART1) || (husart->Instance == USART6))
 8003766:	4b2f      	ldr	r3, [pc, #188]	; (8003824 <HAL_USART_Init+0x12c>)
 8003768:	429e      	cmp	r6, r3
 800376a:	d003      	beq.n	8003774 <HAL_USART_Init+0x7c>
 800376c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003770:	429e      	cmp	r6, r3
 8003772:	d13b      	bne.n	80037ec <HAL_USART_Init+0xf4>
  {
    husart->Instance->BRR = USART_BRR(HAL_RCC_GetPCLK2Freq(), husart->Init.BaudRate);
 8003774:	f7ff fbac 	bl	8002ed0 <HAL_RCC_GetPCLK2Freq>
 8003778:	686f      	ldr	r7, [r5, #4]
 800377a:	2419      	movs	r4, #25
 800377c:	fb04 f300 	mul.w	r3, r4, r0
 8003780:	007f      	lsls	r7, r7, #1
 8003782:	f04f 0864 	mov.w	r8, #100	; 0x64
 8003786:	fbb3 f3f7 	udiv	r3, r3, r7
 800378a:	fbb3 f3f8 	udiv	r3, r3, r8
 800378e:	011f      	lsls	r7, r3, #4
 8003790:	f7ff fb9e 	bl	8002ed0 <HAL_RCC_GetPCLK2Freq>
 8003794:	686b      	ldr	r3, [r5, #4]
 8003796:	4360      	muls	r0, r4
 8003798:	005b      	lsls	r3, r3, #1
 800379a:	fbb0 f9f3 	udiv	r9, r0, r3
 800379e:	f7ff fb97 	bl	8002ed0 <HAL_RCC_GetPCLK2Freq>
    husart->Instance->BRR = USART_BRR(HAL_RCC_GetPCLK2Freq(), husart->Init.BaudRate);
  }	
#endif /* USART6 */	
  else
  {
    husart->Instance->BRR = USART_BRR(HAL_RCC_GetPCLK1Freq(), husart->Init.BaudRate);
 80037a2:	686b      	ldr	r3, [r5, #4]
 80037a4:	4360      	muls	r0, r4
 80037a6:	005b      	lsls	r3, r3, #1
 80037a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80037ac:	fbb3 f3f8 	udiv	r3, r3, r8
 80037b0:	fb08 9313 	mls	r3, r8, r3, r9
 80037b4:	011b      	lsls	r3, r3, #4
 80037b6:	3332      	adds	r3, #50	; 0x32
 80037b8:	fbb3 f3f8 	udiv	r3, r3, r8
 80037bc:	f003 030f 	and.w	r3, r3, #15
 80037c0:	433b      	orrs	r3, r7
 80037c2:	60b3      	str	r3, [r6, #8]
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 80037c4:	682b      	ldr	r3, [r5, #0]
 80037c6:	691a      	ldr	r2, [r3, #16]
 80037c8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80037cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037ce:	695a      	ldr	r2, [r3, #20]
 80037d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037d4:	615a      	str	r2, [r3, #20]
  __HAL_USART_ENABLE(husart);
 80037d6:	68da      	ldr	r2, [r3, #12]
 80037d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037dc:	60da      	str	r2, [r3, #12]
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 80037de:	2000      	movs	r0, #0
  husart->State= HAL_USART_STATE_READY;
 80037e0:	2301      	movs	r3, #1
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 80037e2:	6428      	str	r0, [r5, #64]	; 0x40
  husart->State= HAL_USART_STATE_READY;
 80037e4:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  return HAL_OK;
 80037e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    husart->Instance->BRR = USART_BRR(HAL_RCC_GetPCLK1Freq(), husart->Init.BaudRate);
 80037ec:	f7ff fb60 	bl	8002eb0 <HAL_RCC_GetPCLK1Freq>
 80037f0:	686f      	ldr	r7, [r5, #4]
 80037f2:	2419      	movs	r4, #25
 80037f4:	fb04 f300 	mul.w	r3, r4, r0
 80037f8:	007f      	lsls	r7, r7, #1
 80037fa:	f04f 0864 	mov.w	r8, #100	; 0x64
 80037fe:	fbb3 f3f7 	udiv	r3, r3, r7
 8003802:	fbb3 f3f8 	udiv	r3, r3, r8
 8003806:	011f      	lsls	r7, r3, #4
 8003808:	f7ff fb52 	bl	8002eb0 <HAL_RCC_GetPCLK1Freq>
 800380c:	686b      	ldr	r3, [r5, #4]
 800380e:	4360      	muls	r0, r4
 8003810:	005b      	lsls	r3, r3, #1
 8003812:	fbb0 f9f3 	udiv	r9, r0, r3
 8003816:	f7ff fb4b 	bl	8002eb0 <HAL_RCC_GetPCLK1Freq>
 800381a:	e7c2      	b.n	80037a2 <HAL_USART_Init+0xaa>
    return HAL_ERROR;
 800381c:	2001      	movs	r0, #1
}
 800381e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003822:	bf00      	nop
 8003824:	40011000 	.word	0x40011000

08003828 <HAL_USART_TxCpltCallback>:
 8003828:	4770      	bx	lr

0800382a <HAL_USART_RxCpltCallback>:
 800382a:	4770      	bx	lr

0800382c <USART_Receive_IT>:
  if(husart->State == HAL_USART_STATE_BUSY_RX)
 800382c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003830:	2b22      	cmp	r3, #34	; 0x22
{
 8003832:	b510      	push	{r4, lr}
  if(husart->State == HAL_USART_STATE_BUSY_RX)
 8003834:	d146      	bne.n	80038c4 <USART_Receive_IT+0x98>
    if(husart->Init.WordLength == USART_WORDLENGTH_9B)
 8003836:	6883      	ldr	r3, [r0, #8]
 8003838:	6901      	ldr	r1, [r0, #16]
 800383a:	6802      	ldr	r2, [r0, #0]
 800383c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003840:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003842:	d12a      	bne.n	800389a <USART_Receive_IT+0x6e>
      if(husart->Init.Parity == USART_PARITY_NONE)
 8003844:	bb21      	cbnz	r1, 8003890 <USART_Receive_IT+0x64>
        *tmp = (uint16_t)(husart->Instance->DR & (uint16_t)0x01FF);
 8003846:	6851      	ldr	r1, [r2, #4]
 8003848:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800384c:	f823 1b02 	strh.w	r1, [r3], #2
        husart->pRxBuffPtr += 1U;
 8003850:	62c3      	str	r3, [r0, #44]	; 0x2c
      if(--husart->RxXferCount != 0x00U)
 8003852:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8003854:	3b01      	subs	r3, #1
 8003856:	b29b      	uxth	r3, r3
 8003858:	8643      	strh	r3, [r0, #50]	; 0x32
 800385a:	b113      	cbz	r3, 8003862 <USART_Receive_IT+0x36>
        husart->Instance->DR = (DUMMY_DATA & (uint16_t)0x01FF);
 800385c:	f240 13ff 	movw	r3, #511	; 0x1ff
 8003860:	6053      	str	r3, [r2, #4]
    if(husart->RxXferCount == 0U)
 8003862:	8e44      	ldrh	r4, [r0, #50]	; 0x32
 8003864:	b2a4      	uxth	r4, r4
 8003866:	b98c      	cbnz	r4, 800388c <USART_Receive_IT+0x60>
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 8003868:	6803      	ldr	r3, [r0, #0]
 800386a:	68da      	ldr	r2, [r3, #12]
 800386c:	f022 0220 	bic.w	r2, r2, #32
 8003870:	60da      	str	r2, [r3, #12]
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 8003872:	68da      	ldr	r2, [r3, #12]
 8003874:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003878:	60da      	str	r2, [r3, #12]
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 800387a:	695a      	ldr	r2, [r3, #20]
 800387c:	f022 0201 	bic.w	r2, r2, #1
 8003880:	615a      	str	r2, [r3, #20]
      husart->State = HAL_USART_STATE_READY;
 8003882:	2301      	movs	r3, #1
 8003884:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_USART_RxCpltCallback(husart);
 8003888:	f7ff ffcf 	bl	800382a <HAL_USART_RxCpltCallback>
    if(husart->RxXferCount == 0U)
 800388c:	2000      	movs	r0, #0
}
 800388e:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(husart->Instance->DR & (uint16_t)0x00FF);
 8003890:	6851      	ldr	r1, [r2, #4]
 8003892:	b2c9      	uxtb	r1, r1
 8003894:	f823 1b01 	strh.w	r1, [r3], #1
 8003898:	e7da      	b.n	8003850 <USART_Receive_IT+0x24>
      if(husart->Init.Parity == USART_PARITY_NONE)
 800389a:	b969      	cbnz	r1, 80038b8 <USART_Receive_IT+0x8c>
        *husart->pRxBuffPtr++ = (uint8_t)(husart->Instance->DR & (uint8_t)0x00FF);
 800389c:	1c59      	adds	r1, r3, #1
 800389e:	6852      	ldr	r2, [r2, #4]
 80038a0:	62c1      	str	r1, [r0, #44]	; 0x2c
        *husart->pRxBuffPtr++ = (uint8_t)(husart->Instance->DR & (uint8_t)0x007F);
 80038a2:	701a      	strb	r2, [r3, #0]
      if(--husart->RxXferCount != 0x00U)
 80038a4:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80038a6:	3b01      	subs	r3, #1
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	8643      	strh	r3, [r0, #50]	; 0x32
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d0d8      	beq.n	8003862 <USART_Receive_IT+0x36>
        husart->Instance->DR = (DUMMY_DATA & (uint16_t)0x00FF);
 80038b0:	6803      	ldr	r3, [r0, #0]
 80038b2:	22ff      	movs	r2, #255	; 0xff
 80038b4:	605a      	str	r2, [r3, #4]
 80038b6:	e7d4      	b.n	8003862 <USART_Receive_IT+0x36>
        *husart->pRxBuffPtr++ = (uint8_t)(husart->Instance->DR & (uint8_t)0x007F);
 80038b8:	6852      	ldr	r2, [r2, #4]
 80038ba:	1c59      	adds	r1, r3, #1
 80038bc:	62c1      	str	r1, [r0, #44]	; 0x2c
 80038be:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80038c2:	e7ee      	b.n	80038a2 <USART_Receive_IT+0x76>
    return HAL_BUSY;
 80038c4:	2002      	movs	r0, #2
 80038c6:	bd10      	pop	{r4, pc}

080038c8 <HAL_USART_TxRxCpltCallback>:
 80038c8:	4770      	bx	lr

080038ca <USART_TransmitReceive_IT>:
  if(husart->State == HAL_USART_STATE_BUSY_TX_RX)
 80038ca:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80038ce:	2b32      	cmp	r3, #50	; 0x32
{
 80038d0:	b510      	push	{r4, lr}
  if(husart->State == HAL_USART_STATE_BUSY_TX_RX)
 80038d2:	d165      	bne.n	80039a0 <USART_TransmitReceive_IT+0xd6>
    if(husart->TxXferCount != 0x00U)
 80038d4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	b1e3      	cbz	r3, 8003914 <USART_TransmitReceive_IT+0x4a>
      if(__HAL_USART_GET_FLAG(husart, USART_FLAG_TXE) != RESET)
 80038da:	6802      	ldr	r2, [r0, #0]
 80038dc:	6813      	ldr	r3, [r2, #0]
 80038de:	0619      	lsls	r1, r3, #24
 80038e0:	d518      	bpl.n	8003914 <USART_TransmitReceive_IT+0x4a>
        if(husart->Init.WordLength == USART_WORDLENGTH_9B)
 80038e2:	6883      	ldr	r3, [r0, #8]
 80038e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038e8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80038ea:	d144      	bne.n	8003976 <USART_TransmitReceive_IT+0xac>
          husart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80038ec:	8819      	ldrh	r1, [r3, #0]
 80038ee:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80038f2:	6051      	str	r1, [r2, #4]
          if(husart->Init.Parity == USART_PARITY_NONE)
 80038f4:	6901      	ldr	r1, [r0, #16]
 80038f6:	2900      	cmp	r1, #0
 80038f8:	d13b      	bne.n	8003972 <USART_TransmitReceive_IT+0xa8>
            husart->pTxBuffPtr += 2U;
 80038fa:	3302      	adds	r3, #2
            husart->pTxBuffPtr += 1U;
 80038fc:	6243      	str	r3, [r0, #36]	; 0x24
        husart->TxXferCount--;
 80038fe:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003900:	3b01      	subs	r3, #1
 8003902:	b29b      	uxth	r3, r3
 8003904:	8543      	strh	r3, [r0, #42]	; 0x2a
        if(husart->TxXferCount == 0U)
 8003906:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003908:	b29b      	uxth	r3, r3
 800390a:	b91b      	cbnz	r3, 8003914 <USART_TransmitReceive_IT+0x4a>
          CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 800390c:	68d3      	ldr	r3, [r2, #12]
 800390e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003912:	60d3      	str	r3, [r2, #12]
    if(husart->RxXferCount != 0x00U)
 8003914:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8003916:	b29b      	uxth	r3, r3
 8003918:	b1a3      	cbz	r3, 8003944 <USART_TransmitReceive_IT+0x7a>
      if(__HAL_USART_GET_FLAG(husart, USART_FLAG_RXNE) != RESET)
 800391a:	6802      	ldr	r2, [r0, #0]
 800391c:	6813      	ldr	r3, [r2, #0]
 800391e:	069b      	lsls	r3, r3, #26
 8003920:	d510      	bpl.n	8003944 <USART_TransmitReceive_IT+0x7a>
        if(husart->Init.WordLength == USART_WORDLENGTH_9B)
 8003922:	6883      	ldr	r3, [r0, #8]
 8003924:	6901      	ldr	r1, [r0, #16]
 8003926:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800392a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800392c:	d12c      	bne.n	8003988 <USART_TransmitReceive_IT+0xbe>
            *tmp = (uint16_t)(husart->Instance->DR & (uint16_t)0x01FF);
 800392e:	6852      	ldr	r2, [r2, #4]
          if(husart->Init.Parity == USART_PARITY_NONE)
 8003930:	bb31      	cbnz	r1, 8003980 <USART_TransmitReceive_IT+0xb6>
            *tmp = (uint16_t)(husart->Instance->DR & (uint16_t)0x01FF);
 8003932:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003936:	f823 2b02 	strh.w	r2, [r3], #2
            husart->pRxBuffPtr += 1U;
 800393a:	62c3      	str	r3, [r0, #44]	; 0x2c
        husart->RxXferCount--;
 800393c:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 800393e:	3b01      	subs	r3, #1
 8003940:	b29b      	uxth	r3, r3
 8003942:	8643      	strh	r3, [r0, #50]	; 0x32
    if(husart->RxXferCount == 0U)
 8003944:	8e44      	ldrh	r4, [r0, #50]	; 0x32
 8003946:	b2a4      	uxth	r4, r4
 8003948:	b98c      	cbnz	r4, 800396e <USART_TransmitReceive_IT+0xa4>
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 800394a:	6803      	ldr	r3, [r0, #0]
 800394c:	68da      	ldr	r2, [r3, #12]
 800394e:	f022 0220 	bic.w	r2, r2, #32
 8003952:	60da      	str	r2, [r3, #12]
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 8003954:	68da      	ldr	r2, [r3, #12]
 8003956:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800395a:	60da      	str	r2, [r3, #12]
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 800395c:	695a      	ldr	r2, [r3, #20]
 800395e:	f022 0201 	bic.w	r2, r2, #1
 8003962:	615a      	str	r2, [r3, #20]
      husart->State = HAL_USART_STATE_READY;
 8003964:	2301      	movs	r3, #1
 8003966:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_USART_TxRxCpltCallback(husart);
 800396a:	f7ff ffad 	bl	80038c8 <HAL_USART_TxRxCpltCallback>
    if(husart->RxXferCount == 0U)
 800396e:	2000      	movs	r0, #0
}
 8003970:	bd10      	pop	{r4, pc}
            husart->pTxBuffPtr += 1U;
 8003972:	3301      	adds	r3, #1
 8003974:	e7c2      	b.n	80038fc <USART_TransmitReceive_IT+0x32>
          husart->Instance->DR = (uint8_t)(*husart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003976:	1c59      	adds	r1, r3, #1
 8003978:	6241      	str	r1, [r0, #36]	; 0x24
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	6053      	str	r3, [r2, #4]
 800397e:	e7be      	b.n	80038fe <USART_TransmitReceive_IT+0x34>
            *tmp = (uint16_t)(husart->Instance->DR & (uint16_t)0x00FF);
 8003980:	b2d2      	uxtb	r2, r2
 8003982:	f823 2b01 	strh.w	r2, [r3], #1
 8003986:	e7d8      	b.n	800393a <USART_TransmitReceive_IT+0x70>
          if(husart->Init.Parity == USART_PARITY_NONE)
 8003988:	b921      	cbnz	r1, 8003994 <USART_TransmitReceive_IT+0xca>
            *husart->pRxBuffPtr++ = (uint8_t)(husart->Instance->DR & (uint8_t)0x00FF);
 800398a:	1c59      	adds	r1, r3, #1
 800398c:	6852      	ldr	r2, [r2, #4]
 800398e:	62c1      	str	r1, [r0, #44]	; 0x2c
            *husart->pRxBuffPtr++ = (uint8_t)(husart->Instance->DR & (uint8_t)0x007F);
 8003990:	701a      	strb	r2, [r3, #0]
 8003992:	e7d3      	b.n	800393c <USART_TransmitReceive_IT+0x72>
 8003994:	6852      	ldr	r2, [r2, #4]
 8003996:	1c59      	adds	r1, r3, #1
 8003998:	62c1      	str	r1, [r0, #44]	; 0x2c
 800399a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800399e:	e7f7      	b.n	8003990 <USART_TransmitReceive_IT+0xc6>
    return HAL_BUSY;
 80039a0:	2002      	movs	r0, #2
 80039a2:	bd10      	pop	{r4, pc}

080039a4 <HAL_USART_ErrorCallback>:
 80039a4:	4770      	bx	lr
	...

080039a8 <HAL_USART_IRQHandler>:
  uint32_t isrflags = READ_REG(husart->Instance->SR);
 80039a8:	6803      	ldr	r3, [r0, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its   = READ_REG(husart->Instance->CR1);
 80039ac:	68d9      	ldr	r1, [r3, #12]
{
 80039ae:	b570      	push	{r4, r5, r6, lr}
  if(errorflags == RESET)
 80039b0:	0716      	lsls	r6, r2, #28
{
 80039b2:	4604      	mov	r4, r0
  uint32_t cr3its   = READ_REG(husart->Instance->CR3);
 80039b4:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 80039b6:	d110      	bne.n	80039da <HAL_USART_IRQHandler+0x32>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039b8:	0696      	lsls	r6, r2, #26
 80039ba:	d56a      	bpl.n	8003a92 <HAL_USART_IRQHandler+0xea>
 80039bc:	068d      	lsls	r5, r1, #26
 80039be:	d568      	bpl.n	8003a92 <HAL_USART_IRQHandler+0xea>
      if(husart->State == HAL_USART_STATE_BUSY_RX)
 80039c0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80039c4:	2b22      	cmp	r3, #34	; 0x22
 80039c6:	d103      	bne.n	80039d0 <HAL_USART_IRQHandler+0x28>
}
 80039c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        USART_Receive_IT(husart);
 80039cc:	f7ff bf2e 	b.w	800382c <USART_Receive_IT>
        USART_TransmitReceive_IT(husart);
 80039d0:	4620      	mov	r0, r4
}
 80039d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        USART_TransmitReceive_IT(husart);
 80039d6:	f7ff bf78 	b.w	80038ca <USART_TransmitReceive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80039da:	f015 0501 	ands.w	r5, r5, #1
 80039de:	d102      	bne.n	80039e6 <HAL_USART_IRQHandler+0x3e>
 80039e0:	f411 7f90 	tst.w	r1, #288	; 0x120
 80039e4:	d055      	beq.n	8003a92 <HAL_USART_IRQHandler+0xea>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80039e6:	07d3      	lsls	r3, r2, #31
 80039e8:	d505      	bpl.n	80039f6 <HAL_USART_IRQHandler+0x4e>
 80039ea:	05ce      	lsls	r6, r1, #23
      husart->ErrorCode |= HAL_USART_ERROR_PE;
 80039ec:	bf42      	ittt	mi
 80039ee:	6c23      	ldrmi	r3, [r4, #64]	; 0x40
 80039f0:	f043 0301 	orrmi.w	r3, r3, #1
 80039f4:	6423      	strmi	r3, [r4, #64]	; 0x40
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039f6:	0750      	lsls	r0, r2, #29
 80039f8:	d504      	bpl.n	8003a04 <HAL_USART_IRQHandler+0x5c>
 80039fa:	b11d      	cbz	r5, 8003a04 <HAL_USART_IRQHandler+0x5c>
      husart->ErrorCode |= HAL_USART_ERROR_NE;
 80039fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80039fe:	f043 0302 	orr.w	r3, r3, #2
 8003a02:	6423      	str	r3, [r4, #64]	; 0x40
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a04:	0793      	lsls	r3, r2, #30
 8003a06:	d504      	bpl.n	8003a12 <HAL_USART_IRQHandler+0x6a>
 8003a08:	b11d      	cbz	r5, 8003a12 <HAL_USART_IRQHandler+0x6a>
      husart->ErrorCode |= HAL_USART_ERROR_FE;
 8003a0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a0c:	f043 0304 	orr.w	r3, r3, #4
 8003a10:	6423      	str	r3, [r4, #64]	; 0x40
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a12:	0716      	lsls	r6, r2, #28
 8003a14:	d504      	bpl.n	8003a20 <HAL_USART_IRQHandler+0x78>
 8003a16:	b11d      	cbz	r5, 8003a20 <HAL_USART_IRQHandler+0x78>
      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 8003a18:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a1a:	f043 0308 	orr.w	r3, r3, #8
 8003a1e:	6423      	str	r3, [r4, #64]	; 0x40
    if(husart->ErrorCode != HAL_USART_ERROR_NONE)
 8003a20:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d075      	beq.n	8003b12 <HAL_USART_IRQHandler+0x16a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a26:	0695      	lsls	r5, r2, #26
 8003a28:	d508      	bpl.n	8003a3c <HAL_USART_IRQHandler+0x94>
 8003a2a:	0688      	lsls	r0, r1, #26
 8003a2c:	d506      	bpl.n	8003a3c <HAL_USART_IRQHandler+0x94>
        if(husart->State == HAL_USART_STATE_BUSY_RX)
 8003a2e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8003a32:	2b22      	cmp	r3, #34	; 0x22
          USART_Receive_IT(husart);
 8003a34:	4620      	mov	r0, r4
        if(husart->State == HAL_USART_STATE_BUSY_RX)
 8003a36:	d121      	bne.n	8003a7c <HAL_USART_IRQHandler+0xd4>
          USART_Receive_IT(husart);
 8003a38:	f7ff fef8 	bl	800382c <USART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR);
 8003a3c:	6823      	ldr	r3, [r4, #0]
 8003a3e:	695d      	ldr	r5, [r3, #20]
      if(((husart->ErrorCode & HAL_USART_ERROR_ORE) != RESET) || dmarequest)
 8003a40:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003a42:	0711      	lsls	r1, r2, #28
        USART_EndRxTransfer(husart);
 8003a44:	4620      	mov	r0, r4
      if(((husart->ErrorCode & HAL_USART_ERROR_ORE) != RESET) || dmarequest)
 8003a46:	d402      	bmi.n	8003a4e <HAL_USART_IRQHandler+0xa6>
 8003a48:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8003a4c:	d01d      	beq.n	8003a8a <HAL_USART_IRQHandler+0xe2>
        USART_EndRxTransfer(husart);
 8003a4e:	f7ff fe45 	bl	80036dc <USART_EndRxTransfer>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8003a52:	6823      	ldr	r3, [r4, #0]
 8003a54:	695a      	ldr	r2, [r3, #20]
 8003a56:	0652      	lsls	r2, r2, #25
 8003a58:	d513      	bpl.n	8003a82 <HAL_USART_IRQHandler+0xda>
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR);
 8003a5a:	695a      	ldr	r2, [r3, #20]
          if(husart->hdmarx != NULL)
 8003a5c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR);
 8003a5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a62:	615a      	str	r2, [r3, #20]
          if(husart->hdmarx != NULL)
 8003a64:	b168      	cbz	r0, 8003a82 <HAL_USART_IRQHandler+0xda>
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 8003a66:	4b2b      	ldr	r3, [pc, #172]	; (8003b14 <HAL_USART_IRQHandler+0x16c>)
 8003a68:	6503      	str	r3, [r0, #80]	; 0x50
            if(HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 8003a6a:	f7fd fd7b 	bl	8001564 <HAL_DMA_Abort_IT>
 8003a6e:	2800      	cmp	r0, #0
 8003a70:	d04f      	beq.n	8003b12 <HAL_USART_IRQHandler+0x16a>
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 8003a72:	6ba0      	ldr	r0, [r4, #56]	; 0x38
}
 8003a74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 8003a78:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003a7a:	4718      	bx	r3
          USART_TransmitReceive_IT(husart);
 8003a7c:	f7ff ff25 	bl	80038ca <USART_TransmitReceive_IT>
 8003a80:	e7dc      	b.n	8003a3c <HAL_USART_IRQHandler+0x94>
            HAL_USART_ErrorCallback(husart);
 8003a82:	4620      	mov	r0, r4
 8003a84:	f7ff ff8e 	bl	80039a4 <HAL_USART_ErrorCallback>
 8003a88:	bd70      	pop	{r4, r5, r6, pc}
        HAL_USART_ErrorCallback(husart);
 8003a8a:	f7ff ff8b 	bl	80039a4 <HAL_USART_ErrorCallback>
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 8003a8e:	6425      	str	r5, [r4, #64]	; 0x40
 8003a90:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003a92:	0616      	lsls	r6, r2, #24
 8003a94:	d52b      	bpl.n	8003aee <HAL_USART_IRQHandler+0x146>
 8003a96:	060d      	lsls	r5, r1, #24
 8003a98:	d529      	bpl.n	8003aee <HAL_USART_IRQHandler+0x146>
    if(husart->State == HAL_USART_STATE_BUSY_TX)
 8003a9a:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8003a9e:	2a12      	cmp	r2, #18
 8003aa0:	d196      	bne.n	80039d0 <HAL_USART_IRQHandler+0x28>
  if(husart->State == HAL_USART_STATE_BUSY_TX)
 8003aa2:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8003aa6:	2a12      	cmp	r2, #18
 8003aa8:	d133      	bne.n	8003b12 <HAL_USART_IRQHandler+0x16a>
    if(husart->Init.WordLength == USART_WORDLENGTH_9B)
 8003aaa:	68a2      	ldr	r2, [r4, #8]
 8003aac:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8003ab0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003ab2:	d117      	bne.n	8003ae4 <HAL_USART_IRQHandler+0x13c>
      husart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003ab4:	8811      	ldrh	r1, [r2, #0]
 8003ab6:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8003aba:	6059      	str	r1, [r3, #4]
      if(husart->Init.Parity == USART_PARITY_NONE)
 8003abc:	6921      	ldr	r1, [r4, #16]
 8003abe:	b979      	cbnz	r1, 8003ae0 <HAL_USART_IRQHandler+0x138>
        husart->pTxBuffPtr += 2U;
 8003ac0:	3202      	adds	r2, #2
        husart->pTxBuffPtr += 1U;
 8003ac2:	6262      	str	r2, [r4, #36]	; 0x24
    if(--husart->TxXferCount == 0U)
 8003ac4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003ac6:	3a01      	subs	r2, #1
 8003ac8:	b292      	uxth	r2, r2
 8003aca:	8562      	strh	r2, [r4, #42]	; 0x2a
 8003acc:	bb0a      	cbnz	r2, 8003b12 <HAL_USART_IRQHandler+0x16a>
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 8003ace:	68da      	ldr	r2, [r3, #12]
 8003ad0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ad4:	60da      	str	r2, [r3, #12]
      SET_BIT(husart->Instance->CR1, USART_CR1_TCIE);
 8003ad6:	68da      	ldr	r2, [r3, #12]
 8003ad8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003adc:	60da      	str	r2, [r3, #12]
 8003ade:	bd70      	pop	{r4, r5, r6, pc}
        husart->pTxBuffPtr += 1U;
 8003ae0:	3201      	adds	r2, #1
 8003ae2:	e7ee      	b.n	8003ac2 <HAL_USART_IRQHandler+0x11a>
      husart->Instance->DR = (uint8_t)(*husart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003ae4:	1c51      	adds	r1, r2, #1
 8003ae6:	6261      	str	r1, [r4, #36]	; 0x24
 8003ae8:	7812      	ldrb	r2, [r2, #0]
 8003aea:	605a      	str	r2, [r3, #4]
 8003aec:	e7ea      	b.n	8003ac4 <HAL_USART_IRQHandler+0x11c>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003aee:	0650      	lsls	r0, r2, #25
 8003af0:	d50f      	bpl.n	8003b12 <HAL_USART_IRQHandler+0x16a>
 8003af2:	064a      	lsls	r2, r1, #25
 8003af4:	d50d      	bpl.n	8003b12 <HAL_USART_IRQHandler+0x16a>
  CLEAR_BIT(husart->Instance->CR1, USART_CR1_TCIE);
 8003af6:	68da      	ldr	r2, [r3, #12]
 8003af8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003afc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8003afe:	695a      	ldr	r2, [r3, #20]
 8003b00:	f022 0201 	bic.w	r2, r2, #1
 8003b04:	615a      	str	r2, [r3, #20]
  husart->State = HAL_USART_STATE_READY;
 8003b06:	2301      	movs	r3, #1
 8003b08:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  HAL_USART_TxCpltCallback(husart);
 8003b0c:	4620      	mov	r0, r4
 8003b0e:	f7ff fe8b 	bl	8003828 <HAL_USART_TxCpltCallback>
 8003b12:	bd70      	pop	{r4, r5, r6, pc}
 8003b14:	08003b19 	.word	0x08003b19

08003b18 <USART_DMAAbortOnError>:
{
 8003b18:	b508      	push	{r3, lr}
  USART_HandleTypeDef* husart = ( USART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003b1a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  husart->RxXferCount = 0x00U;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	8643      	strh	r3, [r0, #50]	; 0x32
  husart->TxXferCount = 0x00U;
 8003b20:	8543      	strh	r3, [r0, #42]	; 0x2a
  HAL_USART_ErrorCallback(husart);
 8003b22:	f7ff ff3f 	bl	80039a4 <HAL_USART_ErrorCallback>
 8003b26:	bd08      	pop	{r3, pc}

08003b28 <pid_init>:
{
    pid->Kp = Kp;
    pid->Ki= Ki;
    pid->Kd = Kd;
    pid->A0 =  Kp + Ki + Kd ;
    pid->A1 =  -Kp - 2*Kd ;
 8003b28:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
    pid->Kp = Kp;
 8003b2c:	ed80 0a00 	vstr	s0, [r0]
    pid->Ki= Ki;
 8003b30:	edc0 0a01 	vstr	s1, [r0, #4]
    pid->A0 =  Kp + Ki + Kd ;
 8003b34:	ee70 0a20 	vadd.f32	s1, s0, s1
    pid->A1 =  -Kp - 2*Kd ;
 8003b38:	ee91 0a67 	vfnma.f32	s0, s2, s15
    pid->A2 = Kd ;
    pid->state[0] =0;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	6183      	str	r3, [r0, #24]
    pid->A0 =  Kp + Ki + Kd ;
 8003b40:	ee70 0a81 	vadd.f32	s1, s1, s2
    pid->Kd = Kd;
 8003b44:	ed80 1a02 	vstr	s2, [r0, #8]
    pid->A0 =  Kp + Ki + Kd ;
 8003b48:	edc0 0a03 	vstr	s1, [r0, #12]
    pid->A1 =  -Kp - 2*Kd ;
 8003b4c:	ed80 0a04 	vstr	s0, [r0, #16]
    pid->A2 = Kd ;
 8003b50:	ed80 1a05 	vstr	s2, [r0, #20]
    pid->state[1] =0;
 8003b54:	61c3      	str	r3, [r0, #28]
 8003b56:	4770      	bx	lr

08003b58 <pid_controller>:
float pid_controller(PID_OBJ* pid0 , float in)
{
    float out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (pid0->A0 * in) + (pid0->A1 * pid0->state[0]) 
 8003b58:	ed90 7a06 	vldr	s14, [r0, #24]
 8003b5c:	edd0 7a04 	vldr	s15, [r0, #16]
 8003b60:	edd0 6a03 	vldr	s13, [r0, #12]
           + (pid0->A2 * pid0->state[1]) + (pid0->state[2]);
 8003b64:	ed90 6a05 	vldr	s12, [r0, #20]

    /* Update state */
    pid0->state[1] = pid0->state[0];
    pid0->state[0] = in;
 8003b68:	ed80 0a06 	vstr	s0, [r0, #24]
    out = (pid0->A0 * in) + (pid0->A1 * pid0->state[0]) 
 8003b6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b70:	eee6 7a80 	vfma.f32	s15, s13, s0
           + (pid0->A2 * pid0->state[1]) + (pid0->state[2]);
 8003b74:	edd0 6a07 	vldr	s13, [r0, #28]
    pid0->state[1] = pid0->state[0];
 8003b78:	ed80 7a07 	vstr	s14, [r0, #28]
           + (pid0->A2 * pid0->state[1]) + (pid0->state[2]);
 8003b7c:	eee6 7a26 	vfma.f32	s15, s12, s13
    out = (pid0->A0 * in) + (pid0->A1 * pid0->state[0]) 
 8003b80:	edd0 6a08 	vldr	s13, [r0, #32]
 8003b84:	ee77 7aa6 	vadd.f32	s15, s15, s13
    pid0->state[2] = out;
 8003b88:	edc0 7a08 	vstr	s15, [r0, #32]

    return (out);
}
 8003b8c:	eeb0 0a67 	vmov.f32	s0, s15
 8003b90:	4770      	bx	lr

08003b92 <cal_error>:
    bldc2.Kf = 0.1;
}
/**/
int cal_error(int ref, int fb)
{
    int ee=ref-fb;
 8003b92:	1a40      	subs	r0, r0, r1
    if(ee>600)      ee-=1200;
 8003b94:	f5b0 7f16 	cmp.w	r0, #600	; 0x258
 8003b98:	dd02      	ble.n	8003ba0 <cal_error+0xe>
 8003b9a:	f5a0 6096 	sub.w	r0, r0, #1200	; 0x4b0
 8003b9e:	4770      	bx	lr
    if(ee<-600)     ee+=1200;
 8003ba0:	f510 7f16 	cmn.w	r0, #600	; 0x258
 8003ba4:	bfb8      	it	lt
 8003ba6:	f500 6096 	addlt.w	r0, r0, #1200	; 0x4b0
    return ee;
}
 8003baa:	4770      	bx	lr

08003bac <invSqrt>:
float invSqrt(float x) {
	float halfx = 0.5f * x;
	float y = x;
	long i = *(long*)&y;
	i = 0x5f3759df - (i>>1);
	y = *(float*)&i;
 8003bac:	ee10 2a10 	vmov	r2, s0
 8003bb0:	4b0c      	ldr	r3, [pc, #48]	; (8003be4 <invSqrt+0x38>)
	float halfx = 0.5f * x;
 8003bb2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	y = *(float*)&i;
 8003bb6:	eba3 0362 	sub.w	r3, r3, r2, asr #1
	float halfx = 0.5f * x;
 8003bba:	ee60 7a27 	vmul.f32	s15, s0, s15
	y = *(float*)&i;
 8003bbe:	ee00 3a10 	vmov	s0, r3
	y = y * (1.5f - (halfx * y * y));
 8003bc2:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8003bc6:	ee27 7a80 	vmul.f32	s14, s15, s0
 8003bca:	eeb0 6a66 	vmov.f32	s12, s13
 8003bce:	eea0 6a47 	vfms.f32	s12, s0, s14
 8003bd2:	ee26 0a00 	vmul.f32	s0, s12, s0
    y = y * (1.5f - (halfx * y * y));
 8003bd6:	ee67 7a80 	vmul.f32	s15, s15, s0
 8003bda:	eee0 6a67 	vfms.f32	s13, s0, s15
	return y;
}
 8003bde:	ee26 0a80 	vmul.f32	s0, s13, s0
 8003be2:	4770      	bx	lr
 8003be4:	5f3759df 	.word	0x5f3759df

08003be8 <MadgwickAHRSupdateIMU>:
void MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az) {
 8003be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bec:	ed2d 8b10 	vpush	{d8-d15}
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8003bf0:	ee10 0a10 	vmov	r0, s0
void MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az) {
 8003bf4:	b08b      	sub	sp, #44	; 0x2c
 8003bf6:	eef0 8a61 	vmov.f32	s17, s3
 8003bfa:	eeb0 8a42 	vmov.f32	s16, s4
 8003bfe:	eeb0 9a62 	vmov.f32	s18, s5
 8003c02:	ed8d 1a04 	vstr	s2, [sp, #16]
 8003c06:	edcd 0a02 	vstr	s1, [sp, #8]
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8003c0a:	f7fc fc41 	bl	8000490 <__aeabi_f2d>
 8003c0e:	eddd 0a02 	vldr	s1, [sp, #8]
 8003c12:	f8df a364 	ldr.w	sl, [pc, #868]	; 8003f78 <MadgwickAHRSupdateIMU+0x390>
 8003c16:	f8df b364 	ldr.w	fp, [pc, #868]	; 8003f7c <MadgwickAHRSupdateIMU+0x394>
 8003c1a:	e9cd 0100 	strd	r0, r1, [sp]
 8003c1e:	ee10 0a90 	vmov	r0, s1
 8003c22:	f7fc fc35 	bl	8000490 <__aeabi_f2d>
 8003c26:	ed9d 1a04 	vldr	s2, [sp, #16]
 8003c2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003c2e:	ee11 0a10 	vmov	r0, s2
 8003c32:	f7fc fc2d 	bl	8000490 <__aeabi_f2d>
 8003c36:	e9da 4500 	ldrd	r4, r5, [sl]
 8003c3a:	4bca      	ldr	r3, [pc, #808]	; (8003f64 <MadgwickAHRSupdateIMU+0x37c>)
 8003c3c:	e9db 6700 	ldrd	r6, r7, [fp]
 8003c40:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003c44:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003c48:	4620      	mov	r0, r4
 8003c4a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003c4e:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8003c52:	f7fc fc71 	bl	8000538 <__aeabi_dmul>
 8003c56:	4632      	mov	r2, r6
 8003c58:	4604      	mov	r4, r0
 8003c5a:	460d      	mov	r5, r1
 8003c5c:	463b      	mov	r3, r7
 8003c5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003c62:	f7fc fc69 	bl	8000538 <__aeabi_dmul>
 8003c66:	4602      	mov	r2, r0
 8003c68:	460b      	mov	r3, r1
 8003c6a:	4620      	mov	r0, r4
 8003c6c:	4629      	mov	r1, r5
 8003c6e:	f7fc faaf 	bl	80001d0 <__aeabi_dsub>
 8003c72:	4642      	mov	r2, r8
 8003c74:	4604      	mov	r4, r0
 8003c76:	460d      	mov	r5, r1
 8003c78:	464b      	mov	r3, r9
 8003c7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003c7e:	f7fc fc5b 	bl	8000538 <__aeabi_dmul>
 8003c82:	4602      	mov	r2, r0
 8003c84:	460b      	mov	r3, r1
 8003c86:	4620      	mov	r0, r4
 8003c88:	4629      	mov	r1, r5
 8003c8a:	f7fc faa1 	bl	80001d0 <__aeabi_dsub>
 8003c8e:	2200      	movs	r2, #0
 8003c90:	4bb5      	ldr	r3, [pc, #724]	; (8003f68 <MadgwickAHRSupdateIMU+0x380>)
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8003c92:	4cb6      	ldr	r4, [pc, #728]	; (8003f6c <MadgwickAHRSupdateIMU+0x384>)
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8003c94:	f7fc fc50 	bl	8000538 <__aeabi_dmul>
 8003c98:	f7fc ff46 	bl	8000b28 <__aeabi_d2f>
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8003c9c:	49b1      	ldr	r1, [pc, #708]	; (8003f64 <MadgwickAHRSupdateIMU+0x37c>)
 8003c9e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8003ca2:	e9db 8900 	ldrd	r8, r9, [fp]
 8003ca6:	ed91 7b00 	vldr	d7, [r1]
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8003caa:	ee0c 0a10 	vmov	s24, r0
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8003cae:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003cb2:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003cb6:	f7fc fc3f 	bl	8000538 <__aeabi_dmul>
 8003cba:	4642      	mov	r2, r8
 8003cbc:	4606      	mov	r6, r0
 8003cbe:	460f      	mov	r7, r1
 8003cc0:	464b      	mov	r3, r9
 8003cc2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003cc6:	f7fc fc37 	bl	8000538 <__aeabi_dmul>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	460b      	mov	r3, r1
 8003cce:	4630      	mov	r0, r6
 8003cd0:	4639      	mov	r1, r7
 8003cd2:	f7fc fa7f 	bl	80001d4 <__adddf3>
 8003cd6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003cda:	4606      	mov	r6, r0
 8003cdc:	460f      	mov	r7, r1
 8003cde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003ce2:	f7fc fc29 	bl	8000538 <__aeabi_dmul>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	460b      	mov	r3, r1
 8003cea:	4630      	mov	r0, r6
 8003cec:	4639      	mov	r1, r7
 8003cee:	f7fc fa6f 	bl	80001d0 <__aeabi_dsub>
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	4b9c      	ldr	r3, [pc, #624]	; (8003f68 <MadgwickAHRSupdateIMU+0x380>)
 8003cf6:	f7fc fc1f 	bl	8000538 <__aeabi_dmul>
 8003cfa:	f7fc ff15 	bl	8000b28 <__aeabi_d2f>
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8003cfe:	4999      	ldr	r1, [pc, #612]	; (8003f64 <MadgwickAHRSupdateIMU+0x37c>)
 8003d00:	e9d4 2300 	ldrd	r2, r3, [r4]
 8003d04:	e9da 8900 	ldrd	r8, r9, [sl]
 8003d08:	ed91 7b00 	vldr	d7, [r1]
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8003d0c:	ee0b 0a90 	vmov	s23, r0
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8003d10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003d14:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003d18:	f7fc fc0e 	bl	8000538 <__aeabi_dmul>
 8003d1c:	4642      	mov	r2, r8
 8003d1e:	4606      	mov	r6, r0
 8003d20:	460f      	mov	r7, r1
 8003d22:	464b      	mov	r3, r9
 8003d24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003d28:	f7fc fc06 	bl	8000538 <__aeabi_dmul>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	460b      	mov	r3, r1
 8003d30:	4630      	mov	r0, r6
 8003d32:	4639      	mov	r1, r7
 8003d34:	f7fc fa4c 	bl	80001d0 <__aeabi_dsub>
 8003d38:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003d3c:	4606      	mov	r6, r0
 8003d3e:	460f      	mov	r7, r1
 8003d40:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003d44:	f7fc fbf8 	bl	8000538 <__aeabi_dmul>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	460b      	mov	r3, r1
 8003d4c:	4630      	mov	r0, r6
 8003d4e:	4639      	mov	r1, r7
 8003d50:	f7fc fa40 	bl	80001d4 <__adddf3>
 8003d54:	2200      	movs	r2, #0
 8003d56:	4b84      	ldr	r3, [pc, #528]	; (8003f68 <MadgwickAHRSupdateIMU+0x380>)
 8003d58:	f7fc fbee 	bl	8000538 <__aeabi_dmul>
 8003d5c:	f7fc fee4 	bl	8000b28 <__aeabi_d2f>
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8003d60:	e9d4 2300 	ldrd	r2, r3, [r4]
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8003d64:	ee0b 0a10 	vmov	s22, r0
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8003d68:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003d6c:	f7fc fbe4 	bl	8000538 <__aeabi_dmul>
 8003d70:	e9da 8900 	ldrd	r8, r9, [sl]
 8003d74:	4606      	mov	r6, r0
 8003d76:	460f      	mov	r7, r1
 8003d78:	4642      	mov	r2, r8
 8003d7a:	464b      	mov	r3, r9
 8003d7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003d80:	f7fc fbda 	bl	8000538 <__aeabi_dmul>
 8003d84:	4602      	mov	r2, r0
 8003d86:	460b      	mov	r3, r1
 8003d88:	4630      	mov	r0, r6
 8003d8a:	4639      	mov	r1, r7
 8003d8c:	f7fc fa22 	bl	80001d4 <__adddf3>
 8003d90:	e9db 4500 	ldrd	r4, r5, [fp]
 8003d94:	4606      	mov	r6, r0
 8003d96:	4622      	mov	r2, r4
 8003d98:	462b      	mov	r3, r5
 8003d9a:	460f      	mov	r7, r1
 8003d9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003da0:	f7fc fbca 	bl	8000538 <__aeabi_dmul>
 8003da4:	4602      	mov	r2, r0
 8003da6:	460b      	mov	r3, r1
 8003da8:	4630      	mov	r0, r6
 8003daa:	4639      	mov	r1, r7
 8003dac:	f7fc fa10 	bl	80001d0 <__aeabi_dsub>
 8003db0:	2200      	movs	r2, #0
 8003db2:	4b6d      	ldr	r3, [pc, #436]	; (8003f68 <MadgwickAHRSupdateIMU+0x380>)
 8003db4:	4d6b      	ldr	r5, [pc, #428]	; (8003f64 <MadgwickAHRSupdateIMU+0x37c>)
 8003db6:	f7fc fbbf 	bl	8000538 <__aeabi_dmul>
 8003dba:	f7fc feb5 	bl	8000b28 <__aeabi_d2f>
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8003dbe:	eef5 8a40 	vcmp.f32	s17, #0.0
 8003dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8003dc6:	ee0a 0a90 	vmov	s21, r0
 8003dca:	46d0      	mov	r8, sl
 8003dcc:	465c      	mov	r4, fp
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8003dce:	d10a      	bne.n	8003de6 <MadgwickAHRSupdateIMU+0x1fe>
 8003dd0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8003dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dd8:	d105      	bne.n	8003de6 <MadgwickAHRSupdateIMU+0x1fe>
 8003dda:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8003dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003de2:	f000 81f2 	beq.w	80041ca <MadgwickAHRSupdateIMU+0x5e2>
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8003de6:	ee28 0a08 	vmul.f32	s0, s16, s16
		_2q0 = 2.0f * q0;
 8003dea:	4e60      	ldr	r6, [pc, #384]	; (8003f6c <MadgwickAHRSupdateIMU+0x384>)
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8003dec:	eea8 0aa8 	vfma.f32	s0, s17, s17
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8003df0:	eeb1 ea00 	vmov.f32	s28, #16	; 0x40800000  4.0
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8003df4:	eea9 0a09 	vfma.f32	s0, s18, s18
 8003df8:	f7ff fed8 	bl	8003bac <invSqrt>
		_2q0 = 2.0f * q0;
 8003dfc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003e00:	4610      	mov	r0, r2
 8003e02:	4619      	mov	r1, r3
		ax *= recipNorm;
 8003e04:	ee68 8a80 	vmul.f32	s17, s17, s0
		ay *= recipNorm;
 8003e08:	ee28 8a00 	vmul.f32	s16, s16, s0
		az *= recipNorm;   
 8003e0c:	ee29 9a00 	vmul.f32	s18, s18, s0
		_2q0 = 2.0f * q0;
 8003e10:	f7fc f9e0 	bl	80001d4 <__adddf3>
 8003e14:	f7fc fe88 	bl	8000b28 <__aeabi_d2f>
		_2q1 = 2.0f * q1;
 8003e18:	e9d8 2300 	ldrd	r2, r3, [r8]
		_2q0 = 2.0f * q0;
 8003e1c:	ee0f 0a10 	vmov	s30, r0
		_2q1 = 2.0f * q1;
 8003e20:	4619      	mov	r1, r3
 8003e22:	4610      	mov	r0, r2
 8003e24:	f7fc f9d6 	bl	80001d4 <__adddf3>
 8003e28:	f7fc fe7e 	bl	8000b28 <__aeabi_d2f>
		_2q2 = 2.0f * q2;
 8003e2c:	e9d4 2300 	ldrd	r2, r3, [r4]
		_2q1 = 2.0f * q1;
 8003e30:	9000      	str	r0, [sp, #0]
		_2q2 = 2.0f * q2;
 8003e32:	4619      	mov	r1, r3
 8003e34:	4610      	mov	r0, r2
 8003e36:	f7fc f9cd 	bl	80001d4 <__adddf3>
 8003e3a:	f7fc fe75 	bl	8000b28 <__aeabi_d2f>
		_2q3 = 2.0f * q3;
 8003e3e:	e9d5 2300 	ldrd	r2, r3, [r5]
		_2q2 = 2.0f * q2;
 8003e42:	9002      	str	r0, [sp, #8]
		_2q3 = 2.0f * q3;
 8003e44:	4619      	mov	r1, r3
 8003e46:	4610      	mov	r0, r2
 8003e48:	f7fc f9c4 	bl	80001d4 <__adddf3>
 8003e4c:	f7fc fe6c 	bl	8000b28 <__aeabi_d2f>
		_4q0 = 4.0f * q0;
 8003e50:	2200      	movs	r2, #0
 8003e52:	4b47      	ldr	r3, [pc, #284]	; (8003f70 <MadgwickAHRSupdateIMU+0x388>)
		_2q3 = 2.0f * q3;
 8003e54:	9004      	str	r0, [sp, #16]
		_4q0 = 4.0f * q0;
 8003e56:	e9d6 0100 	ldrd	r0, r1, [r6]
 8003e5a:	f7fc fb6d 	bl	8000538 <__aeabi_dmul>
 8003e5e:	f7fc fe63 	bl	8000b28 <__aeabi_d2f>
		_4q1 = 4.0f * q1;
 8003e62:	2200      	movs	r2, #0
		_4q0 = 4.0f * q0;
 8003e64:	ee0d 0a90 	vmov	s27, r0
		_4q1 = 4.0f * q1;
 8003e68:	4b41      	ldr	r3, [pc, #260]	; (8003f70 <MadgwickAHRSupdateIMU+0x388>)
 8003e6a:	e9d8 0100 	ldrd	r0, r1, [r8]
 8003e6e:	f7fc fb63 	bl	8000538 <__aeabi_dmul>
 8003e72:	f7fc fe59 	bl	8000b28 <__aeabi_d2f>
		_4q2 = 4.0f * q2;
 8003e76:	2200      	movs	r2, #0
		_4q1 = 4.0f * q1;
 8003e78:	ee0d 0a10 	vmov	s26, r0
		_4q2 = 4.0f * q2;
 8003e7c:	4b3c      	ldr	r3, [pc, #240]	; (8003f70 <MadgwickAHRSupdateIMU+0x388>)
 8003e7e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8003e82:	f7fc fb59 	bl	8000538 <__aeabi_dmul>
 8003e86:	f7fc fe4f 	bl	8000b28 <__aeabi_d2f>
		_8q1 = 8.0f * q1;
 8003e8a:	2200      	movs	r2, #0
		_4q2 = 4.0f * q2;
 8003e8c:	ee0c 0a90 	vmov	s25, r0
		_8q1 = 8.0f * q1;
 8003e90:	4b38      	ldr	r3, [pc, #224]	; (8003f74 <MadgwickAHRSupdateIMU+0x38c>)
 8003e92:	e9d8 0100 	ldrd	r0, r1, [r8]
 8003e96:	f7fc fb4f 	bl	8000538 <__aeabi_dmul>
 8003e9a:	f7fc fe45 	bl	8000b28 <__aeabi_d2f>
		_8q2 = 8.0f * q2;
 8003e9e:	2200      	movs	r2, #0
		_8q1 = 8.0f * q1;
 8003ea0:	ee0f 0a90 	vmov	s31, r0
		_8q2 = 8.0f * q2;
 8003ea4:	4b33      	ldr	r3, [pc, #204]	; (8003f74 <MadgwickAHRSupdateIMU+0x38c>)
 8003ea6:	e9d4 0100 	ldrd	r0, r1, [r4]
 8003eaa:	f7fc fb45 	bl	8000538 <__aeabi_dmul>
 8003eae:	f7fc fe3b 	bl	8000b28 <__aeabi_d2f>
		q0q0 = q0 * q0;
 8003eb2:	e9d6 ab00 	ldrd	sl, fp, [r6]
		_8q2 = 8.0f * q2;
 8003eb6:	9006      	str	r0, [sp, #24]
		q0q0 = q0 * q0;
 8003eb8:	e9d6 6700 	ldrd	r6, r7, [r6]
		q1q1 = q1 * q1;
 8003ebc:	e9d8 0100 	ldrd	r0, r1, [r8]
 8003ec0:	e9d8 2300 	ldrd	r2, r3, [r8]
 8003ec4:	f7fc fb38 	bl	8000538 <__aeabi_dmul>
 8003ec8:	f7fc fe2e 	bl	8000b28 <__aeabi_d2f>
 8003ecc:	ee0a 0a10 	vmov	s20, r0
		q2q2 = q2 * q2;
 8003ed0:	e9d4 0100 	ldrd	r0, r1, [r4]
 8003ed4:	e9d4 2300 	ldrd	r2, r3, [r4]
 8003ed8:	f7fc fb2e 	bl	8000538 <__aeabi_dmul>
 8003edc:	f7fc fe24 	bl	8000b28 <__aeabi_d2f>
 8003ee0:	ee09 0a90 	vmov	s19, r0
		q3q3 = q3 * q3;
 8003ee4:	e9d5 0100 	ldrd	r0, r1, [r5]
 8003ee8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003eec:	f7fc fb24 	bl	8000538 <__aeabi_dmul>
 8003ef0:	f7fc fe1a 	bl	8000b28 <__aeabi_d2f>
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8003ef4:	eddd 7a02 	vldr	s15, [sp, #8]
 8003ef8:	ed9d 7a00 	vldr	s14, [sp]
 8003efc:	ee68 7aa7 	vmul.f32	s15, s17, s15
		q0q0 = q0 * q0;
 8003f00:	4632      	mov	r2, r6
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8003f02:	eeed 7aa9 	vfma.f32	s15, s27, s19
		q0q0 = q0 * q0;
 8003f06:	463b      	mov	r3, r7
 8003f08:	4659      	mov	r1, fp
		q3q3 = q3 * q3;
 8003f0a:	ee0e 0a90 	vmov	s29, r0
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8003f0e:	eeed 7a8a 	vfma.f32	s15, s27, s20
		q0q0 = q0 * q0;
 8003f12:	4650      	mov	r0, sl
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8003f14:	eee8 7a47 	vfms.f32	s15, s16, s14
 8003f18:	eef0 da67 	vmov.f32	s27, s15
		q0q0 = q0 * q0;
 8003f1c:	f7fc fb0c 	bl	8000538 <__aeabi_dmul>
 8003f20:	f7fc fe02 	bl	8000b28 <__aeabi_d2f>
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8003f24:	ee07 0a90 	vmov	s15, r0
 8003f28:	ee67 7a8e 	vmul.f32	s15, s15, s28
 8003f2c:	ee17 0a90 	vmov	r0, s15
 8003f30:	f7fc faae 	bl	8000490 <__aeabi_f2d>
 8003f34:	eddd 7a04 	vldr	s15, [sp, #16]
 8003f38:	ee67 6ae8 	vnmul.f32	s13, s15, s17
 8003f3c:	4606      	mov	r6, r0
 8003f3e:	eeed 6a2e 	vfma.f32	s13, s26, s29
 8003f42:	460f      	mov	r7, r1
 8003f44:	e9d8 ab00 	ldrd	sl, fp, [r8]
 8003f48:	ee16 0a90 	vmov	r0, s13
 8003f4c:	f7fc faa0 	bl	8000490 <__aeabi_f2d>
 8003f50:	4652      	mov	r2, sl
 8003f52:	4680      	mov	r8, r0
 8003f54:	4689      	mov	r9, r1
 8003f56:	465b      	mov	r3, fp
 8003f58:	4630      	mov	r0, r6
 8003f5a:	4639      	mov	r1, r7
 8003f5c:	f7fc faec 	bl	8000538 <__aeabi_dmul>
 8003f60:	e00e      	b.n	8003f80 <MadgwickAHRSupdateIMU+0x398>
 8003f62:	bf00      	nop
 8003f64:	200000b8 	.word	0x200000b8
 8003f68:	3fe00000 	.word	0x3fe00000
 8003f6c:	20000010 	.word	0x20000010
 8003f70:	40100000 	.word	0x40100000
 8003f74:	40200000 	.word	0x40200000
 8003f78:	200000a8 	.word	0x200000a8
 8003f7c:	200000b0 	.word	0x200000b0
 8003f80:	4602      	mov	r2, r0
 8003f82:	460b      	mov	r3, r1
 8003f84:	4640      	mov	r0, r8
 8003f86:	4649      	mov	r1, r9
 8003f88:	f7fc f924 	bl	80001d4 <__adddf3>
 8003f8c:	ee68 7a0f 	vmul.f32	s15, s16, s30
 8003f90:	4680      	mov	r8, r0
 8003f92:	ee17 0a90 	vmov	r0, s15
 8003f96:	4689      	mov	r9, r1
 8003f98:	f7fc fa7a 	bl	8000490 <__aeabi_f2d>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	460b      	mov	r3, r1
 8003fa0:	4640      	mov	r0, r8
 8003fa2:	4649      	mov	r1, r9
 8003fa4:	f7fc f914 	bl	80001d0 <__aeabi_dsub>
 8003fa8:	4680      	mov	r8, r0
 8003faa:	ee1d 0a10 	vmov	r0, s26
 8003fae:	4689      	mov	r9, r1
 8003fb0:	f7fc fa6e 	bl	8000490 <__aeabi_f2d>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	460b      	mov	r3, r1
 8003fb8:	4640      	mov	r0, r8
 8003fba:	4649      	mov	r1, r9
 8003fbc:	f7fc f908 	bl	80001d0 <__aeabi_dsub>
 8003fc0:	ee6f 7a8a 	vmul.f32	s15, s31, s20
 8003fc4:	4680      	mov	r8, r0
 8003fc6:	ee17 0a90 	vmov	r0, s15
 8003fca:	4689      	mov	r9, r1
 8003fcc:	f7fc fa60 	bl	8000490 <__aeabi_f2d>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	4640      	mov	r0, r8
 8003fd6:	4649      	mov	r1, r9
 8003fd8:	f7fc f8fc 	bl	80001d4 <__adddf3>
 8003fdc:	ee6f 7aa9 	vmul.f32	s15, s31, s19
 8003fe0:	4680      	mov	r8, r0
 8003fe2:	ee17 0a90 	vmov	r0, s15
 8003fe6:	4689      	mov	r9, r1
 8003fe8:	f7fc fa52 	bl	8000490 <__aeabi_f2d>
 8003fec:	4602      	mov	r2, r0
 8003fee:	460b      	mov	r3, r1
 8003ff0:	4640      	mov	r0, r8
 8003ff2:	4649      	mov	r1, r9
 8003ff4:	f7fc f8ee 	bl	80001d4 <__adddf3>
 8003ff8:	ee69 7a0d 	vmul.f32	s15, s18, s26
 8003ffc:	4680      	mov	r8, r0
 8003ffe:	ee17 0a90 	vmov	r0, s15
 8004002:	4689      	mov	r9, r1
 8004004:	f7fc fa44 	bl	8000490 <__aeabi_f2d>
 8004008:	4602      	mov	r2, r0
 800400a:	460b      	mov	r3, r1
 800400c:	4640      	mov	r0, r8
 800400e:	4649      	mov	r1, r9
 8004010:	f7fc f8e0 	bl	80001d4 <__adddf3>
 8004014:	f7fc fd88 	bl	8000b28 <__aeabi_d2f>
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8004018:	e9d4 2300 	ldrd	r2, r3, [r4]
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 800401c:	ee0d 0a10 	vmov	s26, r0
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8004020:	4639      	mov	r1, r7
 8004022:	4630      	mov	r0, r6
 8004024:	f7fc fa88 	bl	8000538 <__aeabi_dmul>
 8004028:	ee68 7a8f 	vmul.f32	s15, s17, s30
 800402c:	4606      	mov	r6, r0
 800402e:	ee17 0a90 	vmov	r0, s15
 8004032:	460f      	mov	r7, r1
 8004034:	f7fc fa2c 	bl	8000490 <__aeabi_f2d>
 8004038:	4602      	mov	r2, r0
 800403a:	460b      	mov	r3, r1
 800403c:	4630      	mov	r0, r6
 800403e:	4639      	mov	r1, r7
 8004040:	f7fc f8c8 	bl	80001d4 <__adddf3>
 8004044:	ee6c 7aae 	vmul.f32	s15, s25, s29
 8004048:	4606      	mov	r6, r0
 800404a:	ee17 0a90 	vmov	r0, s15
 800404e:	460f      	mov	r7, r1
 8004050:	f7fc fa1e 	bl	8000490 <__aeabi_f2d>
 8004054:	4602      	mov	r2, r0
 8004056:	460b      	mov	r3, r1
 8004058:	4630      	mov	r0, r6
 800405a:	4639      	mov	r1, r7
 800405c:	f7fc f8ba 	bl	80001d4 <__adddf3>
 8004060:	eddd 7a04 	vldr	s15, [sp, #16]
 8004064:	ee68 7a27 	vmul.f32	s15, s16, s15
 8004068:	4606      	mov	r6, r0
 800406a:	ee17 0a90 	vmov	r0, s15
 800406e:	460f      	mov	r7, r1
 8004070:	f7fc fa0e 	bl	8000490 <__aeabi_f2d>
 8004074:	4602      	mov	r2, r0
 8004076:	460b      	mov	r3, r1
 8004078:	4630      	mov	r0, r6
 800407a:	4639      	mov	r1, r7
 800407c:	f7fc f8a8 	bl	80001d0 <__aeabi_dsub>
 8004080:	4606      	mov	r6, r0
 8004082:	ee1c 0a90 	vmov	r0, s25
 8004086:	460f      	mov	r7, r1
 8004088:	f7fc fa02 	bl	8000490 <__aeabi_f2d>
 800408c:	4602      	mov	r2, r0
 800408e:	460b      	mov	r3, r1
 8004090:	4630      	mov	r0, r6
 8004092:	4639      	mov	r1, r7
 8004094:	f7fc f89c 	bl	80001d0 <__aeabi_dsub>
 8004098:	eddd 7a06 	vldr	s15, [sp, #24]
 800409c:	ee67 7a8a 	vmul.f32	s15, s15, s20
 80040a0:	4606      	mov	r6, r0
 80040a2:	ee17 0a90 	vmov	r0, s15
 80040a6:	460f      	mov	r7, r1
 80040a8:	f7fc f9f2 	bl	8000490 <__aeabi_f2d>
 80040ac:	4602      	mov	r2, r0
 80040ae:	460b      	mov	r3, r1
 80040b0:	4630      	mov	r0, r6
 80040b2:	4639      	mov	r1, r7
 80040b4:	f7fc f88e 	bl	80001d4 <__adddf3>
 80040b8:	eddd 7a06 	vldr	s15, [sp, #24]
 80040bc:	ee67 7aa9 	vmul.f32	s15, s15, s19
 80040c0:	4606      	mov	r6, r0
 80040c2:	ee17 0a90 	vmov	r0, s15
 80040c6:	460f      	mov	r7, r1
 80040c8:	f7fc f9e2 	bl	8000490 <__aeabi_f2d>
 80040cc:	4602      	mov	r2, r0
 80040ce:	460b      	mov	r3, r1
 80040d0:	4630      	mov	r0, r6
 80040d2:	4639      	mov	r1, r7
 80040d4:	f7fc f87e 	bl	80001d4 <__adddf3>
 80040d8:	ee69 7a2c 	vmul.f32	s15, s18, s25
 80040dc:	4606      	mov	r6, r0
 80040de:	ee17 0a90 	vmov	r0, s15
 80040e2:	460f      	mov	r7, r1
 80040e4:	f7fc f9d4 	bl	8000490 <__aeabi_f2d>
 80040e8:	4602      	mov	r2, r0
 80040ea:	460b      	mov	r3, r1
 80040ec:	4630      	mov	r0, r6
 80040ee:	4639      	mov	r1, r7
 80040f0:	f7fc f870 	bl	80001d4 <__adddf3>
 80040f4:	f7fc fd18 	bl	8000b28 <__aeabi_d2f>
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 80040f8:	e9d5 8900 	ldrd	r8, r9, [r5]
 80040fc:	ee6a 7a0e 	vmul.f32	s15, s20, s28
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8004100:	ee09 0a10 	vmov	s18, r0
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 8004104:	ee17 0a90 	vmov	r0, s15
 8004108:	f7fc f9c2 	bl	8000490 <__aeabi_f2d>
 800410c:	4642      	mov	r2, r8
 800410e:	464b      	mov	r3, r9
 8004110:	f7fc fa12 	bl	8000538 <__aeabi_dmul>
 8004114:	eddd 7a00 	vldr	s15, [sp]
 8004118:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800411c:	4604      	mov	r4, r0
 800411e:	ee17 0a90 	vmov	r0, s15
 8004122:	e9d5 6700 	ldrd	r6, r7, [r5]
 8004126:	460d      	mov	r5, r1
 8004128:	f7fc f9b2 	bl	8000490 <__aeabi_f2d>
 800412c:	4602      	mov	r2, r0
 800412e:	460b      	mov	r3, r1
 8004130:	4620      	mov	r0, r4
 8004132:	4629      	mov	r1, r5
 8004134:	f7fc f84c 	bl	80001d0 <__aeabi_dsub>
 8004138:	ee69 7a8e 	vmul.f32	s15, s19, s28
 800413c:	4604      	mov	r4, r0
 800413e:	ee17 0a90 	vmov	r0, s15
 8004142:	460d      	mov	r5, r1
 8004144:	f7fc f9a4 	bl	8000490 <__aeabi_f2d>
 8004148:	4632      	mov	r2, r6
 800414a:	463b      	mov	r3, r7
 800414c:	f7fc f9f4 	bl	8000538 <__aeabi_dmul>
 8004150:	4602      	mov	r2, r0
 8004152:	460b      	mov	r3, r1
 8004154:	4620      	mov	r0, r4
 8004156:	4629      	mov	r1, r5
 8004158:	f7fc f83c 	bl	80001d4 <__adddf3>
 800415c:	eddd 7a02 	vldr	s15, [sp, #8]
 8004160:	ee68 7a27 	vmul.f32	s15, s16, s15
 8004164:	4604      	mov	r4, r0
 8004166:	ee17 0a90 	vmov	r0, s15
 800416a:	460d      	mov	r5, r1
 800416c:	f7fc f990 	bl	8000490 <__aeabi_f2d>
 8004170:	460b      	mov	r3, r1
 8004172:	4602      	mov	r2, r0
 8004174:	4629      	mov	r1, r5
 8004176:	4620      	mov	r0, r4
 8004178:	f7fc f82a 	bl	80001d0 <__aeabi_dsub>
 800417c:	f7fc fcd4 	bl	8000b28 <__aeabi_d2f>
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8004180:	ee2d 0a0d 	vmul.f32	s0, s26, s26
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 8004184:	ee05 0a90 	vmov	s11, r0
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8004188:	eead 0aad 	vfma.f32	s0, s27, s27
 800418c:	eea9 0a09 	vfma.f32	s0, s18, s18
 8004190:	eea5 0aa5 	vfma.f32	s0, s11, s11
 8004194:	f7ff fd0a 	bl	8003bac <invSqrt>
		qDot1 -= beta * s0;
 8004198:	4b65      	ldr	r3, [pc, #404]	; (8004330 <MadgwickAHRSupdateIMU+0x748>)
 800419a:	ee60 7a6d 	vnmul.f32	s15, s0, s27
 800419e:	ed93 7a00 	vldr	s14, [r3]
		qDot2 -= beta * s1;
 80041a2:	ee20 da4d 	vnmul.f32	s26, s0, s26
		qDot1 -= beta * s0;
 80041a6:	eea7 ca87 	vfma.f32	s24, s15, s14
		qDot2 -= beta * s1;
 80041aa:	edd3 7a00 	vldr	s15, [r3]
		qDot3 -= beta * s2;
 80041ae:	ee20 9a49 	vnmul.f32	s18, s0, s18
		qDot2 -= beta * s1;
 80041b2:	eeed ba27 	vfma.f32	s23, s26, s15
		qDot3 -= beta * s2;
 80041b6:	edd3 7a00 	vldr	s15, [r3]
		qDot4 -= beta * s3;
 80041ba:	ee20 0a65 	vnmul.f32	s0, s0, s11
		qDot3 -= beta * s2;
 80041be:	eea9 ba27 	vfma.f32	s22, s18, s15
		qDot4 -= beta * s3;
 80041c2:	edd3 7a00 	vldr	s15, [r3]
 80041c6:	eee0 aa27 	vfma.f32	s21, s0, s15
	q0 += qDot1 * (1.0f / sampleFreq);
 80041ca:	4e5a      	ldr	r6, [pc, #360]	; (8004334 <MadgwickAHRSupdateIMU+0x74c>)
	q3 += qDot4 * (1.0f / sampleFreq);
 80041cc:	4f5a      	ldr	r7, [pc, #360]	; (8004338 <MadgwickAHRSupdateIMU+0x750>)
	q0 += qDot1 * (1.0f / sampleFreq);
 80041ce:	ed9f 8a5b 	vldr	s16, [pc, #364]	; 800433c <MadgwickAHRSupdateIMU+0x754>
 80041d2:	e9d6 4500 	ldrd	r4, r5, [r6]
 80041d6:	ee6c 7a08 	vmul.f32	s15, s24, s16
 80041da:	ee17 0a90 	vmov	r0, s15
 80041de:	f7fc f957 	bl	8000490 <__aeabi_f2d>
 80041e2:	4622      	mov	r2, r4
 80041e4:	462b      	mov	r3, r5
 80041e6:	f7fb fff5 	bl	80001d4 <__adddf3>
 80041ea:	e9c6 0100 	strd	r0, r1, [r6]
	q1 += qDot2 * (1.0f / sampleFreq);
 80041ee:	4d54      	ldr	r5, [pc, #336]	; (8004340 <MadgwickAHRSupdateIMU+0x758>)
	q2 += qDot3 * (1.0f / sampleFreq);
 80041f0:	4c54      	ldr	r4, [pc, #336]	; (8004344 <MadgwickAHRSupdateIMU+0x75c>)
	q1 += qDot2 * (1.0f / sampleFreq);
 80041f2:	e9d5 8900 	ldrd	r8, r9, [r5]
 80041f6:	ee6b 7a88 	vmul.f32	s15, s23, s16
 80041fa:	ee17 0a90 	vmov	r0, s15
 80041fe:	f7fc f947 	bl	8000490 <__aeabi_f2d>
 8004202:	4642      	mov	r2, r8
 8004204:	464b      	mov	r3, r9
 8004206:	f7fb ffe5 	bl	80001d4 <__adddf3>
 800420a:	e9c5 0100 	strd	r0, r1, [r5]
	q2 += qDot3 * (1.0f / sampleFreq);
 800420e:	ee6b 7a08 	vmul.f32	s15, s22, s16
 8004212:	e9d4 8900 	ldrd	r8, r9, [r4]
 8004216:	ee17 0a90 	vmov	r0, s15
 800421a:	f7fc f939 	bl	8000490 <__aeabi_f2d>
 800421e:	4642      	mov	r2, r8
 8004220:	464b      	mov	r3, r9
 8004222:	f7fb ffd7 	bl	80001d4 <__adddf3>
 8004226:	e9c4 0100 	strd	r0, r1, [r4]
	q3 += qDot4 * (1.0f / sampleFreq);
 800422a:	e9d7 8900 	ldrd	r8, r9, [r7]
 800422e:	ee6a 7a88 	vmul.f32	s15, s21, s16
 8004232:	ee17 0a90 	vmov	r0, s15
 8004236:	f7fc f92b 	bl	8000490 <__aeabi_f2d>
 800423a:	4642      	mov	r2, r8
 800423c:	464b      	mov	r3, r9
 800423e:	f7fb ffc9 	bl	80001d4 <__adddf3>
 8004242:	e9c7 0100 	strd	r0, r1, [r7]
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8004246:	e9d6 0100 	ldrd	r0, r1, [r6]
 800424a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800424e:	ed95 7b00 	vldr	d7, [r5]
 8004252:	e9d5 ab00 	ldrd	sl, fp, [r5]
 8004256:	ed8d 7b00 	vstr	d7, [sp]
 800425a:	ed94 7b00 	vldr	d7, [r4]
 800425e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004262:	ed94 7b00 	vldr	d7, [r4]
 8004266:	ed8d 7b04 	vstr	d7, [sp, #16]
 800426a:	ed97 7b00 	vldr	d7, [r7]
 800426e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004272:	ed97 7b00 	vldr	d7, [r7]
 8004276:	ed8d 7b08 	vstr	d7, [sp, #32]
 800427a:	f7fc f95d 	bl	8000538 <__aeabi_dmul>
 800427e:	4652      	mov	r2, sl
 8004280:	4680      	mov	r8, r0
 8004282:	4689      	mov	r9, r1
 8004284:	465b      	mov	r3, fp
 8004286:	e9dd 0100 	ldrd	r0, r1, [sp]
 800428a:	f7fc f955 	bl	8000538 <__aeabi_dmul>
 800428e:	4602      	mov	r2, r0
 8004290:	460b      	mov	r3, r1
 8004292:	4640      	mov	r0, r8
 8004294:	4649      	mov	r1, r9
 8004296:	f7fb ff9d 	bl	80001d4 <__adddf3>
 800429a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800429e:	4680      	mov	r8, r0
 80042a0:	4689      	mov	r9, r1
 80042a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80042a6:	f7fc f947 	bl	8000538 <__aeabi_dmul>
 80042aa:	4602      	mov	r2, r0
 80042ac:	460b      	mov	r3, r1
 80042ae:	4640      	mov	r0, r8
 80042b0:	4649      	mov	r1, r9
 80042b2:	f7fb ff8f 	bl	80001d4 <__adddf3>
 80042b6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80042ba:	4680      	mov	r8, r0
 80042bc:	4689      	mov	r9, r1
 80042be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80042c2:	f7fc f939 	bl	8000538 <__aeabi_dmul>
 80042c6:	4602      	mov	r2, r0
 80042c8:	460b      	mov	r3, r1
 80042ca:	4640      	mov	r0, r8
 80042cc:	4649      	mov	r1, r9
 80042ce:	f7fb ff81 	bl	80001d4 <__adddf3>
 80042d2:	f7fc fc29 	bl	8000b28 <__aeabi_d2f>
 80042d6:	ee00 0a10 	vmov	s0, r0
 80042da:	f7ff fc67 	bl	8003bac <invSqrt>
	q0 *= recipNorm;
 80042de:	ee10 0a10 	vmov	r0, s0
 80042e2:	f7fc f8d5 	bl	8000490 <__aeabi_f2d>
 80042e6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80042ea:	4680      	mov	r8, r0
 80042ec:	4689      	mov	r9, r1
 80042ee:	f7fc f923 	bl	8000538 <__aeabi_dmul>
 80042f2:	e9c6 0100 	strd	r0, r1, [r6]
	q1 *= recipNorm;
 80042f6:	4640      	mov	r0, r8
 80042f8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80042fc:	4649      	mov	r1, r9
 80042fe:	f7fc f91b 	bl	8000538 <__aeabi_dmul>
 8004302:	e9c5 0100 	strd	r0, r1, [r5]
	q2 *= recipNorm;
 8004306:	4640      	mov	r0, r8
 8004308:	e9d4 2300 	ldrd	r2, r3, [r4]
 800430c:	4649      	mov	r1, r9
 800430e:	f7fc f913 	bl	8000538 <__aeabi_dmul>
 8004312:	e9c4 0100 	strd	r0, r1, [r4]
	q3 *= recipNorm;
 8004316:	e9d7 2300 	ldrd	r2, r3, [r7]
 800431a:	4640      	mov	r0, r8
 800431c:	4649      	mov	r1, r9
 800431e:	f7fc f90b 	bl	8000538 <__aeabi_dmul>
 8004322:	e9c7 0100 	strd	r0, r1, [r7]
}
 8004326:	b00b      	add	sp, #44	; 0x2c
 8004328:	ecbd 8b10 	vpop	{d8-d15}
 800432c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004330:	20000008 	.word	0x20000008
 8004334:	20000010 	.word	0x20000010
 8004338:	200000b8 	.word	0x200000b8
 800433c:	3b03126f 	.word	0x3b03126f
 8004340:	200000a8 	.word	0x200000a8
 8004344:	200000b0 	.word	0x200000b0

08004348 <MPU9250_Madgwick>:
    float roll, pitch, yaw;
//    float PI = 3.14159265358979323846f;
    float ax = mpu->AccX;
    float ay = mpu->AccY;
    float az = mpu->AccZ;
    float gx = mpu->GyroX * PI / 180.0f;
 8004348:	eddf 6a23 	vldr	s13, [pc, #140]	; 80043d8 <MPU9250_Madgwick+0x90>
 800434c:	ed90 7a0e 	vldr	s14, [r0, #56]	; 0x38
 8004350:	eddf 7a22 	vldr	s15, [pc, #136]	; 80043dc <MPU9250_Madgwick+0x94>
    float ax = mpu->AccX;
 8004354:	edd0 1a09 	vldr	s3, [r0, #36]	; 0x24
    float ay = mpu->AccY;
 8004358:	ed90 2a0a 	vldr	s4, [r0, #40]	; 0x28
    float gx = mpu->GyroX * PI / 180.0f;
 800435c:	ee27 7a26 	vmul.f32	s14, s14, s13
{
 8004360:	b510      	push	{r4, lr}
    float gx = mpu->GyroX * PI / 180.0f;
 8004362:	ee87 0a27 	vdiv.f32	s0, s14, s15
{
 8004366:	4604      	mov	r4, r0
    float gy = mpu->GyroY * PI / 180.0f;
 8004368:	ed90 7a0f 	vldr	s14, [r0, #60]	; 0x3c
 800436c:	ee27 7a26 	vmul.f32	s14, s14, s13
{
 8004370:	ed2d 8b10 	vpush	{d8-d15}
    float gy = mpu->GyroY * PI / 180.0f;
 8004374:	eec7 0a27 	vdiv.f32	s1, s14, s15
{
 8004378:	b08c      	sub	sp, #48	; 0x30
    float gz = mpu->GyroZ * PI / 180.0f;
 800437a:	ed90 7a10 	vldr	s14, [r0, #64]	; 0x40
    float mx = mpu->MagY;
 800437e:	edd0 aa1d 	vldr	s21, [r0, #116]	; 0x74
    float az = mpu->AccZ;
 8004382:	ed90 fa0b 	vldr	s30, [r0, #44]	; 0x2c
    float my = mpu->MagX;
 8004386:	ed90 aa1c 	vldr	s20, [r0, #112]	; 0x70
    float mz = mpu->MagZ;
 800438a:	ed90 ca1e 	vldr	s24, [r0, #120]	; 0x78
    float q0 = mpu->q[0];
 800438e:	edd0 9a22 	vldr	s19, [r0, #136]	; 0x88
    float q1 = mpu->q[1];
 8004392:	ed90 9a23 	vldr	s18, [r0, #140]	; 0x8c
    float q2 = mpu->q[2];
 8004396:	ed90 8a24 	vldr	s16, [r0, #144]	; 0x90
    float q3 = mpu->q[3];
 800439a:	edd0 8a25 	vldr	s17, [r0, #148]	; 0x94
    float gz = mpu->GyroZ * PI / 180.0f;
 800439e:	ee27 7a26 	vmul.f32	s14, s14, s13
//    float sampleFreq = 500.0f;
    // Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation)
    if ((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f))
 80043a2:	eef5 aa40 	vcmp.f32	s21, #0.0
 80043a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float gz = mpu->GyroZ * PI / 180.0f;
 80043aa:	ee87 1a27 	vdiv.f32	s2, s14, s15
    if ((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f))
 80043ae:	d117      	bne.n	80043e0 <MPU9250_Madgwick+0x98>
 80043b0:	eeb5 aa40 	vcmp.f32	s20, #0.0
 80043b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043b8:	d112      	bne.n	80043e0 <MPU9250_Madgwick+0x98>
 80043ba:	eeb5 ca40 	vcmp.f32	s24, #0.0
 80043be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043c2:	d10d      	bne.n	80043e0 <MPU9250_Madgwick+0x98>
    {
        MadgwickAHRSupdateIMU(gx, gy, gz, ax, ay, az);
 80043c4:	eef0 2a4f 	vmov.f32	s5, s30
//    yaw   -= 13.8f; // Declination at Danville, California is 13 degrees 48 minutes and 47 seconds on 2014-04-04
    roll *= 180.0f / PI;
    mpu->roll = roll;
    mpu->pitch = pitch;
    mpu->yaw = yaw;
}
 80043c8:	b00c      	add	sp, #48	; 0x30
 80043ca:	ecbd 8b10 	vpop	{d8-d15}
 80043ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        MadgwickAHRSupdateIMU(gx, gy, gz, ax, ay, az);
 80043d2:	f7ff bc09 	b.w	8003be8 <MadgwickAHRSupdateIMU>
 80043d6:	bf00      	nop
 80043d8:	40490fda 	.word	0x40490fda
 80043dc:	43340000 	.word	0x43340000
    qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 80043e0:	ee68 da60 	vnmul.f32	s27, s16, s1
    qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 80043e4:	ee21 da08 	vmul.f32	s26, s2, s16
    qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 80043e8:	ee69 ca41 	vnmul.f32	s25, s18, s2
    qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 80043ec:	ee20 ba89 	vmul.f32	s22, s1, s18
    qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 80043f0:	eee9 da40 	vfms.f32	s27, s18, s0
    qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 80043f4:	eea0 da29 	vfma.f32	s26, s0, s19
    qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 80043f8:	eee0 caa9 	vfma.f32	s25, s1, s19
    qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 80043fc:	eea1 ba29 	vfma.f32	s22, s2, s19
    qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8004400:	eee1 da68 	vfms.f32	s27, s2, s17
    qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8004404:	eea0 dae8 	vfms.f32	s26, s1, s17
    qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8004408:	eee0 ca28 	vfma.f32	s25, s0, s17
    qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 800440c:	eea0 ba48 	vfms.f32	s22, s0, s16
    if (!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f)))
 8004410:	eef5 1a40 	vcmp.f32	s3, #0.0
    qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8004414:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    if (!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f)))
 8004418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 800441c:	ee6d daa7 	vmul.f32	s27, s27, s15
    qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8004420:	ee2d da27 	vmul.f32	s26, s26, s15
    qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8004424:	ee6c caa7 	vmul.f32	s25, s25, s15
    qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8004428:	ee2b ba27 	vmul.f32	s22, s22, s15
    if (!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f)))
 800442c:	d10a      	bne.n	8004444 <MPU9250_Madgwick+0xfc>
 800442e:	eeb5 2a40 	vcmp.f32	s4, #0.0
 8004432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004436:	d105      	bne.n	8004444 <MPU9250_Madgwick+0xfc>
 8004438:	eeb5 fa40 	vcmp.f32	s30, #0.0
 800443c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004440:	f000 8171 	beq.w	8004726 <MPU9250_Madgwick+0x3de>
        recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8004444:	ee22 0a02 	vmul.f32	s0, s4, s4
 8004448:	ed8d 2a0b 	vstr	s4, [sp, #44]	; 0x2c
 800444c:	eea1 0aa1 	vfma.f32	s0, s3, s3
 8004450:	edcd 1a0a 	vstr	s3, [sp, #40]	; 0x28
 8004454:	eeaf 0a0f 	vfma.f32	s0, s30, s30
 8004458:	f7ff fba8 	bl	8003bac <invSqrt>
 800445c:	ed8d 0a09 	vstr	s0, [sp, #36]	; 0x24
        recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 8004460:	ee2a 0a0a 	vmul.f32	s0, s20, s20
 8004464:	eeaa 0aaa 	vfma.f32	s0, s21, s21
 8004468:	eeac 0a0c 	vfma.f32	s0, s24, s24
 800446c:	f7ff fb9e 	bl	8003bac <invSqrt>
        _2q0mx = 2.0f * q0 * mx;
 8004470:	ee39 eaa9 	vadd.f32	s28, s19, s19
        my *= recipNorm;
 8004474:	ee2a aa00 	vmul.f32	s20, s20, s0
        mx *= recipNorm;
 8004478:	ee6a 2a80 	vmul.f32	s5, s21, s0
        _2q0my = 2.0f * q0 * my;
 800447c:	ee6a 7a0e 	vmul.f32	s15, s20, s28
        q0q0 = q0 * q0;
 8004480:	ee29 3aa9 	vmul.f32	s6, s19, s19
        hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2
 8004484:	ee67 5ae8 	vnmul.f32	s11, s15, s17
        mz *= recipNorm;
 8004488:	ee2c ca00 	vmul.f32	s24, s24, s0
        hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2
 800448c:	eee2 5a83 	vfma.f32	s11, s5, s6
        _2q0mz = 2.0f * q0 * mz;
 8004490:	ee6c 4a0e 	vmul.f32	s9, s24, s28
        q1q1 = q1 * q1;
 8004494:	ee69 fa09 	vmul.f32	s31, s18, s18
        hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2
 8004498:	eee8 5a24 	vfma.f32	s11, s16, s9
        _2q1mx = 2.0f * q1 * mx;
 800449c:	ee79 ea09 	vadd.f32	s29, s18, s18
        hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2
 80044a0:	eee2 5aaf 	vfma.f32	s11, s5, s31
 80044a4:	ee2a 0a2e 	vmul.f32	s0, s20, s29
        _2q0mx = 2.0f * q0 * mx;
 80044a8:	ee22 1a8e 	vmul.f32	s2, s5, s28
        hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2
 80044ac:	eee8 5a00 	vfma.f32	s11, s16, s0
 80044b0:	ee2c 0a2e 	vmul.f32	s0, s24, s29
        q2q2 = q2 * q2;
 80044b4:	ee68 ba08 	vmul.f32	s23, s16, s16
        hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2
 80044b8:	eee8 5a80 	vfma.f32	s11, s17, s0
        hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3
 80044bc:	ee2a 0a03 	vmul.f32	s0, s20, s6
        _2q1mx = 2.0f * q1 * mx;
 80044c0:	ee62 3aae 	vmul.f32	s7, s5, s29
        hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3
 80044c4:	eea8 0a81 	vfma.f32	s0, s17, s2
        hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2
 80044c8:	eef1 0a62 	vneg.f32	s1, s5
        hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3
 80044cc:	eea9 0a64 	vfms.f32	s0, s18, s9
        hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2
 80044d0:	eee0 5aab 	vfma.f32	s11, s1, s23
        hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3
 80044d4:	eef0 4a40 	vmov.f32	s9, s0
 80044d8:	eee8 4a23 	vfma.f32	s9, s16, s7
        q3q3 = q3 * q3;
 80044dc:	ee28 6aa8 	vmul.f32	s12, s17, s17
        _2q2 = 2.0f * q2;
 80044e0:	ee78 aa08 	vadd.f32	s21, s16, s16
        hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2
 80044e4:	eee0 5a86 	vfma.f32	s11, s1, s12
        hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3
 80044e8:	eef1 0a4a 	vneg.f32	s1, s20
 80044ec:	eee0 4aaf 	vfma.f32	s9, s1, s31
 80044f0:	ee2c 0a2a 	vmul.f32	s0, s24, s21
 80044f4:	eeea 4a2b 	vfma.f32	s9, s20, s23
        q0q1 = q0 * q1;
 80044f8:	ee69 6a89 	vmul.f32	s13, s19, s18
        hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3
 80044fc:	eee8 4a80 	vfma.f32	s9, s17, s0
        q1q3 = q1 * q3;
 8004500:	ee29 5a28 	vmul.f32	s10, s18, s17
        hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3
 8004504:	eee0 4a86 	vfma.f32	s9, s1, s12
        q0q1 = q0 * q1;
 8004508:	edcd 6a08 	vstr	s13, [sp, #32]
        _2bx = sqrt(hx * hx + hy * hy);
 800450c:	ee64 4aa4 	vmul.f32	s9, s9, s9
        q1q3 = q1 * q3;
 8004510:	ed8d 5a07 	vstr	s10, [sp, #28]
        _2bx = sqrt(hx * hx + hy * hy);
 8004514:	eee5 4aa5 	vfma.f32	s9, s11, s11
        hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2
 8004518:	edcd 7a06 	vstr	s15, [sp, #24]
        _2bx = sqrt(hx * hx + hy * hy);
 800451c:	ee14 0a90 	vmov	r0, s9
        hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2
 8004520:	edcd 2a05 	vstr	s5, [sp, #20]
        hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3
 8004524:	ed8d 3a04 	vstr	s6, [sp, #16]
 8004528:	ed8d 1a03 	vstr	s2, [sp, #12]
 800452c:	edcd 3a02 	vstr	s7, [sp, #8]
 8004530:	ed8d 6a00 	vstr	s12, [sp]
        _2bx = sqrt(hx * hx + hy * hy);
 8004534:	f7fb ffac 	bl	8000490 <__aeabi_f2d>
 8004538:	ec41 0b10 	vmov	d0, r0, r1
 800453c:	f001 fe6a 	bl	8006214 <sqrt>
 8004540:	ec51 0b10 	vmov	r0, r1, d0
 8004544:	f7fc faf0 	bl	8000b28 <__aeabi_d2f>
        _2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2
 8004548:	eddd 7a06 	vldr	s15, [sp, #24]
 800454c:	ed9d 1a03 	vldr	s2, [sp, #12]
 8004550:	ed9d 3a04 	vldr	s6, [sp, #16]
 8004554:	eddd 3a02 	vldr	s7, [sp, #8]
        s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay)
 8004558:	ed9d 5a07 	vldr	s10, [sp, #28]
 800455c:	eddd 6a08 	vldr	s13, [sp, #32]
 8004560:	ed9d 7a09 	vldr	s14, [sp, #36]	; 0x24
        _2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2
 8004564:	ed9d 6a00 	vldr	s12, [sp]
        s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay)
 8004568:	eddd 1a0a 	vldr	s3, [sp, #40]	; 0x28
 800456c:	ed9d 2a0b 	vldr	s4, [sp, #44]	; 0x2c
                - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx)
 8004570:	eddd 2a05 	vldr	s5, [sp, #20]
        _2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2
 8004574:	ee69 7a27 	vmul.f32	s15, s18, s15
 8004578:	eef1 4a4c 	vneg.f32	s9, s24
 800457c:	eee1 7a48 	vfms.f32	s15, s2, s16
        s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay)
 8004580:	eeb0 0a45 	vmov.f32	s0, s10
        _2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2
 8004584:	eeec 7a03 	vfma.f32	s15, s24, s6
        s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay)
 8004588:	ee35 5a05 	vadd.f32	s10, s10, s10
        _2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2
 800458c:	eee8 7aa3 	vfma.f32	s15, s17, s7
 8004590:	ee6a 3a2a 	vmul.f32	s7, s20, s21
 8004594:	eee4 7aaf 	vfma.f32	s15, s9, s31
        s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay)
 8004598:	eea8 5a4e 	vfms.f32	s10, s16, s28
        _2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2
 800459c:	eee8 7aa3 	vfma.f32	s15, s17, s7
                - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx)
 80045a0:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
        _2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2
 80045a4:	eee4 7aab 	vfma.f32	s15, s9, s23
        s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay)
 80045a8:	ee76 4aa6 	vadd.f32	s9, s13, s13
        _2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2
 80045ac:	eeec 7a06 	vfma.f32	s15, s24, s12
        s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay)
 80045b0:	eee8 4aaa 	vfma.f32	s9, s17, s21
 80045b4:	eea1 5ac7 	vfms.f32	s10, s3, s14
                - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx)
 80045b8:	ee71 1a6b 	vsub.f32	s3, s2, s23
                + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 80045bc:	ee31 1a6f 	vsub.f32	s2, s2, s31
        s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay)
 80045c0:	eee2 4a47 	vfms.f32	s9, s4, s14
                - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx)
 80045c4:	eef1 0a69 	vneg.f32	s1, s19
 80045c8:	eeb0 2a40 	vmov.f32	s4, s0
                + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 80045cc:	ee31 1a6b 	vsub.f32	s2, s2, s23
 80045d0:	eea9 0a88 	vfma.f32	s0, s19, s16
                - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx)
 80045d4:	eea0 2a88 	vfma.f32	s4, s1, s16
        _2bx = sqrt(hx * hx + hy * hy);
 80045d8:	ee05 0a90 	vmov	s11, r0
                + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 80045dc:	ee21 1a27 	vmul.f32	s2, s2, s15
                - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx)
 80045e0:	ee22 2a27 	vmul.f32	s4, s4, s15
                + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 80045e4:	eea5 1a80 	vfma.f32	s2, s11, s0
                - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx)
 80045e8:	ee31 6ac6 	vsub.f32	s12, s3, s12
                + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my)
 80045ec:	eee8 6a28 	vfma.f32	s13, s16, s17
        q1q2 = q1 * q2;
 80045f0:	ee69 1a08 	vmul.f32	s3, s18, s16
                - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx)
 80045f4:	eea5 2a86 	vfma.f32	s4, s11, s12
                + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 80045f8:	ee31 0a4c 	vsub.f32	s0, s2, s24
                + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my)
 80045fc:	eee0 1aa8 	vfma.f32	s3, s1, s17
        s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay)
 8004600:	ee2e caa4 	vmul.f32	s24, s29, s9
                + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my)
 8004604:	ee66 6aa7 	vmul.f32	s13, s13, s15
        s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay)
 8004608:	eeaa cac5 	vfms.f32	s24, s21, s10
                - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx)
 800460c:	ee32 6a62 	vsub.f32	s12, s4, s5
                + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my)
 8004610:	ee29 2a27 	vmul.f32	s4, s18, s15
                - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx)
 8004614:	ee28 3a27 	vmul.f32	s6, s16, s15
                + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my)
 8004618:	eee5 6aa1 	vfma.f32	s13, s11, s3
 800461c:	eef1 2a65 	vneg.f32	s5, s11
 8004620:	eeb0 4a42 	vmov.f32	s8, s4
 8004624:	eea8 4aa2 	vfma.f32	s8, s17, s5
                - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx)
 8004628:	eea3 ca46 	vfms.f32	s24, s6, s12
                + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my)
 800462c:	ee76 6aca 	vsub.f32	s13, s13, s20
                - 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az)
 8004630:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
                + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my)
 8004634:	eea4 ca26 	vfma.f32	s24, s8, s13
                - 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az)
 8004638:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 800463c:	eeaf 4ac1 	vfms.f32	s8, s31, s2
 8004640:	eef1 fa00 	vmov.f32	s31, #16	; 0x40800000  4.0
 8004644:	eeab 4ac1 	vfms.f32	s8, s23, s2
        s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay)
 8004648:	ee6e ba24 	vmul.f32	s23, s28, s9
                - 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az)
 800464c:	eeaf 4a47 	vfms.f32	s8, s30, s14
        s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay)
 8004650:	ee38 7aa8 	vadd.f32	s14, s17, s17
                - 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az)
 8004654:	ee2f 1ac9 	vnmul.f32	s2, s31, s18
        s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay)
 8004658:	eee7 ba05 	vfma.f32	s23, s14, s10
                + _2bz * q3 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx)
 800465c:	ee28 faa7 	vmul.f32	s30, s17, s15
                - 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az)
 8004660:	eee1 ba04 	vfma.f32	s23, s2, s8
                + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8004664:	ee68 1a25 	vmul.f32	s3, s16, s11
                + _2bz * q3 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx)
 8004668:	eee6 ba0f 	vfma.f32	s23, s12, s30
        s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay)
 800466c:	eea1 ca80 	vfma.f32	s24, s3, s0
        s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3 - ay)
 8004670:	ee27 aa24 	vmul.f32	s20, s14, s9
                + (_2bx * q2 + _2bz * q0) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my)
 8004674:	eee9 1aa7 	vfma.f32	s3, s19, s15
        _4bx = 2.0f * _2bx;
 8004678:	ee35 1aa5 	vadd.f32	s2, s11, s11
        _4bz = 2.0f * _2bz;
 800467c:	ee77 3aa7 	vadd.f32	s7, s15, s15
        s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3 - ay)
 8004680:	eeae aa45 	vfms.f32	s20, s28, s10
                + (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx)
 8004684:	eeb1 1a41 	vneg.f32	s2, s2
                + (_2bx * q2 + _2bz * q0) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my)
 8004688:	eee6 baa1 	vfma.f32	s23, s13, s3
                + (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx)
 800468c:	ee28 7a01 	vmul.f32	s14, s16, s2
                + (_2bx * q3 - _4bz * q1) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8004690:	ee63 1ac9 	vnmul.f32	s3, s7, s18
        s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3 - ay)
 8004694:	ee6a aaa4 	vmul.f32	s21, s21, s9
                - 4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az)
 8004698:	ee68 fa2f 	vmul.f32	s31, s16, s31
                + (_2bx * q3 - _4bz * q1) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 800469c:	eee8 1aa5 	vfma.f32	s3, s17, s11
                + (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx)
 80046a0:	eea0 7aa7 	vfma.f32	s14, s1, s15
                - 4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az)
 80046a4:	eea4 aa6f 	vfms.f32	s20, s8, s31
        s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3 - ay)
 80046a8:	eeee aa85 	vfma.f32	s21, s29, s10
                + (-_4bx * q3 + _2bz * q1) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx)
 80046ac:	eea8 2a81 	vfma.f32	s4, s17, s2
        s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay)
 80046b0:	eee0 ba21 	vfma.f32	s23, s0, s3
                + (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx)
 80046b4:	eea6 aa07 	vfma.f32	s20, s12, s14
                + (_2bx * q1 + _2bz * q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my)
 80046b8:	ee69 1a25 	vmul.f32	s3, s18, s11
                + (-_4bx * q3 + _2bz * q1) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx)
 80046bc:	eee6 aa02 	vfma.f32	s21, s12, s4
                + (-_2bx * q0 + _2bz * q2) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my)
 80046c0:	eea9 3aa2 	vfma.f32	s6, s19, s5
                + (_2bx * q1 + _2bz * q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my)
 80046c4:	ee3f fa21 	vadd.f32	s30, s30, s3
                + (_2bx * q0 - _4bz * q2) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 80046c8:	ee63 3ac8 	vnmul.f32	s7, s7, s16
                + (_2bx * q1 + _2bz * q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my)
 80046cc:	eea6 aa8f 	vfma.f32	s20, s13, s30
                + (_2bx * q0 - _4bz * q2) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 80046d0:	eee9 3aa5 	vfma.f32	s7, s19, s11
                + (-_2bx * q0 + _2bz * q2) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my)
 80046d4:	eee6 aa83 	vfma.f32	s21, s13, s6
        s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3 - ay)
 80046d8:	eea0 aa23 	vfma.f32	s20, s0, s7
        s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3 - ay)
 80046dc:	eee0 aa21 	vfma.f32	s21, s0, s3
        recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 80046e0:	ee2b 0aab 	vmul.f32	s0, s23, s23
 80046e4:	eeac 0a0c 	vfma.f32	s0, s24, s24
 80046e8:	eeaa 0a0a 	vfma.f32	s0, s20, s20
 80046ec:	eeaa 0aaa 	vfma.f32	s0, s21, s21
 80046f0:	f7ff fa5c 	bl	8003bac <invSqrt>
        qDot1 -= beta * s0;
 80046f4:	4b57      	ldr	r3, [pc, #348]	; (8004854 <MPU9250_Madgwick+0x50c>)
 80046f6:	ee20 ca4c 	vnmul.f32	s24, s0, s24
 80046fa:	edd3 7a00 	vldr	s15, [r3]
        qDot2 -= beta * s1;
 80046fe:	ee60 ba6b 	vnmul.f32	s23, s0, s23
        qDot1 -= beta * s0;
 8004702:	eeec da27 	vfma.f32	s27, s24, s15
        qDot2 -= beta * s1;
 8004706:	edd3 7a00 	vldr	s15, [r3]
        qDot3 -= beta * s2;
 800470a:	ee20 aa4a 	vnmul.f32	s20, s0, s20
        qDot2 -= beta * s1;
 800470e:	eeab daa7 	vfma.f32	s26, s23, s15
        qDot3 -= beta * s2;
 8004712:	edd3 7a00 	vldr	s15, [r3]
        qDot4 -= beta * s3;
 8004716:	ee20 0a6a 	vnmul.f32	s0, s0, s21
        qDot3 -= beta * s2;
 800471a:	eeea ca27 	vfma.f32	s25, s20, s15
        qDot4 -= beta * s3;
 800471e:	edd3 7a00 	vldr	s15, [r3]
 8004722:	eea0 ba27 	vfma.f32	s22, s0, s15
    q0 += qDot1 * (1.0f / sampleFreq);
 8004726:	eddf 7a4c 	vldr	s15, [pc, #304]	; 8004858 <MPU9250_Madgwick+0x510>
    q1 += qDot2 * (1.0f / sampleFreq);
 800472a:	eead 9a27 	vfma.f32	s18, s26, s15
    q0 += qDot1 * (1.0f / sampleFreq);
 800472e:	eeed 9aa7 	vfma.f32	s19, s27, s15
    recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8004732:	ee29 0a09 	vmul.f32	s0, s18, s18
    q2 += qDot3 * (1.0f / sampleFreq);
 8004736:	eeac 8aa7 	vfma.f32	s16, s25, s15
    recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 800473a:	eea9 0aa9 	vfma.f32	s0, s19, s19
    q3 += qDot4 * (1.0f / sampleFreq);
 800473e:	eeeb 8a27 	vfma.f32	s17, s22, s15
    recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8004742:	eea8 0a08 	vfma.f32	s0, s16, s16
 8004746:	eea8 0aa8 	vfma.f32	s0, s17, s17
 800474a:	f7ff fa2f 	bl	8003bac <invSqrt>
    q1 *= recipNorm;
 800474e:	ee29 9a00 	vmul.f32	s18, s18, s0
    q0 *= recipNorm;
 8004752:	ee69 9a80 	vmul.f32	s19, s19, s0
    yaw = atan2(2.0f * (q1 * q2 + q0 * q3), q0 * q0 + q1 * q1 - q2 * q2 - q3 * q3);
 8004756:	ee29 aa09 	vmul.f32	s20, s18, s18
    q2 *= recipNorm;
 800475a:	ee28 8a00 	vmul.f32	s16, s16, s0
    yaw = atan2(2.0f * (q1 * q2 + q0 * q3), q0 * q0 + q1 * q1 - q2 * q2 - q3 * q3);
 800475e:	eef0 7a4a 	vmov.f32	s15, s20
 8004762:	eee9 7aa9 	vfma.f32	s15, s19, s19
 8004766:	eef1 ba48 	vneg.f32	s23, s16
 800476a:	eeeb 7a88 	vfma.f32	s15, s23, s16
    q3 *= recipNorm;
 800476e:	ee68 8a80 	vmul.f32	s17, s17, s0
    mpu->q[2] = q2;
 8004772:	ed84 8a24 	vstr	s16, [r4, #144]	; 0x90
    yaw = atan2(2.0f * (q1 * q2 + q0 * q3), q0 * q0 + q1 * q1 - q2 * q2 - q3 * q3);
 8004776:	eee8 7ae8 	vfms.f32	s15, s17, s17
    mpu->q[0] = q0;
 800477a:	edc4 9a22 	vstr	s19, [r4, #136]	; 0x88
    mpu->q[1] = q1;
 800477e:	ed84 9a23 	vstr	s18, [r4, #140]	; 0x8c
    mpu->q[3] = q3;
 8004782:	edc4 8a25 	vstr	s17, [r4, #148]	; 0x94
    yaw = atan2(2.0f * (q1 * q2 + q0 * q3), q0 * q0 + q1 * q1 - q2 * q2 - q3 * q3);
 8004786:	ee17 0a90 	vmov	r0, s15
 800478a:	f7fb fe81 	bl	8000490 <__aeabi_f2d>
 800478e:	ee69 7aa8 	vmul.f32	s15, s19, s17
 8004792:	e9cd 0100 	strd	r0, r1, [sp]
 8004796:	eee9 7a08 	vfma.f32	s15, s18, s16
 800479a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800479e:	ee17 0a90 	vmov	r0, s15
 80047a2:	f7fb fe75 	bl	8000490 <__aeabi_f2d>
 80047a6:	ed9d 1b00 	vldr	d1, [sp]
 80047aa:	ec41 0b10 	vmov	d0, r0, r1
 80047ae:	f001 fd2f 	bl	8006210 <atan2>
 80047b2:	ec51 0b10 	vmov	r0, r1, d0
 80047b6:	f7fc f9b7 	bl	8000b28 <__aeabi_d2f>
    pitch = -asin(2.0f * (q1 * q3 - q0 * q2));
 80047ba:	ee68 7a69 	vnmul.f32	s15, s16, s19
    yaw = atan2(2.0f * (q1 * q2 + q0 * q3), q0 * q0 + q1 * q1 - q2 * q2 - q3 * q3);
 80047be:	ee0a 0a90 	vmov	s21, r0
    pitch = -asin(2.0f * (q1 * q3 - q0 * q2));
 80047c2:	eee9 7a28 	vfma.f32	s15, s18, s17
 80047c6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80047ca:	ee17 0a90 	vmov	r0, s15
 80047ce:	f7fb fe5f 	bl	8000490 <__aeabi_f2d>
 80047d2:	ec41 0b10 	vmov	d0, r0, r1
 80047d6:	f001 fcc3 	bl	8006160 <asin>
    roll = atan2(2.0f * (q0 * q1 + q2 * q3), q0 * q0 - q1 * q1 - q2 * q2 + q3 * q3);
 80047da:	ee99 aaa9 	vfnms.f32	s20, s19, s19
    pitch = -asin(2.0f * (q1 * q3 - q0 * q2));
 80047de:	ec51 0b10 	vmov	r0, r1, d0
    roll = atan2(2.0f * (q0 * q1 + q2 * q3), q0 * q0 - q1 * q1 - q2 * q2 + q3 * q3);
 80047e2:	eeab aa88 	vfma.f32	s20, s23, s16
    pitch = -asin(2.0f * (q1 * q3 - q0 * q2));
 80047e6:	f7fc f99f 	bl	8000b28 <__aeabi_d2f>
    roll = atan2(2.0f * (q0 * q1 + q2 * q3), q0 * q0 - q1 * q1 - q2 * q2 + q3 * q3);
 80047ea:	eea8 aaa8 	vfma.f32	s20, s17, s17
 80047ee:	ee28 8a28 	vmul.f32	s16, s16, s17
    pitch = -asin(2.0f * (q1 * q3 - q0 * q2));
 80047f2:	ee07 0a90 	vmov	s15, r0
    roll = atan2(2.0f * (q0 * q1 + q2 * q3), q0 * q0 - q1 * q1 - q2 * q2 + q3 * q3);
 80047f6:	eea9 8a89 	vfma.f32	s16, s19, s18
 80047fa:	ee1a 0a10 	vmov	r0, s20
    pitch = -asin(2.0f * (q1 * q3 - q0 * q2));
 80047fe:	eeb1 ba67 	vneg.f32	s22, s15
    roll = atan2(2.0f * (q0 * q1 + q2 * q3), q0 * q0 - q1 * q1 - q2 * q2 + q3 * q3);
 8004802:	f7fb fe45 	bl	8000490 <__aeabi_f2d>
 8004806:	ee78 7a08 	vadd.f32	s15, s16, s16
 800480a:	e9cd 0100 	strd	r0, r1, [sp]
 800480e:	ee17 0a90 	vmov	r0, s15
 8004812:	f7fb fe3d 	bl	8000490 <__aeabi_f2d>
 8004816:	ed9d 1b00 	vldr	d1, [sp]
 800481a:	ec41 0b10 	vmov	d0, r0, r1
 800481e:	f001 fcf7 	bl	8006210 <atan2>
 8004822:	ec51 0b10 	vmov	r0, r1, d0
 8004826:	f7fc f97f 	bl	8000b28 <__aeabi_d2f>
    roll *= 180.0f / PI;
 800482a:	eddf 7a0c 	vldr	s15, [pc, #48]	; 800485c <MPU9250_Madgwick+0x514>
 800482e:	ee07 0a10 	vmov	s14, r0
    pitch *= 180.0f / PI;
 8004832:	ee2b ba27 	vmul.f32	s22, s22, s15
    roll *= 180.0f / PI;
 8004836:	ee27 7a27 	vmul.f32	s14, s14, s15
    yaw *= 180.0f / PI;
 800483a:	ee6a aaa7 	vmul.f32	s21, s21, s15
    mpu->roll = roll;
 800483e:	ed84 7a26 	vstr	s14, [r4, #152]	; 0x98
    mpu->pitch = pitch;
 8004842:	ed84 ba27 	vstr	s22, [r4, #156]	; 0x9c
    mpu->yaw = yaw;
 8004846:	edc4 aa28 	vstr	s21, [r4, #160]	; 0xa0
}
 800484a:	b00c      	add	sp, #48	; 0x30
 800484c:	ecbd 8b10 	vpop	{d8-d15}
 8004850:	bd10      	pop	{r4, pc}
 8004852:	bf00      	nop
 8004854:	20000008 	.word	0x20000008
 8004858:	3b03126f 	.word	0x3b03126f
 800485c:	42652ee2 	.word	0x42652ee2

08004860 <i2cWrite>:

/**/
void i2cWrite(I2C_HandleTypeDef *hi2c, uint16_t address, uint16_t reg, uint8_t *data, uint8_t data_length)
{
 8004860:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    HAL_I2C_Mem_Write(hi2c, address, reg, I2C_MEMADD_SIZE_8BIT, data, data_length, 1000);
 8004862:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8004866:	9402      	str	r4, [sp, #8]
 8004868:	f89d 4018 	ldrb.w	r4, [sp, #24]
 800486c:	e88d 0018 	stmia.w	sp, {r3, r4}
 8004870:	2301      	movs	r3, #1
 8004872:	f7fd fa5f 	bl	8001d34 <HAL_I2C_Mem_Write>
}
 8004876:	b004      	add	sp, #16
 8004878:	bd10      	pop	{r4, pc}

0800487a <MPU9250_Reset>:
{
 800487a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    temp = 0x80;
 800487c:	ab04      	add	r3, sp, #16
 800487e:	2280      	movs	r2, #128	; 0x80
 8004880:	f803 2d01 	strb.w	r2, [r3, #-1]!
    i2cWrite(hi2c, MPU9250_ADDRESS, PWR_MGMT_1, &temp, 1);
 8004884:	2201      	movs	r2, #1
 8004886:	9200      	str	r2, [sp, #0]
 8004888:	21d0      	movs	r1, #208	; 0xd0
 800488a:	226b      	movs	r2, #107	; 0x6b
 800488c:	f7ff ffe8 	bl	8004860 <i2cWrite>
    HAL_Delay(10);
 8004890:	200a      	movs	r0, #10
 8004892:	f7fc fb71 	bl	8000f78 <HAL_Delay>
}
 8004896:	b005      	add	sp, #20
 8004898:	f85d fb04 	ldr.w	pc, [sp], #4

0800489c <i2cRead>:

void i2cRead(I2C_HandleTypeDef *hi2c, uint16_t address, uint16_t reg, uint8_t *data, uint8_t data_length)
{
 800489c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    HAL_I2C_Mem_Read(hi2c, address, reg, I2C_MEMADD_SIZE_8BIT, data, data_length, 1000);
 800489e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80048a2:	9402      	str	r4, [sp, #8]
 80048a4:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80048a8:	e88d 0018 	stmia.w	sp, {r3, r4}
 80048ac:	2301      	movs	r3, #1
 80048ae:	f7fd fad7 	bl	8001e60 <HAL_I2C_Mem_Read>

}
 80048b2:	b004      	add	sp, #16
 80048b4:	bd10      	pop	{r4, pc}

080048b6 <MPU9250_readGyro>:
{
 80048b6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    i2cRead(hi2c, MPU9250_ADDRESS, GYRO_XOUT_H, &rawData[0], 6);
 80048b8:	2306      	movs	r3, #6
{
 80048ba:	460c      	mov	r4, r1
    i2cRead(hi2c, MPU9250_ADDRESS, GYRO_XOUT_H, &rawData[0], 6);
 80048bc:	9300      	str	r3, [sp, #0]
 80048be:	2243      	movs	r2, #67	; 0x43
 80048c0:	ab02      	add	r3, sp, #8
 80048c2:	21d0      	movs	r1, #208	; 0xd0
 80048c4:	f7ff ffea 	bl	800489c <i2cRead>
    mpu->GyroX_raw = (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]);
 80048c8:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80048cc:	f89d 1009 	ldrb.w	r1, [sp, #9]
    mpu->GyroX = (float) mpu->GyroX_raw * mpu->Gyro_factor - mpu->GyroX_offset;
 80048d0:	edd4 6a01 	vldr	s13, [r4, #4]
    mpu->GyroY_raw = (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 80048d4:	f89d 200b 	ldrb.w	r2, [sp, #11]
    mpu->GyroX = (float) mpu->GyroX_raw * mpu->Gyro_factor - mpu->GyroX_offset;
 80048d8:	ed94 7a11 	vldr	s14, [r4, #68]	; 0x44
    mpu->GyroZ_raw = (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 80048dc:	f89d 000c 	ldrb.w	r0, [sp, #12]
    mpu->GyroX_raw = (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]);
 80048e0:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 80048e4:	b209      	sxth	r1, r1
    mpu->GyroX = (float) mpu->GyroX_raw * mpu->Gyro_factor - mpu->GyroX_offset;
 80048e6:	ee07 1a90 	vmov	s15, r1
    mpu->GyroY_raw = (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 80048ea:	f89d 300a 	ldrb.w	r3, [sp, #10]
    mpu->GyroX_raw = (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]);
 80048ee:	8621      	strh	r1, [r4, #48]	; 0x30
    mpu->GyroX = (float) mpu->GyroX_raw * mpu->Gyro_factor - mpu->GyroX_offset;
 80048f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    mpu->GyroY_raw = (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 80048f4:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    mpu->GyroX = (float) mpu->GyroX_raw * mpu->Gyro_factor - mpu->GyroX_offset;
 80048f8:	ee97 7aa6 	vfnms.f32	s14, s15, s13
    mpu->GyroY_raw = (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 80048fc:	b212      	sxth	r2, r2
    mpu->GyroZ_raw = (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 80048fe:	f89d 300d 	ldrb.w	r3, [sp, #13]
    mpu->GyroY_raw = (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 8004902:	8662      	strh	r2, [r4, #50]	; 0x32
    mpu->GyroY = (float) mpu->GyroY_raw * mpu->Gyro_factor - mpu->GyroY_offset;
 8004904:	ee07 2a90 	vmov	s15, r2
    mpu->GyroX = (float) mpu->GyroX_raw * mpu->Gyro_factor - mpu->GyroX_offset;
 8004908:	ed84 7a0e 	vstr	s14, [r4, #56]	; 0x38
    mpu->GyroY = (float) mpu->GyroY_raw * mpu->Gyro_factor - mpu->GyroY_offset;
 800490c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004910:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
    mpu->GyroZ_raw = (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 8004914:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    mpu->GyroY = (float) mpu->GyroY_raw * mpu->Gyro_factor - mpu->GyroY_offset;
 8004918:	ee96 7aa7 	vfnms.f32	s14, s13, s15
    mpu->GyroZ_raw = (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 800491c:	b21b      	sxth	r3, r3
 800491e:	86a3      	strh	r3, [r4, #52]	; 0x34
    mpu->GyroZ = (float) mpu->GyroZ_raw * mpu->Gyro_factor - mpu->GyroZ_offset;
 8004920:	ee07 3a90 	vmov	s15, r3
    mpu->GyroY = (float) mpu->GyroY_raw * mpu->Gyro_factor - mpu->GyroY_offset;
 8004924:	ed84 7a0f 	vstr	s14, [r4, #60]	; 0x3c
    mpu->GyroZ = (float) mpu->GyroZ_raw * mpu->Gyro_factor - mpu->GyroZ_offset;
 8004928:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800492c:	ed94 7a13 	vldr	s14, [r4, #76]	; 0x4c
 8004930:	ee96 7aa7 	vfnms.f32	s14, s13, s15
 8004934:	ed84 7a10 	vstr	s14, [r4, #64]	; 0x40
}
 8004938:	b004      	add	sp, #16
 800493a:	bd10      	pop	{r4, pc}

0800493c <MPU9250_readAcc>:
{
 800493c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    i2cRead(hi2c, MPU9250_ADDRESS, ACCEL_XOUT_H, &rawData[0], 6);
 800493e:	2306      	movs	r3, #6
{
 8004940:	460c      	mov	r4, r1
    i2cRead(hi2c, MPU9250_ADDRESS, ACCEL_XOUT_H, &rawData[0], 6);
 8004942:	9300      	str	r3, [sp, #0]
 8004944:	223b      	movs	r2, #59	; 0x3b
 8004946:	ab02      	add	r3, sp, #8
 8004948:	21d0      	movs	r1, #208	; 0xd0
 800494a:	f7ff ffa7 	bl	800489c <i2cRead>
    mpu->AccX_raw = (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]);
 800494e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8004952:	f89d 1009 	ldrb.w	r1, [sp, #9]
    mpu->AccX = (float) mpu->AccX_raw * mpu->Acc_factor - mpu->AccX_offset;
 8004956:	edd4 6a02 	vldr	s13, [r4, #8]
    mpu->AccY_raw = (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 800495a:	f89d 200b 	ldrb.w	r2, [sp, #11]
    mpu->AccX = (float) mpu->AccX_raw * mpu->Acc_factor - mpu->AccX_offset;
 800495e:	ed94 7a06 	vldr	s14, [r4, #24]
    mpu->AccZ_raw = (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 8004962:	f89d 000c 	ldrb.w	r0, [sp, #12]
    mpu->AccX_raw = (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]);
 8004966:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 800496a:	b209      	sxth	r1, r1
    mpu->AccX = (float) mpu->AccX_raw * mpu->Acc_factor - mpu->AccX_offset;
 800496c:	ee07 1a90 	vmov	s15, r1
    mpu->AccY_raw = (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 8004970:	f89d 300a 	ldrb.w	r3, [sp, #10]
    mpu->AccX_raw = (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]);
 8004974:	8221      	strh	r1, [r4, #16]
    mpu->AccX = (float) mpu->AccX_raw * mpu->Acc_factor - mpu->AccX_offset;
 8004976:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    mpu->AccY_raw = (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 800497a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    mpu->AccX = (float) mpu->AccX_raw * mpu->Acc_factor - mpu->AccX_offset;
 800497e:	ee97 7aa6 	vfnms.f32	s14, s15, s13
    mpu->AccY_raw = (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 8004982:	b212      	sxth	r2, r2
    mpu->AccZ_raw = (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 8004984:	f89d 300d 	ldrb.w	r3, [sp, #13]
    mpu->AccY_raw = (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 8004988:	8262      	strh	r2, [r4, #18]
    mpu->AccY = (float) mpu->AccY_raw * mpu->Acc_factor - mpu->AccY_offset;
 800498a:	ee07 2a90 	vmov	s15, r2
    mpu->AccX = (float) mpu->AccX_raw * mpu->Acc_factor - mpu->AccX_offset;
 800498e:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
    mpu->AccY = (float) mpu->AccY_raw * mpu->Acc_factor - mpu->AccY_offset;
 8004992:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004996:	ed94 7a07 	vldr	s14, [r4, #28]
    mpu->AccZ_raw = (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 800499a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    mpu->AccY = (float) mpu->AccY_raw * mpu->Acc_factor - mpu->AccY_offset;
 800499e:	ee96 7aa7 	vfnms.f32	s14, s13, s15
    mpu->AccZ_raw = (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 80049a2:	b21b      	sxth	r3, r3
 80049a4:	82a3      	strh	r3, [r4, #20]
    mpu->AccZ = (float) mpu->AccZ_raw * mpu->Acc_factor - mpu->AccZ_offset;
 80049a6:	ee07 3a90 	vmov	s15, r3
    mpu->AccY = (float) mpu->AccY_raw * mpu->Acc_factor - mpu->AccY_offset;
 80049aa:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
    mpu->AccZ = (float) mpu->AccZ_raw * mpu->Acc_factor - mpu->AccZ_offset;
 80049ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049b2:	ed94 7a08 	vldr	s14, [r4, #32]
 80049b6:	ee96 7aa7 	vfnms.f32	s14, s13, s15
 80049ba:	ed84 7a0b 	vstr	s14, [r4, #44]	; 0x2c
}
 80049be:	b004      	add	sp, #16
 80049c0:	bd10      	pop	{r4, pc}

080049c2 <MPU9250_readMag>:
{
 80049c2:	b530      	push	{r4, r5, lr}
 80049c4:	b087      	sub	sp, #28
    i2cRead(hi2c, AK8963_ADDRESS, AK8963_ST1, &temp, 1);
 80049c6:	2301      	movs	r3, #1
 80049c8:	9300      	str	r3, [sp, #0]
 80049ca:	2202      	movs	r2, #2
 80049cc:	f10d 030f 	add.w	r3, sp, #15
{
 80049d0:	460c      	mov	r4, r1
    i2cRead(hi2c, AK8963_ADDRESS, AK8963_ST1, &temp, 1);
 80049d2:	2118      	movs	r1, #24
{
 80049d4:	4605      	mov	r5, r0
    i2cRead(hi2c, AK8963_ADDRESS, AK8963_ST1, &temp, 1);
 80049d6:	f7ff ff61 	bl	800489c <i2cRead>
    if (temp & 0x01)
 80049da:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80049de:	07da      	lsls	r2, r3, #31
 80049e0:	d523      	bpl.n	8004a2a <MPU9250_readMag+0x68>
        i2cRead(hi2c, AK8963_ADDRESS, AK8963_XOUT_L, &rawData[0], 7);
 80049e2:	2307      	movs	r3, #7
 80049e4:	9300      	str	r3, [sp, #0]
 80049e6:	2203      	movs	r2, #3
 80049e8:	ab04      	add	r3, sp, #16
 80049ea:	2118      	movs	r1, #24
 80049ec:	4628      	mov	r0, r5
 80049ee:	f7ff ff55 	bl	800489c <i2cRead>
        if (!(c & 0x08)) // Check if magnetic sensor overflow set, if not then report data
 80049f2:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80049f6:	071b      	lsls	r3, r3, #28
 80049f8:	d417      	bmi.n	8004a2a <MPU9250_readMag+0x68>
            mpu->MagX_raw = (int16_t) (((int16_t) rawData[1] << 8) | rawData[0]); // Turn the MSB and LSB into a signed 16-bit value
 80049fa:	f89d 2011 	ldrb.w	r2, [sp, #17]
 80049fe:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8004a02:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004a06:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
            mpu->MagY_raw = (int16_t) (((int16_t) rawData[3] << 8) | rawData[2]); // Data stored as little Endian
 8004a0a:	f89d 2013 	ldrb.w	r2, [sp, #19]
 8004a0e:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8004a12:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004a16:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
            mpu->MagZ_raw = (int16_t) (((int16_t) rawData[5] << 8) | rawData[4]);
 8004a1a:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8004a1e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8004a22:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004a26:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
        if(mpu->calib_done==1)
 8004a2a:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 8004a2e:	ed94 6a03 	vldr	s12, [r4, #12]
 8004a32:	edd4 5a16 	vldr	s11, [r4, #88]	; 0x58
 8004a36:	edd4 4a17 	vldr	s9, [r4, #92]	; 0x5c
 8004a3a:	ed94 5a18 	vldr	s10, [r4, #96]	; 0x60
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	f9b4 3050 	ldrsh.w	r3, [r4, #80]	; 0x50
 8004a44:	ee06 3a90 	vmov	s13, r3
 8004a48:	f9b4 3052 	ldrsh.w	r3, [r4, #82]	; 0x52
        	mpu->MagX = (float) mpu->MagX_raw * mpu->Mag_factor * mpu->MagCalibX * mpu->MagX_calibscale - mpu->MagX_offset;
 8004a4c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8004a50:	ee07 3a10 	vmov	s14, r3
 8004a54:	ee66 6a86 	vmul.f32	s13, s13, s12
 8004a58:	f9b4 3054 	ldrsh.w	r3, [r4, #84]	; 0x54
 8004a5c:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8004a60:	ee07 3a90 	vmov	s15, r3
        if(mpu->calib_done==1)
 8004a64:	d127      	bne.n	8004ab6 <MPU9250_readMag+0xf4>
        	mpu->MagX = (float) mpu->MagX_raw * mpu->Mag_factor * mpu->MagCalibX * mpu->MagX_calibscale - mpu->MagX_offset;
 8004a66:	edd4 5a1f 	vldr	s11, [r4, #124]	; 0x7c
 8004a6a:	ed94 4a19 	vldr	s8, [r4, #100]	; 0x64
        	mpu->MagY = (float) mpu->MagY_raw * mpu->Mag_factor * mpu->MagCalibY * mpu->MagY_calibscale - mpu->MagY_offset;
 8004a6e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
        	mpu->MagX = (float) mpu->MagX_raw * mpu->Mag_factor * mpu->MagCalibX * mpu->MagX_calibscale - mpu->MagX_offset;
 8004a72:	eed6 5a84 	vfnms.f32	s11, s13, s8
        	mpu->MagY = (float) mpu->MagY_raw * mpu->Mag_factor * mpu->MagCalibY * mpu->MagY_calibscale - mpu->MagY_offset;
 8004a76:	ee27 7a06 	vmul.f32	s14, s14, s12
        	mpu->MagX = (float) mpu->MagX_raw * mpu->Mag_factor * mpu->MagCalibX * mpu->MagX_calibscale - mpu->MagX_offset;
 8004a7a:	edc4 5a1c 	vstr	s11, [r4, #112]	; 0x70
        	mpu->MagY = (float) mpu->MagY_raw * mpu->Mag_factor * mpu->MagCalibY * mpu->MagY_calibscale - mpu->MagY_offset;
 8004a7e:	ee27 7a24 	vmul.f32	s14, s14, s9
 8004a82:	edd4 6a20 	vldr	s13, [r4, #128]	; 0x80
 8004a86:	edd4 5a1a 	vldr	s11, [r4, #104]	; 0x68
        	mpu->MagZ = (float) mpu->MagZ_raw * mpu->Mag_factor * mpu->MagCalibZ * mpu->MagZ_calibscale - mpu->MagZ_offset;
 8004a8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        	mpu->MagY = (float) mpu->MagY_raw * mpu->Mag_factor * mpu->MagCalibY * mpu->MagY_calibscale - mpu->MagY_offset;
 8004a8e:	eed7 6a25 	vfnms.f32	s13, s14, s11
        	mpu->MagZ = (float) mpu->MagZ_raw * mpu->Mag_factor * mpu->MagCalibZ * mpu->MagZ_calibscale - mpu->MagZ_offset;
 8004a92:	ee67 7a86 	vmul.f32	s15, s15, s12
        	mpu->MagY = (float) mpu->MagY_raw * mpu->Mag_factor * mpu->MagCalibY * mpu->MagY_calibscale - mpu->MagY_offset;
 8004a96:	edc4 6a1d 	vstr	s13, [r4, #116]	; 0x74
        	mpu->MagZ = (float) mpu->MagZ_raw * mpu->Mag_factor * mpu->MagCalibZ * mpu->MagZ_calibscale - mpu->MagZ_offset;
 8004a9a:	ee67 7a85 	vmul.f32	s15, s15, s10
 8004a9e:	ed94 7a21 	vldr	s14, [r4, #132]	; 0x84
 8004aa2:	edd4 6a1b 	vldr	s13, [r4, #108]	; 0x6c
 8004aa6:	ee97 7aa6 	vfnms.f32	s14, s15, s13
 8004aaa:	eef0 7a47 	vmov.f32	s15, s14
        	mpu->MagZ = (float) mpu->MagZ_raw * mpu->Mag_factor * mpu->MagCalibZ;
 8004aae:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
}
 8004ab2:	b007      	add	sp, #28
 8004ab4:	bd30      	pop	{r4, r5, pc}
        	mpu->MagY = (float) mpu->MagY_raw * mpu->Mag_factor * mpu->MagCalibY;
 8004ab6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
        	mpu->MagZ = (float) mpu->MagZ_raw * mpu->Mag_factor * mpu->MagCalibZ;
 8004aba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        	mpu->MagY = (float) mpu->MagY_raw * mpu->Mag_factor * mpu->MagCalibY;
 8004abe:	ee27 7a06 	vmul.f32	s14, s14, s12
        	mpu->MagZ = (float) mpu->MagZ_raw * mpu->Mag_factor * mpu->MagCalibZ;
 8004ac2:	ee67 7a86 	vmul.f32	s15, s15, s12
        	mpu->MagY = (float) mpu->MagY_raw * mpu->Mag_factor * mpu->MagCalibY;
 8004ac6:	ee27 7a24 	vmul.f32	s14, s14, s9
        	mpu->MagX = (float) mpu->MagX_raw * mpu->Mag_factor * mpu->MagCalibX;
 8004aca:	edc4 6a1c 	vstr	s13, [r4, #112]	; 0x70
        	mpu->MagY = (float) mpu->MagY_raw * mpu->Mag_factor * mpu->MagCalibY;
 8004ace:	ed84 7a1d 	vstr	s14, [r4, #116]	; 0x74
        	mpu->MagZ = (float) mpu->MagZ_raw * mpu->Mag_factor * mpu->MagCalibZ;
 8004ad2:	ee67 7a85 	vmul.f32	s15, s15, s10
 8004ad6:	e7ea      	b.n	8004aae <MPU9250_readMag+0xec>

08004ad8 <MPU9250_read>:
{
 8004ad8:	b538      	push	{r3, r4, r5, lr}
 8004ada:	460c      	mov	r4, r1
 8004adc:	4605      	mov	r5, r0
    MPU9250_readGyro(hi2c, mpu);
 8004ade:	f7ff feea 	bl	80048b6 <MPU9250_readGyro>
    MPU9250_readAcc(hi2c, mpu);
 8004ae2:	4621      	mov	r1, r4
 8004ae4:	4628      	mov	r0, r5
 8004ae6:	f7ff ff29 	bl	800493c <MPU9250_readAcc>
    MPU9250_readMag(hi2c, mpu);
 8004aea:	4628      	mov	r0, r5
 8004aec:	4621      	mov	r1, r4
 8004aee:	f7ff ff68 	bl	80049c2 <MPU9250_readMag>
    MPU9250_Madgwick(mpu);
 8004af2:	4620      	mov	r0, r4
}
 8004af4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    MPU9250_Madgwick(mpu);
 8004af8:	f7ff bc26 	b.w	8004348 <MPU9250_Madgwick>

08004afc <Magnet_Calib>:
{
 8004afc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int32_t mag_max[3] = {-32767, -32767, -32767};
 8004b00:	4d4e      	ldr	r5, [pc, #312]	; (8004c3c <Magnet_Calib+0x140>)
	int32_t mag_min[3] = {32767, 32767, 32767};
 8004b02:	f647 78ff 	movw	r8, #32767	; 0x7fff
{
 8004b06:	4602      	mov	r2, r0
 8004b08:	460c      	mov	r4, r1
 8004b0a:	f44f 7bfa 	mov.w	fp, #500	; 0x1f4
	int32_t mag_min[3] = {32767, 32767, 32767};
 8004b0e:	46c1      	mov	r9, r8
 8004b10:	46c2      	mov	sl, r8
	int32_t mag_max[3] = {-32767, -32767, -32767};
 8004b12:	462e      	mov	r6, r5
 8004b14:	462f      	mov	r7, r5
		MPU9250_readMag(hi2c, mpu);
 8004b16:	4610      	mov	r0, r2
 8004b18:	4621      	mov	r1, r4
 8004b1a:	9201      	str	r2, [sp, #4]
 8004b1c:	f7ff ff51 	bl	80049c2 <MPU9250_readMag>
		if(mpu->MagX_raw>mag_max[0])
 8004b20:	f9b4 0050 	ldrsh.w	r0, [r4, #80]	; 0x50
		if(mpu->MagY_raw>mag_max[1])
 8004b24:	f9b4 1052 	ldrsh.w	r1, [r4, #82]	; 0x52
		if(mpu->MagZ_raw>mag_max[2])
 8004b28:	f9b4 3054 	ldrsh.w	r3, [r4, #84]	; 0x54
 8004b2c:	4287      	cmp	r7, r0
 8004b2e:	bfb8      	it	lt
 8004b30:	4607      	movlt	r7, r0
 8004b32:	428e      	cmp	r6, r1
 8004b34:	bfb8      	it	lt
 8004b36:	460e      	movlt	r6, r1
 8004b38:	429d      	cmp	r5, r3
 8004b3a:	bfb8      	it	lt
 8004b3c:	461d      	movlt	r5, r3
 8004b3e:	4582      	cmp	sl, r0
 8004b40:	bfa8      	it	ge
 8004b42:	4682      	movge	sl, r0
 8004b44:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004b48:	4589      	cmp	r9, r1
 8004b4a:	bfa8      	it	ge
 8004b4c:	4689      	movge	r9, r1
		HAL_Delay(12);
 8004b4e:	200c      	movs	r0, #12
 8004b50:	4598      	cmp	r8, r3
 8004b52:	fa1f fb8b 	uxth.w	fp, fp
 8004b56:	bfa8      	it	ge
 8004b58:	4698      	movge	r8, r3
 8004b5a:	f7fc fa0d 	bl	8000f78 <HAL_Delay>
	for(i = 0; i<sample_count; i++)
 8004b5e:	9a01      	ldr	r2, [sp, #4]
 8004b60:	f1bb 0f00 	cmp.w	fp, #0
 8004b64:	d1d7      	bne.n	8004b16 <Magnet_Calib+0x1a>
	mag_bias[0] = (mag_max[0] + mag_min[0])/2;
 8004b66:	2202      	movs	r2, #2
 8004b68:	eb0a 0307 	add.w	r3, sl, r7
 8004b6c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004b70:	ee07 3a10 	vmov	s14, r3
	mpu->MagX_offset = mag_bias[0] * mpu->Mag_factor * mpu->MagCalibX;
 8004b74:	edd4 6a03 	vldr	s13, [r4, #12]
 8004b78:	edd4 7a16 	vldr	s15, [r4, #88]	; 0x58
 8004b7c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	mag_bias[1] = (mag_max[1] + mag_min[1])/2;
 8004b80:	eb09 0306 	add.w	r3, r9, r6
	mpu->MagX_offset = mag_bias[0] * mpu->Mag_factor * mpu->MagCalibX;
 8004b84:	ee27 7a26 	vmul.f32	s14, s14, s13
	mag_bias[1] = (mag_max[1] + mag_min[1])/2;
 8004b88:	fb93 f3f2 	sdiv	r3, r3, r2
	mpu->MagX_offset = mag_bias[0] * mpu->Mag_factor * mpu->MagCalibX;
 8004b8c:	ee27 7a27 	vmul.f32	s14, s14, s15
	mpu->MagY_offset = mag_bias[1] * mpu->Mag_factor * mpu->MagCalibY;
 8004b90:	edd4 7a17 	vldr	s15, [r4, #92]	; 0x5c
	mpu->MagX_offset = mag_bias[0] * mpu->Mag_factor * mpu->MagCalibX;
 8004b94:	ed84 7a1f 	vstr	s14, [r4, #124]	; 0x7c
	mag_bias[1] = (mag_max[1] + mag_min[1])/2;
 8004b98:	ee07 3a10 	vmov	s14, r3
	mpu->MagY_offset = mag_bias[1] * mpu->Mag_factor * mpu->MagCalibY;
 8004b9c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	mag_bias[2] = (mag_max[2] + mag_min[2])/2;
 8004ba0:	eb08 0305 	add.w	r3, r8, r5
	mpu->MagY_offset = mag_bias[1] * mpu->Mag_factor * mpu->MagCalibY;
 8004ba4:	ee27 7a26 	vmul.f32	s14, s14, s13
	mag_bias[2] = (mag_max[2] + mag_min[2])/2;
 8004ba8:	fb93 f3f2 	sdiv	r3, r3, r2
	mpu->MagY_offset = mag_bias[1] * mpu->Mag_factor * mpu->MagCalibY;
 8004bac:	ee27 7a27 	vmul.f32	s14, s14, s15
	mag_bias[2] = (mag_max[2] + mag_min[2])/2;
 8004bb0:	ee07 3a90 	vmov	s15, r3
	mpu->MagZ_offset = mag_bias[2] * mpu->Mag_factor * mpu->MagCalibZ;
 8004bb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	mpu->MagY_offset = mag_bias[1] * mpu->Mag_factor * mpu->MagCalibY;
 8004bb8:	ed84 7a20 	vstr	s14, [r4, #128]	; 0x80
	mpu->MagZ_offset = mag_bias[2] * mpu->Mag_factor * mpu->MagCalibZ;
 8004bbc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004bc0:	ed94 7a18 	vldr	s14, [r4, #96]	; 0x60
	mag_scale[0]  = (mag_max[0] - mag_min[0])/2;
 8004bc4:	eba7 070a 	sub.w	r7, r7, sl
	mpu->MagZ_offset = mag_bias[2] * mpu->Mag_factor * mpu->MagCalibZ;
 8004bc8:	ee67 7a87 	vmul.f32	s15, s15, s14
	mag_scale[0]  = (mag_max[0] - mag_min[0])/2;
 8004bcc:	fb97 f7f2 	sdiv	r7, r7, r2
	mag_scale[1]  = (mag_max[1] - mag_min[1])/2;
 8004bd0:	eba6 0609 	sub.w	r6, r6, r9
 8004bd4:	fb96 f6f2 	sdiv	r6, r6, r2
	avg_rad = mag_scale[0]+mag_scale[1]+mag_scale[2];
 8004bd8:	19bb      	adds	r3, r7, r6
	mag_scale[2]  = (mag_max[2] - mag_min[2])/2;
 8004bda:	eba5 0508 	sub.w	r5, r5, r8
 8004bde:	fb95 f5f2 	sdiv	r5, r5, r2
	avg_rad = mag_scale[0]+mag_scale[1]+mag_scale[2];
 8004be2:	442b      	add	r3, r5
	mpu->MagZ_offset = mag_bias[2] * mpu->Mag_factor * mpu->MagCalibZ;
 8004be4:	edc4 7a21 	vstr	s15, [r4, #132]	; 0x84
	avg_rad = mag_scale[0]+mag_scale[1]+mag_scale[2];
 8004be8:	ee07 3a90 	vmov	s15, r3
 8004bec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	avg_rad/=3.0;
 8004bf0:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8004bf4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004bf8:	4b11      	ldr	r3, [pc, #68]	; (8004c40 <Magnet_Calib+0x144>)
	mpu->MagX_calibscale = avg_rad/((float)mag_scale[0]);
 8004bfa:	ee07 7a90 	vmov	s15, r7
 8004bfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	avg_rad/=3.0;
 8004c02:	ed83 7a00 	vstr	s14, [r3]
	mpu->MagX_calibscale = avg_rad/((float)mag_scale[0]);
 8004c06:	eec7 6a27 	vdiv.f32	s13, s14, s15
	mpu->calib_done = 1;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	mpu->MagY_calibscale = avg_rad/((float)mag_scale[1]);
 8004c10:	ee07 6a90 	vmov	s15, r6
 8004c14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	mpu->MagX_calibscale = avg_rad/((float)mag_scale[0]);
 8004c18:	edc4 6a19 	vstr	s13, [r4, #100]	; 0x64
	mpu->MagY_calibscale = avg_rad/((float)mag_scale[1]);
 8004c1c:	eec7 6a27 	vdiv.f32	s13, s14, s15
	mpu->MagZ_calibscale = avg_rad/((float)mag_scale[2]);
 8004c20:	ee07 5a90 	vmov	s15, r5
 8004c24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	mpu->MagY_calibscale = avg_rad/((float)mag_scale[1]);
 8004c28:	edc4 6a1a 	vstr	s13, [r4, #104]	; 0x68
	mpu->MagZ_calibscale = avg_rad/((float)mag_scale[2]);
 8004c2c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004c30:	edc4 6a1b 	vstr	s13, [r4, #108]	; 0x6c
}
 8004c34:	b003      	add	sp, #12
 8004c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c3a:	bf00      	nop
 8004c3c:	ffff8001 	.word	0xffff8001
 8004c40:	200000d4 	.word	0x200000d4

08004c44 <MPU9250_calib>:
{
 8004c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c48:	b08b      	sub	sp, #44	; 0x2c
    temp = 0x01;
 8004c4a:	ae0a      	add	r6, sp, #40	; 0x28
 8004c4c:	2701      	movs	r7, #1
{
 8004c4e:	4605      	mov	r5, r0
 8004c50:	468a      	mov	sl, r1
    MPU9250_Reset(hi2c, mpu);
 8004c52:	f7ff fe12 	bl	800487a <MPU9250_Reset>
    temp = 0x01;
 8004c56:	f806 7d0d 	strb.w	r7, [r6, #-13]!
    i2cWrite(hi2c, MPU9250_ADDRESS, PWR_MGMT_1, &temp, 1);
 8004c5a:	226b      	movs	r2, #107	; 0x6b
 8004c5c:	4633      	mov	r3, r6
 8004c5e:	9700      	str	r7, [sp, #0]
 8004c60:	21d0      	movs	r1, #208	; 0xd0
 8004c62:	4628      	mov	r0, r5
    temp = 0x00;
 8004c64:	2400      	movs	r4, #0
    i2cWrite(hi2c, MPU9250_ADDRESS, PWR_MGMT_1, &temp, 1);
 8004c66:	f7ff fdfb 	bl	8004860 <i2cWrite>
    i2cWrite(hi2c, MPU9250_ADDRESS, PWR_MGMT_2, &temp, 1);
 8004c6a:	4633      	mov	r3, r6
 8004c6c:	9700      	str	r7, [sp, #0]
 8004c6e:	226c      	movs	r2, #108	; 0x6c
 8004c70:	21d0      	movs	r1, #208	; 0xd0
 8004c72:	4628      	mov	r0, r5
    temp = 0x00;
 8004c74:	f88d 401b 	strb.w	r4, [sp, #27]
    i2cWrite(hi2c, MPU9250_ADDRESS, PWR_MGMT_2, &temp, 1);
 8004c78:	f7ff fdf2 	bl	8004860 <i2cWrite>
    i2cWrite(hi2c, MPU9250_ADDRESS, INT_ENABLE, &temp, 1);
 8004c7c:	4633      	mov	r3, r6
 8004c7e:	9700      	str	r7, [sp, #0]
 8004c80:	2238      	movs	r2, #56	; 0x38
 8004c82:	21d0      	movs	r1, #208	; 0xd0
 8004c84:	4628      	mov	r0, r5
    temp = 0x00;
 8004c86:	f88d 401b 	strb.w	r4, [sp, #27]
    i2cWrite(hi2c, MPU9250_ADDRESS, INT_ENABLE, &temp, 1);
 8004c8a:	f7ff fde9 	bl	8004860 <i2cWrite>
    i2cWrite(hi2c, MPU9250_ADDRESS, FIFO_EN, &temp, 1);
 8004c8e:	4633      	mov	r3, r6
 8004c90:	9700      	str	r7, [sp, #0]
 8004c92:	2223      	movs	r2, #35	; 0x23
 8004c94:	21d0      	movs	r1, #208	; 0xd0
 8004c96:	4628      	mov	r0, r5
    temp = 0x00;
 8004c98:	f88d 401b 	strb.w	r4, [sp, #27]
    i2cWrite(hi2c, MPU9250_ADDRESS, FIFO_EN, &temp, 1);
 8004c9c:	f7ff fde0 	bl	8004860 <i2cWrite>
    i2cWrite(hi2c, MPU9250_ADDRESS, PWR_MGMT_1, &temp, 1);
 8004ca0:	4633      	mov	r3, r6
 8004ca2:	9700      	str	r7, [sp, #0]
 8004ca4:	226b      	movs	r2, #107	; 0x6b
 8004ca6:	21d0      	movs	r1, #208	; 0xd0
 8004ca8:	4628      	mov	r0, r5
    temp = 0x00;
 8004caa:	f88d 401b 	strb.w	r4, [sp, #27]
    i2cWrite(hi2c, MPU9250_ADDRESS, PWR_MGMT_1, &temp, 1);
 8004cae:	f7ff fdd7 	bl	8004860 <i2cWrite>
    i2cWrite(hi2c, MPU9250_ADDRESS, I2C_MST_CTRL, &temp, 1);
 8004cb2:	4633      	mov	r3, r6
 8004cb4:	9700      	str	r7, [sp, #0]
 8004cb6:	2224      	movs	r2, #36	; 0x24
 8004cb8:	21d0      	movs	r1, #208	; 0xd0
 8004cba:	4628      	mov	r0, r5
    temp = 0x00;
 8004cbc:	f88d 401b 	strb.w	r4, [sp, #27]
    i2cWrite(hi2c, MPU9250_ADDRESS, I2C_MST_CTRL, &temp, 1);
 8004cc0:	f7ff fdce 	bl	8004860 <i2cWrite>
    i2cWrite(hi2c, MPU9250_ADDRESS, USER_CTRL, &temp, 1);
 8004cc4:	4633      	mov	r3, r6
 8004cc6:	9700      	str	r7, [sp, #0]
 8004cc8:	226a      	movs	r2, #106	; 0x6a
 8004cca:	21d0      	movs	r1, #208	; 0xd0
 8004ccc:	4628      	mov	r0, r5
    temp = 0x0C;
 8004cce:	f04f 0b0c 	mov.w	fp, #12
    temp = 0x00;
 8004cd2:	f88d 401b 	strb.w	r4, [sp, #27]
    i2cWrite(hi2c, MPU9250_ADDRESS, USER_CTRL, &temp, 1);
 8004cd6:	f7ff fdc3 	bl	8004860 <i2cWrite>
    i2cWrite(hi2c, MPU9250_ADDRESS, USER_CTRL, &temp, 1);
 8004cda:	4633      	mov	r3, r6
 8004cdc:	226a      	movs	r2, #106	; 0x6a
 8004cde:	21d0      	movs	r1, #208	; 0xd0
 8004ce0:	9700      	str	r7, [sp, #0]
 8004ce2:	4628      	mov	r0, r5
    temp = 0x0C;
 8004ce4:	f88d b01b 	strb.w	fp, [sp, #27]
    i2cWrite(hi2c, MPU9250_ADDRESS, USER_CTRL, &temp, 1);
 8004ce8:	f7ff fdba 	bl	8004860 <i2cWrite>
    HAL_Delay(10);
 8004cec:	200a      	movs	r0, #10
 8004cee:	f7fc f943 	bl	8000f78 <HAL_Delay>
    i2cWrite(hi2c, MPU9250_ADDRESS, CONFIG, &temp, 1);
 8004cf2:	4633      	mov	r3, r6
 8004cf4:	9700      	str	r7, [sp, #0]
 8004cf6:	221a      	movs	r2, #26
 8004cf8:	21d0      	movs	r1, #208	; 0xd0
 8004cfa:	4628      	mov	r0, r5
    temp = 0x01;
 8004cfc:	f88d 701b 	strb.w	r7, [sp, #27]
    i2cWrite(hi2c, MPU9250_ADDRESS, CONFIG, &temp, 1);
 8004d00:	f7ff fdae 	bl	8004860 <i2cWrite>
    i2cWrite(hi2c, MPU9250_ADDRESS, SMPLRT_DIV, &temp, 1);
 8004d04:	4633      	mov	r3, r6
 8004d06:	9700      	str	r7, [sp, #0]
 8004d08:	2219      	movs	r2, #25
 8004d0a:	21d0      	movs	r1, #208	; 0xd0
 8004d0c:	4628      	mov	r0, r5
    temp = 0x00;
 8004d0e:	f88d 401b 	strb.w	r4, [sp, #27]
    i2cWrite(hi2c, MPU9250_ADDRESS, SMPLRT_DIV, &temp, 1);
 8004d12:	f7ff fda5 	bl	8004860 <i2cWrite>
    i2cWrite(hi2c, MPU9250_ADDRESS, GYRO_CONFIG, &temp, 1);
 8004d16:	4633      	mov	r3, r6
 8004d18:	9700      	str	r7, [sp, #0]
 8004d1a:	221b      	movs	r2, #27
 8004d1c:	21d0      	movs	r1, #208	; 0xd0
 8004d1e:	4628      	mov	r0, r5
    temp = 0x00;
 8004d20:	f88d 401b 	strb.w	r4, [sp, #27]
    i2cWrite(hi2c, MPU9250_ADDRESS, GYRO_CONFIG, &temp, 1);
 8004d24:	f7ff fd9c 	bl	8004860 <i2cWrite>
    i2cWrite(hi2c, MPU9250_ADDRESS, ACCEL_CONFIG, &temp, 1);
 8004d28:	4633      	mov	r3, r6
 8004d2a:	9700      	str	r7, [sp, #0]
 8004d2c:	221c      	movs	r2, #28
 8004d2e:	21d0      	movs	r1, #208	; 0xd0
 8004d30:	4628      	mov	r0, r5
    temp = 0x00;
 8004d32:	f88d 401b 	strb.w	r4, [sp, #27]
    i2cWrite(hi2c, MPU9250_ADDRESS, ACCEL_CONFIG, &temp, 1);
 8004d36:	f7ff fd93 	bl	8004860 <i2cWrite>
    temp = 0x40;
 8004d3a:	2340      	movs	r3, #64	; 0x40
 8004d3c:	f88d 301b 	strb.w	r3, [sp, #27]
    i2cWrite(hi2c, MPU9250_ADDRESS, USER_CTRL, &temp, 1);
 8004d40:	9700      	str	r7, [sp, #0]
 8004d42:	4633      	mov	r3, r6
 8004d44:	226a      	movs	r2, #106	; 0x6a
 8004d46:	21d0      	movs	r1, #208	; 0xd0
 8004d48:	4628      	mov	r0, r5
 8004d4a:	f7ff fd89 	bl	8004860 <i2cWrite>
    temp = 0x78;
 8004d4e:	2378      	movs	r3, #120	; 0x78
    i2cWrite(hi2c, MPU9250_ADDRESS, FIFO_EN, &temp, 1);
 8004d50:	2223      	movs	r2, #35	; 0x23
 8004d52:	21d0      	movs	r1, #208	; 0xd0
    temp = 0x78;
 8004d54:	f88d 301b 	strb.w	r3, [sp, #27]
    i2cWrite(hi2c, MPU9250_ADDRESS, FIFO_EN, &temp, 1);
 8004d58:	9700      	str	r7, [sp, #0]
 8004d5a:	4633      	mov	r3, r6
 8004d5c:	4628      	mov	r0, r5
 8004d5e:	f7ff fd7f 	bl	8004860 <i2cWrite>
    HAL_Delay(40);
 8004d62:	2028      	movs	r0, #40	; 0x28
 8004d64:	f7fc f908 	bl	8000f78 <HAL_Delay>
    i2cWrite(hi2c, MPU9250_ADDRESS, FIFO_EN, &temp, 1);
 8004d68:	4633      	mov	r3, r6
 8004d6a:	9700      	str	r7, [sp, #0]
 8004d6c:	2223      	movs	r2, #35	; 0x23
 8004d6e:	21d0      	movs	r1, #208	; 0xd0
 8004d70:	4628      	mov	r0, r5
    temp = 0x00;
 8004d72:	f88d 401b 	strb.w	r4, [sp, #27]
    i2cRead(hi2c, MPU9250_ADDRESS, FIFO_COUNTH, &data[0], 2);
 8004d76:	f10d 091c 	add.w	r9, sp, #28
    i2cWrite(hi2c, MPU9250_ADDRESS, FIFO_EN, &temp, 1);
 8004d7a:	f7ff fd71 	bl	8004860 <i2cWrite>
    i2cRead(hi2c, MPU9250_ADDRESS, FIFO_COUNTH, &data[0], 2);
 8004d7e:	2302      	movs	r3, #2
 8004d80:	9300      	str	r3, [sp, #0]
 8004d82:	2272      	movs	r2, #114	; 0x72
 8004d84:	464b      	mov	r3, r9
 8004d86:	21d0      	movs	r1, #208	; 0xd0
 8004d88:	4628      	mov	r0, r5
 8004d8a:	f7ff fd87 	bl	800489c <i2cRead>
    fifo_count = ((uint16_t) data[0] << 8) | data[1];
 8004d8e:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8004d92:	f89d 601d 	ldrb.w	r6, [sp, #29]
    { 0, 0, 0 }, accel_bias[3] =
 8004d96:	9402      	str	r4, [sp, #8]
 8004d98:	4627      	mov	r7, r4
 8004d9a:	46a0      	mov	r8, r4
    int32_t gyro_bias[3] =
 8004d9c:	9405      	str	r4, [sp, #20]
 8004d9e:	9404      	str	r4, [sp, #16]
 8004da0:	9403      	str	r4, [sp, #12]
    packet_count = fifo_count / 12; // How many sets of full gyro and accelerometer data for averaging
 8004da2:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
 8004da6:	fbb6 f6fb 	udiv	r6, r6, fp
    for (ii = 0; ii < packet_count; ii++)
 8004daa:	b2a3      	uxth	r3, r4
 8004dac:	429e      	cmp	r6, r3
 8004dae:	d87d      	bhi.n	8004eac <MPU9250_calib+0x268>
    accel_bias[2] /= (int32_t) packet_count;
 8004db0:	9b02      	ldr	r3, [sp, #8]
 8004db2:	fb93 f1f6 	sdiv	r1, r3, r6
    gyro_bias[0] /= (int32_t) packet_count;
 8004db6:	9b03      	ldr	r3, [sp, #12]
 8004db8:	fb93 f2f6 	sdiv	r2, r3, r6
    mpu->GyroX_offset = (float) gyro_bias[0] / (float) gyrosensitivity; // construct gyro bias in deg/s for later manual subtraction
 8004dbc:	ee07 2a90 	vmov	s15, r2
    accel_bias[0] /= (int32_t) packet_count;
 8004dc0:	fb98 f8f6 	sdiv	r8, r8, r6
    mpu->GyroX_offset = (float) gyro_bias[0] / (float) gyrosensitivity; // construct gyro bias in deg/s for later manual subtraction
 8004dc4:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8004f30 <MPU9250_calib+0x2ec>
    gyro_bias[1] /= (int32_t) packet_count;
 8004dc8:	9b04      	ldr	r3, [sp, #16]
 8004dca:	fb93 f3f6 	sdiv	r3, r3, r6
    mpu->GyroX_offset = (float) gyro_bias[0] / (float) gyrosensitivity; // construct gyro bias in deg/s for later manual subtraction
 8004dce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    gyro_bias[2] /= (int32_t) packet_count;
 8004dd2:	9805      	ldr	r0, [sp, #20]
    accel_bias[1] /= (int32_t) packet_count;
 8004dd4:	fb97 f7f6 	sdiv	r7, r7, r6
    mpu->GyroX_offset = (float) gyro_bias[0] / (float) gyrosensitivity; // construct gyro bias in deg/s for later manual subtraction
 8004dd8:	eec7 6a87 	vdiv.f32	s13, s15, s14
    gyro_bias[2] /= (int32_t) packet_count;
 8004ddc:	fb90 f6f6 	sdiv	r6, r0, r6
    if (accel_bias[2] > 0L)
 8004de0:	2900      	cmp	r1, #0
        accel_bias[2] -= (int32_t) accelsensitivity;
 8004de2:	bfcc      	ite	gt
 8004de4:	f5a1 4480 	subgt.w	r4, r1, #16384	; 0x4000
        accel_bias[2] += (int32_t) accelsensitivity;
 8004de8:	f501 4480 	addle.w	r4, r1, #16384	; 0x4000
    data[0] = (-gyro_bias[0] / 4 >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 8004dec:	2104      	movs	r1, #4
 8004dee:	fb92 f0f1 	sdiv	r0, r2, r1
 8004df2:	4240      	negs	r0, r0
 8004df4:	ea4f 2e20 	mov.w	lr, r0, asr #8
    data[1] = (-gyro_bias[0] / 4) & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
 8004df8:	f88d 001d 	strb.w	r0, [sp, #29]
    data[2] = (-gyro_bias[1] / 4 >> 8) & 0xFF;
 8004dfc:	fb93 f0f1 	sdiv	r0, r3, r1
    data[4] = (-gyro_bias[2] / 4 >> 8) & 0xFF;
 8004e00:	fb96 f1f1 	sdiv	r1, r6, r1
    data[2] = (-gyro_bias[1] / 4 >> 8) & 0xFF;
 8004e04:	4240      	negs	r0, r0
    data[4] = (-gyro_bias[2] / 4 >> 8) & 0xFF;
 8004e06:	4249      	negs	r1, r1
    mpu->GyroY_offset = (float) gyro_bias[1] / (float) gyrosensitivity;
 8004e08:	ee07 3a90 	vmov	s15, r3
 8004e0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    mpu->GyroX_offset = (float) gyro_bias[0] / (float) gyrosensitivity; // construct gyro bias in deg/s for later manual subtraction
 8004e10:	edca 6a11 	vstr	s13, [sl, #68]	; 0x44
    mpu->GyroY_offset = (float) gyro_bias[1] / (float) gyrosensitivity;
 8004e14:	eec7 6a87 	vdiv.f32	s13, s15, s14
    data[0] = (-gyro_bias[0] / 4 >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 8004e18:	f88d e01c 	strb.w	lr, [sp, #28]
    data[3] = (-gyro_bias[1] / 4) & 0xFF;
 8004e1c:	f88d 001f 	strb.w	r0, [sp, #31]
    data[2] = (-gyro_bias[1] / 4 >> 8) & 0xFF;
 8004e20:	ea4f 2e20 	mov.w	lr, r0, asr #8
    data[4] = (-gyro_bias[2] / 4 >> 8) & 0xFF;
 8004e24:	1208      	asrs	r0, r1, #8
 8004e26:	f88d 0020 	strb.w	r0, [sp, #32]
    data[5] = (-gyro_bias[2] / 4) & 0xFF;
 8004e2a:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
    i2cRead(hi2c, MPU9250_ADDRESS, XA_OFFSET_H, &data[0], 2);
 8004e2e:	464b      	mov	r3, r9
 8004e30:	4628      	mov	r0, r5
 8004e32:	2277      	movs	r2, #119	; 0x77
 8004e34:	21d0      	movs	r1, #208	; 0xd0
    data[2] = (-gyro_bias[1] / 4 >> 8) & 0xFF;
 8004e36:	f88d e01e 	strb.w	lr, [sp, #30]
    mpu->GyroZ_offset = (float) gyro_bias[2] / (float) gyrosensitivity;
 8004e3a:	ee07 6a90 	vmov	s15, r6
 8004e3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    mpu->GyroY_offset = (float) gyro_bias[1] / (float) gyrosensitivity;
 8004e42:	edca 6a12 	vstr	s13, [sl, #72]	; 0x48
    mpu->GyroZ_offset = (float) gyro_bias[2] / (float) gyrosensitivity;
 8004e46:	eec7 6a87 	vdiv.f32	s13, s15, s14
    i2cRead(hi2c, MPU9250_ADDRESS, XA_OFFSET_H, &data[0], 2);
 8004e4a:	2602      	movs	r6, #2
 8004e4c:	9600      	str	r6, [sp, #0]
    mpu->GyroZ_offset = (float) gyro_bias[2] / (float) gyrosensitivity;
 8004e4e:	edca 6a13 	vstr	s13, [sl, #76]	; 0x4c
    i2cRead(hi2c, MPU9250_ADDRESS, XA_OFFSET_H, &data[0], 2);
 8004e52:	f7ff fd23 	bl	800489c <i2cRead>
    i2cRead(hi2c, MPU9250_ADDRESS, YA_OFFSET_H, &data[0], 2);
 8004e56:	464b      	mov	r3, r9
 8004e58:	4628      	mov	r0, r5
 8004e5a:	9600      	str	r6, [sp, #0]
 8004e5c:	227a      	movs	r2, #122	; 0x7a
 8004e5e:	21d0      	movs	r1, #208	; 0xd0
 8004e60:	f7ff fd1c 	bl	800489c <i2cRead>
    i2cRead(hi2c, MPU9250_ADDRESS, ZA_OFFSET_H, &data[0], 2);
 8004e64:	9600      	str	r6, [sp, #0]
 8004e66:	464b      	mov	r3, r9
 8004e68:	227d      	movs	r2, #125	; 0x7d
 8004e6a:	21d0      	movs	r1, #208	; 0xd0
 8004e6c:	4628      	mov	r0, r5
 8004e6e:	f7ff fd15 	bl	800489c <i2cRead>
    mpu->AccX_offset = (float) accel_bias[0] / (float) accelsensitivity;
 8004e72:	ee07 8a90 	vmov	s15, r8
 8004e76:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8004f34 <MPU9250_calib+0x2f0>
 8004e7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e82:	edca 7a06 	vstr	s15, [sl, #24]
    mpu->AccY_offset = (float) accel_bias[1] / (float) accelsensitivity;
 8004e86:	ee07 7a90 	vmov	s15, r7
 8004e8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e92:	edca 7a07 	vstr	s15, [sl, #28]
    mpu->AccZ_offset = (float) accel_bias[2] / (float) accelsensitivity;
 8004e96:	ee07 4a90 	vmov	s15, r4
 8004e9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ea2:	edca 7a08 	vstr	s15, [sl, #32]
}
 8004ea6:	b00b      	add	sp, #44	; 0x2c
 8004ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        i2cRead(hi2c, MPU9250_ADDRESS, FIFO_R_W, &data[0], 12);
 8004eac:	464b      	mov	r3, r9
 8004eae:	2274      	movs	r2, #116	; 0x74
 8004eb0:	f8cd b000 	str.w	fp, [sp]
 8004eb4:	21d0      	movs	r1, #208	; 0xd0
 8004eb6:	4628      	mov	r0, r5
 8004eb8:	f7ff fcf0 	bl	800489c <i2cRead>
        accel_temp[0] = (int16_t) (((int16_t) data[0] << 8) | data[1]);
 8004ebc:	f89d 201c 	ldrb.w	r2, [sp, #28]
 8004ec0:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8004ec4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        accel_bias[0] += (int32_t) accel_temp[0];
 8004ec8:	fa08 f883 	sxtah	r8, r8, r3
        accel_temp[1] = (int16_t) (((int16_t) data[2] << 8) | data[3]);
 8004ecc:	f89d 201e 	ldrb.w	r2, [sp, #30]
 8004ed0:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8004ed4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        accel_bias[1] += (int32_t) accel_temp[1];
 8004ed8:	fa07 f783 	sxtah	r7, r7, r3
        accel_temp[2] = (int16_t) (((int16_t) data[4] << 8) | data[5]);
 8004edc:	f89d 2020 	ldrb.w	r2, [sp, #32]
 8004ee0:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 8004ee4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        accel_bias[2] += (int32_t) accel_temp[2];
 8004ee8:	9a02      	ldr	r2, [sp, #8]
 8004eea:	fa02 f383 	sxtah	r3, r2, r3
 8004eee:	9302      	str	r3, [sp, #8]
        gyro_temp[0] = (int16_t) (((int16_t) data[6] << 8) | data[7]);
 8004ef0:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
 8004ef4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004ef8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        gyro_bias[0] += (int32_t) gyro_temp[0];
 8004efc:	9a03      	ldr	r2, [sp, #12]
 8004efe:	fa02 f383 	sxtah	r3, r2, r3
 8004f02:	9303      	str	r3, [sp, #12]
        gyro_temp[1] = (int16_t) (((int16_t) data[8] << 8) | data[9]);
 8004f04:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
 8004f08:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8004f0c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        gyro_bias[1] += (int32_t) gyro_temp[1];
 8004f10:	9a04      	ldr	r2, [sp, #16]
 8004f12:	fa02 f383 	sxtah	r3, r2, r3
 8004f16:	9304      	str	r3, [sp, #16]
        gyro_temp[2] = (int16_t) (((int16_t) data[10] << 8) | data[11]);
 8004f18:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 8004f1c:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8004f20:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        gyro_bias[2] += (int32_t) gyro_temp[2];
 8004f24:	9a05      	ldr	r2, [sp, #20]
 8004f26:	fa02 f383 	sxtah	r3, r2, r3
 8004f2a:	9305      	str	r3, [sp, #20]
 8004f2c:	3401      	adds	r4, #1
 8004f2e:	e73c      	b.n	8004daa <MPU9250_calib+0x166>
 8004f30:	43030000 	.word	0x43030000
 8004f34:	38800000 	.word	0x38800000

08004f38 <MPU9250_Init8963>:
{
 8004f38:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    temp = 0x00;
 8004f3c:	ac04      	add	r4, sp, #16
 8004f3e:	f04f 0800 	mov.w	r8, #0
 8004f42:	f804 8d05 	strb.w	r8, [r4, #-5]!
    i2cWrite(hi2c, AK8963_ADDRESS, AK8963_CNTL, &temp, 1);
 8004f46:	2701      	movs	r7, #1
{
 8004f48:	460e      	mov	r6, r1
    i2cWrite(hi2c, AK8963_ADDRESS, AK8963_CNTL, &temp, 1);
 8004f4a:	4623      	mov	r3, r4
 8004f4c:	220a      	movs	r2, #10
 8004f4e:	2118      	movs	r1, #24
 8004f50:	9700      	str	r7, [sp, #0]
{
 8004f52:	4605      	mov	r5, r0
    i2cWrite(hi2c, AK8963_ADDRESS, AK8963_CNTL, &temp, 1);
 8004f54:	f7ff fc84 	bl	8004860 <i2cWrite>
    HAL_Delay(10);
 8004f58:	200a      	movs	r0, #10
 8004f5a:	f7fc f80d 	bl	8000f78 <HAL_Delay>
    temp = 0x0F;
 8004f5e:	230f      	movs	r3, #15
 8004f60:	f88d 300b 	strb.w	r3, [sp, #11]
    i2cWrite(hi2c, AK8963_ADDRESS, AK8963_CNTL, &temp, 1);
 8004f64:	220a      	movs	r2, #10
 8004f66:	4623      	mov	r3, r4
 8004f68:	2118      	movs	r1, #24
 8004f6a:	4628      	mov	r0, r5
 8004f6c:	9700      	str	r7, [sp, #0]
 8004f6e:	f7ff fc77 	bl	8004860 <i2cWrite>
    HAL_Delay(10);
 8004f72:	200a      	movs	r0, #10
 8004f74:	f7fc f800 	bl	8000f78 <HAL_Delay>
    i2cRead(hi2c, AK8963_ADDRESS, AK8963_ASAX, &rawData[0], 3);
 8004f78:	2303      	movs	r3, #3
 8004f7a:	9300      	str	r3, [sp, #0]
 8004f7c:	4628      	mov	r0, r5
 8004f7e:	ab03      	add	r3, sp, #12
 8004f80:	2210      	movs	r2, #16
 8004f82:	2118      	movs	r1, #24
 8004f84:	f7ff fc8a 	bl	800489c <i2cRead>
    mpu->MagCalibX = (float) (rawData[0] - 128) / 256.0f + 1.0f; // Return x-axis sensitivity adjustment values, etc.
 8004f88:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8004f8c:	eddf 6a24 	vldr	s13, [pc, #144]	; 8005020 <MPU9250_Init8963+0xe8>
    i2cWrite(hi2c, AK8963_ADDRESS, AK8963_CNTL, &temp, 1);
 8004f90:	9700      	str	r7, [sp, #0]
    mpu->MagCalibX = (float) (rawData[0] - 128) / 256.0f + 1.0f; // Return x-axis sensitivity adjustment values, etc.
 8004f92:	3b80      	subs	r3, #128	; 0x80
 8004f94:	ee07 3a90 	vmov	s15, r3
    mpu->MagCalibY = (float) (rawData[1] - 128) / 256.0f + 1.0f;
 8004f98:	f89d 300d 	ldrb.w	r3, [sp, #13]
    temp = 0x00;
 8004f9c:	f88d 800b 	strb.w	r8, [sp, #11]
    mpu->MagCalibX = (float) (rawData[0] - 128) / 256.0f + 1.0f; // Return x-axis sensitivity adjustment values, etc.
 8004fa0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004fa4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8004fa8:	eeb0 6a67 	vmov.f32	s12, s15
 8004fac:	eea7 6a26 	vfma.f32	s12, s14, s13
    mpu->MagCalibY = (float) (rawData[1] - 128) / 256.0f + 1.0f;
 8004fb0:	3b80      	subs	r3, #128	; 0x80
    i2cWrite(hi2c, AK8963_ADDRESS, AK8963_CNTL, &temp, 1);
 8004fb2:	220a      	movs	r2, #10
    mpu->MagCalibY = (float) (rawData[1] - 128) / 256.0f + 1.0f;
 8004fb4:	ee07 3a10 	vmov	s14, r3
    mpu->MagCalibZ = (float) (rawData[2] - 128) / 256.0f + 1.0f;
 8004fb8:	f89d 300e 	ldrb.w	r3, [sp, #14]
    mpu->MagCalibX = (float) (rawData[0] - 128) / 256.0f + 1.0f; // Return x-axis sensitivity adjustment values, etc.
 8004fbc:	ed86 6a16 	vstr	s12, [r6, #88]	; 0x58
    mpu->MagCalibY = (float) (rawData[1] - 128) / 256.0f + 1.0f;
 8004fc0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004fc4:	eeb0 6a67 	vmov.f32	s12, s15
    mpu->MagCalibZ = (float) (rawData[2] - 128) / 256.0f + 1.0f;
 8004fc8:	3b80      	subs	r3, #128	; 0x80
    mpu->MagCalibY = (float) (rawData[1] - 128) / 256.0f + 1.0f;
 8004fca:	eea7 6a26 	vfma.f32	s12, s14, s13
    i2cWrite(hi2c, AK8963_ADDRESS, AK8963_CNTL, &temp, 1);
 8004fce:	2118      	movs	r1, #24
 8004fd0:	4628      	mov	r0, r5
    mpu->MagCalibZ = (float) (rawData[2] - 128) / 256.0f + 1.0f;
 8004fd2:	ee07 3a10 	vmov	s14, r3
 8004fd6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    mpu->MagCalibY = (float) (rawData[1] - 128) / 256.0f + 1.0f;
 8004fda:	ed86 6a17 	vstr	s12, [r6, #92]	; 0x5c
    mpu->MagCalibZ = (float) (rawData[2] - 128) / 256.0f + 1.0f;
 8004fde:	eee7 7a26 	vfma.f32	s15, s14, s13
    i2cWrite(hi2c, AK8963_ADDRESS, AK8963_CNTL, &temp, 1);
 8004fe2:	4623      	mov	r3, r4
    mpu->MagCalibZ = (float) (rawData[2] - 128) / 256.0f + 1.0f;
 8004fe4:	edc6 7a18 	vstr	s15, [r6, #96]	; 0x60
    i2cWrite(hi2c, AK8963_ADDRESS, AK8963_CNTL, &temp, 1);
 8004fe8:	f7ff fc3a 	bl	8004860 <i2cWrite>
    HAL_Delay(10);
 8004fec:	200a      	movs	r0, #10
 8004fee:	f7fb ffc3 	bl	8000f78 <HAL_Delay>
    temp = (mpu->mscale << 4) | 0x06;
 8004ff2:	78b3      	ldrb	r3, [r6, #2]
    i2cWrite(hi2c, AK8963_ADDRESS, AK8963_CNTL, &temp, 1);
 8004ff4:	9700      	str	r7, [sp, #0]
    temp = (mpu->mscale << 4) | 0x06;
 8004ff6:	011b      	lsls	r3, r3, #4
 8004ff8:	f043 0306 	orr.w	r3, r3, #6
    i2cWrite(hi2c, AK8963_ADDRESS, AK8963_CNTL, &temp, 1);
 8004ffc:	220a      	movs	r2, #10
    temp = (mpu->mscale << 4) | 0x06;
 8004ffe:	f88d 300b 	strb.w	r3, [sp, #11]
    i2cWrite(hi2c, AK8963_ADDRESS, AK8963_CNTL, &temp, 1);
 8005002:	2118      	movs	r1, #24
 8005004:	4623      	mov	r3, r4
 8005006:	4628      	mov	r0, r5
 8005008:	f7ff fc2a 	bl	8004860 <i2cWrite>
    HAL_Delay(10);
 800500c:	200a      	movs	r0, #10
 800500e:	f7fb ffb3 	bl	8000f78 <HAL_Delay>
    Magnet_Calib(hi2c,mpu);
 8005012:	4631      	mov	r1, r6
 8005014:	4628      	mov	r0, r5
 8005016:	f7ff fd71 	bl	8004afc <Magnet_Calib>
}
 800501a:	b004      	add	sp, #16
 800501c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005020:	3b800000 	.word	0x3b800000

08005024 <MPU9250_SetParam>:
{
 8005024:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005026:	b085      	sub	sp, #20
    temp = 0x00;
 8005028:	ae04      	add	r6, sp, #16
 800502a:	2300      	movs	r3, #0
 800502c:	f806 3d01 	strb.w	r3, [r6, #-1]!
    i2cWrite(hi2c, MPU9250_ADDRESS, PWR_MGMT_1, &temp, 1);
 8005030:	2501      	movs	r5, #1
{
 8005032:	460c      	mov	r4, r1
    i2cWrite(hi2c, MPU9250_ADDRESS, PWR_MGMT_1, &temp, 1);
 8005034:	4633      	mov	r3, r6
 8005036:	226b      	movs	r2, #107	; 0x6b
 8005038:	21d0      	movs	r1, #208	; 0xd0
 800503a:	9500      	str	r5, [sp, #0]
{
 800503c:	4607      	mov	r7, r0
    i2cWrite(hi2c, MPU9250_ADDRESS, PWR_MGMT_1, &temp, 1);
 800503e:	f7ff fc0f 	bl	8004860 <i2cWrite>
    HAL_Delay(100);
 8005042:	2064      	movs	r0, #100	; 0x64
 8005044:	f7fb ff98 	bl	8000f78 <HAL_Delay>
    i2cWrite(hi2c, MPU9250_ADDRESS, PWR_MGMT_1, &temp, 1);
 8005048:	4633      	mov	r3, r6
 800504a:	226b      	movs	r2, #107	; 0x6b
 800504c:	21d0      	movs	r1, #208	; 0xd0
 800504e:	4638      	mov	r0, r7
 8005050:	9500      	str	r5, [sp, #0]
    temp = 0x01; // Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
 8005052:	f88d 500f 	strb.w	r5, [sp, #15]
    i2cWrite(hi2c, MPU9250_ADDRESS, PWR_MGMT_1, &temp, 1);
 8005056:	f7ff fc03 	bl	8004860 <i2cWrite>
    temp = 0x03;
 800505a:	2303      	movs	r3, #3
 800505c:	f88d 300f 	strb.w	r3, [sp, #15]
    i2cWrite(hi2c, MPU9250_ADDRESS, CONFIG, &temp, 1);
 8005060:	221a      	movs	r2, #26
 8005062:	4633      	mov	r3, r6
 8005064:	21d0      	movs	r1, #208	; 0xd0
 8005066:	4638      	mov	r0, r7
 8005068:	9500      	str	r5, [sp, #0]
 800506a:	f7ff fbf9 	bl	8004860 <i2cWrite>
    i2cWrite(hi2c, MPU9250_ADDRESS, SMPLRT_DIV, &temp, 1);
 800506e:	4633      	mov	r3, r6
 8005070:	2219      	movs	r2, #25
 8005072:	21d0      	movs	r1, #208	; 0xd0
 8005074:	4638      	mov	r0, r7
 8005076:	9500      	str	r5, [sp, #0]
    temp = 0x01;    // Use a 500 Hz rate; the same rate set in CONFIG above
 8005078:	f88d 500f 	strb.w	r5, [sp, #15]
    i2cWrite(hi2c, MPU9250_ADDRESS, SMPLRT_DIV, &temp, 1);
 800507c:	f7ff fbf0 	bl	8004860 <i2cWrite>
    i2cRead(hi2c, MPU9250_ADDRESS, GYRO_CONFIG, &temp, 1);
 8005080:	4633      	mov	r3, r6
 8005082:	221b      	movs	r2, #27
 8005084:	21d0      	movs	r1, #208	; 0xd0
 8005086:	4638      	mov	r0, r7
 8005088:	9500      	str	r5, [sp, #0]
 800508a:	f7ff fc07 	bl	800489c <i2cRead>
    temp = temp & 0xE7;
 800508e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    temp = temp | ((uint8_t) mpu->gscale << 3);
 8005092:	7862      	ldrb	r2, [r4, #1]
    i2cWrite(hi2c, MPU9250_ADDRESS, GYRO_CONFIG, &temp, 1);
 8005094:	9500      	str	r5, [sp, #0]
    temp = temp & 0xE7;
 8005096:	f023 031a 	bic.w	r3, r3, #26
    temp = temp | ((uint8_t) mpu->gscale << 3);
 800509a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800509e:	f88d 300f 	strb.w	r3, [sp, #15]
    i2cWrite(hi2c, MPU9250_ADDRESS, GYRO_CONFIG, &temp, 1);
 80050a2:	221b      	movs	r2, #27
 80050a4:	4633      	mov	r3, r6
 80050a6:	21d0      	movs	r1, #208	; 0xd0
 80050a8:	4638      	mov	r0, r7
 80050aa:	f7ff fbd9 	bl	8004860 <i2cWrite>
    i2cRead(hi2c, MPU9250_ADDRESS, ACCEL_CONFIG, &temp, 1);
 80050ae:	4633      	mov	r3, r6
 80050b0:	221c      	movs	r2, #28
 80050b2:	21d0      	movs	r1, #208	; 0xd0
 80050b4:	4638      	mov	r0, r7
 80050b6:	9500      	str	r5, [sp, #0]
 80050b8:	f7ff fbf0 	bl	800489c <i2cRead>
    temp = temp & 0xE7;
 80050bc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    temp = temp | ((uint8_t) mpu->ascale << 3);
 80050c0:	7822      	ldrb	r2, [r4, #0]
    i2cWrite(hi2c, MPU9250_ADDRESS, ACCEL_CONFIG, &temp, 1);
 80050c2:	9500      	str	r5, [sp, #0]
    temp = temp & 0xE7;
 80050c4:	f023 0318 	bic.w	r3, r3, #24
    temp = temp | ((uint8_t) mpu->ascale << 3);
 80050c8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80050cc:	f88d 300f 	strb.w	r3, [sp, #15]
    i2cWrite(hi2c, MPU9250_ADDRESS, ACCEL_CONFIG, &temp, 1);
 80050d0:	221c      	movs	r2, #28
 80050d2:	4633      	mov	r3, r6
 80050d4:	21d0      	movs	r1, #208	; 0xd0
 80050d6:	4638      	mov	r0, r7
 80050d8:	f7ff fbc2 	bl	8004860 <i2cWrite>
    i2cRead(hi2c, MPU9250_ADDRESS, ACCEL_CONFIG2, &temp, 1);
 80050dc:	4633      	mov	r3, r6
 80050de:	221d      	movs	r2, #29
 80050e0:	21d0      	movs	r1, #208	; 0xd0
 80050e2:	4638      	mov	r0, r7
 80050e4:	9500      	str	r5, [sp, #0]
 80050e6:	f7ff fbd9 	bl	800489c <i2cRead>
    temp = temp & 0xF0;
 80050ea:	f89d 300f 	ldrb.w	r3, [sp, #15]
    i2cWrite(hi2c, MPU9250_ADDRESS, ACCEL_CONFIG2, &temp, 1);
 80050ee:	9500      	str	r5, [sp, #0]
    temp = temp & 0xF0;
 80050f0:	f023 030f 	bic.w	r3, r3, #15
    temp = temp | 0x03;
 80050f4:	f043 0303 	orr.w	r3, r3, #3
 80050f8:	f88d 300f 	strb.w	r3, [sp, #15]
    i2cWrite(hi2c, MPU9250_ADDRESS, ACCEL_CONFIG2, &temp, 1);
 80050fc:	221d      	movs	r2, #29
 80050fe:	4633      	mov	r3, r6
 8005100:	21d0      	movs	r1, #208	; 0xd0
 8005102:	4638      	mov	r0, r7
 8005104:	f7ff fbac 	bl	8004860 <i2cWrite>
    temp = 0x22;
 8005108:	2322      	movs	r3, #34	; 0x22
 800510a:	f88d 300f 	strb.w	r3, [sp, #15]
    i2cWrite(hi2c, MPU9250_ADDRESS, INT_PIN_CFG, &temp, 1);
 800510e:	2237      	movs	r2, #55	; 0x37
 8005110:	4633      	mov	r3, r6
 8005112:	21d0      	movs	r1, #208	; 0xd0
 8005114:	4638      	mov	r0, r7
 8005116:	9500      	str	r5, [sp, #0]
 8005118:	f7ff fba2 	bl	8004860 <i2cWrite>
    i2cWrite(hi2c, MPU9250_ADDRESS, INT_ENABLE, &temp, 1);
 800511c:	4633      	mov	r3, r6
 800511e:	9500      	str	r5, [sp, #0]
 8005120:	2238      	movs	r2, #56	; 0x38
 8005122:	21d0      	movs	r1, #208	; 0xd0
 8005124:	4638      	mov	r0, r7
    temp = 0x01;
 8005126:	f88d 500f 	strb.w	r5, [sp, #15]
    i2cWrite(hi2c, MPU9250_ADDRESS, INT_ENABLE, &temp, 1);
 800512a:	f7ff fb99 	bl	8004860 <i2cWrite>
    switch (mpu->ascale)
 800512e:	7823      	ldrb	r3, [r4, #0]
 8005130:	2b03      	cmp	r3, #3
 8005132:	d806      	bhi.n	8005142 <MPU9250_SetParam+0x11e>
 8005134:	e8df f003 	tbb	[pc, r3]
 8005138:	120f0c02 	.word	0x120f0c02
        mpu->Acc_factor = 2.0 / 32768.0;
 800513c:	f04f 5362 	mov.w	r3, #947912704	; 0x38800000
        mpu->Acc_factor = 16.0 / 32768.0;
 8005140:	60a3      	str	r3, [r4, #8]
    switch (mpu->gscale)
 8005142:	7863      	ldrb	r3, [r4, #1]
 8005144:	2b03      	cmp	r3, #3
 8005146:	d80e      	bhi.n	8005166 <MPU9250_SetParam+0x142>
 8005148:	e8df f003 	tbb	[pc, r3]
 800514c:	1715130b 	.word	0x1715130b
        mpu->Acc_factor = 4.0 / 32768.0;
 8005150:	f04f 5364 	mov.w	r3, #956301312	; 0x39000000
 8005154:	e7f4      	b.n	8005140 <MPU9250_SetParam+0x11c>
        mpu->Acc_factor = 8.0 / 32768.0;
 8005156:	f04f 5366 	mov.w	r3, #964689920	; 0x39800000
 800515a:	e7f1      	b.n	8005140 <MPU9250_SetParam+0x11c>
        mpu->Acc_factor = 16.0 / 32768.0;
 800515c:	f04f 5368 	mov.w	r3, #973078528	; 0x3a000000
 8005160:	e7ee      	b.n	8005140 <MPU9250_SetParam+0x11c>
        mpu->Gyro_factor = 250.0 / 32768.0;
 8005162:	4b09      	ldr	r3, [pc, #36]	; (8005188 <MPU9250_SetParam+0x164>)
        mpu->Gyro_factor = 2000.0 / 32768.0;
 8005164:	6063      	str	r3, [r4, #4]
    switch (mpu->mscale)
 8005166:	78a3      	ldrb	r3, [r4, #2]
 8005168:	b14b      	cbz	r3, 800517e <MPU9250_SetParam+0x15a>
 800516a:	2b01      	cmp	r3, #1
 800516c:	d00a      	beq.n	8005184 <MPU9250_SetParam+0x160>
}
 800516e:	b005      	add	sp, #20
 8005170:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mpu->Gyro_factor = 500.0 / 32768.0;
 8005172:	4b06      	ldr	r3, [pc, #24]	; (800518c <MPU9250_SetParam+0x168>)
 8005174:	e7f6      	b.n	8005164 <MPU9250_SetParam+0x140>
        mpu->Gyro_factor = 1000.0 / 32768.0;
 8005176:	4b06      	ldr	r3, [pc, #24]	; (8005190 <MPU9250_SetParam+0x16c>)
 8005178:	e7f4      	b.n	8005164 <MPU9250_SetParam+0x140>
        mpu->Gyro_factor = 2000.0 / 32768.0;
 800517a:	4b06      	ldr	r3, [pc, #24]	; (8005194 <MPU9250_SetParam+0x170>)
 800517c:	e7f2      	b.n	8005164 <MPU9250_SetParam+0x140>
        mpu->Mag_factor = 10.0 * 4912.0 / 8190.0; // Proper scale to return milliGauss
 800517e:	4b06      	ldr	r3, [pc, #24]	; (8005198 <MPU9250_SetParam+0x174>)
        mpu->Mag_factor = 10.0 * 4912.0 / 32760.0; // Proper scale to return milliGauss
 8005180:	60e3      	str	r3, [r4, #12]
}
 8005182:	e7f4      	b.n	800516e <MPU9250_SetParam+0x14a>
        mpu->Mag_factor = 10.0 * 4912.0 / 32760.0; // Proper scale to return milliGauss
 8005184:	4b05      	ldr	r3, [pc, #20]	; (800519c <MPU9250_SetParam+0x178>)
 8005186:	e7fb      	b.n	8005180 <MPU9250_SetParam+0x15c>
 8005188:	3bfa0000 	.word	0x3bfa0000
 800518c:	3c7a0000 	.word	0x3c7a0000
 8005190:	3cfa0000 	.word	0x3cfa0000
 8005194:	3d7a0000 	.word	0x3d7a0000
 8005198:	40bfebff 	.word	0x40bfebff
 800519c:	3fbfebff 	.word	0x3fbfebff

080051a0 <MPU9250_Init>:
{
 80051a0:	b530      	push	{r4, r5, lr}
 80051a2:	460c      	mov	r4, r1
 80051a4:	b085      	sub	sp, #20
    mpu->gscale = Gscale0;
 80051a6:	7063      	strb	r3, [r4, #1]
    mpu->mscale = Mscale0;
 80051a8:	f89d 3020 	ldrb.w	r3, [sp, #32]
 80051ac:	70a3      	strb	r3, [r4, #2]
    mpu->q[0] = 1.0f;
 80051ae:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80051b2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    mpu->q[1] = 0.0f;
 80051b6:	2300      	movs	r3, #0
	mpu->calib_done = 0;
 80051b8:	2100      	movs	r1, #0
    mpu->q[1] = 0.0f;
 80051ba:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    mpu->q[2] = 0.0f;
 80051be:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    mpu->q[3] = 0.0f;
 80051c2:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    i2cRead(hi2c, MPU9250_ADDRESS, WHO_AM_I_MPU9250, &whoami, 1);
 80051c6:	2301      	movs	r3, #1
	mpu->calib_done = 0;
 80051c8:	f8c4 10a8 	str.w	r1, [r4, #168]	; 0xa8
    mpu->ascale = Ascale0;
 80051cc:	7022      	strb	r2, [r4, #0]
    i2cRead(hi2c, MPU9250_ADDRESS, WHO_AM_I_MPU9250, &whoami, 1);
 80051ce:	9300      	str	r3, [sp, #0]
 80051d0:	2275      	movs	r2, #117	; 0x75
 80051d2:	f10d 030f 	add.w	r3, sp, #15
 80051d6:	21d0      	movs	r1, #208	; 0xd0
{
 80051d8:	4605      	mov	r5, r0
    i2cRead(hi2c, MPU9250_ADDRESS, WHO_AM_I_MPU9250, &whoami, 1);
 80051da:	f7ff fb5f 	bl	800489c <i2cRead>
    if (whoami == 0x71)
 80051de:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80051e2:	2b71      	cmp	r3, #113	; 0x71
 80051e4:	d112      	bne.n	800520c <MPU9250_Init+0x6c>
        MPU9250_Reset(hi2c, mpu);
 80051e6:	4621      	mov	r1, r4
 80051e8:	4628      	mov	r0, r5
 80051ea:	f7ff fb46 	bl	800487a <MPU9250_Reset>
        MPU9250_calib(hi2c, mpu);
 80051ee:	4621      	mov	r1, r4
 80051f0:	4628      	mov	r0, r5
 80051f2:	f7ff fd27 	bl	8004c44 <MPU9250_calib>
        HAL_Delay(20);
 80051f6:	2014      	movs	r0, #20
 80051f8:	f7fb febe 	bl	8000f78 <HAL_Delay>
        MPU9250_SetParam(hi2c, mpu);
 80051fc:	4621      	mov	r1, r4
 80051fe:	4628      	mov	r0, r5
 8005200:	f7ff ff10 	bl	8005024 <MPU9250_SetParam>
        MPU9250_Init8963(hi2c, mpu);
 8005204:	4621      	mov	r1, r4
 8005206:	4628      	mov	r0, r5
 8005208:	f7ff fe96 	bl	8004f38 <MPU9250_Init8963>
}
 800520c:	b005      	add	sp, #20
 800520e:	bd30      	pop	{r4, r5, pc}

08005210 <MX_ADC2_Init>:
  }

}
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8005210:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc2.Instance = ADC2;
 8005212:	4814      	ldr	r0, [pc, #80]	; (8005264 <MX_ADC2_Init+0x54>)
 8005214:	4b14      	ldr	r3, [pc, #80]	; (8005268 <MX_ADC2_Init+0x58>)
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
  hadc2.Init.ScanConvMode = DISABLE;
  hadc2.Init.ContinuousConvMode = DISABLE;
  hadc2.Init.DiscontinuousConvMode = DISABLE;
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005216:	4a15      	ldr	r2, [pc, #84]	; (800526c <MX_ADC2_Init+0x5c>)
  hadc2.Instance = ADC2;
 8005218:	6003      	str	r3, [r0, #0]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800521a:	6282      	str	r2, [r0, #40]	; 0x28
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800521c:	2300      	movs	r3, #0
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc2.Init.NbrOfConversion = 1;
 800521e:	2201      	movs	r2, #1
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8005220:	6043      	str	r3, [r0, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8005222:	6083      	str	r3, [r0, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8005224:	6103      	str	r3, [r0, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8005226:	6183      	str	r3, [r0, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8005228:	6203      	str	r3, [r0, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800522a:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800522c:	60c3      	str	r3, [r0, #12]
  hadc2.Init.NbrOfConversion = 1;
 800522e:	61c2      	str	r2, [r0, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8005230:	6303      	str	r3, [r0, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005232:	6142      	str	r2, [r0, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8005234:	f7fb feb4 	bl	8000fa0 <HAL_ADC_Init>
 8005238:	b118      	cbz	r0, 8005242 <MX_ADC2_Init+0x32>
  {
    _Error_Handler(__FILE__, __LINE__);
 800523a:	216c      	movs	r1, #108	; 0x6c
 800523c:	480c      	ldr	r0, [pc, #48]	; (8005270 <MX_ADC2_Init+0x60>)
 800523e:	f000 fbb3 	bl	80059a8 <_Error_Handler>

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_2;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8005242:	2102      	movs	r1, #2
 8005244:	2201      	movs	r2, #1
 8005246:	2300      	movs	r3, #0
 8005248:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800524c:	4805      	ldr	r0, [pc, #20]	; (8005264 <MX_ADC2_Init+0x54>)
 800524e:	4669      	mov	r1, sp
 8005250:	f7fb ffe2 	bl	8001218 <HAL_ADC_ConfigChannel>
 8005254:	b118      	cbz	r0, 800525e <MX_ADC2_Init+0x4e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005256:	2176      	movs	r1, #118	; 0x76
 8005258:	4805      	ldr	r0, [pc, #20]	; (8005270 <MX_ADC2_Init+0x60>)
 800525a:	f000 fba5 	bl	80059a8 <_Error_Handler>
  }

}
 800525e:	b005      	add	sp, #20
 8005260:	f85d fb04 	ldr.w	pc, [sp], #4
 8005264:	200000d8 	.word	0x200000d8
 8005268:	40012100 	.word	0x40012100
 800526c:	0f000001 	.word	0x0f000001
 8005270:	08006da0 	.word	0x08006da0

08005274 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8005274:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(adcHandle->Instance==ADC1)
 8005276:	6803      	ldr	r3, [r0, #0]
 8005278:	4a19      	ldr	r2, [pc, #100]	; (80052e0 <HAL_ADC_MspInit+0x6c>)
 800527a:	4293      	cmp	r3, r2
{
 800527c:	b088      	sub	sp, #32
  if(adcHandle->Instance==ADC1)
 800527e:	d11e      	bne.n	80052be <HAL_ADC_MspInit+0x4a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005280:	4b18      	ldr	r3, [pc, #96]	; (80052e4 <HAL_ADC_MspInit+0x70>)
 8005282:	2400      	movs	r4, #0
 8005284:	9401      	str	r4, [sp, #4]
 8005286:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005288:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800528c:	645a      	str	r2, [r3, #68]	; 0x44
 800528e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005294:	9301      	str	r3, [sp, #4]
 8005296:	9b01      	ldr	r3, [sp, #4]
  
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0
    PA4     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 8005298:	2311      	movs	r3, #17
    __HAL_RCC_ADC2_CLK_ENABLE();
  
    /**ADC2 GPIO Configuration    
    PA2     ------> ADC2_IN2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800529a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800529c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800529e:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052a0:	4811      	ldr	r0, [pc, #68]	; (80052e8 <HAL_ADC_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80052a2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052a4:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052a6:	f7fc fa29 	bl	80016fc <HAL_GPIO_Init>

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80052aa:	2012      	movs	r0, #18
 80052ac:	4622      	mov	r2, r4
 80052ae:	4621      	mov	r1, r4
 80052b0:	f7fc f85c 	bl	800136c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80052b4:	2012      	movs	r0, #18
 80052b6:	f7fc f88d 	bl	80013d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80052ba:	b008      	add	sp, #32
 80052bc:	bd10      	pop	{r4, pc}
  else if(adcHandle->Instance==ADC2)
 80052be:	4a0b      	ldr	r2, [pc, #44]	; (80052ec <HAL_ADC_MspInit+0x78>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d1fa      	bne.n	80052ba <HAL_ADC_MspInit+0x46>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80052c4:	4b07      	ldr	r3, [pc, #28]	; (80052e4 <HAL_ADC_MspInit+0x70>)
 80052c6:	2400      	movs	r4, #0
 80052c8:	9402      	str	r4, [sp, #8]
 80052ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052d0:	645a      	str	r2, [r3, #68]	; 0x44
 80052d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052d8:	9302      	str	r3, [sp, #8]
 80052da:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80052dc:	2304      	movs	r3, #4
 80052de:	e7dc      	b.n	800529a <HAL_ADC_MspInit+0x26>
 80052e0:	40012000 	.word	0x40012000
 80052e4:	40023800 	.word	0x40023800
 80052e8:	40020000 	.word	0x40020000
 80052ec:	40012100 	.word	0x40012100

080052f0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80052f0:	b513      	push	{r0, r1, r4, lr}
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80052f2:	4b17      	ldr	r3, [pc, #92]	; (8005350 <MX_DMA_Init+0x60>)
 80052f4:	2400      	movs	r4, #0
 80052f6:	9401      	str	r4, [sp, #4]
 80052f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052fa:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80052fe:	631a      	str	r2, [r3, #48]	; 0x30
 8005300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005302:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8005306:	4622      	mov	r2, r4
 8005308:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 800530a:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800530c:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 800530e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8005310:	f7fc f82c 	bl	800136c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8005314:	200b      	movs	r0, #11
 8005316:	f7fc f85d 	bl	80013d4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800531a:	4622      	mov	r2, r4
 800531c:	4621      	mov	r1, r4
 800531e:	200d      	movs	r0, #13
 8005320:	f7fc f824 	bl	800136c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8005324:	200d      	movs	r0, #13
 8005326:	f7fc f855 	bl	80013d4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800532a:	4622      	mov	r2, r4
 800532c:	4621      	mov	r1, r4
 800532e:	2011      	movs	r0, #17
 8005330:	f7fc f81c 	bl	800136c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8005334:	2011      	movs	r0, #17
 8005336:	f7fc f84d 	bl	80013d4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 800533a:	4622      	mov	r2, r4
 800533c:	4621      	mov	r1, r4
 800533e:	202f      	movs	r0, #47	; 0x2f
 8005340:	f7fc f814 	bl	800136c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8005344:	202f      	movs	r0, #47	; 0x2f
 8005346:	f7fc f845 	bl	80013d4 <HAL_NVIC_EnableIRQ>

}
 800534a:	b002      	add	sp, #8
 800534c:	bd10      	pop	{r4, pc}
 800534e:	bf00      	nop
 8005350:	40023800 	.word	0x40023800

08005354 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005354:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005358:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800535a:	2400      	movs	r4, #0
 800535c:	4b45      	ldr	r3, [pc, #276]	; (8005474 <MX_GPIO_Init+0x120>)
 800535e:	9401      	str	r4, [sp, #4]
 8005360:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_1, GPIO_PIN_RESET);
 8005362:	4e45      	ldr	r6, [pc, #276]	; (8005478 <MX_GPIO_Init+0x124>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8005364:	f8df 9118 	ldr.w	r9, [pc, #280]	; 8005480 <MX_GPIO_Init+0x12c>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN1C_Pin|EN2C_Pin, GPIO_PIN_RESET);
 8005368:	f8df 8118 	ldr.w	r8, [pc, #280]	; 8005484 <MX_GPIO_Init+0x130>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, EN1A_Pin|EN1B_Pin|EN2A_Pin|EN2B_Pin 
 800536c:	4f43      	ldr	r7, [pc, #268]	; (800547c <MX_GPIO_Init+0x128>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800536e:	f042 0210 	orr.w	r2, r2, #16
 8005372:	631a      	str	r2, [r3, #48]	; 0x30
 8005374:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005376:	f002 0210 	and.w	r2, r2, #16
 800537a:	9201      	str	r2, [sp, #4]
 800537c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800537e:	9402      	str	r4, [sp, #8]
 8005380:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005382:	f042 0204 	orr.w	r2, r2, #4
 8005386:	631a      	str	r2, [r3, #48]	; 0x30
 8005388:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800538a:	f002 0204 	and.w	r2, r2, #4
 800538e:	9202      	str	r2, [sp, #8]
 8005390:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005392:	9403      	str	r4, [sp, #12]
 8005394:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005396:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800539a:	631a      	str	r2, [r3, #48]	; 0x30
 800539c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800539e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80053a2:	9203      	str	r2, [sp, #12]
 80053a4:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80053a6:	9404      	str	r4, [sp, #16]
 80053a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053aa:	f042 0201 	orr.w	r2, r2, #1
 80053ae:	631a      	str	r2, [r3, #48]	; 0x30
 80053b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053b2:	f002 0201 	and.w	r2, r2, #1
 80053b6:	9204      	str	r2, [sp, #16]
 80053b8:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80053ba:	9405      	str	r4, [sp, #20]
 80053bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053be:	f042 0202 	orr.w	r2, r2, #2
 80053c2:	631a      	str	r2, [r3, #48]	; 0x30
 80053c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053c6:	f002 0202 	and.w	r2, r2, #2
 80053ca:	9205      	str	r2, [sp, #20]
 80053cc:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80053ce:	9406      	str	r4, [sp, #24]
 80053d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053d2:	f042 0208 	orr.w	r2, r2, #8
 80053d6:	631a      	str	r2, [r3, #48]	; 0x30
 80053d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053da:	f003 0308 	and.w	r3, r3, #8
 80053de:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_1, GPIO_PIN_RESET);
 80053e0:	4622      	mov	r2, r4
 80053e2:	4630      	mov	r0, r6
 80053e4:	212a      	movs	r1, #42	; 0x2a
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80053e6:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_1, GPIO_PIN_RESET);
 80053e8:	f7fc fa68 	bl	80018bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80053ec:	4622      	mov	r2, r4
 80053ee:	4648      	mov	r0, r9
 80053f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80053f4:	f7fc fa62 	bl	80018bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, EN1C_Pin|EN2C_Pin, GPIO_PIN_RESET);
 80053f8:	4622      	mov	r2, r4
 80053fa:	4640      	mov	r0, r8
 80053fc:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8005400:	f7fc fa5c 	bl	80018bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, EN1A_Pin|EN1B_Pin|EN2A_Pin|EN2B_Pin 
 8005404:	4622      	mov	r2, r4
 8005406:	4638      	mov	r0, r7
 8005408:	213f      	movs	r1, #63	; 0x3f
 800540a:	f7fc fa57 	bl	80018bc <HAL_GPIO_WritePin>
                          |EN3A_Pin|EN3B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE4 PE6 PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_0;
 800540e:	2355      	movs	r3, #85	; 0x55
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005410:	a907      	add	r1, sp, #28
 8005412:	4630      	mov	r0, r6

  /*Configure GPIO pins : PE3 PE5 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005414:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_0;
 8005416:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005418:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800541a:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800541c:	f7fc f96e 	bl	80016fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_1;
 8005420:	232a      	movs	r3, #42	; 0x2a
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005422:	a907      	add	r1, sp, #28
 8005424:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_1;
 8005426:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005428:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800542a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800542c:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800542e:	f7fc f965 	bl	80016fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005432:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005436:	a907      	add	r1, sp, #28
 8005438:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800543a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800543c:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800543e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005440:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005442:	f7fc f95b 	bl	80016fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = EN1C_Pin|EN2C_Pin;
 8005446:	f44f 63a0 	mov.w	r3, #1280	; 0x500
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800544a:	a907      	add	r1, sp, #28
 800544c:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = EN1C_Pin|EN2C_Pin;
 800544e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005450:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005452:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005454:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005456:	f7fc f951 	bl	80016fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin 
                           PDPin PDPin */
  GPIO_InitStruct.Pin = EN1A_Pin|EN1B_Pin|EN2A_Pin|EN2B_Pin 
 800545a:	233f      	movs	r3, #63	; 0x3f
                          |EN3A_Pin|EN3B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800545c:	a907      	add	r1, sp, #28
 800545e:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = EN1A_Pin|EN1B_Pin|EN2A_Pin|EN2B_Pin 
 8005460:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005462:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005464:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005466:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005468:	f7fc f948 	bl	80016fc <HAL_GPIO_Init>

}
 800546c:	b00d      	add	sp, #52	; 0x34
 800546e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005472:	bf00      	nop
 8005474:	40023800 	.word	0x40023800
 8005478:	40021000 	.word	0x40021000
 800547c:	40020c00 	.word	0x40020c00
 8005480:	40020800 	.word	0x40020800
 8005484:	40020000 	.word	0x40020000

08005488 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c2_rx;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8005488:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 800548a:	480d      	ldr	r0, [pc, #52]	; (80054c0 <MX_I2C1_Init+0x38>)
  hi2c1.Init.ClockSpeed = 400000;
 800548c:	4b0d      	ldr	r3, [pc, #52]	; (80054c4 <MX_I2C1_Init+0x3c>)
 800548e:	f8df e03c 	ldr.w	lr, [pc, #60]	; 80054cc <MX_I2C1_Init+0x44>
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005492:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 400000;
 8005496:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800549a:	2300      	movs	r3, #0
 800549c:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800549e:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80054a0:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80054a2:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80054a4:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80054a6:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80054a8:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80054aa:	f7fc fbd5 	bl	8001c58 <HAL_I2C_Init>
 80054ae:	b128      	cbz	r0, 80054bc <MX_I2C1_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 80054b0:	2148      	movs	r1, #72	; 0x48
 80054b2:	4805      	ldr	r0, [pc, #20]	; (80054c8 <MX_I2C1_Init+0x40>)
  }

}
 80054b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 80054b8:	f000 ba76 	b.w	80059a8 <_Error_Handler>
 80054bc:	bd08      	pop	{r3, pc}
 80054be:	bf00      	nop
 80054c0:	200001c8 	.word	0x200001c8
 80054c4:	40005400 	.word	0x40005400
 80054c8:	08006dad 	.word	0x08006dad
 80054cc:	00061a80 	.word	0x00061a80

080054d0 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80054d0:	b508      	push	{r3, lr}

  hi2c2.Instance = I2C2;
 80054d2:	480d      	ldr	r0, [pc, #52]	; (8005508 <MX_I2C2_Init+0x38>)
  hi2c2.Init.ClockSpeed = 400000;
 80054d4:	4b0d      	ldr	r3, [pc, #52]	; (800550c <MX_I2C2_Init+0x3c>)
 80054d6:	f8df e03c 	ldr.w	lr, [pc, #60]	; 8005514 <MX_I2C2_Init+0x44>
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80054da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c2.Init.ClockSpeed = 400000;
 80054de:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80054e2:	2300      	movs	r3, #0
 80054e4:	6083      	str	r3, [r0, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80054e6:	60c3      	str	r3, [r0, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80054e8:	6102      	str	r2, [r0, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80054ea:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80054ec:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80054ee:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80054f0:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80054f2:	f7fc fbb1 	bl	8001c58 <HAL_I2C_Init>
 80054f6:	b128      	cbz	r0, 8005504 <MX_I2C2_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 80054f8:	215b      	movs	r1, #91	; 0x5b
 80054fa:	4805      	ldr	r0, [pc, #20]	; (8005510 <MX_I2C2_Init+0x40>)
  }

}
 80054fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8005500:	f000 ba52 	b.w	80059a8 <_Error_Handler>
 8005504:	bd08      	pop	{r3, pc}
 8005506:	bf00      	nop
 8005508:	2000021c 	.word	0x2000021c
 800550c:	40005800 	.word	0x40005800
 8005510:	08006dad 	.word	0x08006dad
 8005514:	00061a80 	.word	0x00061a80

08005518 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005518:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C1)
 800551a:	6803      	ldr	r3, [r0, #0]
 800551c:	4a65      	ldr	r2, [pc, #404]	; (80056b4 <HAL_I2C_MspInit+0x19c>)
 800551e:	4293      	cmp	r3, r2
{
 8005520:	b089      	sub	sp, #36	; 0x24
 8005522:	4605      	mov	r5, r0
  if(i2cHandle->Instance==I2C1)
 8005524:	d162      	bne.n	80055ec <HAL_I2C_MspInit+0xd4>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005526:	23c0      	movs	r3, #192	; 0xc0
 8005528:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800552a:	2312      	movs	r3, #18
 800552c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800552e:	2301      	movs	r3, #1
 8005530:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005532:	2303      	movs	r3, #3
 8005534:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005536:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005538:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800553a:	485f      	ldr	r0, [pc, #380]	; (80056b8 <HAL_I2C_MspInit+0x1a0>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800553c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800553e:	f7fc f8dd 	bl	80016fc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005542:	2300      	movs	r3, #0
 8005544:	4a5d      	ldr	r2, [pc, #372]	; (80056bc <HAL_I2C_MspInit+0x1a4>)
 8005546:	9301      	str	r3, [sp, #4]
 8005548:	6c11      	ldr	r1, [r2, #64]	; 0x40
  
    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 800554a:	4c5d      	ldr	r4, [pc, #372]	; (80056c0 <HAL_I2C_MspInit+0x1a8>)
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 800554c:	485d      	ldr	r0, [pc, #372]	; (80056c4 <HAL_I2C_MspInit+0x1ac>)
    __HAL_RCC_I2C1_CLK_ENABLE();
 800554e:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
 8005552:	6411      	str	r1, [r2, #64]	; 0x40
 8005554:	6c12      	ldr	r2, [r2, #64]	; 0x40
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005556:	60a3      	str	r3, [r4, #8]
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005558:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800555c:	9201      	str	r2, [sp, #4]
 800555e:	9a01      	ldr	r2, [sp, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005560:	60e3      	str	r3, [r4, #12]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8005562:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005566:	e884 0005 	stmia.w	r4, {r0, r2}
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800556a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800556e:	4620      	mov	r0, r4
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005570:	6122      	str	r2, [r4, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005572:	6163      	str	r3, [r4, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005574:	61a3      	str	r3, [r4, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8005576:	61e3      	str	r3, [r4, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005578:	6223      	str	r3, [r4, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800557a:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800557c:	f7fb ff74 	bl	8001468 <HAL_DMA_Init>
 8005580:	b118      	cbz	r0, 800558a <HAL_I2C_MspInit+0x72>
    {
      _Error_Handler(__FILE__, __LINE__);
 8005582:	2186      	movs	r1, #134	; 0x86
 8005584:	4850      	ldr	r0, [pc, #320]	; (80056c8 <HAL_I2C_MspInit+0x1b0>)
 8005586:	f000 fa0f 	bl	80059a8 <_Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800558a:	63ac      	str	r4, [r5, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800558c:	494f      	ldr	r1, [pc, #316]	; (80056cc <HAL_I2C_MspInit+0x1b4>)
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800558e:	63a5      	str	r5, [r4, #56]	; 0x38
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8005590:	4c4f      	ldr	r4, [pc, #316]	; (80056d0 <HAL_I2C_MspInit+0x1b8>)
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005592:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005596:	2340      	movs	r3, #64	; 0x40
 8005598:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800559c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80055a0:	2300      	movs	r3, #0
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80055a2:	6122      	str	r2, [r4, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_i2c1_tx.Init.Mode = DMA_CIRCULAR;
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80055a4:	4620      	mov	r0, r4
    hdma_i2c1_tx.Init.Mode = DMA_CIRCULAR;
 80055a6:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80055aa:	60e3      	str	r3, [r4, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80055ac:	6163      	str	r3, [r4, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80055ae:	61a3      	str	r3, [r4, #24]
    hdma_i2c1_tx.Init.Mode = DMA_CIRCULAR;
 80055b0:	61e2      	str	r2, [r4, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80055b2:	6223      	str	r3, [r4, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80055b4:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80055b6:	f7fb ff57 	bl	8001468 <HAL_DMA_Init>
 80055ba:	b118      	cbz	r0, 80055c4 <HAL_I2C_MspInit+0xac>
    {
      _Error_Handler(__FILE__, __LINE__);
 80055bc:	2198      	movs	r1, #152	; 0x98
 80055be:	4842      	ldr	r0, [pc, #264]	; (80056c8 <HAL_I2C_MspInit+0x1b0>)
 80055c0:	f000 f9f2 	bl	80059a8 <_Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80055c4:	2200      	movs	r2, #0
 80055c6:	4611      	mov	r1, r2
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80055c8:	636c      	str	r4, [r5, #52]	; 0x34
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80055ca:	201f      	movs	r0, #31
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80055cc:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80055ce:	f7fb fecd 	bl	800136c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80055d2:	201f      	movs	r0, #31
 80055d4:	f7fb fefe 	bl	80013d4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80055d8:	2200      	movs	r2, #0
 80055da:	2020      	movs	r0, #32
 80055dc:	4611      	mov	r1, r2
 80055de:	f7fb fec5 	bl	800136c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80055e2:	2020      	movs	r0, #32

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80055e4:	f7fb fef6 	bl	80013d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80055e8:	b009      	add	sp, #36	; 0x24
 80055ea:	bd30      	pop	{r4, r5, pc}
  else if(i2cHandle->Instance==I2C2)
 80055ec:	4a39      	ldr	r2, [pc, #228]	; (80056d4 <HAL_I2C_MspInit+0x1bc>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d1fa      	bne.n	80055e8 <HAL_I2C_MspInit+0xd0>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80055f2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80055f6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80055f8:	2312      	movs	r3, #18
 80055fa:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80055fc:	2301      	movs	r3, #1
 80055fe:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005600:	2303      	movs	r3, #3
 8005602:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005604:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8005606:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005608:	482b      	ldr	r0, [pc, #172]	; (80056b8 <HAL_I2C_MspInit+0x1a0>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800560a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800560c:	f7fc f876 	bl	80016fc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005610:	2300      	movs	r3, #0
 8005612:	4a2a      	ldr	r2, [pc, #168]	; (80056bc <HAL_I2C_MspInit+0x1a4>)
 8005614:	9302      	str	r3, [sp, #8]
 8005616:	6c11      	ldr	r1, [r2, #64]	; 0x40
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 8005618:	4c2f      	ldr	r4, [pc, #188]	; (80056d8 <HAL_I2C_MspInit+0x1c0>)
    __HAL_RCC_I2C2_CLK_ENABLE();
 800561a:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 800561e:	6411      	str	r1, [r2, #64]	; 0x40
 8005620:	6c12      	ldr	r2, [r2, #64]	; 0x40
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8005622:	492e      	ldr	r1, [pc, #184]	; (80056dc <HAL_I2C_MspInit+0x1c4>)
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005624:	60a3      	str	r3, [r4, #8]
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005626:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 800562a:	9202      	str	r2, [sp, #8]
 800562c:	9a02      	ldr	r2, [sp, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800562e:	60e3      	str	r3, [r4, #12]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8005630:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8005634:	e884 0006 	stmia.w	r4, {r1, r2}
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8005638:	4620      	mov	r0, r4
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800563a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800563e:	6122      	str	r2, [r4, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005640:	6163      	str	r3, [r4, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005642:	61a3      	str	r3, [r4, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8005644:	61e3      	str	r3, [r4, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005646:	6223      	str	r3, [r4, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005648:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 800564a:	f7fb ff0d 	bl	8001468 <HAL_DMA_Init>
 800564e:	b118      	cbz	r0, 8005658 <HAL_I2C_MspInit+0x140>
      _Error_Handler(__FILE__, __LINE__);
 8005650:	21c8      	movs	r1, #200	; 0xc8
 8005652:	481d      	ldr	r0, [pc, #116]	; (80056c8 <HAL_I2C_MspInit+0x1b0>)
 8005654:	f000 f9a8 	bl	80059a8 <_Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 8005658:	63ac      	str	r4, [r5, #56]	; 0x38
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800565a:	4b21      	ldr	r3, [pc, #132]	; (80056e0 <HAL_I2C_MspInit+0x1c8>)
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 800565c:	63a5      	str	r5, [r4, #56]	; 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 800565e:	4c21      	ldr	r4, [pc, #132]	; (80056e4 <HAL_I2C_MspInit+0x1cc>)
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005660:	f04f 6c60 	mov.w	ip, #234881024	; 0xe000000
 8005664:	f04f 0e40 	mov.w	lr, #64	; 0x40
 8005668:	e884 5008 	stmia.w	r4, {r3, ip, lr}
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800566c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005670:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8005672:	4620      	mov	r0, r4
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005674:	60e3      	str	r3, [r4, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005676:	6122      	str	r2, [r4, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005678:	6163      	str	r3, [r4, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800567a:	61a3      	str	r3, [r4, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 800567c:	61e3      	str	r3, [r4, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800567e:	6223      	str	r3, [r4, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005680:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8005682:	f7fb fef1 	bl	8001468 <HAL_DMA_Init>
 8005686:	b118      	cbz	r0, 8005690 <HAL_I2C_MspInit+0x178>
      _Error_Handler(__FILE__, __LINE__);
 8005688:	21da      	movs	r1, #218	; 0xda
 800568a:	480f      	ldr	r0, [pc, #60]	; (80056c8 <HAL_I2C_MspInit+0x1b0>)
 800568c:	f000 f98c 	bl	80059a8 <_Error_Handler>
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8005690:	2200      	movs	r2, #0
 8005692:	4611      	mov	r1, r2
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 8005694:	636c      	str	r4, [r5, #52]	; 0x34
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8005696:	2021      	movs	r0, #33	; 0x21
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 8005698:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800569a:	f7fb fe67 	bl	800136c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800569e:	2021      	movs	r0, #33	; 0x21
 80056a0:	f7fb fe98 	bl	80013d4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 80056a4:	2200      	movs	r2, #0
 80056a6:	2022      	movs	r0, #34	; 0x22
 80056a8:	4611      	mov	r1, r2
 80056aa:	f7fb fe5f 	bl	800136c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80056ae:	2022      	movs	r0, #34	; 0x22
 80056b0:	e798      	b.n	80055e4 <HAL_I2C_MspInit+0xcc>
 80056b2:	bf00      	nop
 80056b4:	40005400 	.word	0x40005400
 80056b8:	40020400 	.word	0x40020400
 80056bc:	40023800 	.word	0x40023800
 80056c0:	20000330 	.word	0x20000330
 80056c4:	40026010 	.word	0x40026010
 80056c8:	08006dad 	.word	0x08006dad
 80056cc:	400260a0 	.word	0x400260a0
 80056d0:	20000168 	.word	0x20000168
 80056d4:	40005800 	.word	0x40005800
 80056d8:	20000270 	.word	0x20000270
 80056dc:	40026040 	.word	0x40026040
 80056e0:	400260b8 	.word	0x400260b8
 80056e4:	200002d0 	.word	0x200002d0

080056e8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

    if (htim->Instance == htim10.Instance)
 80056ec:	4b40      	ldr	r3, [pc, #256]	; (80057f0 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80056ee:	6802      	ldr	r2, [r0, #0]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	429a      	cmp	r2, r3
{
 80056f4:	ed2d 8b02 	vpush	{d8}
    if (htim->Instance == htim10.Instance)
 80056f8:	d164      	bne.n	80057c4 <HAL_TIM_PeriodElapsedCallback+0xdc>
    {
        dutya+=1;
 80056fa:	4b3e      	ldr	r3, [pc, #248]	; (80057f4 <HAL_TIM_PeriodElapsedCallback+0x10c>)
//        err = phi_ref - TIM2->CNT;
        MPU9250_read(&hi2c1, &mpu2);
 80056fc:	4c3e      	ldr	r4, [pc, #248]	; (80057f8 <HAL_TIM_PeriodElapsedCallback+0x110>)
        dutya+=1;
 80056fe:	edd3 7a00 	vldr	s15, [r3]
        MPU9250_read(&hi2c1, &mpu2);
 8005702:	483e      	ldr	r0, [pc, #248]	; (80057fc <HAL_TIM_PeriodElapsedCallback+0x114>)
        phi_ref=mpu2.pitch*3.333333;
        out=TIM2->CNT;
 8005704:	4f3e      	ldr	r7, [pc, #248]	; (8005800 <HAL_TIM_PeriodElapsedCallback+0x118>)
        deg0=out*0.3;
 8005706:	4e3f      	ldr	r6, [pc, #252]	; (8005804 <HAL_TIM_PeriodElapsedCallback+0x11c>)
        dutya+=1;
 8005708:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800570c:	ee77 7a87 	vadd.f32	s15, s15, s14
        MPU9250_read(&hi2c1, &mpu2);
 8005710:	4621      	mov	r1, r4
        dutya+=1;
 8005712:	edc3 7a00 	vstr	s15, [r3]
        MPU9250_read(&hi2c1, &mpu2);
 8005716:	f7ff f9df 	bl	8004ad8 <MPU9250_read>
        phi_ref=mpu2.pitch*3.333333;
 800571a:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 800571e:	f7fa feb7 	bl	8000490 <__aeabi_f2d>
 8005722:	a32f      	add	r3, pc, #188	; (adr r3, 80057e0 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8005724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005728:	f7fa ff06 	bl	8000538 <__aeabi_dmul>
 800572c:	4b36      	ldr	r3, [pc, #216]	; (8005808 <HAL_TIM_PeriodElapsedCallback+0x120>)
 800572e:	4680      	mov	r8, r0
 8005730:	4689      	mov	r9, r1
 8005732:	e9c3 8900 	strd	r8, r9, [r3]
        out=TIM2->CNT;
 8005736:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800573a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800573c:	4620      	mov	r0, r4
 800573e:	f7fa fe85 	bl	800044c <__aeabi_ui2d>
        deg0=out*0.3;
 8005742:	a329      	add	r3, pc, #164	; (adr r3, 80057e8 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8005744:	e9d3 2300 	ldrd	r2, r3, [r3]
        out=TIM2->CNT;
 8005748:	e9c7 0100 	strd	r0, r1, [r7]
        deg0=out*0.3;
 800574c:	f7fa fef4 	bl	8000538 <__aeabi_dmul>
 8005750:	e9c6 0100 	strd	r0, r1, [r6]
        err=cal_error(phi_ref, out);
 8005754:	4649      	mov	r1, r9
 8005756:	4640      	mov	r0, r8
 8005758:	f7fb f99e 	bl	8000a98 <__aeabi_d2iz>
 800575c:	4621      	mov	r1, r4
 800575e:	f7fe fa18 	bl	8003b92 <cal_error>
 8005762:	f7fa fe83 	bl	800046c <__aeabi_i2d>
 8005766:	4b29      	ldr	r3, [pc, #164]	; (800580c <HAL_TIM_PeriodElapsedCallback+0x124>)
 8005768:	4604      	mov	r4, r0
 800576a:	460d      	mov	r5, r1
 800576c:	e9c3 4500 	strd	r4, r5, [r3]

        deg0=out*0.3;
 8005770:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005774:	a31c      	add	r3, pc, #112	; (adr r3, 80057e8 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8005776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800577a:	f7fa fedd 	bl	8000538 <__aeabi_dmul>
 800577e:	e9c6 0100 	strd	r0, r1, [r6]
                Vout = pid_controller(&pid1, err);
 8005782:	4629      	mov	r1, r5
 8005784:	4620      	mov	r0, r4
 8005786:	f7fb f9cf 	bl	8000b28 <__aeabi_d2f>
 800578a:	ee00 0a10 	vmov	s0, r0
 800578e:	4820      	ldr	r0, [pc, #128]	; (8005810 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8005790:	f7fe f9e2 	bl	8003b58 <pid_controller>
 8005794:	ee10 0a10 	vmov	r0, s0
 8005798:	eeb0 8a40 	vmov.f32	s16, s0
 800579c:	f7fa fe78 	bl	8000490 <__aeabi_f2d>
 80057a0:	4b1c      	ldr	r3, [pc, #112]	; (8005814 <HAL_TIM_PeriodElapsedCallback+0x12c>)
                if (Vout < 0)
 80057a2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80057a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                Vout = pid_controller(&pid1, err);
 80057aa:	e9c3 0100 	strd	r0, r1, [r3]
 80057ae:	4b1a      	ldr	r3, [pc, #104]	; (8005818 <HAL_TIM_PeriodElapsedCallback+0x130>)
                if (Vout < 0)
 80057b0:	d50c      	bpl.n	80057cc <HAL_TIM_PeriodElapsedCallback+0xe4>
                {
                    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 80057b2:	681c      	ldr	r4, [r3, #0]
 80057b4:	2300      	movs	r3, #0
 80057b6:	63a3      	str	r3, [r4, #56]	; 0x38
                    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, -Vout);
 80057b8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80057bc:	4619      	mov	r1, r3
 80057be:	f7fb f993 	bl	8000ae8 <__aeabi_d2uiz>
 80057c2:	63e0      	str	r0, [r4, #60]	; 0x3c



        /**/
    }
}
 80057c4:	ecbd 8b02 	vpop	{d8}
 80057c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, Vout);
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	eebc 8ac8 	vcvt.u32.f32	s16, s16
                    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 80057d2:	2200      	movs	r2, #0
                    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, Vout);
 80057d4:	ed83 8a0e 	vstr	s16, [r3, #56]	; 0x38
                    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 80057d8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80057da:	e7f3      	b.n	80057c4 <HAL_TIM_PeriodElapsedCallback+0xdc>
 80057dc:	f3af 8000 	nop.w
 80057e0:	7ded6ba9 	.word	0x7ded6ba9
 80057e4:	400aaaaa 	.word	0x400aaaaa
 80057e8:	33333333 	.word	0x33333333
 80057ec:	3fd33333 	.word	0x3fd33333
 80057f0:	200004f4 	.word	0x200004f4
 80057f4:	20000468 	.word	0x20000468
 80057f8:	200003a8 	.word	0x200003a8
 80057fc:	200001c8 	.word	0x200001c8
 8005800:	200003a0 	.word	0x200003a0
 8005804:	200000c8 	.word	0x200000c8
 8005808:	20000478 	.word	0x20000478
 800580c:	20000460 	.word	0x20000460
 8005810:	20000488 	.word	0x20000488
 8005814:	200000c0 	.word	0x200000c0
 8005818:	20000530 	.word	0x20000530

0800581c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800581c:	b530      	push	{r4, r5, lr}
 800581e:	b095      	sub	sp, #84	; 0x54
    RCC_OscInitTypeDef RCC_OscInitStruct;
    RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
     */
    __HAL_RCC_PWR_CLK_ENABLE()
 8005820:	4b26      	ldr	r3, [pc, #152]	; (80058bc <SystemClock_Config+0xa0>)
 8005822:	2100      	movs	r1, #0
 8005824:	9101      	str	r1, [sp, #4]
 8005826:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005828:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800582c:	641a      	str	r2, [r3, #64]	; 0x40
 800582e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005830:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005834:	9301      	str	r3, [sp, #4]
 8005836:	9b01      	ldr	r3, [sp, #4]
    ;

    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005838:	4b21      	ldr	r3, [pc, #132]	; (80058c0 <SystemClock_Config+0xa4>)
 800583a:	9102      	str	r1, [sp, #8]
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005842:	601a      	str	r2, [r3, #0]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800584a:	9302      	str	r3, [sp, #8]
 800584c:	9b02      	ldr	r3, [sp, #8]

    /**Initializes the CPU, AHB and APB busses clocks 
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800584e:	2301      	movs	r3, #1
 8005850:	9308      	str	r3, [sp, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005852:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005856:	9309      	str	r3, [sp, #36]	; 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005858:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800585c:	2502      	movs	r5, #2
    RCC_OscInitStruct.PLL.PLLM = 4;
 800585e:	2404      	movs	r4, #4
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005860:	930f      	str	r3, [sp, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLN = 168;
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
    RCC_OscInitStruct.PLL.PLLQ = 4;
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005862:	a808      	add	r0, sp, #32
    RCC_OscInitStruct.PLL.PLLN = 168;
 8005864:	23a8      	movs	r3, #168	; 0xa8
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005866:	950e      	str	r5, [sp, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLM = 4;
 8005868:	9410      	str	r4, [sp, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLN = 168;
 800586a:	9311      	str	r3, [sp, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800586c:	9512      	str	r5, [sp, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ = 4;
 800586e:	9413      	str	r4, [sp, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005870:	f7fd f8ce 	bl	8002a10 <HAL_RCC_OscConfig>
 8005874:	b100      	cbz	r0, 8005878 <SystemClock_Config+0x5c>
 8005876:	e7fe      	b.n	8005876 <SystemClock_Config+0x5a>
        _Error_Handler(__FILE__, __LINE__);
    }

    /**Initializes the CPU, AHB and APB busses clocks 
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8005878:	230f      	movs	r3, #15
 800587a:	9303      	str	r3, [sp, #12]
            | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800587c:	9005      	str	r0, [sp, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800587e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005882:	2105      	movs	r1, #5
 8005884:	a803      	add	r0, sp, #12
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005886:	9504      	str	r5, [sp, #16]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005888:	9306      	str	r3, [sp, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800588a:	9307      	str	r3, [sp, #28]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800588c:	f7fd fa70 	bl	8002d70 <HAL_RCC_ClockConfig>
 8005890:	4605      	mov	r5, r0
 8005892:	b100      	cbz	r0, 8005896 <SystemClock_Config+0x7a>
 8005894:	e7fe      	b.n	8005894 <SystemClock_Config+0x78>
        _Error_Handler(__FILE__, __LINE__);
    }

    /**Configure the Systick interrupt time 
     */
    HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 8005896:	f7fd fb05 	bl	8002ea4 <HAL_RCC_GetHCLKFreq>
 800589a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800589e:	fbb0 f0f3 	udiv	r0, r0, r3
 80058a2:	f7fb fda3 	bl	80013ec <HAL_SYSTICK_Config>

    /**Configure the Systick 
     */
    HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80058a6:	4620      	mov	r0, r4
 80058a8:	f7fb fdb6 	bl	8001418 <HAL_SYSTICK_CLKSourceConfig>

    /* SysTick_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80058ac:	462a      	mov	r2, r5
 80058ae:	4629      	mov	r1, r5
 80058b0:	f04f 30ff 	mov.w	r0, #4294967295
 80058b4:	f7fb fd5a 	bl	800136c <HAL_NVIC_SetPriority>
}
 80058b8:	b015      	add	sp, #84	; 0x54
 80058ba:	bd30      	pop	{r4, r5, pc}
 80058bc:	40023800 	.word	0x40023800
 80058c0:	40007000 	.word	0x40007000

080058c4 <main>:
{
 80058c4:	b507      	push	{r0, r1, r2, lr}
    HAL_Init();
 80058c6:	f7fb fb2b 	bl	8000f20 <HAL_Init>
    MPU9250_Init(&hi2c1, &mpu2, AFS_4G, GFS_250DPS, MFS_16BITS);
 80058ca:	2401      	movs	r4, #1
    SystemClock_Config();
 80058cc:	f7ff ffa6 	bl	800581c <SystemClock_Config>
    MX_GPIO_Init();
 80058d0:	f7ff fd40 	bl	8005354 <MX_GPIO_Init>
    MX_DMA_Init();
 80058d4:	f7ff fd0c 	bl	80052f0 <MX_DMA_Init>
    MX_I2C1_Init();
 80058d8:	f7ff fdd6 	bl	8005488 <MX_I2C1_Init>
    MX_I2C2_Init();
 80058dc:	f7ff fdf8 	bl	80054d0 <MX_I2C2_Init>
    MX_TIM1_Init();
 80058e0:	f000 fa4c 	bl	8005d7c <MX_TIM1_Init>
    MX_TIM2_Init();
 80058e4:	f000 f932 	bl	8005b4c <MX_TIM2_Init>
    MX_TIM3_Init();
 80058e8:	f000 fac4 	bl	8005e74 <MX_TIM3_Init>
    MX_TIM4_Init();
 80058ec:	f000 fb26 	bl	8005f3c <MX_TIM4_Init>
    MX_USART3_Init();
 80058f0:	f000 fb8c 	bl	800600c <MX_USART3_Init>
    MX_TIM10_Init();
 80058f4:	f000 f95c 	bl	8005bb0 <MX_TIM10_Init>
    MX_ADC2_Init();
 80058f8:	f7ff fc8a 	bl	8005210 <MX_ADC2_Init>
    HAL_Delay(100);
 80058fc:	2064      	movs	r0, #100	; 0x64
 80058fe:	f7fb fb3b 	bl	8000f78 <HAL_Delay>
    MPU9250_Init(&hi2c1, &mpu2, AFS_4G, GFS_250DPS, MFS_16BITS);
 8005902:	4622      	mov	r2, r4
 8005904:	2300      	movs	r3, #0
 8005906:	491d      	ldr	r1, [pc, #116]	; (800597c <main+0xb8>)
 8005908:	481d      	ldr	r0, [pc, #116]	; (8005980 <main+0xbc>)
 800590a:	9400      	str	r4, [sp, #0]
 800590c:	f7ff fc48 	bl	80051a0 <MPU9250_Init>
    dutya=0;
 8005910:	ed9f 8a1c 	vldr	s16, [pc, #112]	; 8005984 <main+0xc0>
 8005914:	4b1c      	ldr	r3, [pc, #112]	; (8005988 <main+0xc4>)
    HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8005916:	481d      	ldr	r0, [pc, #116]	; (800598c <main+0xc8>)
    dutya=0;
 8005918:	ed83 8a00 	vstr	s16, [r3]
    HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 800591c:	2104      	movs	r1, #4
 800591e:	f7fd fb77 	bl	8003010 <HAL_TIM_Encoder_Start>
    phi_ref = 0;
 8005922:	4b1b      	ldr	r3, [pc, #108]	; (8005990 <main+0xcc>)
    pid_init(&pid1, 3, 0.1, 0);
 8005924:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8005994 <main+0xd0>
    phi_ref = 0;
 8005928:	2100      	movs	r1, #0
 800592a:	2000      	movs	r0, #0
 800592c:	e9c3 0100 	strd	r0, r1, [r3]
    pid_init(&pid1, 3, 0.1, 0);
 8005930:	eeb0 1a48 	vmov.f32	s2, s16
 8005934:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8005938:	4817      	ldr	r0, [pc, #92]	; (8005998 <main+0xd4>)
 800593a:	f7fe f8f5 	bl	8003b28 <pid_init>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_SET);
 800593e:	4622      	mov	r2, r4
 8005940:	2102      	movs	r1, #2
 8005942:	4816      	ldr	r0, [pc, #88]	; (800599c <main+0xd8>)
 8005944:	f7fb ffba 	bl	80018bc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);
 8005948:	4622      	mov	r2, r4
 800594a:	2108      	movs	r1, #8
 800594c:	4813      	ldr	r0, [pc, #76]	; (800599c <main+0xd8>)
 800594e:	f7fb ffb5 	bl	80018bc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_SET);
 8005952:	4622      	mov	r2, r4
 8005954:	2120      	movs	r1, #32
 8005956:	4811      	ldr	r0, [pc, #68]	; (800599c <main+0xd8>)
 8005958:	f7fb ffb0 	bl	80018bc <HAL_GPIO_WritePin>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800595c:	2100      	movs	r1, #0
 800595e:	4810      	ldr	r0, [pc, #64]	; (80059a0 <main+0xdc>)
 8005960:	f7fd fe58 	bl	8003614 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8005964:	2104      	movs	r1, #4
 8005966:	480e      	ldr	r0, [pc, #56]	; (80059a0 <main+0xdc>)
 8005968:	f7fd fe54 	bl	8003614 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800596c:	2108      	movs	r1, #8
 800596e:	480c      	ldr	r0, [pc, #48]	; (80059a0 <main+0xdc>)
 8005970:	f7fd fe50 	bl	8003614 <HAL_TIM_PWM_Start>
    HAL_TIM_Base_Start_IT(&htim10);
 8005974:	480b      	ldr	r0, [pc, #44]	; (80059a4 <main+0xe0>)
 8005976:	f7fd fb3f 	bl	8002ff8 <HAL_TIM_Base_Start_IT>
 800597a:	e7fe      	b.n	800597a <main+0xb6>
 800597c:	200003a8 	.word	0x200003a8
 8005980:	200001c8 	.word	0x200001c8
 8005984:	00000000 	.word	0x00000000
 8005988:	20000468 	.word	0x20000468
 800598c:	200005a8 	.word	0x200005a8
 8005990:	20000478 	.word	0x20000478
 8005994:	3dcccccd 	.word	0x3dcccccd
 8005998:	20000488 	.word	0x20000488
 800599c:	40020c00 	.word	0x40020c00
 80059a0:	20000530 	.word	0x20000530
 80059a4:	200004f4 	.word	0x200004f4

080059a8 <_Error_Handler>:
 * @param  file: The file name as string.
 * @param  line: The line in file as a number.
 * @retval None
 */
void _Error_Handler(char *file, int line)
{
 80059a8:	e7fe      	b.n	80059a8 <_Error_Handler>
	...

080059ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80059ac:	b513      	push	{r0, r1, r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059ae:	4b22      	ldr	r3, [pc, #136]	; (8005a38 <HAL_MspInit+0x8c>)
 80059b0:	2400      	movs	r4, #0
 80059b2:	9400      	str	r4, [sp, #0]
 80059b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80059ba:	645a      	str	r2, [r3, #68]	; 0x44
 80059bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059be:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80059c2:	9200      	str	r2, [sp, #0]
 80059c4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80059c6:	9401      	str	r4, [sp, #4]
 80059c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059ca:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80059ce:	641a      	str	r2, [r3, #64]	; 0x40
 80059d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059d6:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80059d8:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 80059da:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80059dc:	f7fb fcb4 	bl	8001348 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80059e0:	4622      	mov	r2, r4
 80059e2:	4621      	mov	r1, r4
 80059e4:	f06f 000b 	mvn.w	r0, #11
 80059e8:	f7fb fcc0 	bl	800136c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80059ec:	4622      	mov	r2, r4
 80059ee:	4621      	mov	r1, r4
 80059f0:	f06f 000a 	mvn.w	r0, #10
 80059f4:	f7fb fcba 	bl	800136c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80059f8:	4622      	mov	r2, r4
 80059fa:	4621      	mov	r1, r4
 80059fc:	f06f 0009 	mvn.w	r0, #9
 8005a00:	f7fb fcb4 	bl	800136c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8005a04:	4622      	mov	r2, r4
 8005a06:	4621      	mov	r1, r4
 8005a08:	f06f 0004 	mvn.w	r0, #4
 8005a0c:	f7fb fcae 	bl	800136c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8005a10:	4622      	mov	r2, r4
 8005a12:	4621      	mov	r1, r4
 8005a14:	f06f 0003 	mvn.w	r0, #3
 8005a18:	f7fb fca8 	bl	800136c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8005a1c:	4622      	mov	r2, r4
 8005a1e:	4621      	mov	r1, r4
 8005a20:	f06f 0001 	mvn.w	r0, #1
 8005a24:	f7fb fca2 	bl	800136c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8005a28:	4622      	mov	r2, r4
 8005a2a:	4621      	mov	r1, r4
 8005a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a30:	f7fb fc9c 	bl	800136c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005a34:	b002      	add	sp, #8
 8005a36:	bd10      	pop	{r4, pc}
 8005a38:	40023800 	.word	0x40023800

08005a3c <NMI_Handler>:
 8005a3c:	4770      	bx	lr

08005a3e <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8005a3e:	e7fe      	b.n	8005a3e <HardFault_Handler>

08005a40 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8005a40:	e7fe      	b.n	8005a40 <MemManage_Handler>

08005a42 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8005a42:	e7fe      	b.n	8005a42 <BusFault_Handler>

08005a44 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8005a44:	e7fe      	b.n	8005a44 <UsageFault_Handler>

08005a46 <SVC_Handler>:
 8005a46:	4770      	bx	lr

08005a48 <DebugMon_Handler>:
 8005a48:	4770      	bx	lr

08005a4a <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8005a4a:	4770      	bx	lr

08005a4c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8005a4c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005a4e:	f7fb fa81 	bl	8000f54 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005a52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8005a56:	f7fb bcec 	b.w	8001432 <HAL_SYSTICK_IRQHandler>
	...

08005a5c <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8005a5c:	4801      	ldr	r0, [pc, #4]	; (8005a64 <DMA1_Stream0_IRQHandler+0x8>)
 8005a5e:	f7fb bd93 	b.w	8001588 <HAL_DMA_IRQHandler>
 8005a62:	bf00      	nop
 8005a64:	20000330 	.word	0x20000330

08005a68 <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8005a68:	4801      	ldr	r0, [pc, #4]	; (8005a70 <DMA1_Stream2_IRQHandler+0x8>)
 8005a6a:	f7fb bd8d 	b.w	8001588 <HAL_DMA_IRQHandler>
 8005a6e:	bf00      	nop
 8005a70:	20000270 	.word	0x20000270

08005a74 <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8005a74:	4801      	ldr	r0, [pc, #4]	; (8005a7c <DMA1_Stream6_IRQHandler+0x8>)
 8005a76:	f7fb bd87 	b.w	8001588 <HAL_DMA_IRQHandler>
 8005a7a:	bf00      	nop
 8005a7c:	20000168 	.word	0x20000168

08005a80 <ADC_IRQHandler>:

/**
* @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
*/
void ADC_IRQHandler(void)
{
 8005a80:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005a82:	4804      	ldr	r0, [pc, #16]	; (8005a94 <ADC_IRQHandler+0x14>)
 8005a84:	f7fb fb33 	bl	80010ee <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8005a88:	4803      	ldr	r0, [pc, #12]	; (8005a98 <ADC_IRQHandler+0x18>)
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8005a8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_ADC_IRQHandler(&hadc2);
 8005a8e:	f7fb bb2e 	b.w	80010ee <HAL_ADC_IRQHandler>
 8005a92:	bf00      	nop
 8005a94:	20000120 	.word	0x20000120
 8005a98:	200000d8 	.word	0x200000d8

08005a9c <TIM1_UP_TIM10_IRQHandler>:

/**
* @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
*/
void TIM1_UP_TIM10_IRQHandler(void)
{
 8005a9c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005a9e:	4804      	ldr	r0, [pc, #16]	; (8005ab0 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8005aa0:	f7fd fb95 	bl	80031ce <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8005aa4:	4803      	ldr	r0, [pc, #12]	; (8005ab4 <TIM1_UP_TIM10_IRQHandler+0x18>)
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8005aa6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim10);
 8005aaa:	f7fd bb90 	b.w	80031ce <HAL_TIM_IRQHandler>
 8005aae:	bf00      	nop
 8005ab0:	2000056c 	.word	0x2000056c
 8005ab4:	200004f4 	.word	0x200004f4

08005ab8 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005ab8:	4801      	ldr	r0, [pc, #4]	; (8005ac0 <I2C1_EV_IRQHandler+0x8>)
 8005aba:	f7fc bb7f 	b.w	80021bc <HAL_I2C_EV_IRQHandler>
 8005abe:	bf00      	nop
 8005ac0:	200001c8 	.word	0x200001c8

08005ac4 <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8005ac4:	4801      	ldr	r0, [pc, #4]	; (8005acc <I2C1_ER_IRQHandler+0x8>)
 8005ac6:	f7fc bee3 	b.w	8002890 <HAL_I2C_ER_IRQHandler>
 8005aca:	bf00      	nop
 8005acc:	200001c8 	.word	0x200001c8

08005ad0 <I2C2_EV_IRQHandler>:
void I2C2_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8005ad0:	4801      	ldr	r0, [pc, #4]	; (8005ad8 <I2C2_EV_IRQHandler+0x8>)
 8005ad2:	f7fc bb73 	b.w	80021bc <HAL_I2C_EV_IRQHandler>
 8005ad6:	bf00      	nop
 8005ad8:	2000021c 	.word	0x2000021c

08005adc <I2C2_ER_IRQHandler>:
void I2C2_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8005adc:	4801      	ldr	r0, [pc, #4]	; (8005ae4 <I2C2_ER_IRQHandler+0x8>)
 8005ade:	f7fc bed7 	b.w	8002890 <HAL_I2C_ER_IRQHandler>
 8005ae2:	bf00      	nop
 8005ae4:	2000021c 	.word	0x2000021c

08005ae8 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_USART_IRQHandler(&husart3);
 8005ae8:	4801      	ldr	r0, [pc, #4]	; (8005af0 <USART3_IRQHandler+0x8>)
 8005aea:	f7fd bf5d 	b.w	80039a8 <HAL_USART_IRQHandler>
 8005aee:	bf00      	nop
 8005af0:	200005e4 	.word	0x200005e4

08005af4 <DMA1_Stream7_IRQHandler>:
void DMA1_Stream7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8005af4:	4801      	ldr	r0, [pc, #4]	; (8005afc <DMA1_Stream7_IRQHandler+0x8>)
 8005af6:	f7fb bd47 	b.w	8001588 <HAL_DMA_IRQHandler>
 8005afa:	bf00      	nop
 8005afc:	200002d0 	.word	0x200002d0

08005b00 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005b00:	490f      	ldr	r1, [pc, #60]	; (8005b40 <SystemInit+0x40>)
 8005b02:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8005b06:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005b0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8005b0e:	4b0d      	ldr	r3, [pc, #52]	; (8005b44 <SystemInit+0x44>)
 8005b10:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005b12:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8005b14:	f042 0201 	orr.w	r2, r2, #1
 8005b18:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8005b1a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8005b22:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005b26:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8005b28:	4a07      	ldr	r2, [pc, #28]	; (8005b48 <SystemInit+0x48>)
 8005b2a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005b32:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8005b34:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005b36:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005b3a:	608b      	str	r3, [r1, #8]
 8005b3c:	4770      	bx	lr
 8005b3e:	bf00      	nop
 8005b40:	e000ed00 	.word	0xe000ed00
 8005b44:	40023800 	.word	0x40023800
 8005b48:	24003010 	.word	0x24003010

08005b4c <MX_TIM2_Init>:

}

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005b4c:	b510      	push	{r4, lr}
  TIM_Encoder_InitTypeDef sConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim2.Instance = TIM2;
 8005b4e:	4816      	ldr	r0, [pc, #88]	; (8005ba8 <MX_TIM2_Init+0x5c>)
  htim2.Init.Prescaler = 0;
 8005b50:	2400      	movs	r4, #0
 8005b52:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
{
 8005b56:	b08c      	sub	sp, #48	; 0x30
  htim2.Init.Prescaler = 0;
 8005b58:	e880 0018 	stmia.w	r0, {r3, r4}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 1200;//4294967295
 8005b5c:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8005b60:	60c3      	str	r3, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005b62:	2303      	movs	r3, #3
 8005b64:	9303      	str	r3, [sp, #12]
  sConfig.IC1Filter = 0;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 0;
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8005b66:	a903      	add	r1, sp, #12
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005b68:	2301      	movs	r3, #1
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005b6a:	6084      	str	r4, [r0, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005b6c:	6104      	str	r4, [r0, #16]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005b6e:	9404      	str	r4, [sp, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005b70:	9305      	str	r3, [sp, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005b72:	9406      	str	r4, [sp, #24]
  sConfig.IC1Filter = 0;
 8005b74:	9407      	str	r4, [sp, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005b76:	9408      	str	r4, [sp, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005b78:	9309      	str	r3, [sp, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005b7a:	940a      	str	r4, [sp, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8005b7c:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8005b7e:	f7fd fc61 	bl	8003444 <HAL_TIM_Encoder_Init>
 8005b82:	b118      	cbz	r0, 8005b8c <MX_TIM2_Init+0x40>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005b84:	2196      	movs	r1, #150	; 0x96
 8005b86:	4809      	ldr	r0, [pc, #36]	; (8005bac <MX_TIM2_Init+0x60>)
 8005b88:	f7ff ff0e 	bl	80059a8 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005b8c:	a901      	add	r1, sp, #4
 8005b8e:	4806      	ldr	r0, [pc, #24]	; (8005ba8 <MX_TIM2_Init+0x5c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005b90:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005b92:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005b94:	f7fd fd58 	bl	8003648 <HAL_TIMEx_MasterConfigSynchronization>
 8005b98:	b118      	cbz	r0, 8005ba2 <MX_TIM2_Init+0x56>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005b9a:	219d      	movs	r1, #157	; 0x9d
 8005b9c:	4803      	ldr	r0, [pc, #12]	; (8005bac <MX_TIM2_Init+0x60>)
 8005b9e:	f7ff ff03 	bl	80059a8 <_Error_Handler>
  }

}
 8005ba2:	b00c      	add	sp, #48	; 0x30
 8005ba4:	bd10      	pop	{r4, pc}
 8005ba6:	bf00      	nop
 8005ba8:	200005a8 	.word	0x200005a8
 8005bac:	08006dd2 	.word	0x08006dd2

08005bb0 <MX_TIM10_Init>:
}
/* TIM10 init function */
void MX_TIM10_Init(void)
{

  htim10.Instance = TIM10;
 8005bb0:	480b      	ldr	r0, [pc, #44]	; (8005be0 <MX_TIM10_Init+0x30>)
  htim10.Init.Prescaler = 167;
 8005bb2:	490c      	ldr	r1, [pc, #48]	; (8005be4 <MX_TIM10_Init+0x34>)
{
 8005bb4:	b508      	push	{r3, lr}
  htim10.Init.Prescaler = 167;
 8005bb6:	23a7      	movs	r3, #167	; 0xa7
 8005bb8:	e880 000a 	stmia.w	r0, {r1, r3}
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim10.Init.Period = 999;
 8005bbc:	f240 32e7 	movw	r2, #999	; 0x3e7
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	6083      	str	r3, [r0, #8]
  htim10.Init.Period = 999;
 8005bc4:	60c2      	str	r2, [r0, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005bc6:	6103      	str	r3, [r0, #16]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8005bc8:	f7fd fc08 	bl	80033dc <HAL_TIM_Base_Init>
 8005bcc:	b130      	cbz	r0, 8005bdc <MX_TIM10_Init+0x2c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005bce:	f240 111f 	movw	r1, #287	; 0x11f
 8005bd2:	4805      	ldr	r0, [pc, #20]	; (8005be8 <MX_TIM10_Init+0x38>)
  }

}
 8005bd4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8005bd8:	f7ff bee6 	b.w	80059a8 <_Error_Handler>
 8005bdc:	bd08      	pop	{r3, pc}
 8005bde:	bf00      	nop
 8005be0:	200004f4 	.word	0x200004f4
 8005be4:	40014400 	.word	0x40014400
 8005be8:	08006dd2 	.word	0x08006dd2

08005bec <HAL_TIM_Encoder_MspInit>:
}



void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8005bec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(tim_encoderHandle->Instance==TIM2)
 8005bee:	6803      	ldr	r3, [r0, #0]
 8005bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bf4:	d117      	bne.n	8005c26 <HAL_TIM_Encoder_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	9300      	str	r3, [sp, #0]
 8005bfa:	4b0c      	ldr	r3, [pc, #48]	; (8005c2c <HAL_TIM_Encoder_MspInit+0x40>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005bfc:	480c      	ldr	r0, [pc, #48]	; (8005c30 <HAL_TIM_Encoder_MspInit+0x44>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005bfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c00:	f042 0201 	orr.w	r2, r2, #1
 8005c04:	641a      	str	r2, [r3, #64]	; 0x40
 8005c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c08:	f003 0301 	and.w	r3, r3, #1
 8005c0c:	9300      	str	r3, [sp, #0]
 8005c0e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c10:	2302      	movs	r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005c12:	2203      	movs	r2, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c14:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c16:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005c18:	2301      	movs	r3, #1
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005c1a:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005c1c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c1e:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005c20:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c22:	f7fb fd6b 	bl	80016fc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8005c26:	b007      	add	sp, #28
 8005c28:	f85d fb04 	ldr.w	pc, [sp], #4
 8005c2c:	40023800 	.word	0x40023800
 8005c30:	40020000 	.word	0x40020000

08005c34 <HAL_TIM_Base_MspInit>:


void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005c34:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  if(tim_baseHandle->Instance==TIM1)
 8005c36:	6803      	ldr	r3, [r0, #0]
 8005c38:	4a24      	ldr	r2, [pc, #144]	; (8005ccc <HAL_TIM_Base_MspInit+0x98>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d113      	bne.n	8005c66 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005c3e:	4b24      	ldr	r3, [pc, #144]	; (8005cd0 <HAL_TIM_Base_MspInit+0x9c>)
 8005c40:	2200      	movs	r2, #0
 8005c42:	9200      	str	r2, [sp, #0]
 8005c44:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8005c46:	f041 0101 	orr.w	r1, r1, #1
 8005c4a:	6459      	str	r1, [r3, #68]	; 0x44
 8005c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c4e:	f003 0301 	and.w	r3, r3, #1
 8005c52:	9300      	str	r3, [sp, #0]
 8005c54:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8005c56:	4611      	mov	r1, r2
 8005c58:	2019      	movs	r0, #25
 8005c5a:	f7fb fb87 	bl	800136c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8005c5e:	2019      	movs	r0, #25
 8005c60:	f7fb fbb8 	bl	80013d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8005c64:	e00e      	b.n	8005c84 <HAL_TIM_Base_MspInit+0x50>
  else if(tim_baseHandle->Instance==TIM3)
 8005c66:	4a1b      	ldr	r2, [pc, #108]	; (8005cd4 <HAL_TIM_Base_MspInit+0xa0>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d10e      	bne.n	8005c8a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	9301      	str	r3, [sp, #4]
 8005c70:	4b17      	ldr	r3, [pc, #92]	; (8005cd0 <HAL_TIM_Base_MspInit+0x9c>)
 8005c72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c74:	f042 0202 	orr.w	r2, r2, #2
 8005c78:	641a      	str	r2, [r3, #64]	; 0x40
 8005c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7c:	f003 0302 	and.w	r3, r3, #2
 8005c80:	9301      	str	r3, [sp, #4]
 8005c82:	9b01      	ldr	r3, [sp, #4]
}
 8005c84:	b005      	add	sp, #20
 8005c86:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(tim_baseHandle->Instance==TIM4)
 8005c8a:	4a13      	ldr	r2, [pc, #76]	; (8005cd8 <HAL_TIM_Base_MspInit+0xa4>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d10c      	bne.n	8005caa <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005c90:	2300      	movs	r3, #0
 8005c92:	9302      	str	r3, [sp, #8]
 8005c94:	4b0e      	ldr	r3, [pc, #56]	; (8005cd0 <HAL_TIM_Base_MspInit+0x9c>)
 8005c96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c98:	f042 0204 	orr.w	r2, r2, #4
 8005c9c:	641a      	str	r2, [r3, #64]	; 0x40
 8005c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca0:	f003 0304 	and.w	r3, r3, #4
 8005ca4:	9302      	str	r3, [sp, #8]
 8005ca6:	9b02      	ldr	r3, [sp, #8]
 8005ca8:	e7ec      	b.n	8005c84 <HAL_TIM_Base_MspInit+0x50>
  else if(tim_baseHandle->Instance==TIM10)
 8005caa:	4a0c      	ldr	r2, [pc, #48]	; (8005cdc <HAL_TIM_Base_MspInit+0xa8>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d1e9      	bne.n	8005c84 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8005cb0:	4b07      	ldr	r3, [pc, #28]	; (8005cd0 <HAL_TIM_Base_MspInit+0x9c>)
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	9203      	str	r2, [sp, #12]
 8005cb6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8005cb8:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8005cbc:	6459      	str	r1, [r3, #68]	; 0x44
 8005cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cc4:	9303      	str	r3, [sp, #12]
 8005cc6:	9b03      	ldr	r3, [sp, #12]
 8005cc8:	e7c5      	b.n	8005c56 <HAL_TIM_Base_MspInit+0x22>
 8005cca:	bf00      	nop
 8005ccc:	40010000 	.word	0x40010000
 8005cd0:	40023800 	.word	0x40023800
 8005cd4:	40000400 	.word	0x40000400
 8005cd8:	40000800 	.word	0x40000800
 8005cdc:	40014400 	.word	0x40014400

08005ce0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005ce0:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(timHandle->Instance==TIM1)
 8005ce2:	6803      	ldr	r3, [r0, #0]
 8005ce4:	4a1e      	ldr	r2, [pc, #120]	; (8005d60 <HAL_TIM_MspPostInit+0x80>)
 8005ce6:	4293      	cmp	r3, r2
{
 8005ce8:	b086      	sub	sp, #24
  if(timHandle->Instance==TIM1)
 8005cea:	d110      	bne.n	8005d0e <HAL_TIM_MspPostInit+0x2e>
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 8005cec:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 8005cf0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005cf2:	2312      	movs	r3, #18
 8005cf4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005cfa:	2303      	movs	r3, #3
 8005cfc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005cfe:	4819      	ldr	r0, [pc, #100]	; (8005d64 <HAL_TIM_MspPostInit+0x84>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005d00:	2301      	movs	r3, #1
 8005d02:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005d04:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005d06:	f7fb fcf9 	bl	80016fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8005d0a:	b006      	add	sp, #24
 8005d0c:	bd70      	pop	{r4, r5, r6, pc}
  else if(timHandle->Instance==TIM3)
 8005d0e:	4a16      	ldr	r2, [pc, #88]	; (8005d68 <HAL_TIM_MspPostInit+0x88>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d115      	bne.n	8005d40 <HAL_TIM_MspPostInit+0x60>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d14:	2402      	movs	r4, #2
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005d16:	23c0      	movs	r3, #192	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d18:	2600      	movs	r6, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d1a:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d1c:	a901      	add	r1, sp, #4
 8005d1e:	4813      	ldr	r0, [pc, #76]	; (8005d6c <HAL_TIM_MspPostInit+0x8c>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005d20:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d22:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d24:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d26:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005d28:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d2a:	f7fb fce7 	bl	80016fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d32:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d34:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d36:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005d38:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d3a:	a901      	add	r1, sp, #4
 8005d3c:	480c      	ldr	r0, [pc, #48]	; (8005d70 <HAL_TIM_MspPostInit+0x90>)
 8005d3e:	e7e2      	b.n	8005d06 <HAL_TIM_MspPostInit+0x26>
  else if(timHandle->Instance==TIM4)
 8005d40:	4a0c      	ldr	r2, [pc, #48]	; (8005d74 <HAL_TIM_MspPostInit+0x94>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d1e1      	bne.n	8005d0a <HAL_TIM_MspPostInit+0x2a>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8005d46:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d4a:	2200      	movs	r2, #0
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8005d4c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d4e:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d50:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d52:	2203      	movs	r2, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d54:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d56:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005d58:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005d5a:	a901      	add	r1, sp, #4
 8005d5c:	4806      	ldr	r0, [pc, #24]	; (8005d78 <HAL_TIM_MspPostInit+0x98>)
 8005d5e:	e7d2      	b.n	8005d06 <HAL_TIM_MspPostInit+0x26>
 8005d60:	40010000 	.word	0x40010000
 8005d64:	40021000 	.word	0x40021000
 8005d68:	40000400 	.word	0x40000400
 8005d6c:	40020000 	.word	0x40020000
 8005d70:	40020400 	.word	0x40020400
 8005d74:	40000800 	.word	0x40000800
 8005d78:	40020c00 	.word	0x40020c00

08005d7c <MX_TIM1_Init>:
{
 8005d7c:	b500      	push	{lr}
  htim1.Instance = TIM1;
 8005d7e:	483a      	ldr	r0, [pc, #232]	; (8005e68 <MX_TIM1_Init+0xec>)
  htim1.Init.Prescaler = 6;
 8005d80:	493a      	ldr	r1, [pc, #232]	; (8005e6c <MX_TIM1_Init+0xf0>)
 8005d82:	2306      	movs	r3, #6
{
 8005d84:	b095      	sub	sp, #84	; 0x54
  htim1.Init.Prescaler = 6;
 8005d86:	e880 000a 	stmia.w	r0, {r1, r3}
  htim1.Init.Period = 399;
 8005d8a:	f240 128f 	movw	r2, #399	; 0x18f
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 399;
 8005d92:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005d94:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8005d96:	6143      	str	r3, [r0, #20]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005d98:	f7fd fb20 	bl	80033dc <HAL_TIM_Base_Init>
 8005d9c:	b118      	cbz	r0, 8005da6 <MX_TIM1_Init+0x2a>
    _Error_Handler(__FILE__, __LINE__);
 8005d9e:	2145      	movs	r1, #69	; 0x45
 8005da0:	4833      	ldr	r0, [pc, #204]	; (8005e70 <MX_TIM1_Init+0xf4>)
 8005da2:	f7ff fe01 	bl	80059a8 <_Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005da6:	a914      	add	r1, sp, #80	; 0x50
 8005da8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005dac:	f841 3d48 	str.w	r3, [r1, #-72]!
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005db0:	482d      	ldr	r0, [pc, #180]	; (8005e68 <MX_TIM1_Init+0xec>)
 8005db2:	f7fd f94f 	bl	8003054 <HAL_TIM_ConfigClockSource>
 8005db6:	b118      	cbz	r0, 8005dc0 <MX_TIM1_Init+0x44>
    _Error_Handler(__FILE__, __LINE__);
 8005db8:	214b      	movs	r1, #75	; 0x4b
 8005dba:	482d      	ldr	r0, [pc, #180]	; (8005e70 <MX_TIM1_Init+0xf4>)
 8005dbc:	f7ff fdf4 	bl	80059a8 <_Error_Handler>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005dc0:	4829      	ldr	r0, [pc, #164]	; (8005e68 <MX_TIM1_Init+0xec>)
 8005dc2:	f7fd fb25 	bl	8003410 <HAL_TIM_PWM_Init>
 8005dc6:	b118      	cbz	r0, 8005dd0 <MX_TIM1_Init+0x54>
    _Error_Handler(__FILE__, __LINE__);
 8005dc8:	2150      	movs	r1, #80	; 0x50
 8005dca:	4829      	ldr	r0, [pc, #164]	; (8005e70 <MX_TIM1_Init+0xf4>)
 8005dcc:	f7ff fdec 	bl	80059a8 <_Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005dd0:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005dd2:	4669      	mov	r1, sp
 8005dd4:	4824      	ldr	r0, [pc, #144]	; (8005e68 <MX_TIM1_Init+0xec>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005dd6:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005dd8:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005dda:	f7fd fc35 	bl	8003648 <HAL_TIMEx_MasterConfigSynchronization>
 8005dde:	b118      	cbz	r0, 8005de8 <MX_TIM1_Init+0x6c>
    _Error_Handler(__FILE__, __LINE__);
 8005de0:	2157      	movs	r1, #87	; 0x57
 8005de2:	4823      	ldr	r0, [pc, #140]	; (8005e70 <MX_TIM1_Init+0xf4>)
 8005de4:	f7ff fde0 	bl	80059a8 <_Error_Handler>
  sConfigOC.Pulse = 0;
 8005de8:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005dea:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005dec:	a906      	add	r1, sp, #24
 8005dee:	481e      	ldr	r0, [pc, #120]	; (8005e68 <MX_TIM1_Init+0xec>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005df0:	9306      	str	r3, [sp, #24]
  sConfigOC.Pulse = 0;
 8005df2:	9207      	str	r2, [sp, #28]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005df4:	9208      	str	r2, [sp, #32]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005df6:	9209      	str	r2, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005df8:	920a      	str	r2, [sp, #40]	; 0x28
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005dfa:	920b      	str	r2, [sp, #44]	; 0x2c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005dfc:	920c      	str	r2, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005dfe:	f7fd fb9b 	bl	8003538 <HAL_TIM_PWM_ConfigChannel>
 8005e02:	b118      	cbz	r0, 8005e0c <MX_TIM1_Init+0x90>
    _Error_Handler(__FILE__, __LINE__);
 8005e04:	2163      	movs	r1, #99	; 0x63
 8005e06:	481a      	ldr	r0, [pc, #104]	; (8005e70 <MX_TIM1_Init+0xf4>)
 8005e08:	f7ff fdce 	bl	80059a8 <_Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005e0c:	2204      	movs	r2, #4
 8005e0e:	a906      	add	r1, sp, #24
 8005e10:	4815      	ldr	r0, [pc, #84]	; (8005e68 <MX_TIM1_Init+0xec>)
 8005e12:	f7fd fb91 	bl	8003538 <HAL_TIM_PWM_ConfigChannel>
 8005e16:	b118      	cbz	r0, 8005e20 <MX_TIM1_Init+0xa4>
    _Error_Handler(__FILE__, __LINE__);
 8005e18:	2168      	movs	r1, #104	; 0x68
 8005e1a:	4815      	ldr	r0, [pc, #84]	; (8005e70 <MX_TIM1_Init+0xf4>)
 8005e1c:	f7ff fdc4 	bl	80059a8 <_Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005e20:	2208      	movs	r2, #8
 8005e22:	a906      	add	r1, sp, #24
 8005e24:	4810      	ldr	r0, [pc, #64]	; (8005e68 <MX_TIM1_Init+0xec>)
 8005e26:	f7fd fb87 	bl	8003538 <HAL_TIM_PWM_ConfigChannel>
 8005e2a:	b118      	cbz	r0, 8005e34 <MX_TIM1_Init+0xb8>
    _Error_Handler(__FILE__, __LINE__);
 8005e2c:	216d      	movs	r1, #109	; 0x6d
 8005e2e:	4810      	ldr	r0, [pc, #64]	; (8005e70 <MX_TIM1_Init+0xf4>)
 8005e30:	f7ff fdba 	bl	80059a8 <_Error_Handler>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005e34:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005e36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005e3a:	a90d      	add	r1, sp, #52	; 0x34
 8005e3c:	480a      	ldr	r0, [pc, #40]	; (8005e68 <MX_TIM1_Init+0xec>)
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005e3e:	930d      	str	r3, [sp, #52]	; 0x34
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005e40:	930e      	str	r3, [sp, #56]	; 0x38
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005e42:	930f      	str	r3, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.DeadTime = 0;
 8005e44:	9310      	str	r3, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005e46:	9311      	str	r3, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005e48:	9212      	str	r2, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005e4a:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005e4c:	f7fd fc1e 	bl	800368c <HAL_TIMEx_ConfigBreakDeadTime>
 8005e50:	b118      	cbz	r0, 8005e5a <MX_TIM1_Init+0xde>
    _Error_Handler(__FILE__, __LINE__);
 8005e52:	2179      	movs	r1, #121	; 0x79
 8005e54:	4806      	ldr	r0, [pc, #24]	; (8005e70 <MX_TIM1_Init+0xf4>)
 8005e56:	f7ff fda7 	bl	80059a8 <_Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 8005e5a:	4803      	ldr	r0, [pc, #12]	; (8005e68 <MX_TIM1_Init+0xec>)
 8005e5c:	f7ff ff40 	bl	8005ce0 <HAL_TIM_MspPostInit>
}
 8005e60:	b015      	add	sp, #84	; 0x54
 8005e62:	f85d fb04 	ldr.w	pc, [sp], #4
 8005e66:	bf00      	nop
 8005e68:	2000056c 	.word	0x2000056c
 8005e6c:	40010000 	.word	0x40010000
 8005e70:	08006dd2 	.word	0x08006dd2

08005e74 <MX_TIM3_Init>:
{
 8005e74:	b500      	push	{lr}
  htim3.Instance = TIM3;
 8005e76:	482e      	ldr	r0, [pc, #184]	; (8005f30 <MX_TIM3_Init+0xbc>)
  htim3.Init.Prescaler = 6;
 8005e78:	492e      	ldr	r1, [pc, #184]	; (8005f34 <MX_TIM3_Init+0xc0>)
 8005e7a:	2306      	movs	r3, #6
{
 8005e7c:	b08f      	sub	sp, #60	; 0x3c
  htim3.Init.Prescaler = 6;
 8005e7e:	e880 000a 	stmia.w	r0, {r1, r3}
  htim3.Init.Period = 399;
 8005e82:	f240 128f 	movw	r2, #399	; 0x18f
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005e86:	2300      	movs	r3, #0
 8005e88:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 399;
 8005e8a:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005e8c:	6103      	str	r3, [r0, #16]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005e8e:	f7fd faa5 	bl	80033dc <HAL_TIM_Base_Init>
 8005e92:	b118      	cbz	r0, 8005e9c <MX_TIM3_Init+0x28>
    _Error_Handler(__FILE__, __LINE__);
 8005e94:	21b0      	movs	r1, #176	; 0xb0
 8005e96:	4828      	ldr	r0, [pc, #160]	; (8005f38 <MX_TIM3_Init+0xc4>)
 8005e98:	f7ff fd86 	bl	80059a8 <_Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005e9c:	a90e      	add	r1, sp, #56	; 0x38
 8005e9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ea2:	f841 3d2c 	str.w	r3, [r1, #-44]!
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005ea6:	4822      	ldr	r0, [pc, #136]	; (8005f30 <MX_TIM3_Init+0xbc>)
 8005ea8:	f7fd f8d4 	bl	8003054 <HAL_TIM_ConfigClockSource>
 8005eac:	b118      	cbz	r0, 8005eb6 <MX_TIM3_Init+0x42>
    _Error_Handler(__FILE__, __LINE__);
 8005eae:	21b6      	movs	r1, #182	; 0xb6
 8005eb0:	4821      	ldr	r0, [pc, #132]	; (8005f38 <MX_TIM3_Init+0xc4>)
 8005eb2:	f7ff fd79 	bl	80059a8 <_Error_Handler>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005eb6:	481e      	ldr	r0, [pc, #120]	; (8005f30 <MX_TIM3_Init+0xbc>)
 8005eb8:	f7fd faaa 	bl	8003410 <HAL_TIM_PWM_Init>
 8005ebc:	b118      	cbz	r0, 8005ec6 <MX_TIM3_Init+0x52>
    _Error_Handler(__FILE__, __LINE__);
 8005ebe:	21bb      	movs	r1, #187	; 0xbb
 8005ec0:	481d      	ldr	r0, [pc, #116]	; (8005f38 <MX_TIM3_Init+0xc4>)
 8005ec2:	f7ff fd71 	bl	80059a8 <_Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005ec6:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005ec8:	a901      	add	r1, sp, #4
 8005eca:	4819      	ldr	r0, [pc, #100]	; (8005f30 <MX_TIM3_Init+0xbc>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005ecc:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005ece:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005ed0:	f7fd fbba 	bl	8003648 <HAL_TIMEx_MasterConfigSynchronization>
 8005ed4:	b118      	cbz	r0, 8005ede <MX_TIM3_Init+0x6a>
    _Error_Handler(__FILE__, __LINE__);
 8005ed6:	21c2      	movs	r1, #194	; 0xc2
 8005ed8:	4817      	ldr	r0, [pc, #92]	; (8005f38 <MX_TIM3_Init+0xc4>)
 8005eda:	f7ff fd65 	bl	80059a8 <_Error_Handler>
  sConfigOC.Pulse = 0;
 8005ede:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005ee0:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005ee2:	a907      	add	r1, sp, #28
 8005ee4:	4812      	ldr	r0, [pc, #72]	; (8005f30 <MX_TIM3_Init+0xbc>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005ee6:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 0;
 8005ee8:	9208      	str	r2, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005eea:	9209      	str	r2, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005eec:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005eee:	f7fd fb23 	bl	8003538 <HAL_TIM_PWM_ConfigChannel>
 8005ef2:	b118      	cbz	r0, 8005efc <MX_TIM3_Init+0x88>
    _Error_Handler(__FILE__, __LINE__);
 8005ef4:	21cb      	movs	r1, #203	; 0xcb
 8005ef6:	4810      	ldr	r0, [pc, #64]	; (8005f38 <MX_TIM3_Init+0xc4>)
 8005ef8:	f7ff fd56 	bl	80059a8 <_Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005efc:	2204      	movs	r2, #4
 8005efe:	a907      	add	r1, sp, #28
 8005f00:	480b      	ldr	r0, [pc, #44]	; (8005f30 <MX_TIM3_Init+0xbc>)
 8005f02:	f7fd fb19 	bl	8003538 <HAL_TIM_PWM_ConfigChannel>
 8005f06:	b118      	cbz	r0, 8005f10 <MX_TIM3_Init+0x9c>
    _Error_Handler(__FILE__, __LINE__);
 8005f08:	21d0      	movs	r1, #208	; 0xd0
 8005f0a:	480b      	ldr	r0, [pc, #44]	; (8005f38 <MX_TIM3_Init+0xc4>)
 8005f0c:	f7ff fd4c 	bl	80059a8 <_Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005f10:	2208      	movs	r2, #8
 8005f12:	a907      	add	r1, sp, #28
 8005f14:	4806      	ldr	r0, [pc, #24]	; (8005f30 <MX_TIM3_Init+0xbc>)
 8005f16:	f7fd fb0f 	bl	8003538 <HAL_TIM_PWM_ConfigChannel>
 8005f1a:	b118      	cbz	r0, 8005f24 <MX_TIM3_Init+0xb0>
    _Error_Handler(__FILE__, __LINE__);
 8005f1c:	21d5      	movs	r1, #213	; 0xd5
 8005f1e:	4806      	ldr	r0, [pc, #24]	; (8005f38 <MX_TIM3_Init+0xc4>)
 8005f20:	f7ff fd42 	bl	80059a8 <_Error_Handler>
  HAL_TIM_MspPostInit(&htim3);
 8005f24:	4802      	ldr	r0, [pc, #8]	; (8005f30 <MX_TIM3_Init+0xbc>)
 8005f26:	f7ff fedb 	bl	8005ce0 <HAL_TIM_MspPostInit>
}
 8005f2a:	b00f      	add	sp, #60	; 0x3c
 8005f2c:	f85d fb04 	ldr.w	pc, [sp], #4
 8005f30:	20000530 	.word	0x20000530
 8005f34:	40000400 	.word	0x40000400
 8005f38:	08006dd2 	.word	0x08006dd2

08005f3c <MX_TIM4_Init>:
{
 8005f3c:	b500      	push	{lr}
  htim4.Instance = TIM4;
 8005f3e:	4830      	ldr	r0, [pc, #192]	; (8006000 <MX_TIM4_Init+0xc4>)
  htim4.Init.Prescaler = 6;
 8005f40:	4930      	ldr	r1, [pc, #192]	; (8006004 <MX_TIM4_Init+0xc8>)
 8005f42:	2306      	movs	r3, #6
{
 8005f44:	b08f      	sub	sp, #60	; 0x3c
  htim4.Init.Prescaler = 6;
 8005f46:	e880 000a 	stmia.w	r0, {r1, r3}
  htim4.Init.Period = 399;
 8005f4a:	f240 128f 	movw	r2, #399	; 0x18f
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 399;
 8005f52:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005f54:	6103      	str	r3, [r0, #16]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8005f56:	f7fd fa41 	bl	80033dc <HAL_TIM_Base_Init>
 8005f5a:	b118      	cbz	r0, 8005f64 <MX_TIM4_Init+0x28>
    _Error_Handler(__FILE__, __LINE__);
 8005f5c:	21e9      	movs	r1, #233	; 0xe9
 8005f5e:	482a      	ldr	r0, [pc, #168]	; (8006008 <MX_TIM4_Init+0xcc>)
 8005f60:	f7ff fd22 	bl	80059a8 <_Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005f64:	a90e      	add	r1, sp, #56	; 0x38
 8005f66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f6a:	f841 3d2c 	str.w	r3, [r1, #-44]!
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8005f6e:	4824      	ldr	r0, [pc, #144]	; (8006000 <MX_TIM4_Init+0xc4>)
 8005f70:	f7fd f870 	bl	8003054 <HAL_TIM_ConfigClockSource>
 8005f74:	b118      	cbz	r0, 8005f7e <MX_TIM4_Init+0x42>
    _Error_Handler(__FILE__, __LINE__);
 8005f76:	21ef      	movs	r1, #239	; 0xef
 8005f78:	4823      	ldr	r0, [pc, #140]	; (8006008 <MX_TIM4_Init+0xcc>)
 8005f7a:	f7ff fd15 	bl	80059a8 <_Error_Handler>
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8005f7e:	4820      	ldr	r0, [pc, #128]	; (8006000 <MX_TIM4_Init+0xc4>)
 8005f80:	f7fd fa46 	bl	8003410 <HAL_TIM_PWM_Init>
 8005f84:	b118      	cbz	r0, 8005f8e <MX_TIM4_Init+0x52>
    _Error_Handler(__FILE__, __LINE__);
 8005f86:	21f4      	movs	r1, #244	; 0xf4
 8005f88:	481f      	ldr	r0, [pc, #124]	; (8006008 <MX_TIM4_Init+0xcc>)
 8005f8a:	f7ff fd0d 	bl	80059a8 <_Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005f8e:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005f90:	a901      	add	r1, sp, #4
 8005f92:	481b      	ldr	r0, [pc, #108]	; (8006000 <MX_TIM4_Init+0xc4>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005f94:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005f96:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005f98:	f7fd fb56 	bl	8003648 <HAL_TIMEx_MasterConfigSynchronization>
 8005f9c:	b118      	cbz	r0, 8005fa6 <MX_TIM4_Init+0x6a>
    _Error_Handler(__FILE__, __LINE__);
 8005f9e:	21fb      	movs	r1, #251	; 0xfb
 8005fa0:	4819      	ldr	r0, [pc, #100]	; (8006008 <MX_TIM4_Init+0xcc>)
 8005fa2:	f7ff fd01 	bl	80059a8 <_Error_Handler>
  sConfigOC.Pulse = 0;
 8005fa6:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005fa8:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005faa:	a907      	add	r1, sp, #28
 8005fac:	4814      	ldr	r0, [pc, #80]	; (8006000 <MX_TIM4_Init+0xc4>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005fae:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 0;
 8005fb0:	9208      	str	r2, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005fb2:	9209      	str	r2, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005fb4:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005fb6:	f7fd fabf 	bl	8003538 <HAL_TIM_PWM_ConfigChannel>
 8005fba:	b120      	cbz	r0, 8005fc6 <MX_TIM4_Init+0x8a>
    _Error_Handler(__FILE__, __LINE__);
 8005fbc:	f44f 7182 	mov.w	r1, #260	; 0x104
 8005fc0:	4811      	ldr	r0, [pc, #68]	; (8006008 <MX_TIM4_Init+0xcc>)
 8005fc2:	f7ff fcf1 	bl	80059a8 <_Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005fc6:	2204      	movs	r2, #4
 8005fc8:	a907      	add	r1, sp, #28
 8005fca:	480d      	ldr	r0, [pc, #52]	; (8006000 <MX_TIM4_Init+0xc4>)
 8005fcc:	f7fd fab4 	bl	8003538 <HAL_TIM_PWM_ConfigChannel>
 8005fd0:	b120      	cbz	r0, 8005fdc <MX_TIM4_Init+0xa0>
    _Error_Handler(__FILE__, __LINE__);
 8005fd2:	f240 1109 	movw	r1, #265	; 0x109
 8005fd6:	480c      	ldr	r0, [pc, #48]	; (8006008 <MX_TIM4_Init+0xcc>)
 8005fd8:	f7ff fce6 	bl	80059a8 <_Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005fdc:	2208      	movs	r2, #8
 8005fde:	a907      	add	r1, sp, #28
 8005fe0:	4807      	ldr	r0, [pc, #28]	; (8006000 <MX_TIM4_Init+0xc4>)
 8005fe2:	f7fd faa9 	bl	8003538 <HAL_TIM_PWM_ConfigChannel>
 8005fe6:	b120      	cbz	r0, 8005ff2 <MX_TIM4_Init+0xb6>
    _Error_Handler(__FILE__, __LINE__);
 8005fe8:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8005fec:	4806      	ldr	r0, [pc, #24]	; (8006008 <MX_TIM4_Init+0xcc>)
 8005fee:	f7ff fcdb 	bl	80059a8 <_Error_Handler>
  HAL_TIM_MspPostInit(&htim4);
 8005ff2:	4803      	ldr	r0, [pc, #12]	; (8006000 <MX_TIM4_Init+0xc4>)
 8005ff4:	f7ff fe74 	bl	8005ce0 <HAL_TIM_MspPostInit>
}
 8005ff8:	b00f      	add	sp, #60	; 0x3c
 8005ffa:	f85d fb04 	ldr.w	pc, [sp], #4
 8005ffe:	bf00      	nop
 8006000:	200004b8 	.word	0x200004b8
 8006004:	40000800 	.word	0x40000800
 8006008:	08006dd2 	.word	0x08006dd2

0800600c <MX_USART3_Init>:

USART_HandleTypeDef husart3;

/* USART3 init function */
void MX_USART3_Init(void)
{
 800600c:	b508      	push	{r3, lr}

  husart3.Instance = USART3;
 800600e:	480c      	ldr	r0, [pc, #48]	; (8006040 <MX_USART3_Init+0x34>)
  husart3.Init.BaudRate = 115200;
 8006010:	4b0c      	ldr	r3, [pc, #48]	; (8006044 <MX_USART3_Init+0x38>)
 8006012:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8006016:	e880 4008 	stmia.w	r0, {r3, lr}
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
  husart3.Init.StopBits = USART_STOPBITS_1;
  husart3.Init.Parity = USART_PARITY_NONE;
  husart3.Init.Mode = USART_MODE_TX_RX;
 800601a:	220c      	movs	r2, #12
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 800601c:	2300      	movs	r3, #0
 800601e:	6083      	str	r3, [r0, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 8006020:	60c3      	str	r3, [r0, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 8006022:	6103      	str	r3, [r0, #16]
  husart3.Init.Mode = USART_MODE_TX_RX;
 8006024:	6142      	str	r2, [r0, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_LOW;
 8006026:	6183      	str	r3, [r0, #24]
  husart3.Init.CLKPhase = USART_PHASE_1EDGE;
 8006028:	61c3      	str	r3, [r0, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 800602a:	6203      	str	r3, [r0, #32]
  if (HAL_USART_Init(&husart3) != HAL_OK)
 800602c:	f7fd fb64 	bl	80036f8 <HAL_USART_Init>
 8006030:	b128      	cbz	r0, 800603e <MX_USART3_Init+0x32>
  {
    _Error_Handler(__FILE__, __LINE__);
 8006032:	2142      	movs	r1, #66	; 0x42
 8006034:	4804      	ldr	r0, [pc, #16]	; (8006048 <MX_USART3_Init+0x3c>)
  }

}
 8006036:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 800603a:	f7ff bcb5 	b.w	80059a8 <_Error_Handler>
 800603e:	bd08      	pop	{r3, pc}
 8006040:	200005e4 	.word	0x200005e4
 8006044:	40004800 	.word	0x40004800
 8006048:	08006ddf 	.word	0x08006ddf

0800604c <HAL_USART_MspInit>:

void HAL_USART_MspInit(USART_HandleTypeDef* usartHandle)
{
 800604c:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(usartHandle->Instance==USART3)
 800604e:	6802      	ldr	r2, [r0, #0]
 8006050:	4b19      	ldr	r3, [pc, #100]	; (80060b8 <HAL_USART_MspInit+0x6c>)
 8006052:	429a      	cmp	r2, r3
{
 8006054:	b087      	sub	sp, #28
  if(usartHandle->Instance==USART3)
 8006056:	d12d      	bne.n	80060b4 <HAL_USART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8006058:	2400      	movs	r4, #0
 800605a:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 800605e:	9400      	str	r4, [sp, #0]
 8006060:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006062:	4816      	ldr	r0, [pc, #88]	; (80060bc <HAL_USART_MspInit+0x70>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8006064:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006068:	641a      	str	r2, [r3, #64]	; 0x40
 800606a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800606c:	9403      	str	r4, [sp, #12]
    __HAL_RCC_USART3_CLK_ENABLE();
 800606e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006072:	9300      	str	r3, [sp, #0]
 8006074:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006076:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8006078:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800607c:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800607e:	2507      	movs	r5, #7
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006080:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8006082:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006084:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006086:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006088:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800608a:	f7fb fb37 	bl	80016fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800608e:	f44f 7340 	mov.w	r3, #768	; 0x300
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006092:	a901      	add	r1, sp, #4
 8006094:	480a      	ldr	r0, [pc, #40]	; (80060c0 <HAL_USART_MspInit+0x74>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006096:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006098:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800609a:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800609c:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800609e:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80060a0:	f7fb fb2c 	bl	80016fc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80060a4:	2027      	movs	r0, #39	; 0x27
 80060a6:	4622      	mov	r2, r4
 80060a8:	4621      	mov	r1, r4
 80060aa:	f7fb f95f 	bl	800136c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80060ae:	2027      	movs	r0, #39	; 0x27
 80060b0:	f7fb f990 	bl	80013d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80060b4:	b007      	add	sp, #28
 80060b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060b8:	40004800 	.word	0x40004800
 80060bc:	40020400 	.word	0x40020400
 80060c0:	40020c00 	.word	0x40020c00

080060c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80060c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80060fc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80060c8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80060ca:	e003      	b.n	80060d4 <LoopCopyDataInit>

080060cc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80060cc:	4b0c      	ldr	r3, [pc, #48]	; (8006100 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80060ce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80060d0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80060d2:	3104      	adds	r1, #4

080060d4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80060d4:	480b      	ldr	r0, [pc, #44]	; (8006104 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80060d6:	4b0c      	ldr	r3, [pc, #48]	; (8006108 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80060d8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80060da:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80060dc:	d3f6      	bcc.n	80060cc <CopyDataInit>
  ldr  r2, =_sbss
 80060de:	4a0b      	ldr	r2, [pc, #44]	; (800610c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80060e0:	e002      	b.n	80060e8 <LoopFillZerobss>

080060e2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80060e2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80060e4:	f842 3b04 	str.w	r3, [r2], #4

080060e8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80060e8:	4b09      	ldr	r3, [pc, #36]	; (8006110 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80060ea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80060ec:	d3f9      	bcc.n	80060e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80060ee:	f7ff fd07 	bl	8005b00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80060f2:	f000 f811 	bl	8006118 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80060f6:	f7ff fbe5 	bl	80058c4 <main>
  bx  lr    
 80060fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80060fc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8006100:	08006e48 	.word	0x08006e48
  ldr  r0, =_sdata
 8006104:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006108:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 800610c:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 8006110:	20000628 	.word	0x20000628

08006114 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006114:	e7fe      	b.n	8006114 <CAN1_RX0_IRQHandler>
	...

08006118 <__libc_init_array>:
 8006118:	b570      	push	{r4, r5, r6, lr}
 800611a:	4e0d      	ldr	r6, [pc, #52]	; (8006150 <__libc_init_array+0x38>)
 800611c:	4c0d      	ldr	r4, [pc, #52]	; (8006154 <__libc_init_array+0x3c>)
 800611e:	1ba4      	subs	r4, r4, r6
 8006120:	10a4      	asrs	r4, r4, #2
 8006122:	2500      	movs	r5, #0
 8006124:	42a5      	cmp	r5, r4
 8006126:	d109      	bne.n	800613c <__libc_init_array+0x24>
 8006128:	4e0b      	ldr	r6, [pc, #44]	; (8006158 <__libc_init_array+0x40>)
 800612a:	4c0c      	ldr	r4, [pc, #48]	; (800615c <__libc_init_array+0x44>)
 800612c:	f000 fe26 	bl	8006d7c <_init>
 8006130:	1ba4      	subs	r4, r4, r6
 8006132:	10a4      	asrs	r4, r4, #2
 8006134:	2500      	movs	r5, #0
 8006136:	42a5      	cmp	r5, r4
 8006138:	d105      	bne.n	8006146 <__libc_init_array+0x2e>
 800613a:	bd70      	pop	{r4, r5, r6, pc}
 800613c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006140:	4798      	blx	r3
 8006142:	3501      	adds	r5, #1
 8006144:	e7ee      	b.n	8006124 <__libc_init_array+0xc>
 8006146:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800614a:	4798      	blx	r3
 800614c:	3501      	adds	r5, #1
 800614e:	e7f2      	b.n	8006136 <__libc_init_array+0x1e>
 8006150:	08006e40 	.word	0x08006e40
 8006154:	08006e40 	.word	0x08006e40
 8006158:	08006e40 	.word	0x08006e40
 800615c:	08006e44 	.word	0x08006e44

08006160 <asin>:
 8006160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006162:	ed2d 8b02 	vpush	{d8}
 8006166:	4e26      	ldr	r6, [pc, #152]	; (8006200 <asin+0xa0>)
 8006168:	b08b      	sub	sp, #44	; 0x2c
 800616a:	ec55 4b10 	vmov	r4, r5, d0
 800616e:	f000 f8ab 	bl	80062c8 <__ieee754_asin>
 8006172:	f996 3000 	ldrsb.w	r3, [r6]
 8006176:	eeb0 8a40 	vmov.f32	s16, s0
 800617a:	eef0 8a60 	vmov.f32	s17, s1
 800617e:	3301      	adds	r3, #1
 8006180:	d036      	beq.n	80061f0 <asin+0x90>
 8006182:	4622      	mov	r2, r4
 8006184:	462b      	mov	r3, r5
 8006186:	4620      	mov	r0, r4
 8006188:	4629      	mov	r1, r5
 800618a:	f7fa fc6f 	bl	8000a6c <__aeabi_dcmpun>
 800618e:	4607      	mov	r7, r0
 8006190:	bb70      	cbnz	r0, 80061f0 <asin+0x90>
 8006192:	ec45 4b10 	vmov	d0, r4, r5
 8006196:	f000 fdd7 	bl	8006d48 <fabs>
 800619a:	2200      	movs	r2, #0
 800619c:	4b19      	ldr	r3, [pc, #100]	; (8006204 <asin+0xa4>)
 800619e:	ec51 0b10 	vmov	r0, r1, d0
 80061a2:	f7fa fc59 	bl	8000a58 <__aeabi_dcmpgt>
 80061a6:	b318      	cbz	r0, 80061f0 <asin+0x90>
 80061a8:	2301      	movs	r3, #1
 80061aa:	9300      	str	r3, [sp, #0]
 80061ac:	4816      	ldr	r0, [pc, #88]	; (8006208 <asin+0xa8>)
 80061ae:	4b17      	ldr	r3, [pc, #92]	; (800620c <asin+0xac>)
 80061b0:	9301      	str	r3, [sp, #4]
 80061b2:	9708      	str	r7, [sp, #32]
 80061b4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80061b8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80061bc:	f000 fdd0 	bl	8006d60 <nan>
 80061c0:	f996 3000 	ldrsb.w	r3, [r6]
 80061c4:	2b02      	cmp	r3, #2
 80061c6:	ed8d 0b06 	vstr	d0, [sp, #24]
 80061ca:	d104      	bne.n	80061d6 <asin+0x76>
 80061cc:	f000 fdd0 	bl	8006d70 <__errno>
 80061d0:	2321      	movs	r3, #33	; 0x21
 80061d2:	6003      	str	r3, [r0, #0]
 80061d4:	e004      	b.n	80061e0 <asin+0x80>
 80061d6:	4668      	mov	r0, sp
 80061d8:	f000 fdbd 	bl	8006d56 <matherr>
 80061dc:	2800      	cmp	r0, #0
 80061de:	d0f5      	beq.n	80061cc <asin+0x6c>
 80061e0:	9b08      	ldr	r3, [sp, #32]
 80061e2:	b11b      	cbz	r3, 80061ec <asin+0x8c>
 80061e4:	f000 fdc4 	bl	8006d70 <__errno>
 80061e8:	9b08      	ldr	r3, [sp, #32]
 80061ea:	6003      	str	r3, [r0, #0]
 80061ec:	ed9d 8b06 	vldr	d8, [sp, #24]
 80061f0:	eeb0 0a48 	vmov.f32	s0, s16
 80061f4:	eef0 0a68 	vmov.f32	s1, s17
 80061f8:	b00b      	add	sp, #44	; 0x2c
 80061fa:	ecbd 8b02 	vpop	{d8}
 80061fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006200:	2000001c 	.word	0x2000001c
 8006204:	3ff00000 	.word	0x3ff00000
 8006208:	08006db9 	.word	0x08006db9
 800620c:	08006dee 	.word	0x08006dee

08006210 <atan2>:
 8006210:	f000 ba66 	b.w	80066e0 <__ieee754_atan2>

08006214 <sqrt>:
 8006214:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006218:	ed2d 8b02 	vpush	{d8}
 800621c:	b08b      	sub	sp, #44	; 0x2c
 800621e:	ec55 4b10 	vmov	r4, r5, d0
 8006222:	f000 fb37 	bl	8006894 <__ieee754_sqrt>
 8006226:	4b26      	ldr	r3, [pc, #152]	; (80062c0 <sqrt+0xac>)
 8006228:	eeb0 8a40 	vmov.f32	s16, s0
 800622c:	eef0 8a60 	vmov.f32	s17, s1
 8006230:	f993 6000 	ldrsb.w	r6, [r3]
 8006234:	1c73      	adds	r3, r6, #1
 8006236:	d02a      	beq.n	800628e <sqrt+0x7a>
 8006238:	4622      	mov	r2, r4
 800623a:	462b      	mov	r3, r5
 800623c:	4620      	mov	r0, r4
 800623e:	4629      	mov	r1, r5
 8006240:	f7fa fc14 	bl	8000a6c <__aeabi_dcmpun>
 8006244:	4607      	mov	r7, r0
 8006246:	bb10      	cbnz	r0, 800628e <sqrt+0x7a>
 8006248:	f04f 0800 	mov.w	r8, #0
 800624c:	f04f 0900 	mov.w	r9, #0
 8006250:	4642      	mov	r2, r8
 8006252:	464b      	mov	r3, r9
 8006254:	4620      	mov	r0, r4
 8006256:	4629      	mov	r1, r5
 8006258:	f7fa fbe0 	bl	8000a1c <__aeabi_dcmplt>
 800625c:	b1b8      	cbz	r0, 800628e <sqrt+0x7a>
 800625e:	2301      	movs	r3, #1
 8006260:	9300      	str	r3, [sp, #0]
 8006262:	4b18      	ldr	r3, [pc, #96]	; (80062c4 <sqrt+0xb0>)
 8006264:	9301      	str	r3, [sp, #4]
 8006266:	9708      	str	r7, [sp, #32]
 8006268:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800626c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006270:	b9b6      	cbnz	r6, 80062a0 <sqrt+0x8c>
 8006272:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8006276:	4668      	mov	r0, sp
 8006278:	f000 fd6d 	bl	8006d56 <matherr>
 800627c:	b1d0      	cbz	r0, 80062b4 <sqrt+0xa0>
 800627e:	9b08      	ldr	r3, [sp, #32]
 8006280:	b11b      	cbz	r3, 800628a <sqrt+0x76>
 8006282:	f000 fd75 	bl	8006d70 <__errno>
 8006286:	9b08      	ldr	r3, [sp, #32]
 8006288:	6003      	str	r3, [r0, #0]
 800628a:	ed9d 8b06 	vldr	d8, [sp, #24]
 800628e:	eeb0 0a48 	vmov.f32	s0, s16
 8006292:	eef0 0a68 	vmov.f32	s1, s17
 8006296:	b00b      	add	sp, #44	; 0x2c
 8006298:	ecbd 8b02 	vpop	{d8}
 800629c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80062a0:	4642      	mov	r2, r8
 80062a2:	464b      	mov	r3, r9
 80062a4:	4640      	mov	r0, r8
 80062a6:	4649      	mov	r1, r9
 80062a8:	f7fa fa70 	bl	800078c <__aeabi_ddiv>
 80062ac:	2e02      	cmp	r6, #2
 80062ae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80062b2:	d1e0      	bne.n	8006276 <sqrt+0x62>
 80062b4:	f000 fd5c 	bl	8006d70 <__errno>
 80062b8:	2321      	movs	r3, #33	; 0x21
 80062ba:	6003      	str	r3, [r0, #0]
 80062bc:	e7df      	b.n	800627e <sqrt+0x6a>
 80062be:	bf00      	nop
 80062c0:	2000001c 	.word	0x2000001c
 80062c4:	08006df3 	.word	0x08006df3

080062c8 <__ieee754_asin>:
 80062c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062cc:	ec55 4b10 	vmov	r4, r5, d0
 80062d0:	4bcb      	ldr	r3, [pc, #812]	; (8006600 <__ieee754_asin+0x338>)
 80062d2:	b085      	sub	sp, #20
 80062d4:	f025 4b00 	bic.w	fp, r5, #2147483648	; 0x80000000
 80062d8:	459b      	cmp	fp, r3
 80062da:	9501      	str	r5, [sp, #4]
 80062dc:	dd32      	ble.n	8006344 <__ieee754_asin+0x7c>
 80062de:	ee10 3a10 	vmov	r3, s0
 80062e2:	f10b 4b40 	add.w	fp, fp, #3221225472	; 0xc0000000
 80062e6:	f50b 1b80 	add.w	fp, fp, #1048576	; 0x100000
 80062ea:	ea5b 0303 	orrs.w	r3, fp, r3
 80062ee:	d117      	bne.n	8006320 <__ieee754_asin+0x58>
 80062f0:	a3a9      	add	r3, pc, #676	; (adr r3, 8006598 <__ieee754_asin+0x2d0>)
 80062f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f6:	ee10 0a10 	vmov	r0, s0
 80062fa:	4629      	mov	r1, r5
 80062fc:	f7fa f91c 	bl	8000538 <__aeabi_dmul>
 8006300:	a3a7      	add	r3, pc, #668	; (adr r3, 80065a0 <__ieee754_asin+0x2d8>)
 8006302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006306:	4606      	mov	r6, r0
 8006308:	460f      	mov	r7, r1
 800630a:	4620      	mov	r0, r4
 800630c:	4629      	mov	r1, r5
 800630e:	f7fa f913 	bl	8000538 <__aeabi_dmul>
 8006312:	4602      	mov	r2, r0
 8006314:	460b      	mov	r3, r1
 8006316:	4630      	mov	r0, r6
 8006318:	4639      	mov	r1, r7
 800631a:	f7f9 ff5b 	bl	80001d4 <__adddf3>
 800631e:	e00a      	b.n	8006336 <__ieee754_asin+0x6e>
 8006320:	ee10 2a10 	vmov	r2, s0
 8006324:	462b      	mov	r3, r5
 8006326:	4620      	mov	r0, r4
 8006328:	4629      	mov	r1, r5
 800632a:	f7f9 ff51 	bl	80001d0 <__aeabi_dsub>
 800632e:	4602      	mov	r2, r0
 8006330:	460b      	mov	r3, r1
 8006332:	f7fa fa2b 	bl	800078c <__aeabi_ddiv>
 8006336:	4604      	mov	r4, r0
 8006338:	460d      	mov	r5, r1
 800633a:	ec45 4b10 	vmov	d0, r4, r5
 800633e:	b005      	add	sp, #20
 8006340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006344:	4baf      	ldr	r3, [pc, #700]	; (8006604 <__ieee754_asin+0x33c>)
 8006346:	459b      	cmp	fp, r3
 8006348:	dc11      	bgt.n	800636e <__ieee754_asin+0xa6>
 800634a:	f1bb 5f79 	cmp.w	fp, #1044381696	; 0x3e400000
 800634e:	f280 80b0 	bge.w	80064b2 <__ieee754_asin+0x1ea>
 8006352:	a395      	add	r3, pc, #596	; (adr r3, 80065a8 <__ieee754_asin+0x2e0>)
 8006354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006358:	ee10 0a10 	vmov	r0, s0
 800635c:	4629      	mov	r1, r5
 800635e:	f7f9 ff39 	bl	80001d4 <__adddf3>
 8006362:	2200      	movs	r2, #0
 8006364:	4ba8      	ldr	r3, [pc, #672]	; (8006608 <__ieee754_asin+0x340>)
 8006366:	f7fa fb77 	bl	8000a58 <__aeabi_dcmpgt>
 800636a:	2800      	cmp	r0, #0
 800636c:	d1e5      	bne.n	800633a <__ieee754_asin+0x72>
 800636e:	ec45 4b10 	vmov	d0, r4, r5
 8006372:	f000 fce9 	bl	8006d48 <fabs>
 8006376:	2000      	movs	r0, #0
 8006378:	ec53 2b10 	vmov	r2, r3, d0
 800637c:	49a2      	ldr	r1, [pc, #648]	; (8006608 <__ieee754_asin+0x340>)
 800637e:	f7f9 ff27 	bl	80001d0 <__aeabi_dsub>
 8006382:	2200      	movs	r2, #0
 8006384:	4ba1      	ldr	r3, [pc, #644]	; (800660c <__ieee754_asin+0x344>)
 8006386:	f7fa f8d7 	bl	8000538 <__aeabi_dmul>
 800638a:	a389      	add	r3, pc, #548	; (adr r3, 80065b0 <__ieee754_asin+0x2e8>)
 800638c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006390:	4604      	mov	r4, r0
 8006392:	460d      	mov	r5, r1
 8006394:	f7fa f8d0 	bl	8000538 <__aeabi_dmul>
 8006398:	a387      	add	r3, pc, #540	; (adr r3, 80065b8 <__ieee754_asin+0x2f0>)
 800639a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800639e:	f7f9 ff19 	bl	80001d4 <__adddf3>
 80063a2:	4622      	mov	r2, r4
 80063a4:	462b      	mov	r3, r5
 80063a6:	f7fa f8c7 	bl	8000538 <__aeabi_dmul>
 80063aa:	a385      	add	r3, pc, #532	; (adr r3, 80065c0 <__ieee754_asin+0x2f8>)
 80063ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b0:	f7f9 ff0e 	bl	80001d0 <__aeabi_dsub>
 80063b4:	4622      	mov	r2, r4
 80063b6:	462b      	mov	r3, r5
 80063b8:	f7fa f8be 	bl	8000538 <__aeabi_dmul>
 80063bc:	a382      	add	r3, pc, #520	; (adr r3, 80065c8 <__ieee754_asin+0x300>)
 80063be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c2:	f7f9 ff07 	bl	80001d4 <__adddf3>
 80063c6:	4622      	mov	r2, r4
 80063c8:	462b      	mov	r3, r5
 80063ca:	f7fa f8b5 	bl	8000538 <__aeabi_dmul>
 80063ce:	a380      	add	r3, pc, #512	; (adr r3, 80065d0 <__ieee754_asin+0x308>)
 80063d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d4:	f7f9 fefc 	bl	80001d0 <__aeabi_dsub>
 80063d8:	4622      	mov	r2, r4
 80063da:	462b      	mov	r3, r5
 80063dc:	f7fa f8ac 	bl	8000538 <__aeabi_dmul>
 80063e0:	a37d      	add	r3, pc, #500	; (adr r3, 80065d8 <__ieee754_asin+0x310>)
 80063e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e6:	f7f9 fef5 	bl	80001d4 <__adddf3>
 80063ea:	4622      	mov	r2, r4
 80063ec:	462b      	mov	r3, r5
 80063ee:	f7fa f8a3 	bl	8000538 <__aeabi_dmul>
 80063f2:	a37b      	add	r3, pc, #492	; (adr r3, 80065e0 <__ieee754_asin+0x318>)
 80063f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f8:	4680      	mov	r8, r0
 80063fa:	4689      	mov	r9, r1
 80063fc:	4620      	mov	r0, r4
 80063fe:	4629      	mov	r1, r5
 8006400:	f7fa f89a 	bl	8000538 <__aeabi_dmul>
 8006404:	a378      	add	r3, pc, #480	; (adr r3, 80065e8 <__ieee754_asin+0x320>)
 8006406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800640a:	f7f9 fee1 	bl	80001d0 <__aeabi_dsub>
 800640e:	4622      	mov	r2, r4
 8006410:	462b      	mov	r3, r5
 8006412:	f7fa f891 	bl	8000538 <__aeabi_dmul>
 8006416:	a376      	add	r3, pc, #472	; (adr r3, 80065f0 <__ieee754_asin+0x328>)
 8006418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800641c:	f7f9 feda 	bl	80001d4 <__adddf3>
 8006420:	4622      	mov	r2, r4
 8006422:	462b      	mov	r3, r5
 8006424:	f7fa f888 	bl	8000538 <__aeabi_dmul>
 8006428:	a373      	add	r3, pc, #460	; (adr r3, 80065f8 <__ieee754_asin+0x330>)
 800642a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800642e:	f7f9 fecf 	bl	80001d0 <__aeabi_dsub>
 8006432:	4622      	mov	r2, r4
 8006434:	462b      	mov	r3, r5
 8006436:	f7fa f87f 	bl	8000538 <__aeabi_dmul>
 800643a:	2200      	movs	r2, #0
 800643c:	4b72      	ldr	r3, [pc, #456]	; (8006608 <__ieee754_asin+0x340>)
 800643e:	f7f9 fec9 	bl	80001d4 <__adddf3>
 8006442:	ec45 4b10 	vmov	d0, r4, r5
 8006446:	460b      	mov	r3, r1
 8006448:	4602      	mov	r2, r0
 800644a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800644e:	f000 fa21 	bl	8006894 <__ieee754_sqrt>
 8006452:	496f      	ldr	r1, [pc, #444]	; (8006610 <__ieee754_asin+0x348>)
 8006454:	458b      	cmp	fp, r1
 8006456:	ec57 6b10 	vmov	r6, r7, d0
 800645a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800645e:	f340 80d9 	ble.w	8006614 <__ieee754_asin+0x34c>
 8006462:	4640      	mov	r0, r8
 8006464:	4649      	mov	r1, r9
 8006466:	f7fa f991 	bl	800078c <__aeabi_ddiv>
 800646a:	4632      	mov	r2, r6
 800646c:	463b      	mov	r3, r7
 800646e:	f7fa f863 	bl	8000538 <__aeabi_dmul>
 8006472:	4632      	mov	r2, r6
 8006474:	463b      	mov	r3, r7
 8006476:	f7f9 fead 	bl	80001d4 <__adddf3>
 800647a:	4602      	mov	r2, r0
 800647c:	460b      	mov	r3, r1
 800647e:	f7f9 fea9 	bl	80001d4 <__adddf3>
 8006482:	a347      	add	r3, pc, #284	; (adr r3, 80065a0 <__ieee754_asin+0x2d8>)
 8006484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006488:	f7f9 fea2 	bl	80001d0 <__aeabi_dsub>
 800648c:	4602      	mov	r2, r0
 800648e:	460b      	mov	r3, r1
 8006490:	a141      	add	r1, pc, #260	; (adr r1, 8006598 <__ieee754_asin+0x2d0>)
 8006492:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006496:	f7f9 fe9b 	bl	80001d0 <__aeabi_dsub>
 800649a:	9b01      	ldr	r3, [sp, #4]
 800649c:	2b00      	cmp	r3, #0
 800649e:	bfdc      	itt	le
 80064a0:	4602      	movle	r2, r0
 80064a2:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 80064a6:	4604      	mov	r4, r0
 80064a8:	460d      	mov	r5, r1
 80064aa:	bfdc      	itt	le
 80064ac:	4614      	movle	r4, r2
 80064ae:	461d      	movle	r5, r3
 80064b0:	e743      	b.n	800633a <__ieee754_asin+0x72>
 80064b2:	ee10 2a10 	vmov	r2, s0
 80064b6:	ee10 0a10 	vmov	r0, s0
 80064ba:	462b      	mov	r3, r5
 80064bc:	4629      	mov	r1, r5
 80064be:	f7fa f83b 	bl	8000538 <__aeabi_dmul>
 80064c2:	a33b      	add	r3, pc, #236	; (adr r3, 80065b0 <__ieee754_asin+0x2e8>)
 80064c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c8:	4606      	mov	r6, r0
 80064ca:	460f      	mov	r7, r1
 80064cc:	f7fa f834 	bl	8000538 <__aeabi_dmul>
 80064d0:	a339      	add	r3, pc, #228	; (adr r3, 80065b8 <__ieee754_asin+0x2f0>)
 80064d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d6:	f7f9 fe7d 	bl	80001d4 <__adddf3>
 80064da:	4632      	mov	r2, r6
 80064dc:	463b      	mov	r3, r7
 80064de:	f7fa f82b 	bl	8000538 <__aeabi_dmul>
 80064e2:	a337      	add	r3, pc, #220	; (adr r3, 80065c0 <__ieee754_asin+0x2f8>)
 80064e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e8:	f7f9 fe72 	bl	80001d0 <__aeabi_dsub>
 80064ec:	4632      	mov	r2, r6
 80064ee:	463b      	mov	r3, r7
 80064f0:	f7fa f822 	bl	8000538 <__aeabi_dmul>
 80064f4:	a334      	add	r3, pc, #208	; (adr r3, 80065c8 <__ieee754_asin+0x300>)
 80064f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064fa:	f7f9 fe6b 	bl	80001d4 <__adddf3>
 80064fe:	4632      	mov	r2, r6
 8006500:	463b      	mov	r3, r7
 8006502:	f7fa f819 	bl	8000538 <__aeabi_dmul>
 8006506:	a332      	add	r3, pc, #200	; (adr r3, 80065d0 <__ieee754_asin+0x308>)
 8006508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800650c:	f7f9 fe60 	bl	80001d0 <__aeabi_dsub>
 8006510:	4632      	mov	r2, r6
 8006512:	463b      	mov	r3, r7
 8006514:	f7fa f810 	bl	8000538 <__aeabi_dmul>
 8006518:	a32f      	add	r3, pc, #188	; (adr r3, 80065d8 <__ieee754_asin+0x310>)
 800651a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800651e:	f7f9 fe59 	bl	80001d4 <__adddf3>
 8006522:	4632      	mov	r2, r6
 8006524:	463b      	mov	r3, r7
 8006526:	f7fa f807 	bl	8000538 <__aeabi_dmul>
 800652a:	a32d      	add	r3, pc, #180	; (adr r3, 80065e0 <__ieee754_asin+0x318>)
 800652c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006530:	4680      	mov	r8, r0
 8006532:	4689      	mov	r9, r1
 8006534:	4630      	mov	r0, r6
 8006536:	4639      	mov	r1, r7
 8006538:	f7f9 fffe 	bl	8000538 <__aeabi_dmul>
 800653c:	a32a      	add	r3, pc, #168	; (adr r3, 80065e8 <__ieee754_asin+0x320>)
 800653e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006542:	f7f9 fe45 	bl	80001d0 <__aeabi_dsub>
 8006546:	4632      	mov	r2, r6
 8006548:	463b      	mov	r3, r7
 800654a:	f7f9 fff5 	bl	8000538 <__aeabi_dmul>
 800654e:	a328      	add	r3, pc, #160	; (adr r3, 80065f0 <__ieee754_asin+0x328>)
 8006550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006554:	f7f9 fe3e 	bl	80001d4 <__adddf3>
 8006558:	4632      	mov	r2, r6
 800655a:	463b      	mov	r3, r7
 800655c:	f7f9 ffec 	bl	8000538 <__aeabi_dmul>
 8006560:	a325      	add	r3, pc, #148	; (adr r3, 80065f8 <__ieee754_asin+0x330>)
 8006562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006566:	f7f9 fe33 	bl	80001d0 <__aeabi_dsub>
 800656a:	4632      	mov	r2, r6
 800656c:	463b      	mov	r3, r7
 800656e:	f7f9 ffe3 	bl	8000538 <__aeabi_dmul>
 8006572:	2200      	movs	r2, #0
 8006574:	4b24      	ldr	r3, [pc, #144]	; (8006608 <__ieee754_asin+0x340>)
 8006576:	f7f9 fe2d 	bl	80001d4 <__adddf3>
 800657a:	4602      	mov	r2, r0
 800657c:	460b      	mov	r3, r1
 800657e:	4640      	mov	r0, r8
 8006580:	4649      	mov	r1, r9
 8006582:	f7fa f903 	bl	800078c <__aeabi_ddiv>
 8006586:	4622      	mov	r2, r4
 8006588:	462b      	mov	r3, r5
 800658a:	f7f9 ffd5 	bl	8000538 <__aeabi_dmul>
 800658e:	4602      	mov	r2, r0
 8006590:	460b      	mov	r3, r1
 8006592:	4620      	mov	r0, r4
 8006594:	4629      	mov	r1, r5
 8006596:	e6c0      	b.n	800631a <__ieee754_asin+0x52>
 8006598:	54442d18 	.word	0x54442d18
 800659c:	3ff921fb 	.word	0x3ff921fb
 80065a0:	33145c07 	.word	0x33145c07
 80065a4:	3c91a626 	.word	0x3c91a626
 80065a8:	8800759c 	.word	0x8800759c
 80065ac:	7e37e43c 	.word	0x7e37e43c
 80065b0:	0dfdf709 	.word	0x0dfdf709
 80065b4:	3f023de1 	.word	0x3f023de1
 80065b8:	7501b288 	.word	0x7501b288
 80065bc:	3f49efe0 	.word	0x3f49efe0
 80065c0:	b5688f3b 	.word	0xb5688f3b
 80065c4:	3fa48228 	.word	0x3fa48228
 80065c8:	0e884455 	.word	0x0e884455
 80065cc:	3fc9c155 	.word	0x3fc9c155
 80065d0:	03eb6f7d 	.word	0x03eb6f7d
 80065d4:	3fd4d612 	.word	0x3fd4d612
 80065d8:	55555555 	.word	0x55555555
 80065dc:	3fc55555 	.word	0x3fc55555
 80065e0:	b12e9282 	.word	0xb12e9282
 80065e4:	3fb3b8c5 	.word	0x3fb3b8c5
 80065e8:	1b8d0159 	.word	0x1b8d0159
 80065ec:	3fe6066c 	.word	0x3fe6066c
 80065f0:	9c598ac8 	.word	0x9c598ac8
 80065f4:	40002ae5 	.word	0x40002ae5
 80065f8:	1c8a2d4b 	.word	0x1c8a2d4b
 80065fc:	40033a27 	.word	0x40033a27
 8006600:	3fefffff 	.word	0x3fefffff
 8006604:	3fdfffff 	.word	0x3fdfffff
 8006608:	3ff00000 	.word	0x3ff00000
 800660c:	3fe00000 	.word	0x3fe00000
 8006610:	3fef3332 	.word	0x3fef3332
 8006614:	4640      	mov	r0, r8
 8006616:	4649      	mov	r1, r9
 8006618:	f7fa f8b8 	bl	800078c <__aeabi_ddiv>
 800661c:	4632      	mov	r2, r6
 800661e:	4680      	mov	r8, r0
 8006620:	4689      	mov	r9, r1
 8006622:	463b      	mov	r3, r7
 8006624:	4630      	mov	r0, r6
 8006626:	4639      	mov	r1, r7
 8006628:	f7f9 fdd4 	bl	80001d4 <__adddf3>
 800662c:	4602      	mov	r2, r0
 800662e:	460b      	mov	r3, r1
 8006630:	4640      	mov	r0, r8
 8006632:	4649      	mov	r1, r9
 8006634:	f7f9 ff80 	bl	8000538 <__aeabi_dmul>
 8006638:	f04f 0a00 	mov.w	sl, #0
 800663c:	4680      	mov	r8, r0
 800663e:	4689      	mov	r9, r1
 8006640:	4652      	mov	r2, sl
 8006642:	463b      	mov	r3, r7
 8006644:	4650      	mov	r0, sl
 8006646:	4639      	mov	r1, r7
 8006648:	f7f9 ff76 	bl	8000538 <__aeabi_dmul>
 800664c:	4602      	mov	r2, r0
 800664e:	460b      	mov	r3, r1
 8006650:	4620      	mov	r0, r4
 8006652:	4629      	mov	r1, r5
 8006654:	f7f9 fdbc 	bl	80001d0 <__aeabi_dsub>
 8006658:	4652      	mov	r2, sl
 800665a:	4604      	mov	r4, r0
 800665c:	460d      	mov	r5, r1
 800665e:	463b      	mov	r3, r7
 8006660:	4630      	mov	r0, r6
 8006662:	4639      	mov	r1, r7
 8006664:	f7f9 fdb6 	bl	80001d4 <__adddf3>
 8006668:	4602      	mov	r2, r0
 800666a:	460b      	mov	r3, r1
 800666c:	4620      	mov	r0, r4
 800666e:	4629      	mov	r1, r5
 8006670:	f7fa f88c 	bl	800078c <__aeabi_ddiv>
 8006674:	4602      	mov	r2, r0
 8006676:	460b      	mov	r3, r1
 8006678:	f7f9 fdac 	bl	80001d4 <__adddf3>
 800667c:	4602      	mov	r2, r0
 800667e:	460b      	mov	r3, r1
 8006680:	a113      	add	r1, pc, #76	; (adr r1, 80066d0 <__ieee754_asin+0x408>)
 8006682:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006686:	f7f9 fda3 	bl	80001d0 <__aeabi_dsub>
 800668a:	4602      	mov	r2, r0
 800668c:	460b      	mov	r3, r1
 800668e:	4640      	mov	r0, r8
 8006690:	4649      	mov	r1, r9
 8006692:	f7f9 fd9d 	bl	80001d0 <__aeabi_dsub>
 8006696:	4652      	mov	r2, sl
 8006698:	4604      	mov	r4, r0
 800669a:	460d      	mov	r5, r1
 800669c:	463b      	mov	r3, r7
 800669e:	4650      	mov	r0, sl
 80066a0:	4639      	mov	r1, r7
 80066a2:	f7f9 fd97 	bl	80001d4 <__adddf3>
 80066a6:	4602      	mov	r2, r0
 80066a8:	460b      	mov	r3, r1
 80066aa:	a10b      	add	r1, pc, #44	; (adr r1, 80066d8 <__ieee754_asin+0x410>)
 80066ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80066b0:	f7f9 fd8e 	bl	80001d0 <__aeabi_dsub>
 80066b4:	4602      	mov	r2, r0
 80066b6:	460b      	mov	r3, r1
 80066b8:	4620      	mov	r0, r4
 80066ba:	4629      	mov	r1, r5
 80066bc:	f7f9 fd88 	bl	80001d0 <__aeabi_dsub>
 80066c0:	4602      	mov	r2, r0
 80066c2:	460b      	mov	r3, r1
 80066c4:	a104      	add	r1, pc, #16	; (adr r1, 80066d8 <__ieee754_asin+0x410>)
 80066c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80066ca:	e6e4      	b.n	8006496 <__ieee754_asin+0x1ce>
 80066cc:	f3af 8000 	nop.w
 80066d0:	33145c07 	.word	0x33145c07
 80066d4:	3c91a626 	.word	0x3c91a626
 80066d8:	54442d18 	.word	0x54442d18
 80066dc:	3fe921fb 	.word	0x3fe921fb

080066e0 <__ieee754_atan2>:
 80066e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066e4:	ec57 6b11 	vmov	r6, r7, d1
 80066e8:	4273      	negs	r3, r6
 80066ea:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80066ee:	4333      	orrs	r3, r6
 80066f0:	f8df c19c 	ldr.w	ip, [pc, #412]	; 8006890 <__ieee754_atan2+0x1b0>
 80066f4:	ec51 0b10 	vmov	r0, r1, d0
 80066f8:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80066fc:	4563      	cmp	r3, ip
 80066fe:	ee11 8a10 	vmov	r8, s2
 8006702:	ee10 9a10 	vmov	r9, s0
 8006706:	468e      	mov	lr, r1
 8006708:	d807      	bhi.n	800671a <__ieee754_atan2+0x3a>
 800670a:	4244      	negs	r4, r0
 800670c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006710:	4304      	orrs	r4, r0
 8006712:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8006716:	4564      	cmp	r4, ip
 8006718:	d907      	bls.n	800672a <__ieee754_atan2+0x4a>
 800671a:	4632      	mov	r2, r6
 800671c:	463b      	mov	r3, r7
 800671e:	f7f9 fd59 	bl	80001d4 <__adddf3>
 8006722:	ec41 0b10 	vmov	d0, r0, r1
 8006726:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800672a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800672e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006732:	4334      	orrs	r4, r6
 8006734:	d103      	bne.n	800673e <__ieee754_atan2+0x5e>
 8006736:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800673a:	f000 b95d 	b.w	80069f8 <atan>
 800673e:	17bc      	asrs	r4, r7, #30
 8006740:	f004 0402 	and.w	r4, r4, #2
 8006744:	ea59 0903 	orrs.w	r9, r9, r3
 8006748:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800674c:	d107      	bne.n	800675e <__ieee754_atan2+0x7e>
 800674e:	2c02      	cmp	r4, #2
 8006750:	d030      	beq.n	80067b4 <__ieee754_atan2+0xd4>
 8006752:	2c03      	cmp	r4, #3
 8006754:	d1e5      	bne.n	8006722 <__ieee754_atan2+0x42>
 8006756:	a13c      	add	r1, pc, #240	; (adr r1, 8006848 <__ieee754_atan2+0x168>)
 8006758:	e9d1 0100 	ldrd	r0, r1, [r1]
 800675c:	e7e1      	b.n	8006722 <__ieee754_atan2+0x42>
 800675e:	ea58 0802 	orrs.w	r8, r8, r2
 8006762:	d106      	bne.n	8006772 <__ieee754_atan2+0x92>
 8006764:	f1be 0f00 	cmp.w	lr, #0
 8006768:	da6a      	bge.n	8006840 <__ieee754_atan2+0x160>
 800676a:	a139      	add	r1, pc, #228	; (adr r1, 8006850 <__ieee754_atan2+0x170>)
 800676c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006770:	e7d7      	b.n	8006722 <__ieee754_atan2+0x42>
 8006772:	4562      	cmp	r2, ip
 8006774:	d122      	bne.n	80067bc <__ieee754_atan2+0xdc>
 8006776:	4293      	cmp	r3, r2
 8006778:	d111      	bne.n	800679e <__ieee754_atan2+0xbe>
 800677a:	2c02      	cmp	r4, #2
 800677c:	d007      	beq.n	800678e <__ieee754_atan2+0xae>
 800677e:	2c03      	cmp	r4, #3
 8006780:	d009      	beq.n	8006796 <__ieee754_atan2+0xb6>
 8006782:	2c01      	cmp	r4, #1
 8006784:	d156      	bne.n	8006834 <__ieee754_atan2+0x154>
 8006786:	a134      	add	r1, pc, #208	; (adr r1, 8006858 <__ieee754_atan2+0x178>)
 8006788:	e9d1 0100 	ldrd	r0, r1, [r1]
 800678c:	e7c9      	b.n	8006722 <__ieee754_atan2+0x42>
 800678e:	a134      	add	r1, pc, #208	; (adr r1, 8006860 <__ieee754_atan2+0x180>)
 8006790:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006794:	e7c5      	b.n	8006722 <__ieee754_atan2+0x42>
 8006796:	a134      	add	r1, pc, #208	; (adr r1, 8006868 <__ieee754_atan2+0x188>)
 8006798:	e9d1 0100 	ldrd	r0, r1, [r1]
 800679c:	e7c1      	b.n	8006722 <__ieee754_atan2+0x42>
 800679e:	2c02      	cmp	r4, #2
 80067a0:	d008      	beq.n	80067b4 <__ieee754_atan2+0xd4>
 80067a2:	2c03      	cmp	r4, #3
 80067a4:	d0d7      	beq.n	8006756 <__ieee754_atan2+0x76>
 80067a6:	2c01      	cmp	r4, #1
 80067a8:	f04f 0000 	mov.w	r0, #0
 80067ac:	d146      	bne.n	800683c <__ieee754_atan2+0x15c>
 80067ae:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80067b2:	e7b6      	b.n	8006722 <__ieee754_atan2+0x42>
 80067b4:	a12e      	add	r1, pc, #184	; (adr r1, 8006870 <__ieee754_atan2+0x190>)
 80067b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80067ba:	e7b2      	b.n	8006722 <__ieee754_atan2+0x42>
 80067bc:	4563      	cmp	r3, ip
 80067be:	d0d1      	beq.n	8006764 <__ieee754_atan2+0x84>
 80067c0:	1a9b      	subs	r3, r3, r2
 80067c2:	151b      	asrs	r3, r3, #20
 80067c4:	2b3c      	cmp	r3, #60	; 0x3c
 80067c6:	dc1e      	bgt.n	8006806 <__ieee754_atan2+0x126>
 80067c8:	2f00      	cmp	r7, #0
 80067ca:	da01      	bge.n	80067d0 <__ieee754_atan2+0xf0>
 80067cc:	333c      	adds	r3, #60	; 0x3c
 80067ce:	db1e      	blt.n	800680e <__ieee754_atan2+0x12e>
 80067d0:	4632      	mov	r2, r6
 80067d2:	463b      	mov	r3, r7
 80067d4:	f7f9 ffda 	bl	800078c <__aeabi_ddiv>
 80067d8:	ec41 0b10 	vmov	d0, r0, r1
 80067dc:	f000 fab4 	bl	8006d48 <fabs>
 80067e0:	f000 f90a 	bl	80069f8 <atan>
 80067e4:	ec51 0b10 	vmov	r0, r1, d0
 80067e8:	2c01      	cmp	r4, #1
 80067ea:	d013      	beq.n	8006814 <__ieee754_atan2+0x134>
 80067ec:	2c02      	cmp	r4, #2
 80067ee:	d014      	beq.n	800681a <__ieee754_atan2+0x13a>
 80067f0:	2c00      	cmp	r4, #0
 80067f2:	d096      	beq.n	8006722 <__ieee754_atan2+0x42>
 80067f4:	a320      	add	r3, pc, #128	; (adr r3, 8006878 <__ieee754_atan2+0x198>)
 80067f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067fa:	f7f9 fce9 	bl	80001d0 <__aeabi_dsub>
 80067fe:	a31c      	add	r3, pc, #112	; (adr r3, 8006870 <__ieee754_atan2+0x190>)
 8006800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006804:	e013      	b.n	800682e <__ieee754_atan2+0x14e>
 8006806:	a11e      	add	r1, pc, #120	; (adr r1, 8006880 <__ieee754_atan2+0x1a0>)
 8006808:	e9d1 0100 	ldrd	r0, r1, [r1]
 800680c:	e7ec      	b.n	80067e8 <__ieee754_atan2+0x108>
 800680e:	2000      	movs	r0, #0
 8006810:	2100      	movs	r1, #0
 8006812:	e7e9      	b.n	80067e8 <__ieee754_atan2+0x108>
 8006814:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8006818:	e783      	b.n	8006722 <__ieee754_atan2+0x42>
 800681a:	a317      	add	r3, pc, #92	; (adr r3, 8006878 <__ieee754_atan2+0x198>)
 800681c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006820:	f7f9 fcd6 	bl	80001d0 <__aeabi_dsub>
 8006824:	4602      	mov	r2, r0
 8006826:	460b      	mov	r3, r1
 8006828:	a111      	add	r1, pc, #68	; (adr r1, 8006870 <__ieee754_atan2+0x190>)
 800682a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800682e:	f7f9 fccf 	bl	80001d0 <__aeabi_dsub>
 8006832:	e776      	b.n	8006722 <__ieee754_atan2+0x42>
 8006834:	a114      	add	r1, pc, #80	; (adr r1, 8006888 <__ieee754_atan2+0x1a8>)
 8006836:	e9d1 0100 	ldrd	r0, r1, [r1]
 800683a:	e772      	b.n	8006722 <__ieee754_atan2+0x42>
 800683c:	2100      	movs	r1, #0
 800683e:	e770      	b.n	8006722 <__ieee754_atan2+0x42>
 8006840:	a10f      	add	r1, pc, #60	; (adr r1, 8006880 <__ieee754_atan2+0x1a0>)
 8006842:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006846:	e76c      	b.n	8006722 <__ieee754_atan2+0x42>
 8006848:	54442d18 	.word	0x54442d18
 800684c:	c00921fb 	.word	0xc00921fb
 8006850:	54442d18 	.word	0x54442d18
 8006854:	bff921fb 	.word	0xbff921fb
 8006858:	54442d18 	.word	0x54442d18
 800685c:	bfe921fb 	.word	0xbfe921fb
 8006860:	7f3321d2 	.word	0x7f3321d2
 8006864:	4002d97c 	.word	0x4002d97c
 8006868:	7f3321d2 	.word	0x7f3321d2
 800686c:	c002d97c 	.word	0xc002d97c
 8006870:	54442d18 	.word	0x54442d18
 8006874:	400921fb 	.word	0x400921fb
 8006878:	33145c07 	.word	0x33145c07
 800687c:	3ca1a626 	.word	0x3ca1a626
 8006880:	54442d18 	.word	0x54442d18
 8006884:	3ff921fb 	.word	0x3ff921fb
 8006888:	54442d18 	.word	0x54442d18
 800688c:	3fe921fb 	.word	0x3fe921fb
 8006890:	7ff00000 	.word	0x7ff00000

08006894 <__ieee754_sqrt>:
 8006894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006898:	ec55 4b10 	vmov	r4, r5, d0
 800689c:	4e54      	ldr	r6, [pc, #336]	; (80069f0 <__ieee754_sqrt+0x15c>)
 800689e:	43ae      	bics	r6, r5
 80068a0:	ee10 0a10 	vmov	r0, s0
 80068a4:	462b      	mov	r3, r5
 80068a6:	462a      	mov	r2, r5
 80068a8:	4621      	mov	r1, r4
 80068aa:	d113      	bne.n	80068d4 <__ieee754_sqrt+0x40>
 80068ac:	ee10 2a10 	vmov	r2, s0
 80068b0:	462b      	mov	r3, r5
 80068b2:	ee10 0a10 	vmov	r0, s0
 80068b6:	4629      	mov	r1, r5
 80068b8:	f7f9 fe3e 	bl	8000538 <__aeabi_dmul>
 80068bc:	4602      	mov	r2, r0
 80068be:	460b      	mov	r3, r1
 80068c0:	4620      	mov	r0, r4
 80068c2:	4629      	mov	r1, r5
 80068c4:	f7f9 fc86 	bl	80001d4 <__adddf3>
 80068c8:	4604      	mov	r4, r0
 80068ca:	460d      	mov	r5, r1
 80068cc:	ec45 4b10 	vmov	d0, r4, r5
 80068d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068d4:	2d00      	cmp	r5, #0
 80068d6:	dc10      	bgt.n	80068fa <__ieee754_sqrt+0x66>
 80068d8:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80068dc:	4330      	orrs	r0, r6
 80068de:	d0f5      	beq.n	80068cc <__ieee754_sqrt+0x38>
 80068e0:	b15d      	cbz	r5, 80068fa <__ieee754_sqrt+0x66>
 80068e2:	ee10 2a10 	vmov	r2, s0
 80068e6:	462b      	mov	r3, r5
 80068e8:	4620      	mov	r0, r4
 80068ea:	4629      	mov	r1, r5
 80068ec:	f7f9 fc70 	bl	80001d0 <__aeabi_dsub>
 80068f0:	4602      	mov	r2, r0
 80068f2:	460b      	mov	r3, r1
 80068f4:	f7f9 ff4a 	bl	800078c <__aeabi_ddiv>
 80068f8:	e7e6      	b.n	80068c8 <__ieee754_sqrt+0x34>
 80068fa:	151b      	asrs	r3, r3, #20
 80068fc:	d10c      	bne.n	8006918 <__ieee754_sqrt+0x84>
 80068fe:	2a00      	cmp	r2, #0
 8006900:	d06d      	beq.n	80069de <__ieee754_sqrt+0x14a>
 8006902:	2000      	movs	r0, #0
 8006904:	02d6      	lsls	r6, r2, #11
 8006906:	d56e      	bpl.n	80069e6 <__ieee754_sqrt+0x152>
 8006908:	1e44      	subs	r4, r0, #1
 800690a:	1b1b      	subs	r3, r3, r4
 800690c:	f1c0 0420 	rsb	r4, r0, #32
 8006910:	fa21 f404 	lsr.w	r4, r1, r4
 8006914:	4322      	orrs	r2, r4
 8006916:	4081      	lsls	r1, r0
 8006918:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800691c:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8006920:	07dd      	lsls	r5, r3, #31
 8006922:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006926:	bf42      	ittt	mi
 8006928:	0052      	lslmi	r2, r2, #1
 800692a:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 800692e:	0049      	lslmi	r1, r1, #1
 8006930:	1058      	asrs	r0, r3, #1
 8006932:	2500      	movs	r5, #0
 8006934:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 8006938:	441a      	add	r2, r3
 800693a:	0049      	lsls	r1, r1, #1
 800693c:	2316      	movs	r3, #22
 800693e:	462c      	mov	r4, r5
 8006940:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8006944:	19a7      	adds	r7, r4, r6
 8006946:	4297      	cmp	r7, r2
 8006948:	bfde      	ittt	le
 800694a:	1bd2      	suble	r2, r2, r7
 800694c:	19bc      	addle	r4, r7, r6
 800694e:	19ad      	addle	r5, r5, r6
 8006950:	0052      	lsls	r2, r2, #1
 8006952:	3b01      	subs	r3, #1
 8006954:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8006958:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800695c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006960:	d1f0      	bne.n	8006944 <__ieee754_sqrt+0xb0>
 8006962:	f04f 0e20 	mov.w	lr, #32
 8006966:	469c      	mov	ip, r3
 8006968:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800696c:	42a2      	cmp	r2, r4
 800696e:	eb06 070c 	add.w	r7, r6, ip
 8006972:	dc02      	bgt.n	800697a <__ieee754_sqrt+0xe6>
 8006974:	d112      	bne.n	800699c <__ieee754_sqrt+0x108>
 8006976:	428f      	cmp	r7, r1
 8006978:	d810      	bhi.n	800699c <__ieee754_sqrt+0x108>
 800697a:	2f00      	cmp	r7, #0
 800697c:	eb07 0c06 	add.w	ip, r7, r6
 8006980:	da34      	bge.n	80069ec <__ieee754_sqrt+0x158>
 8006982:	f1bc 0f00 	cmp.w	ip, #0
 8006986:	db31      	blt.n	80069ec <__ieee754_sqrt+0x158>
 8006988:	f104 0801 	add.w	r8, r4, #1
 800698c:	1b12      	subs	r2, r2, r4
 800698e:	428f      	cmp	r7, r1
 8006990:	bf88      	it	hi
 8006992:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8006996:	1bc9      	subs	r1, r1, r7
 8006998:	4433      	add	r3, r6
 800699a:	4644      	mov	r4, r8
 800699c:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 80069a0:	f1be 0e01 	subs.w	lr, lr, #1
 80069a4:	443a      	add	r2, r7
 80069a6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80069aa:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80069ae:	d1dd      	bne.n	800696c <__ieee754_sqrt+0xd8>
 80069b0:	430a      	orrs	r2, r1
 80069b2:	d006      	beq.n	80069c2 <__ieee754_sqrt+0x12e>
 80069b4:	1c5c      	adds	r4, r3, #1
 80069b6:	bf13      	iteet	ne
 80069b8:	3301      	addne	r3, #1
 80069ba:	3501      	addeq	r5, #1
 80069bc:	4673      	moveq	r3, lr
 80069be:	f023 0301 	bicne.w	r3, r3, #1
 80069c2:	106a      	asrs	r2, r5, #1
 80069c4:	085b      	lsrs	r3, r3, #1
 80069c6:	07e9      	lsls	r1, r5, #31
 80069c8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80069cc:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80069d0:	bf48      	it	mi
 80069d2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80069d6:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80069da:	461c      	mov	r4, r3
 80069dc:	e776      	b.n	80068cc <__ieee754_sqrt+0x38>
 80069de:	0aca      	lsrs	r2, r1, #11
 80069e0:	3b15      	subs	r3, #21
 80069e2:	0549      	lsls	r1, r1, #21
 80069e4:	e78b      	b.n	80068fe <__ieee754_sqrt+0x6a>
 80069e6:	0052      	lsls	r2, r2, #1
 80069e8:	3001      	adds	r0, #1
 80069ea:	e78b      	b.n	8006904 <__ieee754_sqrt+0x70>
 80069ec:	46a0      	mov	r8, r4
 80069ee:	e7cd      	b.n	800698c <__ieee754_sqrt+0xf8>
 80069f0:	7ff00000 	.word	0x7ff00000
 80069f4:	00000000 	.word	0x00000000

080069f8 <atan>:
 80069f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069fc:	ec55 4b10 	vmov	r4, r5, d0
 8006a00:	4bc7      	ldr	r3, [pc, #796]	; (8006d20 <atan+0x328>)
 8006a02:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006a06:	429e      	cmp	r6, r3
 8006a08:	46ab      	mov	fp, r5
 8006a0a:	dd18      	ble.n	8006a3e <atan+0x46>
 8006a0c:	4ac5      	ldr	r2, [pc, #788]	; (8006d24 <atan+0x32c>)
 8006a0e:	4296      	cmp	r6, r2
 8006a10:	dc01      	bgt.n	8006a16 <atan+0x1e>
 8006a12:	d109      	bne.n	8006a28 <atan+0x30>
 8006a14:	b144      	cbz	r4, 8006a28 <atan+0x30>
 8006a16:	4622      	mov	r2, r4
 8006a18:	462b      	mov	r3, r5
 8006a1a:	4620      	mov	r0, r4
 8006a1c:	4629      	mov	r1, r5
 8006a1e:	f7f9 fbd9 	bl	80001d4 <__adddf3>
 8006a22:	4604      	mov	r4, r0
 8006a24:	460d      	mov	r5, r1
 8006a26:	e006      	b.n	8006a36 <atan+0x3e>
 8006a28:	f1bb 0f00 	cmp.w	fp, #0
 8006a2c:	f300 813a 	bgt.w	8006ca4 <atan+0x2ac>
 8006a30:	a59f      	add	r5, pc, #636	; (adr r5, 8006cb0 <atan+0x2b8>)
 8006a32:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006a36:	ec45 4b10 	vmov	d0, r4, r5
 8006a3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a3e:	4bba      	ldr	r3, [pc, #744]	; (8006d28 <atan+0x330>)
 8006a40:	429e      	cmp	r6, r3
 8006a42:	dc14      	bgt.n	8006a6e <atan+0x76>
 8006a44:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8006a48:	429e      	cmp	r6, r3
 8006a4a:	dc0d      	bgt.n	8006a68 <atan+0x70>
 8006a4c:	a39a      	add	r3, pc, #616	; (adr r3, 8006cb8 <atan+0x2c0>)
 8006a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a52:	ee10 0a10 	vmov	r0, s0
 8006a56:	4629      	mov	r1, r5
 8006a58:	f7f9 fbbc 	bl	80001d4 <__adddf3>
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	4bb3      	ldr	r3, [pc, #716]	; (8006d2c <atan+0x334>)
 8006a60:	f7f9 fffa 	bl	8000a58 <__aeabi_dcmpgt>
 8006a64:	2800      	cmp	r0, #0
 8006a66:	d1e6      	bne.n	8006a36 <atan+0x3e>
 8006a68:	f04f 3aff 	mov.w	sl, #4294967295
 8006a6c:	e02b      	b.n	8006ac6 <atan+0xce>
 8006a6e:	f000 f96b 	bl	8006d48 <fabs>
 8006a72:	4baf      	ldr	r3, [pc, #700]	; (8006d30 <atan+0x338>)
 8006a74:	429e      	cmp	r6, r3
 8006a76:	ec55 4b10 	vmov	r4, r5, d0
 8006a7a:	f300 80bf 	bgt.w	8006bfc <atan+0x204>
 8006a7e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8006a82:	429e      	cmp	r6, r3
 8006a84:	f300 80a0 	bgt.w	8006bc8 <atan+0x1d0>
 8006a88:	ee10 2a10 	vmov	r2, s0
 8006a8c:	ee10 0a10 	vmov	r0, s0
 8006a90:	462b      	mov	r3, r5
 8006a92:	4629      	mov	r1, r5
 8006a94:	f7f9 fb9e 	bl	80001d4 <__adddf3>
 8006a98:	2200      	movs	r2, #0
 8006a9a:	4ba4      	ldr	r3, [pc, #656]	; (8006d2c <atan+0x334>)
 8006a9c:	f7f9 fb98 	bl	80001d0 <__aeabi_dsub>
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	4606      	mov	r6, r0
 8006aa4:	460f      	mov	r7, r1
 8006aa6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006aaa:	4620      	mov	r0, r4
 8006aac:	4629      	mov	r1, r5
 8006aae:	f7f9 fb91 	bl	80001d4 <__adddf3>
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	460b      	mov	r3, r1
 8006ab6:	4630      	mov	r0, r6
 8006ab8:	4639      	mov	r1, r7
 8006aba:	f7f9 fe67 	bl	800078c <__aeabi_ddiv>
 8006abe:	f04f 0a00 	mov.w	sl, #0
 8006ac2:	4604      	mov	r4, r0
 8006ac4:	460d      	mov	r5, r1
 8006ac6:	4622      	mov	r2, r4
 8006ac8:	462b      	mov	r3, r5
 8006aca:	4620      	mov	r0, r4
 8006acc:	4629      	mov	r1, r5
 8006ace:	f7f9 fd33 	bl	8000538 <__aeabi_dmul>
 8006ad2:	4602      	mov	r2, r0
 8006ad4:	460b      	mov	r3, r1
 8006ad6:	4680      	mov	r8, r0
 8006ad8:	4689      	mov	r9, r1
 8006ada:	f7f9 fd2d 	bl	8000538 <__aeabi_dmul>
 8006ade:	a378      	add	r3, pc, #480	; (adr r3, 8006cc0 <atan+0x2c8>)
 8006ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae4:	4606      	mov	r6, r0
 8006ae6:	460f      	mov	r7, r1
 8006ae8:	f7f9 fd26 	bl	8000538 <__aeabi_dmul>
 8006aec:	a376      	add	r3, pc, #472	; (adr r3, 8006cc8 <atan+0x2d0>)
 8006aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af2:	f7f9 fb6f 	bl	80001d4 <__adddf3>
 8006af6:	4632      	mov	r2, r6
 8006af8:	463b      	mov	r3, r7
 8006afa:	f7f9 fd1d 	bl	8000538 <__aeabi_dmul>
 8006afe:	a374      	add	r3, pc, #464	; (adr r3, 8006cd0 <atan+0x2d8>)
 8006b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b04:	f7f9 fb66 	bl	80001d4 <__adddf3>
 8006b08:	4632      	mov	r2, r6
 8006b0a:	463b      	mov	r3, r7
 8006b0c:	f7f9 fd14 	bl	8000538 <__aeabi_dmul>
 8006b10:	a371      	add	r3, pc, #452	; (adr r3, 8006cd8 <atan+0x2e0>)
 8006b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b16:	f7f9 fb5d 	bl	80001d4 <__adddf3>
 8006b1a:	4632      	mov	r2, r6
 8006b1c:	463b      	mov	r3, r7
 8006b1e:	f7f9 fd0b 	bl	8000538 <__aeabi_dmul>
 8006b22:	a36f      	add	r3, pc, #444	; (adr r3, 8006ce0 <atan+0x2e8>)
 8006b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b28:	f7f9 fb54 	bl	80001d4 <__adddf3>
 8006b2c:	4632      	mov	r2, r6
 8006b2e:	463b      	mov	r3, r7
 8006b30:	f7f9 fd02 	bl	8000538 <__aeabi_dmul>
 8006b34:	a36c      	add	r3, pc, #432	; (adr r3, 8006ce8 <atan+0x2f0>)
 8006b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b3a:	f7f9 fb4b 	bl	80001d4 <__adddf3>
 8006b3e:	4642      	mov	r2, r8
 8006b40:	464b      	mov	r3, r9
 8006b42:	f7f9 fcf9 	bl	8000538 <__aeabi_dmul>
 8006b46:	a36a      	add	r3, pc, #424	; (adr r3, 8006cf0 <atan+0x2f8>)
 8006b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b4c:	4680      	mov	r8, r0
 8006b4e:	4689      	mov	r9, r1
 8006b50:	4630      	mov	r0, r6
 8006b52:	4639      	mov	r1, r7
 8006b54:	f7f9 fcf0 	bl	8000538 <__aeabi_dmul>
 8006b58:	a367      	add	r3, pc, #412	; (adr r3, 8006cf8 <atan+0x300>)
 8006b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b5e:	f7f9 fb37 	bl	80001d0 <__aeabi_dsub>
 8006b62:	4632      	mov	r2, r6
 8006b64:	463b      	mov	r3, r7
 8006b66:	f7f9 fce7 	bl	8000538 <__aeabi_dmul>
 8006b6a:	a365      	add	r3, pc, #404	; (adr r3, 8006d00 <atan+0x308>)
 8006b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b70:	f7f9 fb2e 	bl	80001d0 <__aeabi_dsub>
 8006b74:	4632      	mov	r2, r6
 8006b76:	463b      	mov	r3, r7
 8006b78:	f7f9 fcde 	bl	8000538 <__aeabi_dmul>
 8006b7c:	a362      	add	r3, pc, #392	; (adr r3, 8006d08 <atan+0x310>)
 8006b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b82:	f7f9 fb25 	bl	80001d0 <__aeabi_dsub>
 8006b86:	4632      	mov	r2, r6
 8006b88:	463b      	mov	r3, r7
 8006b8a:	f7f9 fcd5 	bl	8000538 <__aeabi_dmul>
 8006b8e:	a360      	add	r3, pc, #384	; (adr r3, 8006d10 <atan+0x318>)
 8006b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b94:	f7f9 fb1c 	bl	80001d0 <__aeabi_dsub>
 8006b98:	4632      	mov	r2, r6
 8006b9a:	463b      	mov	r3, r7
 8006b9c:	f7f9 fccc 	bl	8000538 <__aeabi_dmul>
 8006ba0:	f1ba 3fff 	cmp.w	sl, #4294967295
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	460b      	mov	r3, r1
 8006ba8:	d155      	bne.n	8006c56 <atan+0x25e>
 8006baa:	4640      	mov	r0, r8
 8006bac:	4649      	mov	r1, r9
 8006bae:	f7f9 fb11 	bl	80001d4 <__adddf3>
 8006bb2:	4622      	mov	r2, r4
 8006bb4:	462b      	mov	r3, r5
 8006bb6:	f7f9 fcbf 	bl	8000538 <__aeabi_dmul>
 8006bba:	4602      	mov	r2, r0
 8006bbc:	460b      	mov	r3, r1
 8006bbe:	4620      	mov	r0, r4
 8006bc0:	4629      	mov	r1, r5
 8006bc2:	f7f9 fb05 	bl	80001d0 <__aeabi_dsub>
 8006bc6:	e72c      	b.n	8006a22 <atan+0x2a>
 8006bc8:	ee10 0a10 	vmov	r0, s0
 8006bcc:	2200      	movs	r2, #0
 8006bce:	4b57      	ldr	r3, [pc, #348]	; (8006d2c <atan+0x334>)
 8006bd0:	4629      	mov	r1, r5
 8006bd2:	f7f9 fafd 	bl	80001d0 <__aeabi_dsub>
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	4606      	mov	r6, r0
 8006bda:	460f      	mov	r7, r1
 8006bdc:	4b53      	ldr	r3, [pc, #332]	; (8006d2c <atan+0x334>)
 8006bde:	4620      	mov	r0, r4
 8006be0:	4629      	mov	r1, r5
 8006be2:	f7f9 faf7 	bl	80001d4 <__adddf3>
 8006be6:	4602      	mov	r2, r0
 8006be8:	460b      	mov	r3, r1
 8006bea:	4630      	mov	r0, r6
 8006bec:	4639      	mov	r1, r7
 8006bee:	f7f9 fdcd 	bl	800078c <__aeabi_ddiv>
 8006bf2:	f04f 0a01 	mov.w	sl, #1
 8006bf6:	4604      	mov	r4, r0
 8006bf8:	460d      	mov	r5, r1
 8006bfa:	e764      	b.n	8006ac6 <atan+0xce>
 8006bfc:	4b4d      	ldr	r3, [pc, #308]	; (8006d34 <atan+0x33c>)
 8006bfe:	429e      	cmp	r6, r3
 8006c00:	dc1d      	bgt.n	8006c3e <atan+0x246>
 8006c02:	ee10 0a10 	vmov	r0, s0
 8006c06:	2200      	movs	r2, #0
 8006c08:	4b4b      	ldr	r3, [pc, #300]	; (8006d38 <atan+0x340>)
 8006c0a:	4629      	mov	r1, r5
 8006c0c:	f7f9 fae0 	bl	80001d0 <__aeabi_dsub>
 8006c10:	2200      	movs	r2, #0
 8006c12:	4606      	mov	r6, r0
 8006c14:	460f      	mov	r7, r1
 8006c16:	4b48      	ldr	r3, [pc, #288]	; (8006d38 <atan+0x340>)
 8006c18:	4620      	mov	r0, r4
 8006c1a:	4629      	mov	r1, r5
 8006c1c:	f7f9 fc8c 	bl	8000538 <__aeabi_dmul>
 8006c20:	2200      	movs	r2, #0
 8006c22:	4b42      	ldr	r3, [pc, #264]	; (8006d2c <atan+0x334>)
 8006c24:	f7f9 fad6 	bl	80001d4 <__adddf3>
 8006c28:	4602      	mov	r2, r0
 8006c2a:	460b      	mov	r3, r1
 8006c2c:	4630      	mov	r0, r6
 8006c2e:	4639      	mov	r1, r7
 8006c30:	f7f9 fdac 	bl	800078c <__aeabi_ddiv>
 8006c34:	f04f 0a02 	mov.w	sl, #2
 8006c38:	4604      	mov	r4, r0
 8006c3a:	460d      	mov	r5, r1
 8006c3c:	e743      	b.n	8006ac6 <atan+0xce>
 8006c3e:	462b      	mov	r3, r5
 8006c40:	ee10 2a10 	vmov	r2, s0
 8006c44:	2000      	movs	r0, #0
 8006c46:	493d      	ldr	r1, [pc, #244]	; (8006d3c <atan+0x344>)
 8006c48:	f7f9 fda0 	bl	800078c <__aeabi_ddiv>
 8006c4c:	f04f 0a03 	mov.w	sl, #3
 8006c50:	4604      	mov	r4, r0
 8006c52:	460d      	mov	r5, r1
 8006c54:	e737      	b.n	8006ac6 <atan+0xce>
 8006c56:	4640      	mov	r0, r8
 8006c58:	4649      	mov	r1, r9
 8006c5a:	f7f9 fabb 	bl	80001d4 <__adddf3>
 8006c5e:	4622      	mov	r2, r4
 8006c60:	462b      	mov	r3, r5
 8006c62:	f7f9 fc69 	bl	8000538 <__aeabi_dmul>
 8006c66:	4e36      	ldr	r6, [pc, #216]	; (8006d40 <atan+0x348>)
 8006c68:	4b36      	ldr	r3, [pc, #216]	; (8006d44 <atan+0x34c>)
 8006c6a:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8006c6e:	4456      	add	r6, sl
 8006c70:	449a      	add	sl, r3
 8006c72:	e9da 2300 	ldrd	r2, r3, [sl]
 8006c76:	f7f9 faab 	bl	80001d0 <__aeabi_dsub>
 8006c7a:	4622      	mov	r2, r4
 8006c7c:	462b      	mov	r3, r5
 8006c7e:	f7f9 faa7 	bl	80001d0 <__aeabi_dsub>
 8006c82:	4602      	mov	r2, r0
 8006c84:	460b      	mov	r3, r1
 8006c86:	e9d6 0100 	ldrd	r0, r1, [r6]
 8006c8a:	f7f9 faa1 	bl	80001d0 <__aeabi_dsub>
 8006c8e:	f1bb 0f00 	cmp.w	fp, #0
 8006c92:	4604      	mov	r4, r0
 8006c94:	460d      	mov	r5, r1
 8006c96:	f6bf aece 	bge.w	8006a36 <atan+0x3e>
 8006c9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006c9e:	4604      	mov	r4, r0
 8006ca0:	461d      	mov	r5, r3
 8006ca2:	e6c8      	b.n	8006a36 <atan+0x3e>
 8006ca4:	a51c      	add	r5, pc, #112	; (adr r5, 8006d18 <atan+0x320>)
 8006ca6:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006caa:	e6c4      	b.n	8006a36 <atan+0x3e>
 8006cac:	f3af 8000 	nop.w
 8006cb0:	54442d18 	.word	0x54442d18
 8006cb4:	bff921fb 	.word	0xbff921fb
 8006cb8:	8800759c 	.word	0x8800759c
 8006cbc:	7e37e43c 	.word	0x7e37e43c
 8006cc0:	e322da11 	.word	0xe322da11
 8006cc4:	3f90ad3a 	.word	0x3f90ad3a
 8006cc8:	24760deb 	.word	0x24760deb
 8006ccc:	3fa97b4b 	.word	0x3fa97b4b
 8006cd0:	a0d03d51 	.word	0xa0d03d51
 8006cd4:	3fb10d66 	.word	0x3fb10d66
 8006cd8:	c54c206e 	.word	0xc54c206e
 8006cdc:	3fb745cd 	.word	0x3fb745cd
 8006ce0:	920083ff 	.word	0x920083ff
 8006ce4:	3fc24924 	.word	0x3fc24924
 8006ce8:	5555550d 	.word	0x5555550d
 8006cec:	3fd55555 	.word	0x3fd55555
 8006cf0:	2c6a6c2f 	.word	0x2c6a6c2f
 8006cf4:	bfa2b444 	.word	0xbfa2b444
 8006cf8:	52defd9a 	.word	0x52defd9a
 8006cfc:	3fadde2d 	.word	0x3fadde2d
 8006d00:	af749a6d 	.word	0xaf749a6d
 8006d04:	3fb3b0f2 	.word	0x3fb3b0f2
 8006d08:	fe231671 	.word	0xfe231671
 8006d0c:	3fbc71c6 	.word	0x3fbc71c6
 8006d10:	9998ebc4 	.word	0x9998ebc4
 8006d14:	3fc99999 	.word	0x3fc99999
 8006d18:	54442d18 	.word	0x54442d18
 8006d1c:	3ff921fb 	.word	0x3ff921fb
 8006d20:	440fffff 	.word	0x440fffff
 8006d24:	7ff00000 	.word	0x7ff00000
 8006d28:	3fdbffff 	.word	0x3fdbffff
 8006d2c:	3ff00000 	.word	0x3ff00000
 8006d30:	3ff2ffff 	.word	0x3ff2ffff
 8006d34:	40037fff 	.word	0x40037fff
 8006d38:	3ff80000 	.word	0x3ff80000
 8006d3c:	bff00000 	.word	0xbff00000
 8006d40:	08006df8 	.word	0x08006df8
 8006d44:	08006e18 	.word	0x08006e18

08006d48 <fabs>:
 8006d48:	ec53 2b10 	vmov	r2, r3, d0
 8006d4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d50:	ec43 2b10 	vmov	d0, r2, r3
 8006d54:	4770      	bx	lr

08006d56 <matherr>:
 8006d56:	2000      	movs	r0, #0
 8006d58:	4770      	bx	lr
 8006d5a:	0000      	movs	r0, r0
 8006d5c:	0000      	movs	r0, r0
	...

08006d60 <nan>:
 8006d60:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8006d68 <nan+0x8>
 8006d64:	4770      	bx	lr
 8006d66:	bf00      	nop
 8006d68:	00000000 	.word	0x00000000
 8006d6c:	7ff80000 	.word	0x7ff80000

08006d70 <__errno>:
 8006d70:	4b01      	ldr	r3, [pc, #4]	; (8006d78 <__errno+0x8>)
 8006d72:	6818      	ldr	r0, [r3, #0]
 8006d74:	4770      	bx	lr
 8006d76:	bf00      	nop
 8006d78:	20000020 	.word	0x20000020

08006d7c <_init>:
 8006d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d7e:	bf00      	nop
 8006d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d82:	bc08      	pop	{r3}
 8006d84:	469e      	mov	lr, r3
 8006d86:	4770      	bx	lr

08006d88 <_fini>:
 8006d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d8a:	bf00      	nop
 8006d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d8e:	bc08      	pop	{r3}
 8006d90:	469e      	mov	lr, r3
 8006d92:	4770      	bx	lr
