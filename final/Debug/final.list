
final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b94  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08006d20  08006d20  00016d20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006dc0  08006dc0  00016dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006dc8  08006dc8  00016dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006dcc  08006dcc  00016dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000084  20000000  08006dd0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020084  2**0
                  CONTENTS
  8 .bss          00000678  20000088  20000088  00020088  2**3
                  ALLOC
  9 ._user_heap_stack 00000600  20000700  20000700  00020088  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 11 .debug_info   00025880  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00004337  00000000  00000000  00045934  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000dd2b  00000000  00000000  00049c6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000dd0  00000000  00000000  00057998  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011b0  00000000  00000000  00058768  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000981c  00000000  00000000  00059918  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000053e6  00000000  00000000  00063134  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0006851a  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000304c  00000000  00000000  00068598  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000088 	.word	0x20000088
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006d04 	.word	0x08006d04

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000008c 	.word	0x2000008c
 80001c4:	08006d04 	.word	0x08006d04

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__gedf2>:
 800095c:	f04f 3cff 	mov.w	ip, #4294967295
 8000960:	e006      	b.n	8000970 <__cmpdf2+0x4>
 8000962:	bf00      	nop

08000964 <__ledf2>:
 8000964:	f04f 0c01 	mov.w	ip, #1
 8000968:	e002      	b.n	8000970 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__cmpdf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000986:	d01b      	beq.n	80009c0 <__cmpdf2+0x54>
 8000988:	b001      	add	sp, #4
 800098a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800098e:	bf0c      	ite	eq
 8000990:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000994:	ea91 0f03 	teqne	r1, r3
 8000998:	bf02      	ittt	eq
 800099a:	ea90 0f02 	teqeq	r0, r2
 800099e:	2000      	moveq	r0, #0
 80009a0:	4770      	bxeq	lr
 80009a2:	f110 0f00 	cmn.w	r0, #0
 80009a6:	ea91 0f03 	teq	r1, r3
 80009aa:	bf58      	it	pl
 80009ac:	4299      	cmppl	r1, r3
 80009ae:	bf08      	it	eq
 80009b0:	4290      	cmpeq	r0, r2
 80009b2:	bf2c      	ite	cs
 80009b4:	17d8      	asrcs	r0, r3, #31
 80009b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ba:	f040 0001 	orr.w	r0, r0, #1
 80009be:	4770      	bx	lr
 80009c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c8:	d102      	bne.n	80009d0 <__cmpdf2+0x64>
 80009ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ce:	d107      	bne.n	80009e0 <__cmpdf2+0x74>
 80009d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d1d6      	bne.n	8000988 <__cmpdf2+0x1c>
 80009da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009de:	d0d3      	beq.n	8000988 <__cmpdf2+0x1c>
 80009e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop

080009e8 <__aeabi_cdrcmple>:
 80009e8:	4684      	mov	ip, r0
 80009ea:	4610      	mov	r0, r2
 80009ec:	4662      	mov	r2, ip
 80009ee:	468c      	mov	ip, r1
 80009f0:	4619      	mov	r1, r3
 80009f2:	4663      	mov	r3, ip
 80009f4:	e000      	b.n	80009f8 <__aeabi_cdcmpeq>
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdcmpeq>:
 80009f8:	b501      	push	{r0, lr}
 80009fa:	f7ff ffb7 	bl	800096c <__cmpdf2>
 80009fe:	2800      	cmp	r0, #0
 8000a00:	bf48      	it	mi
 8000a02:	f110 0f00 	cmnmi.w	r0, #0
 8000a06:	bd01      	pop	{r0, pc}

08000a08 <__aeabi_dcmpeq>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff fff4 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a10:	bf0c      	ite	eq
 8000a12:	2001      	moveq	r0, #1
 8000a14:	2000      	movne	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <__aeabi_dcmplt>:
 8000a1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a20:	f7ff ffea 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a24:	bf34      	ite	cc
 8000a26:	2001      	movcc	r0, #1
 8000a28:	2000      	movcs	r0, #0
 8000a2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2e:	bf00      	nop

08000a30 <__aeabi_dcmple>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff ffe0 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a38:	bf94      	ite	ls
 8000a3a:	2001      	movls	r0, #1
 8000a3c:	2000      	movhi	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmpge>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffce 	bl	80009e8 <__aeabi_cdrcmple>
 8000a4c:	bf94      	ite	ls
 8000a4e:	2001      	movls	r0, #1
 8000a50:	2000      	movhi	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmpgt>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffc4 	bl	80009e8 <__aeabi_cdrcmple>
 8000a60:	bf34      	ite	cc
 8000a62:	2001      	movcc	r0, #1
 8000a64:	2000      	movcs	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmpun>:
 8000a6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a74:	d102      	bne.n	8000a7c <__aeabi_dcmpun+0x10>
 8000a76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7a:	d10a      	bne.n	8000a92 <__aeabi_dcmpun+0x26>
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x20>
 8000a86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8a:	d102      	bne.n	8000a92 <__aeabi_dcmpun+0x26>
 8000a8c:	f04f 0000 	mov.w	r0, #0
 8000a90:	4770      	bx	lr
 8000a92:	f04f 0001 	mov.w	r0, #1
 8000a96:	4770      	bx	lr

08000a98 <__aeabi_d2uiz>:
 8000a98:	004a      	lsls	r2, r1, #1
 8000a9a:	d211      	bcs.n	8000ac0 <__aeabi_d2uiz+0x28>
 8000a9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa0:	d211      	bcs.n	8000ac6 <__aeabi_d2uiz+0x2e>
 8000aa2:	d50d      	bpl.n	8000ac0 <__aeabi_d2uiz+0x28>
 8000aa4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aa8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aac:	d40e      	bmi.n	8000acc <__aeabi_d2uiz+0x34>
 8000aae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ab6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aba:	fa23 f002 	lsr.w	r0, r3, r2
 8000abe:	4770      	bx	lr
 8000ac0:	f04f 0000 	mov.w	r0, #0
 8000ac4:	4770      	bx	lr
 8000ac6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aca:	d102      	bne.n	8000ad2 <__aeabi_d2uiz+0x3a>
 8000acc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad0:	4770      	bx	lr
 8000ad2:	f04f 0000 	mov.w	r0, #0
 8000ad6:	4770      	bx	lr

08000ad8 <__aeabi_d2f>:
 8000ad8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000adc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae0:	bf24      	itt	cs
 8000ae2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ae6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aea:	d90d      	bls.n	8000b08 <__aeabi_d2f+0x30>
 8000aec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000af8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000afc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b00:	bf08      	it	eq
 8000b02:	f020 0001 	biceq.w	r0, r0, #1
 8000b06:	4770      	bx	lr
 8000b08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b0c:	d121      	bne.n	8000b52 <__aeabi_d2f+0x7a>
 8000b0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b12:	bfbc      	itt	lt
 8000b14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b18:	4770      	bxlt	lr
 8000b1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b22:	f1c2 0218 	rsb	r2, r2, #24
 8000b26:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b32:	bf18      	it	ne
 8000b34:	f040 0001 	orrne.w	r0, r0, #1
 8000b38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b44:	ea40 000c 	orr.w	r0, r0, ip
 8000b48:	fa23 f302 	lsr.w	r3, r3, r2
 8000b4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b50:	e7cc      	b.n	8000aec <__aeabi_d2f+0x14>
 8000b52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b56:	d107      	bne.n	8000b68 <__aeabi_d2f+0x90>
 8000b58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b5c:	bf1e      	ittt	ne
 8000b5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b66:	4770      	bxne	lr
 8000b68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__aeabi_uldivmod>:
 8000b78:	b953      	cbnz	r3, 8000b90 <__aeabi_uldivmod+0x18>
 8000b7a:	b94a      	cbnz	r2, 8000b90 <__aeabi_uldivmod+0x18>
 8000b7c:	2900      	cmp	r1, #0
 8000b7e:	bf08      	it	eq
 8000b80:	2800      	cmpeq	r0, #0
 8000b82:	bf1c      	itt	ne
 8000b84:	f04f 31ff 	movne.w	r1, #4294967295
 8000b88:	f04f 30ff 	movne.w	r0, #4294967295
 8000b8c:	f000 b97a 	b.w	8000e84 <__aeabi_idiv0>
 8000b90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b98:	f000 f806 	bl	8000ba8 <__udivmoddi4>
 8000b9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba4:	b004      	add	sp, #16
 8000ba6:	4770      	bx	lr

08000ba8 <__udivmoddi4>:
 8000ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bac:	468c      	mov	ip, r1
 8000bae:	460d      	mov	r5, r1
 8000bb0:	4604      	mov	r4, r0
 8000bb2:	9e08      	ldr	r6, [sp, #32]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d151      	bne.n	8000c5c <__udivmoddi4+0xb4>
 8000bb8:	428a      	cmp	r2, r1
 8000bba:	4617      	mov	r7, r2
 8000bbc:	d96d      	bls.n	8000c9a <__udivmoddi4+0xf2>
 8000bbe:	fab2 fe82 	clz	lr, r2
 8000bc2:	f1be 0f00 	cmp.w	lr, #0
 8000bc6:	d00b      	beq.n	8000be0 <__udivmoddi4+0x38>
 8000bc8:	f1ce 0c20 	rsb	ip, lr, #32
 8000bcc:	fa01 f50e 	lsl.w	r5, r1, lr
 8000bd0:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000bd4:	fa02 f70e 	lsl.w	r7, r2, lr
 8000bd8:	ea4c 0c05 	orr.w	ip, ip, r5
 8000bdc:	fa00 f40e 	lsl.w	r4, r0, lr
 8000be0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000be4:	0c25      	lsrs	r5, r4, #16
 8000be6:	fbbc f8fa 	udiv	r8, ip, sl
 8000bea:	fa1f f987 	uxth.w	r9, r7
 8000bee:	fb0a cc18 	mls	ip, sl, r8, ip
 8000bf2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000bf6:	fb08 f309 	mul.w	r3, r8, r9
 8000bfa:	42ab      	cmp	r3, r5
 8000bfc:	d90a      	bls.n	8000c14 <__udivmoddi4+0x6c>
 8000bfe:	19ed      	adds	r5, r5, r7
 8000c00:	f108 32ff 	add.w	r2, r8, #4294967295
 8000c04:	f080 8123 	bcs.w	8000e4e <__udivmoddi4+0x2a6>
 8000c08:	42ab      	cmp	r3, r5
 8000c0a:	f240 8120 	bls.w	8000e4e <__udivmoddi4+0x2a6>
 8000c0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c12:	443d      	add	r5, r7
 8000c14:	1aed      	subs	r5, r5, r3
 8000c16:	b2a4      	uxth	r4, r4
 8000c18:	fbb5 f0fa 	udiv	r0, r5, sl
 8000c1c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000c20:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c24:	fb00 f909 	mul.w	r9, r0, r9
 8000c28:	45a1      	cmp	r9, r4
 8000c2a:	d909      	bls.n	8000c40 <__udivmoddi4+0x98>
 8000c2c:	19e4      	adds	r4, r4, r7
 8000c2e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c32:	f080 810a 	bcs.w	8000e4a <__udivmoddi4+0x2a2>
 8000c36:	45a1      	cmp	r9, r4
 8000c38:	f240 8107 	bls.w	8000e4a <__udivmoddi4+0x2a2>
 8000c3c:	3802      	subs	r0, #2
 8000c3e:	443c      	add	r4, r7
 8000c40:	eba4 0409 	sub.w	r4, r4, r9
 8000c44:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c48:	2100      	movs	r1, #0
 8000c4a:	2e00      	cmp	r6, #0
 8000c4c:	d061      	beq.n	8000d12 <__udivmoddi4+0x16a>
 8000c4e:	fa24 f40e 	lsr.w	r4, r4, lr
 8000c52:	2300      	movs	r3, #0
 8000c54:	6034      	str	r4, [r6, #0]
 8000c56:	6073      	str	r3, [r6, #4]
 8000c58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5c:	428b      	cmp	r3, r1
 8000c5e:	d907      	bls.n	8000c70 <__udivmoddi4+0xc8>
 8000c60:	2e00      	cmp	r6, #0
 8000c62:	d054      	beq.n	8000d0e <__udivmoddi4+0x166>
 8000c64:	2100      	movs	r1, #0
 8000c66:	e886 0021 	stmia.w	r6, {r0, r5}
 8000c6a:	4608      	mov	r0, r1
 8000c6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c70:	fab3 f183 	clz	r1, r3
 8000c74:	2900      	cmp	r1, #0
 8000c76:	f040 808e 	bne.w	8000d96 <__udivmoddi4+0x1ee>
 8000c7a:	42ab      	cmp	r3, r5
 8000c7c:	d302      	bcc.n	8000c84 <__udivmoddi4+0xdc>
 8000c7e:	4282      	cmp	r2, r0
 8000c80:	f200 80fa 	bhi.w	8000e78 <__udivmoddi4+0x2d0>
 8000c84:	1a84      	subs	r4, r0, r2
 8000c86:	eb65 0503 	sbc.w	r5, r5, r3
 8000c8a:	2001      	movs	r0, #1
 8000c8c:	46ac      	mov	ip, r5
 8000c8e:	2e00      	cmp	r6, #0
 8000c90:	d03f      	beq.n	8000d12 <__udivmoddi4+0x16a>
 8000c92:	e886 1010 	stmia.w	r6, {r4, ip}
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	b912      	cbnz	r2, 8000ca2 <__udivmoddi4+0xfa>
 8000c9c:	2701      	movs	r7, #1
 8000c9e:	fbb7 f7f2 	udiv	r7, r7, r2
 8000ca2:	fab7 fe87 	clz	lr, r7
 8000ca6:	f1be 0f00 	cmp.w	lr, #0
 8000caa:	d134      	bne.n	8000d16 <__udivmoddi4+0x16e>
 8000cac:	1beb      	subs	r3, r5, r7
 8000cae:	0c3a      	lsrs	r2, r7, #16
 8000cb0:	fa1f fc87 	uxth.w	ip, r7
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	fbb3 f8f2 	udiv	r8, r3, r2
 8000cba:	0c25      	lsrs	r5, r4, #16
 8000cbc:	fb02 3318 	mls	r3, r2, r8, r3
 8000cc0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000cc4:	fb0c f308 	mul.w	r3, ip, r8
 8000cc8:	42ab      	cmp	r3, r5
 8000cca:	d907      	bls.n	8000cdc <__udivmoddi4+0x134>
 8000ccc:	19ed      	adds	r5, r5, r7
 8000cce:	f108 30ff 	add.w	r0, r8, #4294967295
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0x132>
 8000cd4:	42ab      	cmp	r3, r5
 8000cd6:	f200 80d1 	bhi.w	8000e7c <__udivmoddi4+0x2d4>
 8000cda:	4680      	mov	r8, r0
 8000cdc:	1aed      	subs	r5, r5, r3
 8000cde:	b2a3      	uxth	r3, r4
 8000ce0:	fbb5 f0f2 	udiv	r0, r5, r2
 8000ce4:	fb02 5510 	mls	r5, r2, r0, r5
 8000ce8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000cec:	fb0c fc00 	mul.w	ip, ip, r0
 8000cf0:	45a4      	cmp	ip, r4
 8000cf2:	d907      	bls.n	8000d04 <__udivmoddi4+0x15c>
 8000cf4:	19e4      	adds	r4, r4, r7
 8000cf6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x15a>
 8000cfc:	45a4      	cmp	ip, r4
 8000cfe:	f200 80b8 	bhi.w	8000e72 <__udivmoddi4+0x2ca>
 8000d02:	4618      	mov	r0, r3
 8000d04:	eba4 040c 	sub.w	r4, r4, ip
 8000d08:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d0c:	e79d      	b.n	8000c4a <__udivmoddi4+0xa2>
 8000d0e:	4631      	mov	r1, r6
 8000d10:	4630      	mov	r0, r6
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	f1ce 0420 	rsb	r4, lr, #32
 8000d1a:	fa05 f30e 	lsl.w	r3, r5, lr
 8000d1e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d22:	fa20 f804 	lsr.w	r8, r0, r4
 8000d26:	0c3a      	lsrs	r2, r7, #16
 8000d28:	fa25 f404 	lsr.w	r4, r5, r4
 8000d2c:	ea48 0803 	orr.w	r8, r8, r3
 8000d30:	fbb4 f1f2 	udiv	r1, r4, r2
 8000d34:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000d38:	fb02 4411 	mls	r4, r2, r1, r4
 8000d3c:	fa1f fc87 	uxth.w	ip, r7
 8000d40:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000d44:	fb01 f30c 	mul.w	r3, r1, ip
 8000d48:	42ab      	cmp	r3, r5
 8000d4a:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x1bc>
 8000d50:	19ed      	adds	r5, r5, r7
 8000d52:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d56:	f080 808a 	bcs.w	8000e6e <__udivmoddi4+0x2c6>
 8000d5a:	42ab      	cmp	r3, r5
 8000d5c:	f240 8087 	bls.w	8000e6e <__udivmoddi4+0x2c6>
 8000d60:	3902      	subs	r1, #2
 8000d62:	443d      	add	r5, r7
 8000d64:	1aeb      	subs	r3, r5, r3
 8000d66:	fa1f f588 	uxth.w	r5, r8
 8000d6a:	fbb3 f0f2 	udiv	r0, r3, r2
 8000d6e:	fb02 3310 	mls	r3, r2, r0, r3
 8000d72:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d76:	fb00 f30c 	mul.w	r3, r0, ip
 8000d7a:	42ab      	cmp	r3, r5
 8000d7c:	d907      	bls.n	8000d8e <__udivmoddi4+0x1e6>
 8000d7e:	19ed      	adds	r5, r5, r7
 8000d80:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d84:	d26f      	bcs.n	8000e66 <__udivmoddi4+0x2be>
 8000d86:	42ab      	cmp	r3, r5
 8000d88:	d96d      	bls.n	8000e66 <__udivmoddi4+0x2be>
 8000d8a:	3802      	subs	r0, #2
 8000d8c:	443d      	add	r5, r7
 8000d8e:	1aeb      	subs	r3, r5, r3
 8000d90:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d94:	e78f      	b.n	8000cb6 <__udivmoddi4+0x10e>
 8000d96:	f1c1 0720 	rsb	r7, r1, #32
 8000d9a:	fa22 f807 	lsr.w	r8, r2, r7
 8000d9e:	408b      	lsls	r3, r1
 8000da0:	fa05 f401 	lsl.w	r4, r5, r1
 8000da4:	ea48 0303 	orr.w	r3, r8, r3
 8000da8:	fa20 fe07 	lsr.w	lr, r0, r7
 8000dac:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000db0:	40fd      	lsrs	r5, r7
 8000db2:	ea4e 0e04 	orr.w	lr, lr, r4
 8000db6:	fbb5 f9fc 	udiv	r9, r5, ip
 8000dba:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000dbe:	fb0c 5519 	mls	r5, ip, r9, r5
 8000dc2:	fa1f f883 	uxth.w	r8, r3
 8000dc6:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000dca:	fb09 f408 	mul.w	r4, r9, r8
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	fa02 f201 	lsl.w	r2, r2, r1
 8000dd4:	fa00 fa01 	lsl.w	sl, r0, r1
 8000dd8:	d908      	bls.n	8000dec <__udivmoddi4+0x244>
 8000dda:	18ed      	adds	r5, r5, r3
 8000ddc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000de0:	d243      	bcs.n	8000e6a <__udivmoddi4+0x2c2>
 8000de2:	42ac      	cmp	r4, r5
 8000de4:	d941      	bls.n	8000e6a <__udivmoddi4+0x2c2>
 8000de6:	f1a9 0902 	sub.w	r9, r9, #2
 8000dea:	441d      	add	r5, r3
 8000dec:	1b2d      	subs	r5, r5, r4
 8000dee:	fa1f fe8e 	uxth.w	lr, lr
 8000df2:	fbb5 f0fc 	udiv	r0, r5, ip
 8000df6:	fb0c 5510 	mls	r5, ip, r0, r5
 8000dfa:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000dfe:	fb00 f808 	mul.w	r8, r0, r8
 8000e02:	45a0      	cmp	r8, r4
 8000e04:	d907      	bls.n	8000e16 <__udivmoddi4+0x26e>
 8000e06:	18e4      	adds	r4, r4, r3
 8000e08:	f100 35ff 	add.w	r5, r0, #4294967295
 8000e0c:	d229      	bcs.n	8000e62 <__udivmoddi4+0x2ba>
 8000e0e:	45a0      	cmp	r8, r4
 8000e10:	d927      	bls.n	8000e62 <__udivmoddi4+0x2ba>
 8000e12:	3802      	subs	r0, #2
 8000e14:	441c      	add	r4, r3
 8000e16:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e1a:	eba4 0408 	sub.w	r4, r4, r8
 8000e1e:	fba0 8902 	umull	r8, r9, r0, r2
 8000e22:	454c      	cmp	r4, r9
 8000e24:	46c6      	mov	lr, r8
 8000e26:	464d      	mov	r5, r9
 8000e28:	d315      	bcc.n	8000e56 <__udivmoddi4+0x2ae>
 8000e2a:	d012      	beq.n	8000e52 <__udivmoddi4+0x2aa>
 8000e2c:	b156      	cbz	r6, 8000e44 <__udivmoddi4+0x29c>
 8000e2e:	ebba 030e 	subs.w	r3, sl, lr
 8000e32:	eb64 0405 	sbc.w	r4, r4, r5
 8000e36:	fa04 f707 	lsl.w	r7, r4, r7
 8000e3a:	40cb      	lsrs	r3, r1
 8000e3c:	431f      	orrs	r7, r3
 8000e3e:	40cc      	lsrs	r4, r1
 8000e40:	6037      	str	r7, [r6, #0]
 8000e42:	6074      	str	r4, [r6, #4]
 8000e44:	2100      	movs	r1, #0
 8000e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	e6f8      	b.n	8000c40 <__udivmoddi4+0x98>
 8000e4e:	4690      	mov	r8, r2
 8000e50:	e6e0      	b.n	8000c14 <__udivmoddi4+0x6c>
 8000e52:	45c2      	cmp	sl, r8
 8000e54:	d2ea      	bcs.n	8000e2c <__udivmoddi4+0x284>
 8000e56:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e5a:	eb69 0503 	sbc.w	r5, r9, r3
 8000e5e:	3801      	subs	r0, #1
 8000e60:	e7e4      	b.n	8000e2c <__udivmoddi4+0x284>
 8000e62:	4628      	mov	r0, r5
 8000e64:	e7d7      	b.n	8000e16 <__udivmoddi4+0x26e>
 8000e66:	4640      	mov	r0, r8
 8000e68:	e791      	b.n	8000d8e <__udivmoddi4+0x1e6>
 8000e6a:	4681      	mov	r9, r0
 8000e6c:	e7be      	b.n	8000dec <__udivmoddi4+0x244>
 8000e6e:	4601      	mov	r1, r0
 8000e70:	e778      	b.n	8000d64 <__udivmoddi4+0x1bc>
 8000e72:	3802      	subs	r0, #2
 8000e74:	443c      	add	r4, r7
 8000e76:	e745      	b.n	8000d04 <__udivmoddi4+0x15c>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e708      	b.n	8000c8e <__udivmoddi4+0xe6>
 8000e7c:	f1a8 0802 	sub.w	r8, r8, #2
 8000e80:	443d      	add	r5, r7
 8000e82:	e72b      	b.n	8000cdc <__udivmoddi4+0x134>

08000e84 <__aeabi_idiv0>:
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop

08000e88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e88:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e8a:	4a0e      	ldr	r2, [pc, #56]	; (8000ec4 <HAL_InitTick+0x3c>)
 8000e8c:	4b0e      	ldr	r3, [pc, #56]	; (8000ec8 <HAL_InitTick+0x40>)
{
 8000e8e:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e90:	7818      	ldrb	r0, [r3, #0]
 8000e92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e96:	fbb3 f3f0 	udiv	r3, r3, r0
 8000e9a:	6810      	ldr	r0, [r2, #0]
 8000e9c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ea0:	f000 fa7c 	bl	800139c <HAL_SYSTICK_Config>
 8000ea4:	4604      	mov	r4, r0
 8000ea6:	b958      	cbnz	r0, 8000ec0 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ea8:	2d0f      	cmp	r5, #15
 8000eaa:	d809      	bhi.n	8000ec0 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eac:	4602      	mov	r2, r0
 8000eae:	4629      	mov	r1, r5
 8000eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb4:	f000 fa32 	bl	800131c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eb8:	4b04      	ldr	r3, [pc, #16]	; (8000ecc <HAL_InitTick+0x44>)
 8000eba:	4620      	mov	r0, r4
 8000ebc:	601d      	str	r5, [r3, #0]
 8000ebe:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000ec0:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000ec2:	bd38      	pop	{r3, r4, r5, pc}
 8000ec4:	20000018 	.word	0x20000018
 8000ec8:	20000000 	.word	0x20000000
 8000ecc:	20000004 	.word	0x20000004

08000ed0 <HAL_Init>:
{
 8000ed0:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ed2:	4b0b      	ldr	r3, [pc, #44]	; (8000f00 <HAL_Init+0x30>)
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000eda:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000ee2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000eea:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eec:	2003      	movs	r0, #3
 8000eee:	f000 fa03 	bl	80012f8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	f7ff ffc8 	bl	8000e88 <HAL_InitTick>
  HAL_MspInit();
 8000ef8:	f004 fd1c 	bl	8005934 <HAL_MspInit>
}
 8000efc:	2000      	movs	r0, #0
 8000efe:	bd08      	pop	{r3, pc}
 8000f00:	40023c00 	.word	0x40023c00

08000f04 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000f04:	4a03      	ldr	r2, [pc, #12]	; (8000f14 <HAL_IncTick+0x10>)
 8000f06:	4b04      	ldr	r3, [pc, #16]	; (8000f18 <HAL_IncTick+0x14>)
 8000f08:	6811      	ldr	r1, [r2, #0]
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	440b      	add	r3, r1
 8000f0e:	6013      	str	r3, [r2, #0]
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	200000d0 	.word	0x200000d0
 8000f18:	20000000 	.word	0x20000000

08000f1c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000f1c:	4b01      	ldr	r3, [pc, #4]	; (8000f24 <HAL_GetTick+0x8>)
 8000f1e:	6818      	ldr	r0, [r3, #0]
}
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	200000d0 	.word	0x200000d0

08000f28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f28:	b538      	push	{r3, r4, r5, lr}
 8000f2a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000f2c:	f7ff fff6 	bl	8000f1c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f30:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000f32:	bf1c      	itt	ne
 8000f34:	4b05      	ldrne	r3, [pc, #20]	; (8000f4c <HAL_Delay+0x24>)
 8000f36:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000f38:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000f3a:	bf18      	it	ne
 8000f3c:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f3e:	f7ff ffed 	bl	8000f1c <HAL_GetTick>
 8000f42:	1b40      	subs	r0, r0, r5
 8000f44:	4284      	cmp	r4, r0
 8000f46:	d8fa      	bhi.n	8000f3e <HAL_Delay+0x16>
  {
  }
}
 8000f48:	bd38      	pop	{r3, r4, r5, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000000 	.word	0x20000000

08000f50 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f50:	b510      	push	{r4, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f52:	4604      	mov	r4, r0
 8000f54:	2800      	cmp	r0, #0
 8000f56:	f000 8099 	beq.w	800108c <HAL_ADC_Init+0x13c>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000f5a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000f5c:	b923      	cbnz	r3, 8000f68 <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f5e:	6443      	str	r3, [r0, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f60:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f64:	f004 f95e 	bl	8005224 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f68:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000f6a:	06db      	lsls	r3, r3, #27
 8000f6c:	f100 808c 	bmi.w	8001088 <HAL_ADC_Init+0x138>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000f72:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f76:	f023 0302 	bic.w	r3, r3, #2
 8000f7a:	f043 0302 	orr.w	r3, r3, #2
 8000f7e:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000f80:	4b43      	ldr	r3, [pc, #268]	; (8001090 <HAL_ADC_Init+0x140>)
 8000f82:	685a      	ldr	r2, [r3, #4]
 8000f84:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000f88:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000f8a:	685a      	ldr	r2, [r3, #4]
 8000f8c:	6861      	ldr	r1, [r4, #4]
 8000f8e:	430a      	orrs	r2, r1
 8000f90:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000f92:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000f94:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000f96:	685a      	ldr	r2, [r3, #4]
 8000f98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f9c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000f9e:	685a      	ldr	r2, [r3, #4]
 8000fa0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000fa4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000fa6:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000fa8:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000faa:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000fae:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000fb0:	685a      	ldr	r2, [r3, #4]
 8000fb2:	430a      	orrs	r2, r1
 8000fb4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000fb6:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000fb8:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000fba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000fbe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000fc0:	689a      	ldr	r2, [r3, #8]
 8000fc2:	430a      	orrs	r2, r1
 8000fc4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000fc6:	4933      	ldr	r1, [pc, #204]	; (8001094 <HAL_ADC_Init+0x144>)
 8000fc8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000fca:	428a      	cmp	r2, r1
 8000fcc:	d050      	beq.n	8001070 <HAL_ADC_Init+0x120>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000fce:	6899      	ldr	r1, [r3, #8]
 8000fd0:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8000fd4:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000fd6:	6899      	ldr	r1, [r3, #8]
 8000fd8:	430a      	orrs	r2, r1
 8000fda:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000fdc:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000fde:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000fe0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000fe4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000fe6:	689a      	ldr	r2, [r3, #8]
 8000fe8:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000fea:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000fec:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000fee:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000ff0:	f022 0202 	bic.w	r2, r2, #2
 8000ff4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000ff6:	689a      	ldr	r2, [r3, #8]
 8000ff8:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8000ffc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000ffe:	6a22      	ldr	r2, [r4, #32]
 8001000:	2a00      	cmp	r2, #0
 8001002:	d03d      	beq.n	8001080 <HAL_ADC_Init+0x130>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001004:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001006:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001008:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800100c:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800100e:	685a      	ldr	r2, [r3, #4]
 8001010:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001014:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001016:	685a      	ldr	r2, [r3, #4]
 8001018:	3901      	subs	r1, #1
 800101a:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800101e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001022:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001024:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001028:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800102a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800102c:	3901      	subs	r1, #1
 800102e:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8001032:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001034:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8001036:	6b21      	ldr	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001038:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800103c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 800103e:	689a      	ldr	r2, [r3, #8]
 8001040:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8001044:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001046:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001048:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800104a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800104e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001050:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8001052:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001054:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8001058:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800105a:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 800105c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800105e:	f023 0303 	bic.w	r3, r3, #3
 8001062:	f043 0301 	orr.w	r3, r3, #1
 8001066:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8001068:	2300      	movs	r3, #0
 800106a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 800106e:	bd10      	pop	{r4, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001070:	689a      	ldr	r2, [r3, #8]
 8001072:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001076:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001078:	689a      	ldr	r2, [r3, #8]
 800107a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800107e:	e7b4      	b.n	8000fea <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001080:	685a      	ldr	r2, [r3, #4]
 8001082:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001086:	e7ca      	b.n	800101e <HAL_ADC_Init+0xce>
    tmp_hal_status = HAL_ERROR;
 8001088:	2001      	movs	r0, #1
 800108a:	e7ed      	b.n	8001068 <HAL_ADC_Init+0x118>
    return HAL_ERROR;
 800108c:	2001      	movs	r0, #1
}
 800108e:	bd10      	pop	{r4, pc}
 8001090:	40012300 	.word	0x40012300
 8001094:	0f000001 	.word	0x0f000001

08001098 <HAL_ADC_ConvCpltCallback>:
 8001098:	4770      	bx	lr

0800109a <HAL_ADC_LevelOutOfWindowCallback>:
 800109a:	4770      	bx	lr

0800109c <HAL_ADC_ErrorCallback>:
{
 800109c:	4770      	bx	lr

0800109e <HAL_ADC_IRQHandler>:
{
 800109e:	b538      	push	{r3, r4, r5, lr}
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80010a0:	6803      	ldr	r3, [r0, #0]
 80010a2:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80010a4:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 80010a6:	078d      	lsls	r5, r1, #30
{
 80010a8:	4604      	mov	r4, r0
  if(tmp1 && tmp2)
 80010aa:	d52b      	bpl.n	8001104 <HAL_ADC_IRQHandler+0x66>
 80010ac:	0690      	lsls	r0, r2, #26
 80010ae:	d529      	bpl.n	8001104 <HAL_ADC_IRQHandler+0x66>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010b0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80010b2:	06d1      	lsls	r1, r2, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80010b4:	bf5e      	ittt	pl
 80010b6:	6c22      	ldrpl	r2, [r4, #64]	; 0x40
 80010b8:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 80010bc:	6422      	strpl	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80010be:	689a      	ldr	r2, [r3, #8]
 80010c0:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80010c4:	d117      	bne.n	80010f6 <HAL_ADC_IRQHandler+0x58>
 80010c6:	69a2      	ldr	r2, [r4, #24]
 80010c8:	b9aa      	cbnz	r2, 80010f6 <HAL_ADC_IRQHandler+0x58>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80010ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80010cc:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 80010d0:	d002      	beq.n	80010d8 <HAL_ADC_IRQHandler+0x3a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80010d2:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80010d4:	0552      	lsls	r2, r2, #21
 80010d6:	d40e      	bmi.n	80010f6 <HAL_ADC_IRQHandler+0x58>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80010d8:	685a      	ldr	r2, [r3, #4]
 80010da:	f022 0220 	bic.w	r2, r2, #32
 80010de:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80010e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80010e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80010e6:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80010ea:	04db      	lsls	r3, r3, #19
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80010ec:	bf5e      	ittt	pl
 80010ee:	6c23      	ldrpl	r3, [r4, #64]	; 0x40
 80010f0:	f043 0301 	orrpl.w	r3, r3, #1
 80010f4:	6423      	strpl	r3, [r4, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 80010f6:	4620      	mov	r0, r4
 80010f8:	f7ff ffce 	bl	8001098 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80010fc:	6823      	ldr	r3, [r4, #0]
 80010fe:	f06f 0212 	mvn.w	r2, #18
 8001102:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8001104:	6823      	ldr	r3, [r4, #0]
 8001106:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8001108:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 800110a:	074d      	lsls	r5, r1, #29
 800110c:	d532      	bpl.n	8001174 <HAL_ADC_IRQHandler+0xd6>
 800110e:	0610      	lsls	r0, r2, #24
 8001110:	d530      	bpl.n	8001174 <HAL_ADC_IRQHandler+0xd6>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001112:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001114:	06d1      	lsls	r1, r2, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001116:	bf5e      	ittt	pl
 8001118:	6c22      	ldrpl	r2, [r4, #64]	; 0x40
 800111a:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 800111e:	6422      	strpl	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001120:	689a      	ldr	r2, [r3, #8]
 8001122:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8001126:	d11e      	bne.n	8001166 <HAL_ADC_IRQHandler+0xc8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001128:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800112a:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 800112e:	d002      	beq.n	8001136 <HAL_ADC_IRQHandler+0x98>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001130:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001132:	0552      	lsls	r2, r2, #21
 8001134:	d417      	bmi.n	8001166 <HAL_ADC_IRQHandler+0xc8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001136:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001138:	0555      	lsls	r5, r2, #21
 800113a:	d414      	bmi.n	8001166 <HAL_ADC_IRQHandler+0xc8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800113c:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800113e:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8001142:	d110      	bne.n	8001166 <HAL_ADC_IRQHandler+0xc8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001144:	69a2      	ldr	r2, [r4, #24]
 8001146:	b972      	cbnz	r2, 8001166 <HAL_ADC_IRQHandler+0xc8>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001148:	685a      	ldr	r2, [r3, #4]
 800114a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800114e:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001150:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001152:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001156:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001158:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800115a:	05d8      	lsls	r0, r3, #23
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800115c:	bf5e      	ittt	pl
 800115e:	6c23      	ldrpl	r3, [r4, #64]	; 0x40
 8001160:	f043 0301 	orrpl.w	r3, r3, #1
 8001164:	6423      	strpl	r3, [r4, #64]	; 0x40
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001166:	4620      	mov	r0, r4
 8001168:	f000 f8c4 	bl	80012f4 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800116c:	6823      	ldr	r3, [r4, #0]
 800116e:	f06f 020c 	mvn.w	r2, #12
 8001172:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8001174:	6823      	ldr	r3, [r4, #0]
 8001176:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8001178:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 800117a:	07c9      	lsls	r1, r1, #31
 800117c:	d50f      	bpl.n	800119e <HAL_ADC_IRQHandler+0x100>
 800117e:	0655      	lsls	r5, r2, #25
 8001180:	d50d      	bpl.n	800119e <HAL_ADC_IRQHandler+0x100>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	07d8      	lsls	r0, r3, #31
 8001186:	d50a      	bpl.n	800119e <HAL_ADC_IRQHandler+0x100>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001188:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800118a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800118e:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001190:	4620      	mov	r0, r4
 8001192:	f7ff ff82 	bl	800109a <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001196:	6823      	ldr	r3, [r4, #0]
 8001198:	f06f 0201 	mvn.w	r2, #1
 800119c:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800119e:	6823      	ldr	r3, [r4, #0]
 80011a0:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80011a2:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 80011a4:	0689      	lsls	r1, r1, #26
 80011a6:	d50d      	bpl.n	80011c4 <HAL_ADC_IRQHandler+0x126>
 80011a8:	0152      	lsls	r2, r2, #5
 80011aa:	d50b      	bpl.n	80011c4 <HAL_ADC_IRQHandler+0x126>
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80011ac:	6c62      	ldr	r2, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80011ae:	f06f 0520 	mvn.w	r5, #32
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80011b2:	f042 0202 	orr.w	r2, r2, #2
 80011b6:	6462      	str	r2, [r4, #68]	; 0x44
    HAL_ADC_ErrorCallback(hadc);
 80011b8:	4620      	mov	r0, r4
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80011ba:	601d      	str	r5, [r3, #0]
    HAL_ADC_ErrorCallback(hadc);
 80011bc:	f7ff ff6e 	bl	800109c <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80011c0:	6823      	ldr	r3, [r4, #0]
 80011c2:	601d      	str	r5, [r3, #0]
 80011c4:	bd38      	pop	{r3, r4, r5, pc}
	...

080011c8 <HAL_ADC_ConfigChannel>:
{
 80011c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 80011ca:	2300      	movs	r3, #0
 80011cc:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80011ce:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	f000 8083 	beq.w	80012de <HAL_ADC_ConfigChannel+0x116>
  if (sConfig->Channel > ADC_CHANNEL_9)
 80011d8:	680d      	ldr	r5, [r1, #0]
 80011da:	6804      	ldr	r4, [r0, #0]
 80011dc:	688a      	ldr	r2, [r1, #8]
  __HAL_LOCK(hadc);
 80011de:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 80011e0:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 80011e2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 80011e6:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 80011e8:	d92a      	bls.n	8001240 <HAL_ADC_ConfigChannel+0x78>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80011ea:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 80011ee:	68e7      	ldr	r7, [r4, #12]
 80011f0:	3b1e      	subs	r3, #30
 80011f2:	f04f 0e07 	mov.w	lr, #7
 80011f6:	fa0e fe03 	lsl.w	lr, lr, r3
 80011fa:	ea27 070e 	bic.w	r7, r7, lr
 80011fe:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001200:	68e7      	ldr	r7, [r4, #12]
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	433b      	orrs	r3, r7
 8001208:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 800120a:	684a      	ldr	r2, [r1, #4]
 800120c:	2a06      	cmp	r2, #6
 800120e:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8001212:	d825      	bhi.n	8001260 <HAL_ADC_ConfigChannel+0x98>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001214:	4413      	add	r3, r2
 8001216:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8001218:	1f59      	subs	r1, r3, #5
 800121a:	231f      	movs	r3, #31
 800121c:	408b      	lsls	r3, r1
 800121e:	ea27 0303 	bic.w	r3, r7, r3
 8001222:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001224:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001226:	fa06 f101 	lsl.w	r1, r6, r1
 800122a:	4311      	orrs	r1, r2
 800122c:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800122e:	4b2d      	ldr	r3, [pc, #180]	; (80012e4 <HAL_ADC_ConfigChannel+0x11c>)
 8001230:	429c      	cmp	r4, r3
 8001232:	d034      	beq.n	800129e <HAL_ADC_ConfigChannel+0xd6>
  __HAL_UNLOCK(hadc);
 8001234:	2300      	movs	r3, #0
 8001236:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800123a:	4618      	mov	r0, r3
}
 800123c:	b003      	add	sp, #12
 800123e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001240:	6927      	ldr	r7, [r4, #16]
 8001242:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8001246:	f04f 0e07 	mov.w	lr, #7
 800124a:	fa0e fe03 	lsl.w	lr, lr, r3
 800124e:	ea27 070e 	bic.w	r7, r7, lr
 8001252:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001254:	6927      	ldr	r7, [r4, #16]
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	433b      	orrs	r3, r7
 800125c:	6123      	str	r3, [r4, #16]
 800125e:	e7d4      	b.n	800120a <HAL_ADC_ConfigChannel+0x42>
  else if (sConfig->Rank < 13U)
 8001260:	2a0c      	cmp	r2, #12
 8001262:	d80e      	bhi.n	8001282 <HAL_ADC_ConfigChannel+0xba>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001264:	4413      	add	r3, r2
 8001266:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001268:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 800126c:	231f      	movs	r3, #31
 800126e:	4093      	lsls	r3, r2
 8001270:	ea21 0303 	bic.w	r3, r1, r3
 8001274:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001276:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001278:	fa06 f202 	lsl.w	r2, r6, r2
 800127c:	431a      	orrs	r2, r3
 800127e:	6322      	str	r2, [r4, #48]	; 0x30
 8001280:	e7d5      	b.n	800122e <HAL_ADC_ConfigChannel+0x66>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001282:	4413      	add	r3, r2
 8001284:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001286:	3b41      	subs	r3, #65	; 0x41
 8001288:	221f      	movs	r2, #31
 800128a:	409a      	lsls	r2, r3
 800128c:	ea21 0202 	bic.w	r2, r1, r2
 8001290:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001292:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001294:	fa06 f103 	lsl.w	r1, r6, r3
 8001298:	4311      	orrs	r1, r2
 800129a:	62e1      	str	r1, [r4, #44]	; 0x2c
 800129c:	e7c7      	b.n	800122e <HAL_ADC_ConfigChannel+0x66>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800129e:	2d12      	cmp	r5, #18
 80012a0:	d104      	bne.n	80012ac <HAL_ADC_ConfigChannel+0xe4>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80012a2:	4a11      	ldr	r2, [pc, #68]	; (80012e8 <HAL_ADC_ConfigChannel+0x120>)
 80012a4:	6853      	ldr	r3, [r2, #4]
 80012a6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012aa:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80012ac:	f1a5 0310 	sub.w	r3, r5, #16
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d8bf      	bhi.n	8001234 <HAL_ADC_ConfigChannel+0x6c>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80012b4:	4a0c      	ldr	r2, [pc, #48]	; (80012e8 <HAL_ADC_ConfigChannel+0x120>)
 80012b6:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80012b8:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80012ba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80012be:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80012c0:	d1b8      	bne.n	8001234 <HAL_ADC_ConfigChannel+0x6c>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80012c2:	4b0a      	ldr	r3, [pc, #40]	; (80012ec <HAL_ADC_ConfigChannel+0x124>)
 80012c4:	4a0a      	ldr	r2, [pc, #40]	; (80012f0 <HAL_ADC_ConfigChannel+0x128>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	fbb3 f2f2 	udiv	r2, r3, r2
 80012cc:	230a      	movs	r3, #10
 80012ce:	4353      	muls	r3, r2
        counter--;
 80012d0:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80012d2:	9b01      	ldr	r3, [sp, #4]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d0ad      	beq.n	8001234 <HAL_ADC_ConfigChannel+0x6c>
        counter--;
 80012d8:	9b01      	ldr	r3, [sp, #4]
 80012da:	3b01      	subs	r3, #1
 80012dc:	e7f8      	b.n	80012d0 <HAL_ADC_ConfigChannel+0x108>
  __HAL_LOCK(hadc);
 80012de:	2002      	movs	r0, #2
 80012e0:	e7ac      	b.n	800123c <HAL_ADC_ConfigChannel+0x74>
 80012e2:	bf00      	nop
 80012e4:	40012000 	.word	0x40012000
 80012e8:	40012300 	.word	0x40012300
 80012ec:	20000018 	.word	0x20000018
 80012f0:	000f4240 	.word	0x000f4240

080012f4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80012f4:	4770      	bx	lr
	...

080012f8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012f8:	4a07      	ldr	r2, [pc, #28]	; (8001318 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80012fa:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012fc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001300:	041b      	lsls	r3, r3, #16
 8001302:	0c1b      	lsrs	r3, r3, #16
 8001304:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001308:	0200      	lsls	r0, r0, #8
 800130a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800130e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8001312:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001314:	60d3      	str	r3, [r2, #12]
 8001316:	4770      	bx	lr
 8001318:	e000ed00 	.word	0xe000ed00

0800131c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800131c:	4b17      	ldr	r3, [pc, #92]	; (800137c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800131e:	b530      	push	{r4, r5, lr}
 8001320:	68dc      	ldr	r4, [r3, #12]
 8001322:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001326:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800132a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800132c:	2b04      	cmp	r3, #4
 800132e:	bf28      	it	cs
 8001330:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001332:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001334:	f04f 0501 	mov.w	r5, #1
 8001338:	fa05 f303 	lsl.w	r3, r5, r3
 800133c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001340:	bf8c      	ite	hi
 8001342:	3c03      	subhi	r4, #3
 8001344:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001346:	4019      	ands	r1, r3
 8001348:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800134a:	fa05 f404 	lsl.w	r4, r5, r4
 800134e:	3c01      	subs	r4, #1
 8001350:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8001352:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001354:	ea42 0201 	orr.w	r2, r2, r1
 8001358:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800135c:	bfaf      	iteee	ge
 800135e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001362:	f000 000f 	andlt.w	r0, r0, #15
 8001366:	4b06      	ldrlt	r3, [pc, #24]	; (8001380 <HAL_NVIC_SetPriority+0x64>)
 8001368:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800136a:	bfa5      	ittet	ge
 800136c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8001370:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001372:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001374:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001378:	bd30      	pop	{r4, r5, pc}
 800137a:	bf00      	nop
 800137c:	e000ed00 	.word	0xe000ed00
 8001380:	e000ed14 	.word	0xe000ed14

08001384 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001384:	0942      	lsrs	r2, r0, #5
 8001386:	2301      	movs	r3, #1
 8001388:	f000 001f 	and.w	r0, r0, #31
 800138c:	fa03 f000 	lsl.w	r0, r3, r0
 8001390:	4b01      	ldr	r3, [pc, #4]	; (8001398 <HAL_NVIC_EnableIRQ+0x14>)
 8001392:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001396:	4770      	bx	lr
 8001398:	e000e100 	.word	0xe000e100

0800139c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800139c:	3801      	subs	r0, #1
 800139e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80013a2:	d20a      	bcs.n	80013ba <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013a4:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a6:	4a07      	ldr	r2, [pc, #28]	; (80013c4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013a8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013aa:	21f0      	movs	r1, #240	; 0xf0
 80013ac:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013b0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013b2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013b4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80013ba:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	e000e010 	.word	0xe000e010
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80013c8:	4b04      	ldr	r3, [pc, #16]	; (80013dc <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80013ca:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80013cc:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80013ce:	bf0c      	ite	eq
 80013d0:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80013d4:	f022 0204 	bicne.w	r2, r2, #4
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	4770      	bx	lr
 80013dc:	e000e010 	.word	0xe000e010

080013e0 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80013e0:	4770      	bx	lr

080013e2 <HAL_SYSTICK_IRQHandler>:
{
 80013e2:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80013e4:	f7ff fffc 	bl	80013e0 <HAL_SYSTICK_Callback>
 80013e8:	bd08      	pop	{r3, pc}
	...

080013ec <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80013ec:	6803      	ldr	r3, [r0, #0]
 80013ee:	b2da      	uxtb	r2, r3
 80013f0:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80013f4:	f023 0303 	bic.w	r3, r3, #3
 80013f8:	2118      	movs	r1, #24
 80013fa:	3a10      	subs	r2, #16
 80013fc:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001400:	4904      	ldr	r1, [pc, #16]	; (8001414 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8001402:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001404:	bf88      	it	hi
 8001406:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001408:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800140a:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800140c:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 800140e:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	08006d20 	.word	0x08006d20

08001418 <HAL_DMA_Init>:
{
 8001418:	b570      	push	{r4, r5, r6, lr}
 800141a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800141c:	f7ff fd7e 	bl	8000f1c <HAL_GetTick>
 8001420:	4605      	mov	r5, r0
  if(hdma == NULL)
 8001422:	2c00      	cmp	r4, #0
 8001424:	d071      	beq.n	800150a <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 8001426:	2300      	movs	r3, #0
 8001428:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 800142c:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 800142e:	2302      	movs	r3, #2
 8001430:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8001434:	6813      	ldr	r3, [r2, #0]
 8001436:	f023 0301 	bic.w	r3, r3, #1
 800143a:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800143c:	6821      	ldr	r1, [r4, #0]
 800143e:	680b      	ldr	r3, [r1, #0]
 8001440:	07d8      	lsls	r0, r3, #31
 8001442:	d43c      	bmi.n	80014be <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 8001444:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001446:	4d32      	ldr	r5, [pc, #200]	; (8001510 <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001448:	6862      	ldr	r2, [r4, #4]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800144a:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800144c:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800144e:	68a3      	ldr	r3, [r4, #8]
 8001450:	4313      	orrs	r3, r2
 8001452:	68e2      	ldr	r2, [r4, #12]
 8001454:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001456:	6922      	ldr	r2, [r4, #16]
 8001458:	4313      	orrs	r3, r2
 800145a:	6962      	ldr	r2, [r4, #20]
 800145c:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800145e:	69e2      	ldr	r2, [r4, #28]
 8001460:	4303      	orrs	r3, r0
 8001462:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8001464:	6a22      	ldr	r2, [r4, #32]
 8001466:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001468:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800146a:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800146c:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001470:	bf01      	itttt	eq
 8001472:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 8001474:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 8001476:	4335      	orreq	r5, r6
 8001478:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 800147a:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 800147c:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800147e:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001480:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8001484:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001488:	d10b      	bne.n	80014a2 <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 800148a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800148c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 800148e:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001490:	b13d      	cbz	r5, 80014a2 <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001492:	b9f8      	cbnz	r0, 80014d4 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 8001494:	2a01      	cmp	r2, #1
 8001496:	d02d      	beq.n	80014f4 <HAL_DMA_Init+0xdc>
 8001498:	d301      	bcc.n	800149e <HAL_DMA_Init+0x86>
 800149a:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800149c:	d101      	bne.n	80014a2 <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800149e:	01ea      	lsls	r2, r5, #7
 80014a0:	d42b      	bmi.n	80014fa <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 80014a2:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80014a4:	4620      	mov	r0, r4
 80014a6:	f7ff ffa1 	bl	80013ec <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014aa:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80014ac:	233f      	movs	r3, #63	; 0x3f
 80014ae:	4093      	lsls	r3, r2
 80014b0:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014b2:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80014b4:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014b6:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80014b8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80014bc:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014be:	f7ff fd2d 	bl	8000f1c <HAL_GetTick>
 80014c2:	1b40      	subs	r0, r0, r5
 80014c4:	2805      	cmp	r0, #5
 80014c6:	d9b9      	bls.n	800143c <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014c8:	2320      	movs	r3, #32
 80014ca:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014cc:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 80014ce:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 80014d2:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80014d4:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80014d8:	d113      	bne.n	8001502 <HAL_DMA_Init+0xea>
    switch (tmp)
 80014da:	2a03      	cmp	r2, #3
 80014dc:	d8e1      	bhi.n	80014a2 <HAL_DMA_Init+0x8a>
 80014de:	a001      	add	r0, pc, #4	; (adr r0, 80014e4 <HAL_DMA_Init+0xcc>)
 80014e0:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 80014e4:	080014fb 	.word	0x080014fb
 80014e8:	0800149f 	.word	0x0800149f
 80014ec:	080014fb 	.word	0x080014fb
 80014f0:	080014f5 	.word	0x080014f5
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80014f4:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 80014f8:	d1d3      	bne.n	80014a2 <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80014fa:	2340      	movs	r3, #64	; 0x40
 80014fc:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80014fe:	2001      	movs	r0, #1
 8001500:	e7e5      	b.n	80014ce <HAL_DMA_Init+0xb6>
    switch (tmp)
 8001502:	2a02      	cmp	r2, #2
 8001504:	d9f9      	bls.n	80014fa <HAL_DMA_Init+0xe2>
 8001506:	2a03      	cmp	r2, #3
 8001508:	e7c8      	b.n	800149c <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 800150a:	2001      	movs	r0, #1
 800150c:	bd70      	pop	{r4, r5, r6, pc}
 800150e:	bf00      	nop
 8001510:	f010803f 	.word	0xf010803f

08001514 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001514:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001518:	2b02      	cmp	r3, #2
 800151a:	d003      	beq.n	8001524 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800151c:	2380      	movs	r3, #128	; 0x80
 800151e:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8001520:	2001      	movs	r0, #1
 8001522:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8001524:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8001526:	2305      	movs	r3, #5
 8001528:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 800152c:	6813      	ldr	r3, [r2, #0]
 800152e:	f023 0301 	bic.w	r3, r3, #1
 8001532:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8001534:	2000      	movs	r0, #0
}
 8001536:	4770      	bx	lr

08001538 <HAL_DMA_IRQHandler>:
{
 8001538:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 800153a:	2300      	movs	r3, #0
 800153c:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 800153e:	4b5a      	ldr	r3, [pc, #360]	; (80016a8 <HAL_DMA_IRQHandler+0x170>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001540:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8001542:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001544:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8001546:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001548:	2208      	movs	r2, #8
 800154a:	409a      	lsls	r2, r3
 800154c:	4216      	tst	r6, r2
{
 800154e:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001550:	d00c      	beq.n	800156c <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001552:	6801      	ldr	r1, [r0, #0]
 8001554:	6808      	ldr	r0, [r1, #0]
 8001556:	0740      	lsls	r0, r0, #29
 8001558:	d508      	bpl.n	800156c <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800155a:	6808      	ldr	r0, [r1, #0]
 800155c:	f020 0004 	bic.w	r0, r0, #4
 8001560:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001562:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001564:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001566:	f042 0201 	orr.w	r2, r2, #1
 800156a:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800156c:	2201      	movs	r2, #1
 800156e:	409a      	lsls	r2, r3
 8001570:	4216      	tst	r6, r2
 8001572:	d008      	beq.n	8001586 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001574:	6821      	ldr	r1, [r4, #0]
 8001576:	6949      	ldr	r1, [r1, #20]
 8001578:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800157a:	bf41      	itttt	mi
 800157c:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800157e:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8001580:	f042 0202 	orrmi.w	r2, r2, #2
 8001584:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001586:	2204      	movs	r2, #4
 8001588:	409a      	lsls	r2, r3
 800158a:	4216      	tst	r6, r2
 800158c:	d008      	beq.n	80015a0 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800158e:	6821      	ldr	r1, [r4, #0]
 8001590:	6809      	ldr	r1, [r1, #0]
 8001592:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001594:	bf41      	itttt	mi
 8001596:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001598:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 800159a:	f042 0204 	orrmi.w	r2, r2, #4
 800159e:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80015a0:	2210      	movs	r2, #16
 80015a2:	409a      	lsls	r2, r3
 80015a4:	4216      	tst	r6, r2
 80015a6:	d010      	beq.n	80015ca <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80015a8:	6823      	ldr	r3, [r4, #0]
 80015aa:	6819      	ldr	r1, [r3, #0]
 80015ac:	0709      	lsls	r1, r1, #28
 80015ae:	d50c      	bpl.n	80015ca <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80015b0:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	0350      	lsls	r0, r2, #13
 80015b6:	d535      	bpl.n	8001624 <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	0319      	lsls	r1, r3, #12
 80015bc:	d401      	bmi.n	80015c2 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 80015be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80015c0:	e000      	b.n	80015c4 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80015c2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 80015c4:	b10b      	cbz	r3, 80015ca <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 80015c6:	4620      	mov	r0, r4
 80015c8:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80015ca:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80015cc:	2220      	movs	r2, #32
 80015ce:	408a      	lsls	r2, r1
 80015d0:	4216      	tst	r6, r2
 80015d2:	d038      	beq.n	8001646 <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80015d4:	6823      	ldr	r3, [r4, #0]
 80015d6:	6818      	ldr	r0, [r3, #0]
 80015d8:	06c6      	lsls	r6, r0, #27
 80015da:	d534      	bpl.n	8001646 <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80015dc:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80015de:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 80015e2:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80015e4:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80015e6:	d125      	bne.n	8001634 <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80015e8:	f022 0216 	bic.w	r2, r2, #22
 80015ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80015ee:	695a      	ldr	r2, [r3, #20]
 80015f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015f4:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80015f6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80015f8:	b90a      	cbnz	r2, 80015fe <HAL_DMA_IRQHandler+0xc6>
 80015fa:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80015fc:	b11a      	cbz	r2, 8001606 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	f022 0208 	bic.w	r2, r2, #8
 8001604:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001606:	233f      	movs	r3, #63	; 0x3f
 8001608:	408b      	lsls	r3, r1
 800160a:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 800160c:	2300      	movs	r3, #0
 800160e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8001612:	2301      	movs	r3, #1
 8001614:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8001618:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 800161a:	b10b      	cbz	r3, 8001620 <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 800161c:	4620      	mov	r0, r4
 800161e:	4798      	blx	r3
}
 8001620:	b003      	add	sp, #12
 8001622:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001628:	bf5e      	ittt	pl
 800162a:	681a      	ldrpl	r2, [r3, #0]
 800162c:	f022 0208 	bicpl.w	r2, r2, #8
 8001630:	601a      	strpl	r2, [r3, #0]
 8001632:	e7c4      	b.n	80015be <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001634:	0350      	lsls	r0, r2, #13
 8001636:	d528      	bpl.n	800168a <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	0319      	lsls	r1, r3, #12
 800163c:	d432      	bmi.n	80016a4 <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 800163e:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8001640:	b10b      	cbz	r3, 8001646 <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 8001642:	4620      	mov	r0, r4
 8001644:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001646:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001648:	2b00      	cmp	r3, #0
 800164a:	d0e9      	beq.n	8001620 <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800164c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800164e:	07da      	lsls	r2, r3, #31
 8001650:	d519      	bpl.n	8001686 <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 8001652:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8001654:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8001656:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800165a:	6813      	ldr	r3, [r2, #0]
 800165c:	f023 0301 	bic.w	r3, r3, #1
 8001660:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001662:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001666:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 800166a:	9b01      	ldr	r3, [sp, #4]
 800166c:	3301      	adds	r3, #1
 800166e:	429f      	cmp	r7, r3
 8001670:	9301      	str	r3, [sp, #4]
 8001672:	d302      	bcc.n	800167a <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001674:	6813      	ldr	r3, [r2, #0]
 8001676:	07db      	lsls	r3, r3, #31
 8001678:	d4f7      	bmi.n	800166a <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 800167a:	2300      	movs	r3, #0
 800167c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8001680:	2301      	movs	r3, #1
 8001682:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8001686:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001688:	e7c7      	b.n	800161a <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8001690:	d108      	bne.n	80016a4 <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001692:	6819      	ldr	r1, [r3, #0]
 8001694:	f021 0110 	bic.w	r1, r1, #16
 8001698:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800169a:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 800169c:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80016a0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 80016a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80016a6:	e7cb      	b.n	8001640 <HAL_DMA_IRQHandler+0x108>
 80016a8:	20000018 	.word	0x20000018

080016ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016b0:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016b2:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016b4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8001864 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016b8:	4a68      	ldr	r2, [pc, #416]	; (800185c <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016ba:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8001868 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016be:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016c0:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 80016c2:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016c6:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 80016c8:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016cc:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 80016d0:	45b6      	cmp	lr, r6
 80016d2:	f040 80ae 	bne.w	8001832 <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016d6:	684c      	ldr	r4, [r1, #4]
 80016d8:	f024 0710 	bic.w	r7, r4, #16
 80016dc:	2f02      	cmp	r7, #2
 80016de:	d116      	bne.n	800170e <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 80016e0:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80016e4:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016e8:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80016ec:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016f0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80016f4:	f04f 0c0f 	mov.w	ip, #15
 80016f8:	fa0c fc0b 	lsl.w	ip, ip, fp
 80016fc:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001700:	690d      	ldr	r5, [r1, #16]
 8001702:	fa05 f50b 	lsl.w	r5, r5, fp
 8001706:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 800170a:	f8ca 5020 	str.w	r5, [sl, #32]
 800170e:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001712:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8001714:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001718:	fa05 f50a 	lsl.w	r5, r5, sl
 800171c:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800171e:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001722:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001726:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800172a:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800172c:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001730:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8001732:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001736:	d811      	bhi.n	800175c <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8001738:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800173a:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 800173e:	68cf      	ldr	r7, [r1, #12]
 8001740:	fa07 fc0a 	lsl.w	ip, r7, sl
 8001744:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8001748:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800174a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800174c:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001750:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8001754:	409f      	lsls	r7, r3
 8001756:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800175a:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800175c:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800175e:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001760:	688f      	ldr	r7, [r1, #8]
 8001762:	fa07 f70a 	lsl.w	r7, r7, sl
 8001766:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8001768:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800176a:	00e5      	lsls	r5, r4, #3
 800176c:	d561      	bpl.n	8001832 <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800176e:	f04f 0b00 	mov.w	fp, #0
 8001772:	f8cd b00c 	str.w	fp, [sp, #12]
 8001776:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800177a:	4d39      	ldr	r5, [pc, #228]	; (8001860 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800177c:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8001780:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8001784:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8001788:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 800178c:	9703      	str	r7, [sp, #12]
 800178e:	9f03      	ldr	r7, [sp, #12]
 8001790:	f023 0703 	bic.w	r7, r3, #3
 8001794:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001798:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800179c:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80017a0:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017a4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80017a8:	f04f 0e0f 	mov.w	lr, #15
 80017ac:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017b0:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017b2:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017b6:	d043      	beq.n	8001840 <HAL_GPIO_Init+0x194>
 80017b8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80017bc:	42a8      	cmp	r0, r5
 80017be:	d041      	beq.n	8001844 <HAL_GPIO_Init+0x198>
 80017c0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80017c4:	42a8      	cmp	r0, r5
 80017c6:	d03f      	beq.n	8001848 <HAL_GPIO_Init+0x19c>
 80017c8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80017cc:	42a8      	cmp	r0, r5
 80017ce:	d03d      	beq.n	800184c <HAL_GPIO_Init+0x1a0>
 80017d0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80017d4:	42a8      	cmp	r0, r5
 80017d6:	d03b      	beq.n	8001850 <HAL_GPIO_Init+0x1a4>
 80017d8:	4548      	cmp	r0, r9
 80017da:	d03b      	beq.n	8001854 <HAL_GPIO_Init+0x1a8>
 80017dc:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80017e0:	42a8      	cmp	r0, r5
 80017e2:	d039      	beq.n	8001858 <HAL_GPIO_Init+0x1ac>
 80017e4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80017e8:	42a8      	cmp	r0, r5
 80017ea:	bf14      	ite	ne
 80017ec:	2508      	movne	r5, #8
 80017ee:	2507      	moveq	r5, #7
 80017f0:	fa05 f50c 	lsl.w	r5, r5, ip
 80017f4:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017f8:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 80017fa:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80017fc:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017fe:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001802:	bf0c      	ite	eq
 8001804:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001806:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8001808:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 800180a:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800180c:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001810:	bf0c      	ite	eq
 8001812:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001814:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8001816:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001818:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800181a:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800181e:	bf0c      	ite	eq
 8001820:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001822:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8001824:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8001826:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001828:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800182a:	bf54      	ite	pl
 800182c:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 800182e:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8001830:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001832:	3301      	adds	r3, #1
 8001834:	2b10      	cmp	r3, #16
 8001836:	f47f af44 	bne.w	80016c2 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 800183a:	b005      	add	sp, #20
 800183c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001840:	465d      	mov	r5, fp
 8001842:	e7d5      	b.n	80017f0 <HAL_GPIO_Init+0x144>
 8001844:	2501      	movs	r5, #1
 8001846:	e7d3      	b.n	80017f0 <HAL_GPIO_Init+0x144>
 8001848:	2502      	movs	r5, #2
 800184a:	e7d1      	b.n	80017f0 <HAL_GPIO_Init+0x144>
 800184c:	2503      	movs	r5, #3
 800184e:	e7cf      	b.n	80017f0 <HAL_GPIO_Init+0x144>
 8001850:	2504      	movs	r5, #4
 8001852:	e7cd      	b.n	80017f0 <HAL_GPIO_Init+0x144>
 8001854:	2505      	movs	r5, #5
 8001856:	e7cb      	b.n	80017f0 <HAL_GPIO_Init+0x144>
 8001858:	2506      	movs	r5, #6
 800185a:	e7c9      	b.n	80017f0 <HAL_GPIO_Init+0x144>
 800185c:	40013c00 	.word	0x40013c00
 8001860:	40020000 	.word	0x40020000
 8001864:	40023800 	.word	0x40023800
 8001868:	40021400 	.word	0x40021400

0800186c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800186c:	b10a      	cbz	r2, 8001872 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800186e:	6181      	str	r1, [r0, #24]
 8001870:	4770      	bx	lr
 8001872:	0409      	lsls	r1, r1, #16
 8001874:	e7fb      	b.n	800186e <HAL_GPIO_WritePin+0x2>

08001876 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001876:	6802      	ldr	r2, [r0, #0]
 8001878:	6953      	ldr	r3, [r2, #20]
 800187a:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 800187e:	d00d      	beq.n	800189c <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001880:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001884:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001886:	2304      	movs	r3, #4
 8001888:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 800188a:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 800188c:	2300      	movs	r3, #0
 800188e:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001890:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 8001894:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_ERROR;
 8001898:	2001      	movs	r0, #1
 800189a:	4770      	bx	lr
  }
  return HAL_OK;
 800189c:	4618      	mov	r0, r3
}
 800189e:	4770      	bx	lr

080018a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80018a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80018a4:	4604      	mov	r4, r0
 80018a6:	4617      	mov	r7, r2
 80018a8:	4699      	mov	r9, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80018aa:	f3c1 4807 	ubfx	r8, r1, #16, #8
 80018ae:	b28e      	uxth	r6, r1
 80018b0:	6825      	ldr	r5, [r4, #0]
 80018b2:	f1b8 0f01 	cmp.w	r8, #1
 80018b6:	bf0c      	ite	eq
 80018b8:	696b      	ldreq	r3, [r5, #20]
 80018ba:	69ab      	ldrne	r3, [r5, #24]
 80018bc:	ea36 0303 	bics.w	r3, r6, r3
 80018c0:	bf14      	ite	ne
 80018c2:	2001      	movne	r0, #1
 80018c4:	2000      	moveq	r0, #0
 80018c6:	b908      	cbnz	r0, 80018cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 80018c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80018cc:	696b      	ldr	r3, [r5, #20]
 80018ce:	055a      	lsls	r2, r3, #21
 80018d0:	d512      	bpl.n	80018f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80018d2:	682b      	ldr	r3, [r5, #0]
 80018d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018d8:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018da:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80018de:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80018e0:	2304      	movs	r3, #4
 80018e2:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 80018e4:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 80018e6:	2300      	movs	r3, #0
 80018e8:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 80018ea:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 80018ee:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 80018f2:	2001      	movs	r0, #1
 80018f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 80018f8:	1c7b      	adds	r3, r7, #1
 80018fa:	d0d9      	beq.n	80018b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80018fc:	b94f      	cbnz	r7, 8001912 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState = I2C_STATE_NONE;
 80018fe:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8001900:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001902:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001904:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001908:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 800190c:	2003      	movs	r0, #3
 800190e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001912:	f7ff fb03 	bl	8000f1c <HAL_GetTick>
 8001916:	eba0 0009 	sub.w	r0, r0, r9
 800191a:	4287      	cmp	r7, r0
 800191c:	d2c8      	bcs.n	80018b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 800191e:	e7ee      	b.n	80018fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

08001920 <I2C_WaitOnFlagUntilTimeout>:
{
 8001920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001924:	9e08      	ldr	r6, [sp, #32]
 8001926:	4604      	mov	r4, r0
 8001928:	4690      	mov	r8, r2
 800192a:	461f      	mov	r7, r3
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 800192c:	f3c1 4907 	ubfx	r9, r1, #16, #8
 8001930:	b28d      	uxth	r5, r1
 8001932:	6823      	ldr	r3, [r4, #0]
 8001934:	f1b9 0f01 	cmp.w	r9, #1
 8001938:	bf0c      	ite	eq
 800193a:	695b      	ldreq	r3, [r3, #20]
 800193c:	699b      	ldrne	r3, [r3, #24]
 800193e:	ea35 0303 	bics.w	r3, r5, r3
 8001942:	bf0c      	ite	eq
 8001944:	2301      	moveq	r3, #1
 8001946:	2300      	movne	r3, #0
 8001948:	4543      	cmp	r3, r8
 800194a:	d002      	beq.n	8001952 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 800194c:	2000      	movs	r0, #0
}
 800194e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001952:	1c7b      	adds	r3, r7, #1
 8001954:	d0ed      	beq.n	8001932 <I2C_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001956:	b95f      	cbnz	r7, 8001970 <I2C_WaitOnFlagUntilTimeout+0x50>
        hi2c->PreviousState = I2C_STATE_NONE;
 8001958:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 800195a:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 800195c:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 800195e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001962:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8001966:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001968:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800196c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001970:	f7ff fad4 	bl	8000f1c <HAL_GetTick>
 8001974:	1b80      	subs	r0, r0, r6
 8001976:	4287      	cmp	r7, r0
 8001978:	d2db      	bcs.n	8001932 <I2C_WaitOnFlagUntilTimeout+0x12>
 800197a:	e7ed      	b.n	8001958 <I2C_WaitOnFlagUntilTimeout+0x38>

0800197c <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 800197c:	b570      	push	{r4, r5, r6, lr}
 800197e:	4604      	mov	r4, r0
 8001980:	460d      	mov	r5, r1
 8001982:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001984:	6823      	ldr	r3, [r4, #0]
 8001986:	695b      	ldr	r3, [r3, #20]
 8001988:	061b      	lsls	r3, r3, #24
 800198a:	d501      	bpl.n	8001990 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 800198c:	2000      	movs	r0, #0
 800198e:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001990:	4620      	mov	r0, r4
 8001992:	f7ff ff70 	bl	8001876 <I2C_IsAcknowledgeFailed>
 8001996:	b9a8      	cbnz	r0, 80019c4 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8001998:	1c6a      	adds	r2, r5, #1
 800199a:	d0f3      	beq.n	8001984 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800199c:	b965      	cbnz	r5, 80019b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800199e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80019a0:	f043 0320 	orr.w	r3, r3, #32
 80019a4:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 80019a6:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80019a8:	2300      	movs	r3, #0
 80019aa:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80019ac:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80019b0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 80019b4:	2003      	movs	r0, #3
 80019b6:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80019b8:	f7ff fab0 	bl	8000f1c <HAL_GetTick>
 80019bc:	1b80      	subs	r0, r0, r6
 80019be:	4285      	cmp	r5, r0
 80019c0:	d2e0      	bcs.n	8001984 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 80019c2:	e7ec      	b.n	800199e <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 80019c4:	2001      	movs	r0, #1
}
 80019c6:	bd70      	pop	{r4, r5, r6, pc}

080019c8 <I2C_RequestMemoryWrite>:
{
 80019c8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80019cc:	4615      	mov	r5, r2
  hi2c->Instance->CR1 |= I2C_CR1_START;
 80019ce:	6802      	ldr	r2, [r0, #0]
{
 80019d0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80019d2:	4698      	mov	r8, r3
  hi2c->Instance->CR1 |= I2C_CR1_START;
 80019d4:	6813      	ldr	r3, [r2, #0]
 80019d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019da:	6013      	str	r3, [r2, #0]
{
 80019dc:	460f      	mov	r7, r1
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80019de:	9600      	str	r6, [sp, #0]
 80019e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80019e2:	2200      	movs	r2, #0
 80019e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 80019e8:	4604      	mov	r4, r0
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80019ea:	f7ff ff99 	bl	8001920 <I2C_WaitOnFlagUntilTimeout>
 80019ee:	b968      	cbnz	r0, 8001a0c <I2C_RequestMemoryWrite+0x44>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80019f0:	6823      	ldr	r3, [r4, #0]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80019f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80019f4:	491c      	ldr	r1, [pc, #112]	; (8001a68 <I2C_RequestMemoryWrite+0xa0>)
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80019f6:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 80019fa:	611f      	str	r7, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80019fc:	4620      	mov	r0, r4
 80019fe:	4633      	mov	r3, r6
 8001a00:	f7ff ff4e 	bl	80018a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a04:	b130      	cbz	r0, 8001a14 <I2C_RequestMemoryWrite+0x4c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a08:	2b04      	cmp	r3, #4
 8001a0a:	d018      	beq.n	8001a3e <I2C_RequestMemoryWrite+0x76>
      return HAL_TIMEOUT;
 8001a0c:	2003      	movs	r0, #3
}
 8001a0e:	b004      	add	sp, #16
 8001a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a14:	6823      	ldr	r3, [r4, #0]
 8001a16:	9003      	str	r0, [sp, #12]
 8001a18:	695a      	ldr	r2, [r3, #20]
 8001a1a:	9203      	str	r2, [sp, #12]
 8001a1c:	699b      	ldr	r3, [r3, #24]
 8001a1e:	9303      	str	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a20:	4632      	mov	r2, r6
 8001a22:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a24:	9b03      	ldr	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a26:	4620      	mov	r0, r4
 8001a28:	f7ff ffa8 	bl	800197c <I2C_WaitOnTXEFlagUntilTimeout>
 8001a2c:	b148      	cbz	r0, 8001a42 <I2C_RequestMemoryWrite+0x7a>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a30:	2b04      	cmp	r3, #4
 8001a32:	d1eb      	bne.n	8001a0c <I2C_RequestMemoryWrite+0x44>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001a34:	6822      	ldr	r2, [r4, #0]
 8001a36:	6813      	ldr	r3, [r2, #0]
 8001a38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a3c:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 8001a3e:	2001      	movs	r0, #1
 8001a40:	e7e5      	b.n	8001a0e <I2C_RequestMemoryWrite+0x46>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001a42:	f1b8 0f01 	cmp.w	r8, #1
 8001a46:	6823      	ldr	r3, [r4, #0]
 8001a48:	d102      	bne.n	8001a50 <I2C_RequestMemoryWrite+0x88>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001a4a:	b2ed      	uxtb	r5, r5
 8001a4c:	611d      	str	r5, [r3, #16]
 8001a4e:	e7de      	b.n	8001a0e <I2C_RequestMemoryWrite+0x46>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001a50:	0a2a      	lsrs	r2, r5, #8
 8001a52:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a54:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001a56:	4632      	mov	r2, r6
 8001a58:	4620      	mov	r0, r4
 8001a5a:	f7ff ff8f 	bl	800197c <I2C_WaitOnTXEFlagUntilTimeout>
 8001a5e:	2800      	cmp	r0, #0
 8001a60:	d1e5      	bne.n	8001a2e <I2C_RequestMemoryWrite+0x66>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001a62:	6823      	ldr	r3, [r4, #0]
 8001a64:	e7f1      	b.n	8001a4a <I2C_RequestMemoryWrite+0x82>
 8001a66:	bf00      	nop
 8001a68:	00010002 	.word	0x00010002

08001a6c <I2C_RequestMemoryRead>:
{
 8001a6c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001a70:	4698      	mov	r8, r3
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001a72:	6803      	ldr	r3, [r0, #0]
{
 8001a74:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8001a76:	4616      	mov	r6, r2
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001a7e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a86:	601a      	str	r2, [r3, #0]
{
 8001a88:	460f      	mov	r7, r1
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001a8a:	9500      	str	r5, [sp, #0]
 8001a8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8001a94:	4604      	mov	r4, r0
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001a96:	f7ff ff43 	bl	8001920 <I2C_WaitOnFlagUntilTimeout>
 8001a9a:	b980      	cbnz	r0, 8001abe <I2C_RequestMemoryRead+0x52>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001a9c:	6823      	ldr	r3, [r4, #0]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001a9e:	492f      	ldr	r1, [pc, #188]	; (8001b5c <I2C_RequestMemoryRead+0xf0>)
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001aa0:	b2ff      	uxtb	r7, r7
 8001aa2:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
 8001aa6:	611a      	str	r2, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001aa8:	4620      	mov	r0, r4
 8001aaa:	462b      	mov	r3, r5
 8001aac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001aae:	f7ff fef7 	bl	80018a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ab2:	b140      	cbz	r0, 8001ac6 <I2C_RequestMemoryRead+0x5a>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ab4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ab6:	2b04      	cmp	r3, #4
 8001ab8:	d101      	bne.n	8001abe <I2C_RequestMemoryRead+0x52>
      return HAL_ERROR;
 8001aba:	2001      	movs	r0, #1
 8001abc:	e000      	b.n	8001ac0 <I2C_RequestMemoryRead+0x54>
      return HAL_TIMEOUT;
 8001abe:	2003      	movs	r0, #3
}
 8001ac0:	b004      	add	sp, #16
 8001ac2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ac6:	6823      	ldr	r3, [r4, #0]
 8001ac8:	9003      	str	r0, [sp, #12]
 8001aca:	695a      	ldr	r2, [r3, #20]
 8001acc:	9203      	str	r2, [sp, #12]
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	9303      	str	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ad2:	462a      	mov	r2, r5
 8001ad4:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ad6:	9b03      	ldr	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ad8:	4620      	mov	r0, r4
 8001ada:	f7ff ff4f 	bl	800197c <I2C_WaitOnTXEFlagUntilTimeout>
 8001ade:	b140      	cbz	r0, 8001af2 <I2C_RequestMemoryRead+0x86>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ae0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ae2:	2b04      	cmp	r3, #4
 8001ae4:	d1eb      	bne.n	8001abe <I2C_RequestMemoryRead+0x52>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001ae6:	6822      	ldr	r2, [r4, #0]
 8001ae8:	6813      	ldr	r3, [r2, #0]
 8001aea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001aee:	6013      	str	r3, [r2, #0]
 8001af0:	e7e3      	b.n	8001aba <I2C_RequestMemoryRead+0x4e>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001af2:	f1b8 0f01 	cmp.w	r8, #1
 8001af6:	6823      	ldr	r3, [r4, #0]
 8001af8:	d124      	bne.n	8001b44 <I2C_RequestMemoryRead+0xd8>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001afa:	b2f6      	uxtb	r6, r6
 8001afc:	611e      	str	r6, [r3, #16]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001afe:	462a      	mov	r2, r5
 8001b00:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001b02:	4620      	mov	r0, r4
 8001b04:	f7ff ff3a 	bl	800197c <I2C_WaitOnTXEFlagUntilTimeout>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	2800      	cmp	r0, #0
 8001b0c:	d1e8      	bne.n	8001ae0 <I2C_RequestMemoryRead+0x74>
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8001b0e:	6821      	ldr	r1, [r4, #0]
 8001b10:	680b      	ldr	r3, [r1, #0]
 8001b12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b16:	600b      	str	r3, [r1, #0]
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001b18:	4620      	mov	r0, r4
 8001b1a:	9500      	str	r5, [sp, #0]
 8001b1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001b1e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001b22:	f7ff fefd 	bl	8001920 <I2C_WaitOnFlagUntilTimeout>
 8001b26:	2800      	cmp	r0, #0
 8001b28:	d1c9      	bne.n	8001abe <I2C_RequestMemoryRead+0x52>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001b2a:	6823      	ldr	r3, [r4, #0]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001b2e:	490b      	ldr	r1, [pc, #44]	; (8001b5c <I2C_RequestMemoryRead+0xf0>)
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001b30:	f047 0701 	orr.w	r7, r7, #1
 8001b34:	611f      	str	r7, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b36:	4620      	mov	r0, r4
 8001b38:	462b      	mov	r3, r5
 8001b3a:	f7ff feb1 	bl	80018a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b3e:	2800      	cmp	r0, #0
 8001b40:	d1b8      	bne.n	8001ab4 <I2C_RequestMemoryRead+0x48>
 8001b42:	e7bd      	b.n	8001ac0 <I2C_RequestMemoryRead+0x54>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001b44:	0a32      	lsrs	r2, r6, #8
 8001b46:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b48:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001b4a:	462a      	mov	r2, r5
 8001b4c:	4620      	mov	r0, r4
 8001b4e:	f7ff ff15 	bl	800197c <I2C_WaitOnTXEFlagUntilTimeout>
 8001b52:	2800      	cmp	r0, #0
 8001b54:	d1c4      	bne.n	8001ae0 <I2C_RequestMemoryRead+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001b56:	6823      	ldr	r3, [r4, #0]
 8001b58:	e7cf      	b.n	8001afa <I2C_RequestMemoryRead+0x8e>
 8001b5a:	bf00      	nop
 8001b5c:	00010002 	.word	0x00010002

08001b60 <I2C_WaitOnRXNEFlagUntilTimeout>:
{  
 8001b60:	b570      	push	{r4, r5, r6, lr}
 8001b62:	4604      	mov	r4, r0
 8001b64:	460d      	mov	r5, r1
 8001b66:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001b68:	6820      	ldr	r0, [r4, #0]
 8001b6a:	6943      	ldr	r3, [r0, #20]
 8001b6c:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8001b70:	d001      	beq.n	8001b76 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8001b72:	2000      	movs	r0, #0
}
 8001b74:	bd70      	pop	{r4, r5, r6, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001b76:	6942      	ldr	r2, [r0, #20]
 8001b78:	06d2      	lsls	r2, r2, #27
 8001b7a:	d50b      	bpl.n	8001b94 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b7c:	f06f 0210 	mvn.w	r2, #16
 8001b80:	6142      	str	r2, [r0, #20]
      hi2c->State= HAL_I2C_STATE_READY;
 8001b82:	2220      	movs	r2, #32
      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b84:	6423      	str	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001b86:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->PreviousState = I2C_STATE_NONE;
 8001b8a:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8001b8c:	2001      	movs	r0, #1
      hi2c->State= HAL_I2C_STATE_READY;
 8001b8e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8001b92:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001b94:	b95d      	cbnz	r5, 8001bae <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b98:	f043 0320 	orr.w	r3, r3, #32
 8001b9c:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8001b9e:	2320      	movs	r3, #32
 8001ba0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      __HAL_UNLOCK(hi2c);
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8001baa:	2003      	movs	r0, #3
 8001bac:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001bae:	f7ff f9b5 	bl	8000f1c <HAL_GetTick>
 8001bb2:	1b80      	subs	r0, r0, r6
 8001bb4:	4285      	cmp	r5, r0
 8001bb6:	d2d7      	bcs.n	8001b68 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 8001bb8:	e7ed      	b.n	8001b96 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>

08001bba <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 8001bba:	b570      	push	{r4, r5, r6, lr}
 8001bbc:	4604      	mov	r4, r0
 8001bbe:	460d      	mov	r5, r1
 8001bc0:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001bc2:	6823      	ldr	r3, [r4, #0]
 8001bc4:	695b      	ldr	r3, [r3, #20]
 8001bc6:	075b      	lsls	r3, r3, #29
 8001bc8:	d501      	bpl.n	8001bce <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8001bca:	2000      	movs	r0, #0
 8001bcc:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001bce:	4620      	mov	r0, r4
 8001bd0:	f7ff fe51 	bl	8001876 <I2C_IsAcknowledgeFailed>
 8001bd4:	b9a8      	cbnz	r0, 8001c02 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8001bd6:	1c6a      	adds	r2, r5, #1
 8001bd8:	d0f3      	beq.n	8001bc2 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001bda:	b965      	cbnz	r5, 8001bf6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bdc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001bde:	f043 0320 	orr.w	r3, r3, #32
 8001be2:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8001be4:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001be6:	2300      	movs	r3, #0
 8001be8:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001bea:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001bee:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8001bf2:	2003      	movs	r0, #3
 8001bf4:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001bf6:	f7ff f991 	bl	8000f1c <HAL_GetTick>
 8001bfa:	1b80      	subs	r0, r0, r6
 8001bfc:	4285      	cmp	r5, r0
 8001bfe:	d2e0      	bcs.n	8001bc2 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 8001c00:	e7ec      	b.n	8001bdc <I2C_WaitOnBTFFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8001c02:	2001      	movs	r0, #1
}
 8001c04:	bd70      	pop	{r4, r5, r6, pc}
	...

08001c08 <HAL_I2C_Init>:
{
 8001c08:	b570      	push	{r4, r5, r6, lr}
  if(hi2c == NULL)
 8001c0a:	4604      	mov	r4, r0
 8001c0c:	2800      	cmp	r0, #0
 8001c0e:	d062      	beq.n	8001cd6 <HAL_I2C_Init+0xce>
  if(hi2c->State == HAL_I2C_STATE_RESET)
 8001c10:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001c14:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001c18:	b91b      	cbnz	r3, 8001c22 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8001c1a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001c1e:	f003 fc53 	bl	80054c8 <HAL_I2C_MspInit>
  __HAL_I2C_DISABLE(hi2c);
 8001c22:	6822      	ldr	r2, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001c24:	4e2d      	ldr	r6, [pc, #180]	; (8001cdc <HAL_I2C_Init+0xd4>)
  freqrange = I2C_FREQRANGE(pclk1);
 8001c26:	4d2e      	ldr	r5, [pc, #184]	; (8001ce0 <HAL_I2C_Init+0xd8>)
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c28:	2324      	movs	r3, #36	; 0x24
 8001c2a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001c2e:	6813      	ldr	r3, [r2, #0]
 8001c30:	f023 0301 	bic.w	r3, r3, #1
 8001c34:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c36:	f001 f913 	bl	8002e60 <HAL_RCC_GetPCLK1Freq>
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001c3a:	6863      	ldr	r3, [r4, #4]
  hi2c->Instance->CR2 = freqrange;
 8001c3c:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001c3e:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001c42:	42b3      	cmp	r3, r6
 8001c44:	bf84      	itt	hi
 8001c46:	f44f 7196 	movhi.w	r1, #300	; 0x12c
 8001c4a:	4369      	mulhi	r1, r5
  hi2c->Instance->CR2 = freqrange;
 8001c4c:	6055      	str	r5, [r2, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001c4e:	bf91      	iteee	ls
 8001c50:	1c69      	addls	r1, r5, #1
 8001c52:	f44f 757a 	movhi.w	r5, #1000	; 0x3e8
 8001c56:	fbb1 f1f5 	udivhi	r1, r1, r5
 8001c5a:	3101      	addhi	r1, #1
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001c5c:	42b3      	cmp	r3, r6
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001c5e:	6211      	str	r1, [r2, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001c60:	d821      	bhi.n	8001ca6 <HAL_I2C_Init+0x9e>
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	fbb0 f0f3 	udiv	r0, r0, r3
 8001c68:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001c6c:	2b03      	cmp	r3, #3
 8001c6e:	bf98      	it	ls
 8001c70:	2004      	movls	r0, #4
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c72:	6a21      	ldr	r1, [r4, #32]
 8001c74:	69e3      	ldr	r3, [r4, #28]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001c76:	61d0      	str	r0, [r2, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c78:	430b      	orrs	r3, r1
 8001c7a:	6013      	str	r3, [r2, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8001c7c:	68e1      	ldr	r1, [r4, #12]
 8001c7e:	6923      	ldr	r3, [r4, #16]
 8001c80:	430b      	orrs	r3, r1
 8001c82:	6093      	str	r3, [r2, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8001c84:	69a1      	ldr	r1, [r4, #24]
 8001c86:	6963      	ldr	r3, [r4, #20]
 8001c88:	430b      	orrs	r3, r1
 8001c8a:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8001c8c:	6813      	ldr	r3, [r2, #0]
 8001c8e:	f043 0301 	orr.w	r3, r3, #1
 8001c92:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c94:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8001c96:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c98:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c9a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c9e:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ca0:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8001ca4:	bd70      	pop	{r4, r5, r6, pc}
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001ca6:	68a1      	ldr	r1, [r4, #8]
 8001ca8:	b949      	cbnz	r1, 8001cbe <HAL_I2C_Init+0xb6>
 8001caa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001cae:	fbb0 f0f3 	udiv	r0, r0, r3
 8001cb2:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001cb6:	b163      	cbz	r3, 8001cd2 <HAL_I2C_Init+0xca>
 8001cb8:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8001cbc:	e7d9      	b.n	8001c72 <HAL_I2C_Init+0x6a>
 8001cbe:	2119      	movs	r1, #25
 8001cc0:	434b      	muls	r3, r1
 8001cc2:	fbb0 f0f3 	udiv	r0, r0, r3
 8001cc6:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001cca:	b113      	cbz	r3, 8001cd2 <HAL_I2C_Init+0xca>
 8001ccc:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8001cd0:	e7cf      	b.n	8001c72 <HAL_I2C_Init+0x6a>
 8001cd2:	2001      	movs	r0, #1
 8001cd4:	e7cd      	b.n	8001c72 <HAL_I2C_Init+0x6a>
    return HAL_ERROR;
 8001cd6:	2001      	movs	r0, #1
}
 8001cd8:	bd70      	pop	{r4, r5, r6, pc}
 8001cda:	bf00      	nop
 8001cdc:	000186a0 	.word	0x000186a0
 8001ce0:	000f4240 	.word	0x000f4240

08001ce4 <HAL_I2C_Mem_Write>:
{
 8001ce4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8001ce8:	4604      	mov	r4, r0
 8001cea:	469a      	mov	sl, r3
 8001cec:	4688      	mov	r8, r1
 8001cee:	4691      	mov	r9, r2
 8001cf0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  tickstart = HAL_GetTick();
 8001cf2:	f7ff f913 	bl	8000f1c <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001cf6:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001cfa:	2b20      	cmp	r3, #32
  tickstart = HAL_GetTick();
 8001cfc:	4605      	mov	r5, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001cfe:	d003      	beq.n	8001d08 <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 8001d00:	2002      	movs	r0, #2
}
 8001d02:	b002      	add	sp, #8
 8001d04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d08:	9000      	str	r0, [sp, #0]
 8001d0a:	2319      	movs	r3, #25
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	493e      	ldr	r1, [pc, #248]	; (8001e08 <HAL_I2C_Mem_Write+0x124>)
 8001d10:	4620      	mov	r0, r4
 8001d12:	f7ff fe05 	bl	8001920 <I2C_WaitOnFlagUntilTimeout>
 8001d16:	2800      	cmp	r0, #0
 8001d18:	d1f2      	bne.n	8001d00 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 8001d1a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d0ee      	beq.n	8001d00 <HAL_I2C_Mem_Write+0x1c>
 8001d22:	2301      	movs	r3, #1
 8001d24:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d28:	6823      	ldr	r3, [r4, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001d2e:	bf5e      	ittt	pl
 8001d30:	681a      	ldrpl	r2, [r3, #0]
 8001d32:	f042 0201 	orrpl.w	r2, r2, #1
 8001d36:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d3e:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001d40:	2321      	movs	r3, #33	; 0x21
 8001d42:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001d46:	2340      	movs	r3, #64	; 0x40
 8001d48:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->pBuffPtr    = pData;
 8001d4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001d4e:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d50:	2700      	movs	r7, #0
    hi2c->XferCount   = Size;
 8001d52:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d56:	6427      	str	r7, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8001d58:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d5a:	4b2c      	ldr	r3, [pc, #176]	; (8001e0c <HAL_I2C_Mem_Write+0x128>)
 8001d5c:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001d5e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001d60:	8523      	strh	r3, [r4, #40]	; 0x28
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001d62:	9501      	str	r5, [sp, #4]
 8001d64:	9600      	str	r6, [sp, #0]
 8001d66:	4653      	mov	r3, sl
 8001d68:	464a      	mov	r2, r9
 8001d6a:	4641      	mov	r1, r8
 8001d6c:	4620      	mov	r0, r4
 8001d6e:	f7ff fe2b 	bl	80019c8 <I2C_RequestMemoryWrite>
 8001d72:	2800      	cmp	r0, #0
 8001d74:	d02a      	beq.n	8001dcc <HAL_I2C_Mem_Write+0xe8>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d76:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001d78:	f884 703c 	strb.w	r7, [r4, #60]	; 0x3c
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d7c:	2b04      	cmp	r3, #4
 8001d7e:	d107      	bne.n	8001d90 <HAL_I2C_Mem_Write+0xac>
        return HAL_ERROR;
 8001d80:	2001      	movs	r0, #1
 8001d82:	e7be      	b.n	8001d02 <HAL_I2C_Mem_Write+0x1e>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d84:	f7ff fdfa 	bl	800197c <I2C_WaitOnTXEFlagUntilTimeout>
 8001d88:	b120      	cbz	r0, 8001d94 <HAL_I2C_Mem_Write+0xb0>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d8c:	2b04      	cmp	r3, #4
 8001d8e:	d034      	beq.n	8001dfa <HAL_I2C_Mem_Write+0x116>
          return HAL_TIMEOUT;
 8001d90:	2003      	movs	r0, #3
 8001d92:	e7b6      	b.n	8001d02 <HAL_I2C_Mem_Write+0x1e>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001d94:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001d96:	6827      	ldr	r7, [r4, #0]
      hi2c->XferSize--;
 8001d98:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001d9a:	1c4b      	adds	r3, r1, #1
 8001d9c:	6263      	str	r3, [r4, #36]	; 0x24
 8001d9e:	780b      	ldrb	r3, [r1, #0]
 8001da0:	613b      	str	r3, [r7, #16]
      hi2c->XferCount--;
 8001da2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001da4:	3b01      	subs	r3, #1
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001daa:	697b      	ldr	r3, [r7, #20]
      hi2c->XferSize--;
 8001dac:	1e50      	subs	r0, r2, #1
 8001dae:	b280      	uxth	r0, r0
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001db0:	075b      	lsls	r3, r3, #29
      hi2c->XferSize--;
 8001db2:	8520      	strh	r0, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001db4:	d50a      	bpl.n	8001dcc <HAL_I2C_Mem_Write+0xe8>
 8001db6:	b148      	cbz	r0, 8001dcc <HAL_I2C_Mem_Write+0xe8>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001db8:	1c8b      	adds	r3, r1, #2
 8001dba:	6263      	str	r3, [r4, #36]	; 0x24
 8001dbc:	784b      	ldrb	r3, [r1, #1]
 8001dbe:	613b      	str	r3, [r7, #16]
        hi2c->XferCount--;
 8001dc0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001dc2:	3b01      	subs	r3, #1
        hi2c->XferSize--;
 8001dc4:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 8001dc6:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8001dc8:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001dca:	8563      	strh	r3, [r4, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 8001dcc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dce:	462a      	mov	r2, r5
 8001dd0:	4631      	mov	r1, r6
 8001dd2:	4620      	mov	r0, r4
    while(hi2c->XferSize > 0U)
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d1d5      	bne.n	8001d84 <HAL_I2C_Mem_Write+0xa0>
    if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dd8:	f7ff feef 	bl	8001bba <I2C_WaitOnBTFFlagUntilTimeout>
 8001ddc:	2800      	cmp	r0, #0
 8001dde:	d1d4      	bne.n	8001d8a <HAL_I2C_Mem_Write+0xa6>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001de0:	6822      	ldr	r2, [r4, #0]
 8001de2:	6813      	ldr	r3, [r2, #0]
 8001de4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001de8:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001dea:	2320      	movs	r3, #32
 8001dec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8001df0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001df4:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 8001df8:	e783      	b.n	8001d02 <HAL_I2C_Mem_Write+0x1e>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001dfa:	6822      	ldr	r2, [r4, #0]
 8001dfc:	6813      	ldr	r3, [r2, #0]
 8001dfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e02:	6013      	str	r3, [r2, #0]
 8001e04:	e7bc      	b.n	8001d80 <HAL_I2C_Mem_Write+0x9c>
 8001e06:	bf00      	nop
 8001e08:	00100002 	.word	0x00100002
 8001e0c:	ffff0000 	.word	0xffff0000

08001e10 <HAL_I2C_Mem_Read>:
{
 8001e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e14:	4604      	mov	r4, r0
 8001e16:	b086      	sub	sp, #24
 8001e18:	469a      	mov	sl, r3
 8001e1a:	460d      	mov	r5, r1
 8001e1c:	4691      	mov	r9, r2
 8001e1e:	9f10      	ldr	r7, [sp, #64]	; 0x40
  tickstart = HAL_GetTick();
 8001e20:	f7ff f87c 	bl	8000f1c <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001e24:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001e28:	2b20      	cmp	r3, #32
  tickstart = HAL_GetTick();
 8001e2a:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001e2c:	d004      	beq.n	8001e38 <HAL_I2C_Mem_Read+0x28>
    return HAL_BUSY;
 8001e2e:	2502      	movs	r5, #2
}
 8001e30:	4628      	mov	r0, r5
 8001e32:	b006      	add	sp, #24
 8001e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e38:	9000      	str	r0, [sp, #0]
 8001e3a:	2319      	movs	r3, #25
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	4979      	ldr	r1, [pc, #484]	; (8002024 <HAL_I2C_Mem_Read+0x214>)
 8001e40:	4620      	mov	r0, r4
 8001e42:	f7ff fd6d 	bl	8001920 <I2C_WaitOnFlagUntilTimeout>
 8001e46:	2800      	cmp	r0, #0
 8001e48:	d1f1      	bne.n	8001e2e <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 8001e4a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d0ed      	beq.n	8001e2e <HAL_I2C_Mem_Read+0x1e>
 8001e52:	2301      	movs	r3, #1
 8001e54:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e58:	6823      	ldr	r3, [r4, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001e5e:	bf5e      	ittt	pl
 8001e60:	681a      	ldrpl	r2, [r3, #0]
 8001e62:	f042 0201 	orrpl.w	r2, r2, #1
 8001e66:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e6e:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001e70:	2322      	movs	r3, #34	; 0x22
 8001e72:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e76:	2340      	movs	r3, #64	; 0x40
 8001e78:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->pBuffPtr    = pData;
 8001e7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001e7e:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e80:	f04f 0800 	mov.w	r8, #0
    hi2c->XferCount   = Size;
 8001e84:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e88:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8001e8c:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e8e:	4b66      	ldr	r3, [pc, #408]	; (8002028 <HAL_I2C_Mem_Read+0x218>)
 8001e90:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001e92:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001e94:	8523      	strh	r3, [r4, #40]	; 0x28
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e96:	4629      	mov	r1, r5
 8001e98:	9601      	str	r6, [sp, #4]
 8001e9a:	9700      	str	r7, [sp, #0]
 8001e9c:	4653      	mov	r3, sl
 8001e9e:	464a      	mov	r2, r9
 8001ea0:	4620      	mov	r0, r4
 8001ea2:	f7ff fde3 	bl	8001a6c <I2C_RequestMemoryRead>
 8001ea6:	4605      	mov	r5, r0
 8001ea8:	b130      	cbz	r0, 8001eb8 <HAL_I2C_Mem_Read+0xa8>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001eaa:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001eac:	f884 803c 	strb.w	r8, [r4, #60]	; 0x3c
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001eb0:	2b04      	cmp	r3, #4
 8001eb2:	d13a      	bne.n	8001f2a <HAL_I2C_Mem_Read+0x11a>
              return HAL_ERROR;
 8001eb4:	2501      	movs	r5, #1
 8001eb6:	e7bb      	b.n	8001e30 <HAL_I2C_Mem_Read+0x20>
    if(hi2c->XferSize == 0U)
 8001eb8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001eba:	6823      	ldr	r3, [r4, #0]
 8001ebc:	b992      	cbnz	r2, 8001ee4 <HAL_I2C_Mem_Read+0xd4>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ebe:	9002      	str	r0, [sp, #8]
 8001ec0:	695a      	ldr	r2, [r3, #20]
 8001ec2:	9202      	str	r2, [sp, #8]
 8001ec4:	699a      	ldr	r2, [r3, #24]
 8001ec6:	9202      	str	r2, [sp, #8]
 8001ec8:	9a02      	ldr	r2, [sp, #8]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ed0:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001ed2:	2320      	movs	r3, #32
 8001ed4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8001ede:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8001ee2:	e7a5      	b.n	8001e30 <HAL_I2C_Mem_Read+0x20>
    else if(hi2c->XferSize == 1U)
 8001ee4:	2a01      	cmp	r2, #1
 8001ee6:	d122      	bne.n	8001f2e <HAL_I2C_Mem_Read+0x11e>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001eee:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ef0:	9003      	str	r0, [sp, #12]
 8001ef2:	695a      	ldr	r2, [r3, #20]
 8001ef4:	9203      	str	r2, [sp, #12]
 8001ef6:	699a      	ldr	r2, [r3, #24]
 8001ef8:	9203      	str	r2, [sp, #12]
 8001efa:	9a03      	ldr	r2, [sp, #12]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f02:	601a      	str	r2, [r3, #0]
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f04:	f8df 8124 	ldr.w	r8, [pc, #292]	; 800202c <HAL_I2C_Mem_Read+0x21c>
    while(hi2c->XferSize > 0U)
 8001f08:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d0e1      	beq.n	8001ed2 <HAL_I2C_Mem_Read+0xc2>
      if(hi2c->XferSize <= 3U)
 8001f0e:	2b03      	cmp	r3, #3
 8001f10:	d86b      	bhi.n	8001fea <HAL_I2C_Mem_Read+0x1da>
        if(hi2c->XferSize== 1U)
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d123      	bne.n	8001f5e <HAL_I2C_Mem_Read+0x14e>
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8001f16:	4632      	mov	r2, r6
 8001f18:	4639      	mov	r1, r7
 8001f1a:	4620      	mov	r0, r4
 8001f1c:	f7ff fe20 	bl	8001b60 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f20:	2800      	cmp	r0, #0
 8001f22:	d039      	beq.n	8001f98 <HAL_I2C_Mem_Read+0x188>
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8001f24:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f26:	2b20      	cmp	r3, #32
 8001f28:	d1c4      	bne.n	8001eb4 <HAL_I2C_Mem_Read+0xa4>
              return HAL_TIMEOUT;
 8001f2a:	2503      	movs	r5, #3
 8001f2c:	e780      	b.n	8001e30 <HAL_I2C_Mem_Read+0x20>
    else if(hi2c->XferSize == 2U)
 8001f2e:	2a02      	cmp	r2, #2
 8001f30:	d10e      	bne.n	8001f50 <HAL_I2C_Mem_Read+0x140>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f38:	601a      	str	r2, [r3, #0]
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f40:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f42:	9004      	str	r0, [sp, #16]
 8001f44:	695a      	ldr	r2, [r3, #20]
 8001f46:	9204      	str	r2, [sp, #16]
 8001f48:	699b      	ldr	r3, [r3, #24]
 8001f4a:	9304      	str	r3, [sp, #16]
 8001f4c:	9b04      	ldr	r3, [sp, #16]
 8001f4e:	e7d9      	b.n	8001f04 <HAL_I2C_Mem_Read+0xf4>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f50:	9005      	str	r0, [sp, #20]
 8001f52:	695a      	ldr	r2, [r3, #20]
 8001f54:	9205      	str	r2, [sp, #20]
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	9305      	str	r3, [sp, #20]
 8001f5a:	9b05      	ldr	r3, [sp, #20]
 8001f5c:	e7d2      	b.n	8001f04 <HAL_I2C_Mem_Read+0xf4>
        else if(hi2c->XferSize == 2U)
 8001f5e:	2b02      	cmp	r3, #2
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f60:	9600      	str	r6, [sp, #0]
 8001f62:	463b      	mov	r3, r7
 8001f64:	f04f 0200 	mov.w	r2, #0
 8001f68:	4641      	mov	r1, r8
 8001f6a:	4620      	mov	r0, r4
        else if(hi2c->XferSize == 2U)
 8001f6c:	d122      	bne.n	8001fb4 <HAL_I2C_Mem_Read+0x1a4>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f6e:	f7ff fcd7 	bl	8001920 <I2C_WaitOnFlagUntilTimeout>
 8001f72:	2800      	cmp	r0, #0
 8001f74:	d1d9      	bne.n	8001f2a <HAL_I2C_Mem_Read+0x11a>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001f76:	6823      	ldr	r3, [r4, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f7e:	601a      	str	r2, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001f80:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001f82:	691b      	ldr	r3, [r3, #16]
 8001f84:	1c51      	adds	r1, r2, #1
 8001f86:	6261      	str	r1, [r4, #36]	; 0x24
 8001f88:	7013      	strb	r3, [r2, #0]
          hi2c->XferSize--;
 8001f8a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001f8c:	3b01      	subs	r3, #1
 8001f8e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001f90:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001f92:	3b01      	subs	r3, #1
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	8563      	strh	r3, [r4, #42]	; 0x2a
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001f98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f9a:	1c5a      	adds	r2, r3, #1
 8001f9c:	6262      	str	r2, [r4, #36]	; 0x24
 8001f9e:	6822      	ldr	r2, [r4, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001fa0:	6912      	ldr	r2, [r2, #16]
 8001fa2:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001fa4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001faa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001fac:	3b01      	subs	r3, #1
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001fb2:	e7a9      	b.n	8001f08 <HAL_I2C_Mem_Read+0xf8>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001fb4:	f7ff fcb4 	bl	8001920 <I2C_WaitOnFlagUntilTimeout>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	2800      	cmp	r0, #0
 8001fbc:	d1b5      	bne.n	8001f2a <HAL_I2C_Mem_Read+0x11a>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001fbe:	6823      	ldr	r3, [r4, #0]
 8001fc0:	6819      	ldr	r1, [r3, #0]
 8001fc2:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8001fc6:	6019      	str	r1, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001fc8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001fca:	691b      	ldr	r3, [r3, #16]
 8001fcc:	1c48      	adds	r0, r1, #1
 8001fce:	6260      	str	r0, [r4, #36]	; 0x24
 8001fd0:	700b      	strb	r3, [r1, #0]
          hi2c->XferSize--;
 8001fd2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001fd4:	9600      	str	r6, [sp, #0]
          hi2c->XferSize--;
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001fda:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001fdc:	3b01      	subs	r3, #1
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	8563      	strh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001fe2:	4641      	mov	r1, r8
 8001fe4:	463b      	mov	r3, r7
 8001fe6:	4620      	mov	r0, r4
 8001fe8:	e7c1      	b.n	8001f6e <HAL_I2C_Mem_Read+0x15e>
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fea:	4632      	mov	r2, r6
 8001fec:	4639      	mov	r1, r7
 8001fee:	4620      	mov	r0, r4
 8001ff0:	f7ff fdb6 	bl	8001b60 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ff4:	2800      	cmp	r0, #0
 8001ff6:	d195      	bne.n	8001f24 <HAL_I2C_Mem_Read+0x114>
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001ff8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001ffa:	1c5a      	adds	r2, r3, #1
 8001ffc:	6262      	str	r2, [r4, #36]	; 0x24
 8001ffe:	6822      	ldr	r2, [r4, #0]
 8002000:	6912      	ldr	r2, [r2, #16]
 8002002:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8002004:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002006:	6822      	ldr	r2, [r4, #0]
        hi2c->XferSize--;
 8002008:	3b01      	subs	r3, #1
 800200a:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800200c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800200e:	3b01      	subs	r3, #1
 8002010:	b29b      	uxth	r3, r3
 8002012:	8563      	strh	r3, [r4, #42]	; 0x2a
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002014:	6953      	ldr	r3, [r2, #20]
 8002016:	075b      	lsls	r3, r3, #29
 8002018:	f57f af76 	bpl.w	8001f08 <HAL_I2C_Mem_Read+0xf8>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800201c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800201e:	1c59      	adds	r1, r3, #1
 8002020:	6261      	str	r1, [r4, #36]	; 0x24
 8002022:	e7bd      	b.n	8001fa0 <HAL_I2C_Mem_Read+0x190>
 8002024:	00100002 	.word	0x00100002
 8002028:	ffff0000 	.word	0xffff0000
 800202c:	00010004 	.word	0x00010004

08002030 <HAL_I2C_MasterTxCpltCallback>:
 8002030:	4770      	bx	lr

08002032 <HAL_I2C_MasterRxCpltCallback>:
 8002032:	4770      	bx	lr

08002034 <HAL_I2C_SlaveTxCpltCallback>:
 8002034:	4770      	bx	lr

08002036 <HAL_I2C_SlaveRxCpltCallback>:
 8002036:	4770      	bx	lr

08002038 <HAL_I2C_AddrCallback>:
{
 8002038:	4770      	bx	lr

0800203a <HAL_I2C_ListenCpltCallback>:
 800203a:	4770      	bx	lr

0800203c <HAL_I2C_MemTxCpltCallback>:
 800203c:	4770      	bx	lr

0800203e <HAL_I2C_MemRxCpltCallback>:
 800203e:	4770      	bx	lr

08002040 <HAL_I2C_ErrorCallback>:
 8002040:	4770      	bx	lr

08002042 <HAL_I2C_AbortCpltCallback>:
{
 8002042:	4770      	bx	lr

08002044 <I2C_ITError>:
  uint32_t CurrentState = hi2c->State;
 8002044:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
  if((CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002048:	3b29      	subs	r3, #41	; 0x29
 800204a:	2b01      	cmp	r3, #1
{
 800204c:	b510      	push	{r4, lr}
 800204e:	6803      	ldr	r3, [r0, #0]
 8002050:	4604      	mov	r4, r0
  if((CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002052:	d839      	bhi.n	80020c8 <I2C_ITError+0x84>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002054:	2200      	movs	r2, #0
 8002056:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002058:	2228      	movs	r2, #40	; 0x28
 800205a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002064:	601a      	str	r2, [r3, #0]
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002066:	685a      	ldr	r2, [r3, #4]
 8002068:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 800206c:	d054      	beq.n	8002118 <I2C_ITError+0xd4>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800206e:	685a      	ldr	r2, [r3, #4]
    if(hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002070:	6b60      	ldr	r0, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002072:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002076:	605a      	str	r2, [r3, #4]
    if(hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002078:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800207c:	2b01      	cmp	r3, #1
 800207e:	4b39      	ldr	r3, [pc, #228]	; (8002164 <I2C_ITError+0x120>)
 8002080:	d031      	beq.n	80020e6 <I2C_ITError+0xa2>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002082:	6503      	str	r3, [r0, #80]	; 0x50
      if(HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002084:	f7ff fa46 	bl	8001514 <HAL_DMA_Abort_IT>
 8002088:	b150      	cbz	r0, 80020a0 <I2C_ITError+0x5c>
        __HAL_I2C_DISABLE(hi2c);
 800208a:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800208c:	6b60      	ldr	r0, [r4, #52]	; 0x34
        __HAL_I2C_DISABLE(hi2c);
 800208e:	6813      	ldr	r3, [r2, #0]
 8002090:	f023 0301 	bic.w	r3, r3, #1
 8002094:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8002096:	2320      	movs	r3, #32
 8002098:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800209c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800209e:	4798      	blx	r3
  if((hi2c->State == HAL_I2C_STATE_LISTEN) && ((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF))
 80020a0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80020a4:	2b28      	cmp	r3, #40	; 0x28
 80020a6:	d10e      	bne.n	80020c6 <I2C_ITError+0x82>
 80020a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80020aa:	075b      	lsls	r3, r3, #29
 80020ac:	d50b      	bpl.n	80020c6 <I2C_ITError+0x82>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020ae:	4b2e      	ldr	r3, [pc, #184]	; (8002168 <I2C_ITError+0x124>)
 80020b0:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80020b2:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 80020b4:	2300      	movs	r3, #0
 80020b6:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 80020b8:	4620      	mov	r0, r4
    hi2c->State = HAL_I2C_STATE_READY;
 80020ba:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020be:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 80020c2:	f7ff ffba 	bl	800203a <HAL_I2C_ListenCpltCallback>
 80020c6:	bd10      	pop	{r4, pc}
    if((hi2c->State != HAL_I2C_STATE_ABORT) && ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) != I2C_CR2_DMAEN))
 80020c8:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 80020cc:	2a60      	cmp	r2, #96	; 0x60
 80020ce:	d005      	beq.n	80020dc <I2C_ITError+0x98>
 80020d0:	685a      	ldr	r2, [r3, #4]
 80020d2:	0512      	lsls	r2, r2, #20
      hi2c->State = HAL_I2C_STATE_READY;
 80020d4:	bf5c      	itt	pl
 80020d6:	2220      	movpl	r2, #32
 80020d8:	f880 203d 	strbpl.w	r2, [r0, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 80020dc:	2200      	movs	r2, #0
 80020de:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020e0:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
 80020e4:	e7bb      	b.n	800205e <I2C_ITError+0x1a>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80020e6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80020e8:	6503      	str	r3, [r0, #80]	; 0x50
      if(HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80020ea:	f7ff fa13 	bl	8001514 <HAL_DMA_Abort_IT>
 80020ee:	2800      	cmp	r0, #0
 80020f0:	d0d6      	beq.n	80020a0 <I2C_ITError+0x5c>
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80020f2:	6822      	ldr	r2, [r4, #0]
 80020f4:	6953      	ldr	r3, [r2, #20]
 80020f6:	0658      	lsls	r0, r3, #25
 80020f8:	d504      	bpl.n	8002104 <I2C_ITError+0xc0>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80020fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80020fc:	6912      	ldr	r2, [r2, #16]
 80020fe:	1c59      	adds	r1, r3, #1
 8002100:	6261      	str	r1, [r4, #36]	; 0x24
 8002102:	701a      	strb	r2, [r3, #0]
        __HAL_I2C_DISABLE(hi2c);
 8002104:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002106:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        __HAL_I2C_DISABLE(hi2c);
 8002108:	6813      	ldr	r3, [r2, #0]
 800210a:	f023 0301 	bic.w	r3, r3, #1
 800210e:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8002110:	2320      	movs	r3, #32
 8002112:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8002116:	e7c1      	b.n	800209c <I2C_ITError+0x58>
  else if(hi2c->State == HAL_I2C_STATE_ABORT)
 8002118:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 800211c:	2960      	cmp	r1, #96	; 0x60
 800211e:	d114      	bne.n	800214a <I2C_ITError+0x106>
    hi2c->State = HAL_I2C_STATE_READY;
 8002120:	2120      	movs	r1, #32
 8002122:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002126:	6422      	str	r2, [r4, #64]	; 0x40
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002128:	695a      	ldr	r2, [r3, #20]
 800212a:	0651      	lsls	r1, r2, #25
 800212c:	d504      	bpl.n	8002138 <I2C_ITError+0xf4>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800212e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	1c51      	adds	r1, r2, #1
 8002134:	6261      	str	r1, [r4, #36]	; 0x24
 8002136:	7013      	strb	r3, [r2, #0]
    __HAL_I2C_DISABLE(hi2c);
 8002138:	6822      	ldr	r2, [r4, #0]
 800213a:	6813      	ldr	r3, [r2, #0]
 800213c:	f023 0301 	bic.w	r3, r3, #1
 8002140:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8002142:	4620      	mov	r0, r4
 8002144:	f7ff ff7d 	bl	8002042 <HAL_I2C_AbortCpltCallback>
 8002148:	e7aa      	b.n	80020a0 <I2C_ITError+0x5c>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800214a:	695a      	ldr	r2, [r3, #20]
 800214c:	0652      	lsls	r2, r2, #25
 800214e:	d504      	bpl.n	800215a <I2C_ITError+0x116>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002150:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002152:	691b      	ldr	r3, [r3, #16]
 8002154:	1c51      	adds	r1, r2, #1
 8002156:	6261      	str	r1, [r4, #36]	; 0x24
 8002158:	7013      	strb	r3, [r2, #0]
    HAL_I2C_ErrorCallback(hi2c);
 800215a:	4620      	mov	r0, r4
 800215c:	f7ff ff70 	bl	8002040 <HAL_I2C_ErrorCallback>
 8002160:	e79e      	b.n	80020a0 <I2C_ITError+0x5c>
 8002162:	bf00      	nop
 8002164:	08002975 	.word	0x08002975
 8002168:	ffff0000 	.word	0xffff0000

0800216c <HAL_I2C_EV_IRQHandler>:
  uint32_t sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800216c:	6803      	ldr	r3, [r0, #0]
{
 800216e:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002170:	699d      	ldr	r5, [r3, #24]
  uint32_t sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002172:	6959      	ldr	r1, [r3, #20]
  uint32_t itsources    = READ_REG(hi2c->Instance->CR2);
 8002174:	685a      	ldr	r2, [r3, #4]
  uint32_t CurrentMode  = hi2c->Mode;
 8002176:	f890 403e 	ldrb.w	r4, [r0, #62]	; 0x3e
 800217a:	b2e4      	uxtb	r4, r4
  if((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800217c:	2c10      	cmp	r4, #16
{
 800217e:	b08d      	sub	sp, #52	; 0x34
  if((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002180:	d002      	beq.n	8002188 <HAL_I2C_EV_IRQHandler+0x1c>
 8002182:	2c40      	cmp	r4, #64	; 0x40
 8002184:	f040 8255 	bne.w	8002632 <HAL_I2C_EV_IRQHandler+0x4c6>
    if(((sr1itflags & I2C_FLAG_SB) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8002188:	f011 1f01 	tst.w	r1, #65537	; 0x10001
 800218c:	d066      	beq.n	800225c <HAL_I2C_EV_IRQHandler+0xf0>
 800218e:	0597      	lsls	r7, r2, #22
 8002190:	d564      	bpl.n	800225c <HAL_I2C_EV_IRQHandler+0xf0>
  if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8002192:	f890 403e 	ldrb.w	r4, [r0, #62]	; 0x3e
 8002196:	2c40      	cmp	r4, #64	; 0x40
 8002198:	d143      	bne.n	8002222 <HAL_I2C_EV_IRQHandler+0xb6>
    if(hi2c->EventCount == 0U)
 800219a:	6d04      	ldr	r4, [r0, #80]	; 0x50
 800219c:	2c00      	cmp	r4, #0
 800219e:	d13b      	bne.n	8002218 <HAL_I2C_EV_IRQHandler+0xac>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80021a0:	6c44      	ldr	r4, [r0, #68]	; 0x44
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80021a2:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80021a6:	611c      	str	r4, [r3, #16]
    if((sr2itflags & I2C_FLAG_TRA) != RESET)
 80021a8:	4e98      	ldr	r6, [pc, #608]	; (800240c <HAL_I2C_EV_IRQHandler+0x2a0>)
 80021aa:	4c99      	ldr	r4, [pc, #612]	; (8002410 <HAL_I2C_EV_IRQHandler+0x2a4>)
 80021ac:	402e      	ands	r6, r5
 80021ae:	400c      	ands	r4, r1
 80021b0:	2e00      	cmp	r6, #0
 80021b2:	f000 819f 	beq.w	80024f4 <HAL_I2C_EV_IRQHandler+0x388>
      if(((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 80021b6:	4d97      	ldr	r5, [pc, #604]	; (8002414 <HAL_I2C_EV_IRQHandler+0x2a8>)
 80021b8:	400d      	ands	r5, r1
 80021ba:	2d00      	cmp	r5, #0
 80021bc:	f000 8166 	beq.w	800248c <HAL_I2C_EV_IRQHandler+0x320>
 80021c0:	0555      	lsls	r5, r2, #21
 80021c2:	f140 8163 	bpl.w	800248c <HAL_I2C_EV_IRQHandler+0x320>
 80021c6:	2c00      	cmp	r4, #0
 80021c8:	f040 8160 	bne.w	800248c <HAL_I2C_EV_IRQHandler+0x320>
  uint32_t CurrentState       = hi2c->State;
 80021cc:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  if((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80021d0:	8d05      	ldrh	r5, [r0, #40]	; 0x28
  uint32_t CurrentMode        = hi2c->Mode;
 80021d2:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80021d6:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  uint32_t CurrentState       = hi2c->State;
 80021d8:	b2d2      	uxtb	r2, r2
  uint32_t CurrentMode        = hi2c->Mode;
 80021da:	b2c9      	uxtb	r1, r1
  if((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80021dc:	2d00      	cmp	r5, #0
 80021de:	f040 8105 	bne.w	80023ec <HAL_I2C_EV_IRQHandler+0x280>
 80021e2:	2a21      	cmp	r2, #33	; 0x21
 80021e4:	f040 8104 	bne.w	80023f0 <HAL_I2C_EV_IRQHandler+0x284>
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80021e8:	2c04      	cmp	r4, #4
 80021ea:	f000 816c 	beq.w	80024c6 <HAL_I2C_EV_IRQHandler+0x35a>
 80021ee:	2c08      	cmp	r4, #8
 80021f0:	f000 8169 	beq.w	80024c6 <HAL_I2C_EV_IRQHandler+0x35a>
 80021f4:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
 80021f8:	f000 8165 	beq.w	80024c6 <HAL_I2C_EV_IRQHandler+0x35a>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80021fc:	685a      	ldr	r2, [r3, #4]
 80021fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002202:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002204:	2311      	movs	r3, #17
 8002206:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002208:	f880 503e 	strb.w	r5, [r0, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800220c:	2320      	movs	r3, #32
 800220e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002212:	f7ff ff0d 	bl	8002030 <HAL_I2C_MasterTxCpltCallback>
 8002216:	e0f6      	b.n	8002406 <HAL_I2C_EV_IRQHandler+0x29a>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002218:	6c44      	ldr	r4, [r0, #68]	; 0x44
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800221a:	f044 0401 	orr.w	r4, r4, #1
 800221e:	b2e4      	uxtb	r4, r4
 8002220:	e7c1      	b.n	80021a6 <HAL_I2C_EV_IRQHandler+0x3a>
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002222:	6904      	ldr	r4, [r0, #16]
 8002224:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
 8002228:	d105      	bne.n	8002236 <HAL_I2C_EV_IRQHandler+0xca>
      if(hi2c->State == HAL_I2C_STATE_BUSY_TX) 
 800222a:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 800222e:	2c21      	cmp	r4, #33	; 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002230:	6c44      	ldr	r4, [r0, #68]	; 0x44
      if(hi2c->State == HAL_I2C_STATE_BUSY_TX) 
 8002232:	d1f2      	bne.n	800221a <HAL_I2C_EV_IRQHandler+0xae>
 8002234:	e7b5      	b.n	80021a2 <HAL_I2C_EV_IRQHandler+0x36>
      if(hi2c->EventCount == 0U)
 8002236:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8002238:	b934      	cbnz	r4, 8002248 <HAL_I2C_EV_IRQHandler+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800223a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800223c:	11e4      	asrs	r4, r4, #7
 800223e:	f004 0406 	and.w	r4, r4, #6
 8002242:	f044 04f0 	orr.w	r4, r4, #240	; 0xf0
 8002246:	e7ae      	b.n	80021a6 <HAL_I2C_EV_IRQHandler+0x3a>
      else if(hi2c->EventCount == 1U)
 8002248:	6d04      	ldr	r4, [r0, #80]	; 0x50
 800224a:	2c01      	cmp	r4, #1
 800224c:	d1ac      	bne.n	80021a8 <HAL_I2C_EV_IRQHandler+0x3c>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800224e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002250:	11e4      	asrs	r4, r4, #7
 8002252:	f004 0406 	and.w	r4, r4, #6
 8002256:	f044 04f1 	orr.w	r4, r4, #241	; 0xf1
 800225a:	e7a4      	b.n	80021a6 <HAL_I2C_EV_IRQHandler+0x3a>
    else if(((sr1itflags & I2C_FLAG_ADD10) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 800225c:	4c6e      	ldr	r4, [pc, #440]	; (8002418 <HAL_I2C_EV_IRQHandler+0x2ac>)
 800225e:	400c      	ands	r4, r1
 8002260:	b11c      	cbz	r4, 800226a <HAL_I2C_EV_IRQHandler+0xfe>
 8002262:	0596      	lsls	r6, r2, #22
 8002264:	d501      	bpl.n	800226a <HAL_I2C_EV_IRQHandler+0xfe>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002266:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002268:	e7d9      	b.n	800221e <HAL_I2C_EV_IRQHandler+0xb2>
    else if(((sr1itflags & I2C_FLAG_ADDR) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 800226a:	4c6c      	ldr	r4, [pc, #432]	; (800241c <HAL_I2C_EV_IRQHandler+0x2b0>)
 800226c:	400c      	ands	r4, r1
 800226e:	2c00      	cmp	r4, #0
 8002270:	d09a      	beq.n	80021a8 <HAL_I2C_EV_IRQHandler+0x3c>
 8002272:	0594      	lsls	r4, r2, #22
 8002274:	d598      	bpl.n	80021a8 <HAL_I2C_EV_IRQHandler+0x3c>
  uint32_t CurrentMode        = hi2c->Mode;
 8002276:	f890 403e 	ldrb.w	r4, [r0, #62]	; 0x3e
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800227a:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  uint32_t Prev_State         = hi2c->PreviousState;
 800227c:	f8d0 e030 	ldr.w	lr, [r0, #48]	; 0x30
  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002280:	f890 703d 	ldrb.w	r7, [r0, #61]	; 0x3d
 8002284:	2f22      	cmp	r7, #34	; 0x22
  uint32_t CurrentMode        = hi2c->Mode;
 8002286:	b2e4      	uxtb	r4, r4
  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002288:	f040 80a8 	bne.w	80023dc <HAL_I2C_EV_IRQHandler+0x270>
    if((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800228c:	6d07      	ldr	r7, [r0, #80]	; 0x50
 800228e:	b947      	cbnz	r7, 80022a2 <HAL_I2C_EV_IRQHandler+0x136>
 8002290:	2c40      	cmp	r4, #64	; 0x40
 8002292:	d106      	bne.n	80022a2 <HAL_I2C_EV_IRQHandler+0x136>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002294:	9701      	str	r7, [sp, #4]
 8002296:	695c      	ldr	r4, [r3, #20]
 8002298:	9401      	str	r4, [sp, #4]
 800229a:	699c      	ldr	r4, [r3, #24]
 800229c:	9401      	str	r4, [sp, #4]
 800229e:	9c01      	ldr	r4, [sp, #4]
 80022a0:	e782      	b.n	80021a8 <HAL_I2C_EV_IRQHandler+0x3c>
    else if((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80022a2:	6d04      	ldr	r4, [r0, #80]	; 0x50
 80022a4:	b98c      	cbnz	r4, 80022ca <HAL_I2C_EV_IRQHandler+0x15e>
 80022a6:	6907      	ldr	r7, [r0, #16]
 80022a8:	f5b7 4f40 	cmp.w	r7, #49152	; 0xc000
 80022ac:	d10d      	bne.n	80022ca <HAL_I2C_EV_IRQHandler+0x15e>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022ae:	9402      	str	r4, [sp, #8]
 80022b0:	695c      	ldr	r4, [r3, #20]
 80022b2:	9402      	str	r4, [sp, #8]
 80022b4:	699c      	ldr	r4, [r3, #24]
 80022b6:	9402      	str	r4, [sp, #8]
 80022b8:	9c02      	ldr	r4, [sp, #8]
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80022ba:	681c      	ldr	r4, [r3, #0]
 80022bc:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 80022c0:	601c      	str	r4, [r3, #0]
      hi2c->EventCount++;
 80022c2:	6d04      	ldr	r4, [r0, #80]	; 0x50
 80022c4:	3401      	adds	r4, #1
      hi2c->EventCount = 0U;
 80022c6:	6504      	str	r4, [r0, #80]	; 0x50
 80022c8:	e76e      	b.n	80021a8 <HAL_I2C_EV_IRQHandler+0x3c>
      if(hi2c->XferCount == 0U)
 80022ca:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 80022cc:	b2a4      	uxth	r4, r4
 80022ce:	b954      	cbnz	r4, 80022e6 <HAL_I2C_EV_IRQHandler+0x17a>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022d0:	9403      	str	r4, [sp, #12]
 80022d2:	695c      	ldr	r4, [r3, #20]
 80022d4:	9403      	str	r4, [sp, #12]
 80022d6:	699c      	ldr	r4, [r3, #24]
 80022d8:	9403      	str	r4, [sp, #12]
 80022da:	9c03      	ldr	r4, [sp, #12]
            hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80022dc:	681c      	ldr	r4, [r3, #0]
 80022de:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 80022e2:	601c      	str	r4, [r3, #0]
 80022e4:	e019      	b.n	800231a <HAL_I2C_EV_IRQHandler+0x1ae>
      else if(hi2c->XferCount == 1U)   
 80022e6:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 80022e8:	b2a4      	uxth	r4, r4
 80022ea:	2c01      	cmp	r4, #1
 80022ec:	d142      	bne.n	8002374 <HAL_I2C_EV_IRQHandler+0x208>
        if(CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80022ee:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
 80022f2:	d11b      	bne.n	800232c <HAL_I2C_EV_IRQHandler+0x1c0>
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80022f4:	681c      	ldr	r4, [r3, #0]
 80022f6:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 80022fa:	601c      	str	r4, [r3, #0]
          if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80022fc:	685c      	ldr	r4, [r3, #4]
 80022fe:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
 8002302:	d00c      	beq.n	800231e <HAL_I2C_EV_IRQHandler+0x1b2>
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002304:	681c      	ldr	r4, [r3, #0]
 8002306:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 800230a:	601c      	str	r4, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800230c:	2400      	movs	r4, #0
 800230e:	9404      	str	r4, [sp, #16]
 8002310:	695c      	ldr	r4, [r3, #20]
 8002312:	9404      	str	r4, [sp, #16]
 8002314:	699c      	ldr	r4, [r3, #24]
 8002316:	9404      	str	r4, [sp, #16]
 8002318:	9c04      	ldr	r4, [sp, #16]
      hi2c->EventCount = 0U;
 800231a:	2400      	movs	r4, #0
 800231c:	e7d3      	b.n	80022c6 <HAL_I2C_EV_IRQHandler+0x15a>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800231e:	9405      	str	r4, [sp, #20]
 8002320:	695c      	ldr	r4, [r3, #20]
 8002322:	9405      	str	r4, [sp, #20]
 8002324:	699c      	ldr	r4, [r3, #24]
 8002326:	9405      	str	r4, [sp, #20]
 8002328:	9c05      	ldr	r4, [sp, #20]
 800232a:	e7d7      	b.n	80022dc <HAL_I2C_EV_IRQHandler+0x170>
        else if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800232c:	2e04      	cmp	r6, #4
 800232e:	d015      	beq.n	800235c <HAL_I2C_EV_IRQHandler+0x1f0>
 8002330:	2e08      	cmp	r6, #8
 8002332:	d013      	beq.n	800235c <HAL_I2C_EV_IRQHandler+0x1f0>
          && (Prev_State != I2C_STATE_MASTER_BUSY_RX))
 8002334:	f1be 0f12 	cmp.w	lr, #18
 8002338:	d010      	beq.n	800235c <HAL_I2C_EV_IRQHandler+0x1f0>
          if(hi2c->XferOptions != I2C_NEXT_FRAME)
 800233a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800233c:	2c02      	cmp	r4, #2
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800233e:	681c      	ldr	r4, [r3, #0]
 8002340:	bf14      	ite	ne
 8002342:	f424 6480 	bicne.w	r4, r4, #1024	; 0x400
            hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8002346:	f444 6480 	orreq.w	r4, r4, #1024	; 0x400
 800234a:	601c      	str	r4, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800234c:	2400      	movs	r4, #0
 800234e:	9406      	str	r4, [sp, #24]
 8002350:	695c      	ldr	r4, [r3, #20]
 8002352:	9406      	str	r4, [sp, #24]
 8002354:	699c      	ldr	r4, [r3, #24]
 8002356:	9406      	str	r4, [sp, #24]
 8002358:	9c06      	ldr	r4, [sp, #24]
 800235a:	e7de      	b.n	800231a <HAL_I2C_EV_IRQHandler+0x1ae>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800235c:	681c      	ldr	r4, [r3, #0]
 800235e:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8002362:	601c      	str	r4, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002364:	2400      	movs	r4, #0
 8002366:	9407      	str	r4, [sp, #28]
 8002368:	695c      	ldr	r4, [r3, #20]
 800236a:	9407      	str	r4, [sp, #28]
 800236c:	699c      	ldr	r4, [r3, #24]
 800236e:	9407      	str	r4, [sp, #28]
 8002370:	9c07      	ldr	r4, [sp, #28]
 8002372:	e7b3      	b.n	80022dc <HAL_I2C_EV_IRQHandler+0x170>
      else if(hi2c->XferCount == 2U)
 8002374:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 8002376:	b2a4      	uxth	r4, r4
 8002378:	2c02      	cmp	r4, #2
 800237a:	d11c      	bne.n	80023b6 <HAL_I2C_EV_IRQHandler+0x24a>
        if(hi2c->XferOptions != I2C_NEXT_FRAME)
 800237c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800237e:	2c02      	cmp	r4, #2
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002380:	681c      	ldr	r4, [r3, #0]
 8002382:	bf1d      	ittte	ne
 8002384:	f424 6480 	bicne.w	r4, r4, #1024	; 0x400
 8002388:	601c      	strne	r4, [r3, #0]
          hi2c->Instance->CR1 |= I2C_CR1_POS;
 800238a:	681c      	ldrne	r4, [r3, #0]
          hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800238c:	f444 6480 	orreq.w	r4, r4, #1024	; 0x400
          hi2c->Instance->CR1 |= I2C_CR1_POS;
 8002390:	bf18      	it	ne
 8002392:	f444 6400 	orrne.w	r4, r4, #2048	; 0x800
          hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8002396:	601c      	str	r4, [r3, #0]
        if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002398:	685c      	ldr	r4, [r3, #4]
 800239a:	0527      	lsls	r7, r4, #20
          hi2c->Instance->CR2 |= I2C_CR2_LAST;
 800239c:	bf42      	ittt	mi
 800239e:	685c      	ldrmi	r4, [r3, #4]
 80023a0:	f444 5480 	orrmi.w	r4, r4, #4096	; 0x1000
 80023a4:	605c      	strmi	r4, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023a6:	2400      	movs	r4, #0
 80023a8:	9408      	str	r4, [sp, #32]
 80023aa:	695c      	ldr	r4, [r3, #20]
 80023ac:	9408      	str	r4, [sp, #32]
 80023ae:	699c      	ldr	r4, [r3, #24]
 80023b0:	9408      	str	r4, [sp, #32]
 80023b2:	9c08      	ldr	r4, [sp, #32]
 80023b4:	e7b1      	b.n	800231a <HAL_I2C_EV_IRQHandler+0x1ae>
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80023b6:	681c      	ldr	r4, [r3, #0]
 80023b8:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 80023bc:	601c      	str	r4, [r3, #0]
        if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80023be:	685c      	ldr	r4, [r3, #4]
 80023c0:	0526      	lsls	r6, r4, #20
          hi2c->Instance->CR2 |= I2C_CR2_LAST;
 80023c2:	bf42      	ittt	mi
 80023c4:	685c      	ldrmi	r4, [r3, #4]
 80023c6:	f444 5480 	orrmi.w	r4, r4, #4096	; 0x1000
 80023ca:	605c      	strmi	r4, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023cc:	2400      	movs	r4, #0
 80023ce:	9409      	str	r4, [sp, #36]	; 0x24
 80023d0:	695c      	ldr	r4, [r3, #20]
 80023d2:	9409      	str	r4, [sp, #36]	; 0x24
 80023d4:	699c      	ldr	r4, [r3, #24]
 80023d6:	9409      	str	r4, [sp, #36]	; 0x24
 80023d8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80023da:	e79e      	b.n	800231a <HAL_I2C_EV_IRQHandler+0x1ae>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023dc:	2400      	movs	r4, #0
 80023de:	940a      	str	r4, [sp, #40]	; 0x28
 80023e0:	695c      	ldr	r4, [r3, #20]
 80023e2:	940a      	str	r4, [sp, #40]	; 0x28
 80023e4:	699c      	ldr	r4, [r3, #24]
 80023e6:	940a      	str	r4, [sp, #40]	; 0x28
 80023e8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80023ea:	e6dd      	b.n	80021a8 <HAL_I2C_EV_IRQHandler+0x3c>
  else if((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80023ec:	2a21      	cmp	r2, #33	; 0x21
 80023ee:	d003      	beq.n	80023f8 <HAL_I2C_EV_IRQHandler+0x28c>
 80023f0:	2940      	cmp	r1, #64	; 0x40
 80023f2:	d108      	bne.n	8002406 <HAL_I2C_EV_IRQHandler+0x29a>
    ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80023f4:	2a22      	cmp	r2, #34	; 0x22
 80023f6:	d106      	bne.n	8002406 <HAL_I2C_EV_IRQHandler+0x29a>
    if(hi2c->XferCount == 0U)
 80023f8:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80023fa:	b292      	uxth	r2, r2
 80023fc:	b982      	cbnz	r2, 8002420 <HAL_I2C_EV_IRQHandler+0x2b4>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80023fe:	685a      	ldr	r2, [r3, #4]
 8002400:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002404:	605a      	str	r2, [r3, #4]
}
 8002406:	b00d      	add	sp, #52	; 0x34
 8002408:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800240a:	bf00      	nop
 800240c:	00100004 	.word	0x00100004
 8002410:	00010004 	.word	0x00010004
 8002414:	00010080 	.word	0x00010080
 8002418:	00010008 	.word	0x00010008
 800241c:	00010002 	.word	0x00010002
      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8002420:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8002424:	2a40      	cmp	r2, #64	; 0x40
 8002426:	d127      	bne.n	8002478 <HAL_I2C_EV_IRQHandler+0x30c>
        if(hi2c->EventCount == 0)
 8002428:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800242a:	b97a      	cbnz	r2, 800244c <HAL_I2C_EV_IRQHandler+0x2e0>
          if(hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800242c:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800242e:	2a01      	cmp	r2, #1
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002430:	6c82      	ldr	r2, [r0, #72]	; 0x48
          if(hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002432:	d105      	bne.n	8002440 <HAL_I2C_EV_IRQHandler+0x2d4>
 8002434:	b2d2      	uxtb	r2, r2
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002436:	611a      	str	r2, [r3, #16]
            hi2c->EventCount += 2;
 8002438:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800243a:	3302      	adds	r3, #2
            hi2c->EventCount++;
 800243c:	6503      	str	r3, [r0, #80]	; 0x50
 800243e:	e7e2      	b.n	8002406 <HAL_I2C_EV_IRQHandler+0x29a>
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002440:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002444:	611a      	str	r2, [r3, #16]
            hi2c->EventCount++;
 8002446:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002448:	3301      	adds	r3, #1
 800244a:	e7f7      	b.n	800243c <HAL_I2C_EV_IRQHandler+0x2d0>
        else if(hi2c->EventCount == 1)
 800244c:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800244e:	2a01      	cmp	r2, #1
 8002450:	d102      	bne.n	8002458 <HAL_I2C_EV_IRQHandler+0x2ec>
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002452:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8002454:	b2d2      	uxtb	r2, r2
 8002456:	e7f5      	b.n	8002444 <HAL_I2C_EV_IRQHandler+0x2d8>
        else if(hi2c->EventCount == 2)
 8002458:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800245a:	2a02      	cmp	r2, #2
 800245c:	d1d3      	bne.n	8002406 <HAL_I2C_EV_IRQHandler+0x29a>
          if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800245e:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8002462:	2a22      	cmp	r2, #34	; 0x22
 8002464:	d104      	bne.n	8002470 <HAL_I2C_EV_IRQHandler+0x304>
            hi2c->Instance->CR1 |= I2C_CR1_START;
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800246c:	601a      	str	r2, [r3, #0]
 800246e:	e7ca      	b.n	8002406 <HAL_I2C_EV_IRQHandler+0x29a>
          else if(hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002470:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8002474:	2a21      	cmp	r2, #33	; 0x21
 8002476:	d1c6      	bne.n	8002406 <HAL_I2C_EV_IRQHandler+0x29a>
    hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8002478:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800247a:	1c51      	adds	r1, r2, #1
 800247c:	6241      	str	r1, [r0, #36]	; 0x24
 800247e:	7812      	ldrb	r2, [r2, #0]
 8002480:	611a      	str	r2, [r3, #16]
    hi2c->XferCount--;
 8002482:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002484:	3b01      	subs	r3, #1
 8002486:	b29b      	uxth	r3, r3
 8002488:	8543      	strh	r3, [r0, #42]	; 0x2a
}
 800248a:	e7bc      	b.n	8002406 <HAL_I2C_EV_IRQHandler+0x29a>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 800248c:	2c00      	cmp	r4, #0
 800248e:	d0ba      	beq.n	8002406 <HAL_I2C_EV_IRQHandler+0x29a>
 8002490:	0594      	lsls	r4, r2, #22
 8002492:	d5b8      	bpl.n	8002406 <HAL_I2C_EV_IRQHandler+0x29a>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002494:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  if(hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002496:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 800249a:	2a21      	cmp	r2, #33	; 0x21
 800249c:	d1b3      	bne.n	8002406 <HAL_I2C_EV_IRQHandler+0x29a>
    if(hi2c->XferCount != 0U)
 800249e:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80024a0:	b292      	uxth	r2, r2
 80024a2:	2a00      	cmp	r2, #0
 80024a4:	d1e8      	bne.n	8002478 <HAL_I2C_EV_IRQHandler+0x30c>
      if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80024a6:	2904      	cmp	r1, #4
 80024a8:	d00d      	beq.n	80024c6 <HAL_I2C_EV_IRQHandler+0x35a>
 80024aa:	2908      	cmp	r1, #8
 80024ac:	d00b      	beq.n	80024c6 <HAL_I2C_EV_IRQHandler+0x35a>
 80024ae:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 80024b2:	d008      	beq.n	80024c6 <HAL_I2C_EV_IRQHandler+0x35a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80024b4:	6859      	ldr	r1, [r3, #4]
 80024b6:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 80024ba:	6059      	str	r1, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80024bc:	2311      	movs	r3, #17
 80024be:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024c0:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
 80024c4:	e6a2      	b.n	800220c <HAL_I2C_EV_IRQHandler+0xa0>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80024c6:	685a      	ldr	r2, [r3, #4]
 80024c8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80024cc:	605a      	str	r2, [r3, #4]
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024d4:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80024d6:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 80024d8:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80024da:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80024dc:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
        if(hi2c->Mode == HAL_I2C_MODE_MEM)
 80024e0:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80024e4:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        if(hi2c->Mode == HAL_I2C_MODE_MEM)
 80024e8:	2a40      	cmp	r2, #64	; 0x40
 80024ea:	f47f ae92 	bne.w	8002212 <HAL_I2C_EV_IRQHandler+0xa6>
          HAL_I2C_MemTxCpltCallback(hi2c);
 80024ee:	f7ff fda5 	bl	800203c <HAL_I2C_MemTxCpltCallback>
 80024f2:	e788      	b.n	8002406 <HAL_I2C_EV_IRQHandler+0x29a>
      if(((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 80024f4:	4d90      	ldr	r5, [pc, #576]	; (8002738 <HAL_I2C_EV_IRQHandler+0x5cc>)
 80024f6:	400d      	ands	r5, r1
 80024f8:	2d00      	cmp	r5, #0
 80024fa:	d041      	beq.n	8002580 <HAL_I2C_EV_IRQHandler+0x414>
 80024fc:	0551      	lsls	r1, r2, #21
 80024fe:	d53f      	bpl.n	8002580 <HAL_I2C_EV_IRQHandler+0x414>
 8002500:	2c00      	cmp	r4, #0
 8002502:	d13d      	bne.n	8002580 <HAL_I2C_EV_IRQHandler+0x414>
  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002504:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8002508:	2a22      	cmp	r2, #34	; 0x22
 800250a:	f47f af7c 	bne.w	8002406 <HAL_I2C_EV_IRQHandler+0x29a>
    tmp = hi2c->XferCount;
 800250e:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8002510:	b292      	uxth	r2, r2
    if(tmp > 3U)
 8002512:	2a03      	cmp	r2, #3
 8002514:	d913      	bls.n	800253e <HAL_I2C_EV_IRQHandler+0x3d2>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002516:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	1c51      	adds	r1, r2, #1
 800251c:	6241      	str	r1, [r0, #36]	; 0x24
 800251e:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 8002520:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002522:	3b01      	subs	r3, #1
 8002524:	b29b      	uxth	r3, r3
 8002526:	8543      	strh	r3, [r0, #42]	; 0x2a
      if(hi2c->XferCount == 3)
 8002528:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800252a:	b29b      	uxth	r3, r3
 800252c:	2b03      	cmp	r3, #3
 800252e:	f47f af6a 	bne.w	8002406 <HAL_I2C_EV_IRQHandler+0x29a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002532:	6802      	ldr	r2, [r0, #0]
 8002534:	6853      	ldr	r3, [r2, #4]
 8002536:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800253a:	6053      	str	r3, [r2, #4]
 800253c:	e763      	b.n	8002406 <HAL_I2C_EV_IRQHandler+0x29a>
    else if((tmp == 1U) || (tmp == 0U))
 800253e:	2a01      	cmp	r2, #1
 8002540:	f63f af61 	bhi.w	8002406 <HAL_I2C_EV_IRQHandler+0x29a>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800254a:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800254c:	685a      	ldr	r2, [r3, #4]
 800254e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002552:	605a      	str	r2, [r3, #4]
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002554:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8002556:	691b      	ldr	r3, [r3, #16]
 8002558:	1c51      	adds	r1, r2, #1
 800255a:	6241      	str	r1, [r0, #36]	; 0x24
 800255c:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 800255e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002560:	3b01      	subs	r3, #1
 8002562:	b29b      	uxth	r3, r3
 8002564:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8002566:	2320      	movs	r3, #32
 8002568:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      hi2c->PreviousState = I2C_STATE_NONE;
 800256c:	6304      	str	r4, [r0, #48]	; 0x30
      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 800256e:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002572:	f880 403e 	strb.w	r4, [r0, #62]	; 0x3e
      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8002576:	2b40      	cmp	r3, #64	; 0x40
    if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8002578:	d158      	bne.n	800262c <HAL_I2C_EV_IRQHandler+0x4c0>
      HAL_I2C_MemRxCpltCallback(hi2c);
 800257a:	f7ff fd60 	bl	800203e <HAL_I2C_MemRxCpltCallback>
 800257e:	e742      	b.n	8002406 <HAL_I2C_EV_IRQHandler+0x29a>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8002580:	2c00      	cmp	r4, #0
 8002582:	f43f af40 	beq.w	8002406 <HAL_I2C_EV_IRQHandler+0x29a>
 8002586:	0597      	lsls	r7, r2, #22
 8002588:	f57f af3d 	bpl.w	8002406 <HAL_I2C_EV_IRQHandler+0x29a>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800258c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  if(hi2c->XferCount == 4U)
 800258e:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8002590:	b292      	uxth	r2, r2
 8002592:	2a04      	cmp	r2, #4
 8002594:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8002596:	d108      	bne.n	80025aa <HAL_I2C_EV_IRQHandler+0x43e>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002598:	6859      	ldr	r1, [r3, #4]
 800259a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800259e:	6059      	str	r1, [r3, #4]
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80025a0:	1c51      	adds	r1, r2, #1
 80025a2:	691b      	ldr	r3, [r3, #16]
 80025a4:	6241      	str	r1, [r0, #36]	; 0x24
 80025a6:	7013      	strb	r3, [r2, #0]
 80025a8:	e76b      	b.n	8002482 <HAL_I2C_EV_IRQHandler+0x316>
  else if(hi2c->XferCount == 3U)
 80025aa:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 80025ac:	b2a4      	uxth	r4, r4
 80025ae:	2c03      	cmp	r4, #3
 80025b0:	d108      	bne.n	80025c4 <HAL_I2C_EV_IRQHandler+0x458>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80025b2:	6859      	ldr	r1, [r3, #4]
 80025b4:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80025b8:	6059      	str	r1, [r3, #4]
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80025ba:	6819      	ldr	r1, [r3, #0]
 80025bc:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80025c0:	6019      	str	r1, [r3, #0]
 80025c2:	e7ed      	b.n	80025a0 <HAL_I2C_EV_IRQHandler+0x434>
  else if(hi2c->XferCount == 2U)
 80025c4:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 80025c6:	b2a4      	uxth	r4, r4
 80025c8:	2c02      	cmp	r4, #2
 80025ca:	d1e9      	bne.n	80025a0 <HAL_I2C_EV_IRQHandler+0x434>
    if((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME))
 80025cc:	3901      	subs	r1, #1
 80025ce:	2901      	cmp	r1, #1
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80025d0:	6819      	ldr	r1, [r3, #0]
 80025d2:	bf9d      	ittte	ls
 80025d4:	f421 6180 	bicls.w	r1, r1, #1024	; 0x400
 80025d8:	6019      	strls	r1, [r3, #0]
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80025da:	6819      	ldrls	r1, [r3, #0]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80025dc:	f441 7100 	orrhi.w	r1, r1, #512	; 0x200
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80025e0:	bf98      	it	ls
 80025e2:	f441 7180 	orrls.w	r1, r1, #256	; 0x100
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80025e6:	6019      	str	r1, [r3, #0]
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	1c51      	adds	r1, r2, #1
 80025ec:	6241      	str	r1, [r0, #36]	; 0x24
 80025ee:	7013      	strb	r3, [r2, #0]
    hi2c->XferCount--;
 80025f0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80025f2:	3b01      	subs	r3, #1
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	8543      	strh	r3, [r0, #42]	; 0x2a
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80025f8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80025fa:	1c5a      	adds	r2, r3, #1
 80025fc:	6242      	str	r2, [r0, #36]	; 0x24
 80025fe:	6802      	ldr	r2, [r0, #0]
 8002600:	6912      	ldr	r2, [r2, #16]
 8002602:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8002604:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002606:	6802      	ldr	r2, [r0, #0]
    hi2c->XferCount--;
 8002608:	3b01      	subs	r3, #1
 800260a:	b29b      	uxth	r3, r3
 800260c:	8543      	strh	r3, [r0, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800260e:	6853      	ldr	r3, [r2, #4]
 8002610:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002614:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002616:	2320      	movs	r3, #32
 8002618:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 800261c:	2300      	movs	r3, #0
 800261e:	6303      	str	r3, [r0, #48]	; 0x30
    if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8002620:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002624:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8002628:	2a40      	cmp	r2, #64	; 0x40
 800262a:	e7a5      	b.n	8002578 <HAL_I2C_EV_IRQHandler+0x40c>
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800262c:	f7ff fd01 	bl	8002032 <HAL_I2C_MasterRxCpltCallback>
 8002630:	e6e9      	b.n	8002406 <HAL_I2C_EV_IRQHandler+0x29a>
    if(((sr1itflags & I2C_FLAG_ADDR) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8002632:	4c42      	ldr	r4, [pc, #264]	; (800273c <HAL_I2C_EV_IRQHandler+0x5d0>)
 8002634:	400c      	ands	r4, r1
 8002636:	b174      	cbz	r4, 8002656 <HAL_I2C_EV_IRQHandler+0x4ea>
 8002638:	0596      	lsls	r6, r2, #22
 800263a:	d50c      	bpl.n	8002656 <HAL_I2C_EV_IRQHandler+0x4ea>
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TRA) == RESET)
 800263c:	6999      	ldr	r1, [r3, #24]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_DUALF) == RESET)
 800263e:	699b      	ldr	r3, [r3, #24]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TRA) == RESET)
 8002640:	f081 0104 	eor.w	r1, r1, #4
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_DUALF) == RESET)
 8002644:	061d      	lsls	r5, r3, #24
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002646:	f3c1 0180 	ubfx	r1, r1, #2, #1
    SlaveAddrCode = hi2c->Init.OwnAddress1;
 800264a:	bf54      	ite	pl
 800264c:	8982      	ldrhpl	r2, [r0, #12]
    SlaveAddrCode = hi2c->Init.OwnAddress2;
 800264e:	8b02      	ldrhmi	r2, [r0, #24]
  HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002650:	f7ff fcf2 	bl	8002038 <HAL_I2C_AddrCallback>
 8002654:	e6d7      	b.n	8002406 <HAL_I2C_EV_IRQHandler+0x29a>
    else if(((sr1itflags & I2C_FLAG_STOPF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8002656:	4c3a      	ldr	r4, [pc, #232]	; (8002740 <HAL_I2C_EV_IRQHandler+0x5d4>)
 8002658:	400c      	ands	r4, r1
 800265a:	2c00      	cmp	r4, #0
 800265c:	d074      	beq.n	8002748 <HAL_I2C_EV_IRQHandler+0x5dc>
 800265e:	0594      	lsls	r4, r2, #22
 8002660:	d572      	bpl.n	8002748 <HAL_I2C_EV_IRQHandler+0x5dc>
  uint32_t CurrentState = hi2c->State;
 8002662:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002666:	6859      	ldr	r1, [r3, #4]
 8002668:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 800266c:	6059      	str	r1, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800266e:	2100      	movs	r1, #0
 8002670:	910b      	str	r1, [sp, #44]	; 0x2c
 8002672:	6959      	ldr	r1, [r3, #20]
 8002674:	910b      	str	r1, [sp, #44]	; 0x2c
 8002676:	6819      	ldr	r1, [r3, #0]
 8002678:	f041 0101 	orr.w	r1, r1, #1
 800267c:	6019      	str	r1, [r3, #0]
 800267e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002680:	6819      	ldr	r1, [r3, #0]
 8002682:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8002686:	6019      	str	r1, [r3, #0]
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002688:	6859      	ldr	r1, [r3, #4]
 800268a:	0509      	lsls	r1, r1, #20
  uint32_t CurrentState = hi2c->State;
 800268c:	b2d2      	uxtb	r2, r2
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800268e:	d50c      	bpl.n	80026aa <HAL_I2C_EV_IRQHandler+0x53e>
    if((hi2c->State == HAL_I2C_STATE_BUSY_RX) || (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002690:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 8002694:	2922      	cmp	r1, #34	; 0x22
 8002696:	d003      	beq.n	80026a0 <HAL_I2C_EV_IRQHandler+0x534>
 8002698:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 800269c:	292a      	cmp	r1, #42	; 0x2a
 800269e:	d129      	bne.n	80026f4 <HAL_I2C_EV_IRQHandler+0x588>
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 80026a0:	6b81      	ldr	r1, [r0, #56]	; 0x38
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80026a2:	6809      	ldr	r1, [r1, #0]
 80026a4:	6849      	ldr	r1, [r1, #4]
 80026a6:	b289      	uxth	r1, r1
 80026a8:	8541      	strh	r1, [r0, #42]	; 0x2a
  if(hi2c->XferCount != 0U)
 80026aa:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 80026ac:	b289      	uxth	r1, r1
 80026ae:	b1e1      	cbz	r1, 80026ea <HAL_I2C_EV_IRQHandler+0x57e>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80026b0:	6959      	ldr	r1, [r3, #20]
 80026b2:	074f      	lsls	r7, r1, #29
 80026b4:	d508      	bpl.n	80026c8 <HAL_I2C_EV_IRQHandler+0x55c>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80026b6:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	1c4c      	adds	r4, r1, #1
 80026bc:	6244      	str	r4, [r0, #36]	; 0x24
 80026be:	700b      	strb	r3, [r1, #0]
      hi2c->XferCount--;
 80026c0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80026c2:	3b01      	subs	r3, #1
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	8543      	strh	r3, [r0, #42]	; 0x2a
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80026c8:	6801      	ldr	r1, [r0, #0]
 80026ca:	694b      	ldr	r3, [r1, #20]
 80026cc:	065e      	lsls	r6, r3, #25
 80026ce:	d508      	bpl.n	80026e2 <HAL_I2C_EV_IRQHandler+0x576>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80026d0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80026d2:	6909      	ldr	r1, [r1, #16]
 80026d4:	1c5c      	adds	r4, r3, #1
 80026d6:	6244      	str	r4, [r0, #36]	; 0x24
 80026d8:	7019      	strb	r1, [r3, #0]
      hi2c->XferCount--;
 80026da:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80026dc:	3b01      	subs	r3, #1
 80026de:	b29b      	uxth	r3, r3
 80026e0:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80026e2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80026e4:	f043 0304 	orr.w	r3, r3, #4
 80026e8:	6403      	str	r3, [r0, #64]	; 0x40
  if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80026ea:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80026ec:	b123      	cbz	r3, 80026f8 <HAL_I2C_EV_IRQHandler+0x58c>
    I2C_ITError(hi2c);
 80026ee:	f7ff fca9 	bl	8002044 <I2C_ITError>
 80026f2:	e688      	b.n	8002406 <HAL_I2C_EV_IRQHandler+0x29a>
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80026f4:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80026f6:	e7d4      	b.n	80026a2 <HAL_I2C_EV_IRQHandler+0x536>
    if((CurrentState == HAL_I2C_STATE_LISTEN ) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN) || \
 80026f8:	f1a2 0128 	sub.w	r1, r2, #40	; 0x28
 80026fc:	2902      	cmp	r1, #2
 80026fe:	d80a      	bhi.n	8002716 <HAL_I2C_EV_IRQHandler+0x5aa>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002700:	4a10      	ldr	r2, [pc, #64]	; (8002744 <HAL_I2C_EV_IRQHandler+0x5d8>)
 8002702:	62c2      	str	r2, [r0, #44]	; 0x2c
      hi2c->State = HAL_I2C_STATE_READY;
 8002704:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 8002706:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002708:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800270c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002710:	f7ff fc93 	bl	800203a <HAL_I2C_ListenCpltCallback>
 8002714:	e677      	b.n	8002406 <HAL_I2C_EV_IRQHandler+0x29a>
      if((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002716:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002718:	2b22      	cmp	r3, #34	; 0x22
 800271a:	d002      	beq.n	8002722 <HAL_I2C_EV_IRQHandler+0x5b6>
 800271c:	2a22      	cmp	r2, #34	; 0x22
 800271e:	f47f ae72 	bne.w	8002406 <HAL_I2C_EV_IRQHandler+0x29a>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002722:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8002724:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8002726:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002728:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800272c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002730:	f7ff fc81 	bl	8002036 <HAL_I2C_SlaveRxCpltCallback>
 8002734:	e667      	b.n	8002406 <HAL_I2C_EV_IRQHandler+0x29a>
 8002736:	bf00      	nop
 8002738:	00010040 	.word	0x00010040
 800273c:	00010002 	.word	0x00010002
 8002740:	00010010 	.word	0x00010010
 8002744:	ffff0000 	.word	0xffff0000
    else if((sr2itflags & I2C_FLAG_TRA) != RESET)
 8002748:	4e39      	ldr	r6, [pc, #228]	; (8002830 <HAL_I2C_EV_IRQHandler+0x6c4>)
 800274a:	4c3a      	ldr	r4, [pc, #232]	; (8002834 <HAL_I2C_EV_IRQHandler+0x6c8>)
 800274c:	402e      	ands	r6, r5
 800274e:	400c      	ands	r4, r1
 8002750:	2e00      	cmp	r6, #0
 8002752:	d036      	beq.n	80027c2 <HAL_I2C_EV_IRQHandler+0x656>
      if(((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 8002754:	4d38      	ldr	r5, [pc, #224]	; (8002838 <HAL_I2C_EV_IRQHandler+0x6cc>)
 8002756:	400d      	ands	r5, r1
 8002758:	b33d      	cbz	r5, 80027aa <HAL_I2C_EV_IRQHandler+0x63e>
 800275a:	0555      	lsls	r5, r2, #21
 800275c:	d525      	bpl.n	80027aa <HAL_I2C_EV_IRQHandler+0x63e>
 800275e:	bb24      	cbnz	r4, 80027aa <HAL_I2C_EV_IRQHandler+0x63e>
  uint32_t CurrentState = hi2c->State;
 8002760:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
  if(hi2c->XferCount != 0U)
 8002764:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8002766:	b292      	uxth	r2, r2
  uint32_t CurrentState = hi2c->State;
 8002768:	b2c9      	uxtb	r1, r1
  if(hi2c->XferCount != 0U)
 800276a:	2a00      	cmp	r2, #0
 800276c:	f43f ae4b 	beq.w	8002406 <HAL_I2C_EV_IRQHandler+0x29a>
    hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8002770:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8002772:	1c54      	adds	r4, r2, #1
 8002774:	6244      	str	r4, [r0, #36]	; 0x24
 8002776:	7812      	ldrb	r2, [r2, #0]
 8002778:	611a      	str	r2, [r3, #16]
    hi2c->XferCount--;
 800277a:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 800277c:	3a01      	subs	r2, #1
 800277e:	b292      	uxth	r2, r2
 8002780:	8542      	strh	r2, [r0, #42]	; 0x2a
    if((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002782:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8002784:	b292      	uxth	r2, r2
 8002786:	2a00      	cmp	r2, #0
 8002788:	f47f ae3d 	bne.w	8002406 <HAL_I2C_EV_IRQHandler+0x29a>
 800278c:	2929      	cmp	r1, #41	; 0x29
 800278e:	f47f ae3a 	bne.w	8002406 <HAL_I2C_EV_IRQHandler+0x29a>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002792:	685a      	ldr	r2, [r3, #4]
 8002794:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002798:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800279a:	2321      	movs	r3, #33	; 0x21
 800279c:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800279e:	2328      	movs	r3, #40	; 0x28
 80027a0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80027a4:	f7ff fc46 	bl	8002034 <HAL_I2C_SlaveTxCpltCallback>
 80027a8:	e62d      	b.n	8002406 <HAL_I2C_EV_IRQHandler+0x29a>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80027aa:	2c00      	cmp	r4, #0
 80027ac:	f43f ae2b 	beq.w	8002406 <HAL_I2C_EV_IRQHandler+0x29a>
 80027b0:	0594      	lsls	r4, r2, #22
 80027b2:	f57f ae28 	bpl.w	8002406 <HAL_I2C_EV_IRQHandler+0x29a>
  if(hi2c->XferCount != 0U)
 80027b6:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80027b8:	b292      	uxth	r2, r2
 80027ba:	2a00      	cmp	r2, #0
 80027bc:	f47f ae5c 	bne.w	8002478 <HAL_I2C_EV_IRQHandler+0x30c>
 80027c0:	e621      	b.n	8002406 <HAL_I2C_EV_IRQHandler+0x29a>
      if(((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 80027c2:	4d1e      	ldr	r5, [pc, #120]	; (800283c <HAL_I2C_EV_IRQHandler+0x6d0>)
 80027c4:	400d      	ands	r5, r1
 80027c6:	b335      	cbz	r5, 8002816 <HAL_I2C_EV_IRQHandler+0x6aa>
 80027c8:	0551      	lsls	r1, r2, #21
 80027ca:	d524      	bpl.n	8002816 <HAL_I2C_EV_IRQHandler+0x6aa>
 80027cc:	bb1c      	cbnz	r4, 8002816 <HAL_I2C_EV_IRQHandler+0x6aa>
  uint32_t CurrentState = hi2c->State;
 80027ce:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  if(hi2c->XferCount != 0U)
 80027d2:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 80027d4:	b289      	uxth	r1, r1
  uint32_t CurrentState = hi2c->State;
 80027d6:	b2d2      	uxtb	r2, r2
  if(hi2c->XferCount != 0U)
 80027d8:	2900      	cmp	r1, #0
 80027da:	f43f ae14 	beq.w	8002406 <HAL_I2C_EV_IRQHandler+0x29a>
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80027de:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	1c4c      	adds	r4, r1, #1
 80027e4:	6244      	str	r4, [r0, #36]	; 0x24
 80027e6:	700b      	strb	r3, [r1, #0]
    hi2c->XferCount--;
 80027e8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80027ea:	3b01      	subs	r3, #1
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	8543      	strh	r3, [r0, #42]	; 0x2a
    if((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80027f0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f47f ae06 	bne.w	8002406 <HAL_I2C_EV_IRQHandler+0x29a>
 80027fa:	2a2a      	cmp	r2, #42	; 0x2a
 80027fc:	f47f ae03 	bne.w	8002406 <HAL_I2C_EV_IRQHandler+0x29a>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002800:	6802      	ldr	r2, [r0, #0]
 8002802:	6853      	ldr	r3, [r2, #4]
 8002804:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002808:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800280a:	2322      	movs	r3, #34	; 0x22
 800280c:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800280e:	2328      	movs	r3, #40	; 0x28
 8002810:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 8002814:	e78c      	b.n	8002730 <HAL_I2C_EV_IRQHandler+0x5c4>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8002816:	2c00      	cmp	r4, #0
 8002818:	f43f adf5 	beq.w	8002406 <HAL_I2C_EV_IRQHandler+0x29a>
 800281c:	0592      	lsls	r2, r2, #22
 800281e:	f57f adf2 	bpl.w	8002406 <HAL_I2C_EV_IRQHandler+0x29a>
  if(hi2c->XferCount != 0U)
 8002822:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8002824:	b292      	uxth	r2, r2
 8002826:	2a00      	cmp	r2, #0
 8002828:	f43f aded 	beq.w	8002406 <HAL_I2C_EV_IRQHandler+0x29a>
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800282c:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800282e:	e6b7      	b.n	80025a0 <HAL_I2C_EV_IRQHandler+0x434>
 8002830:	00100004 	.word	0x00100004
 8002834:	00010004 	.word	0x00010004
 8002838:	00010080 	.word	0x00010080
 800283c:	00010040 	.word	0x00010040

08002840 <HAL_I2C_ER_IRQHandler>:
{
 8002840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002842:	6803      	ldr	r3, [r0, #0]
  if(((sr1itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 8002844:	4a49      	ldr	r2, [pc, #292]	; (800296c <HAL_I2C_ER_IRQHandler+0x12c>)
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002846:	695e      	ldr	r6, [r3, #20]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002848:	685d      	ldr	r5, [r3, #4]
  if(((sr1itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 800284a:	4216      	tst	r6, r2
{
 800284c:	4604      	mov	r4, r0
  if(((sr1itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 800284e:	d008      	beq.n	8002862 <HAL_I2C_ER_IRQHandler+0x22>
 8002850:	05e8      	lsls	r0, r5, #23
 8002852:	d506      	bpl.n	8002862 <HAL_I2C_ER_IRQHandler+0x22>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002854:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002856:	f042 0201 	orr.w	r2, r2, #1
 800285a:	6422      	str	r2, [r4, #64]	; 0x40
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800285c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002860:	615a      	str	r2, [r3, #20]
  if(((sr1itflags & I2C_FLAG_ARLO) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 8002862:	f416 3f81 	tst.w	r6, #66048	; 0x10200
 8002866:	d008      	beq.n	800287a <HAL_I2C_ER_IRQHandler+0x3a>
 8002868:	05e9      	lsls	r1, r5, #23
 800286a:	d506      	bpl.n	800287a <HAL_I2C_ER_IRQHandler+0x3a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800286c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800286e:	f042 0202 	orr.w	r2, r2, #2
 8002872:	6422      	str	r2, [r4, #64]	; 0x40
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002874:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002878:	615a      	str	r2, [r3, #20]
  if(((sr1itflags & I2C_FLAG_AF) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 800287a:	f416 3f82 	tst.w	r6, #66560	; 0x10400
 800287e:	d036      	beq.n	80028ee <HAL_I2C_ER_IRQHandler+0xae>
 8002880:	05ea      	lsls	r2, r5, #23
 8002882:	d534      	bpl.n	80028ee <HAL_I2C_ER_IRQHandler+0xae>
    tmp1 = hi2c->Mode;
 8002884:	f894 703e 	ldrb.w	r7, [r4, #62]	; 0x3e
    tmp2 = hi2c->XferCount;
 8002888:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    tmp3 = hi2c->State;
 800288a:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
    tmp4 = hi2c->PreviousState;
 800288e:	6b20      	ldr	r0, [r4, #48]	; 0x30
    if((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002890:	2f20      	cmp	r7, #32
    tmp2 = hi2c->XferCount;
 8002892:	b289      	uxth	r1, r1
    tmp3 = hi2c->State;
 8002894:	b2d2      	uxtb	r2, r2
    if((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002896:	d158      	bne.n	800294a <HAL_I2C_ER_IRQHandler+0x10a>
 8002898:	2900      	cmp	r1, #0
 800289a:	d156      	bne.n	800294a <HAL_I2C_ER_IRQHandler+0x10a>
 800289c:	f002 01f7 	and.w	r1, r2, #247	; 0xf7
 80028a0:	2921      	cmp	r1, #33	; 0x21
 80028a2:	d003      	beq.n	80028ac <HAL_I2C_ER_IRQHandler+0x6c>
      ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80028a4:	2a28      	cmp	r2, #40	; 0x28
 80028a6:	d150      	bne.n	800294a <HAL_I2C_ER_IRQHandler+0x10a>
      ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80028a8:	2821      	cmp	r0, #33	; 0x21
 80028aa:	d14e      	bne.n	800294a <HAL_I2C_ER_IRQHandler+0x10a>
  uint32_t CurrentState       = hi2c->State;
 80028ac:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80028b0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if(((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80028b2:	2904      	cmp	r1, #4
  uint32_t CurrentState       = hi2c->State;
 80028b4:	b2d2      	uxtb	r2, r2
  if(((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80028b6:	d001      	beq.n	80028bc <HAL_I2C_ER_IRQHandler+0x7c>
 80028b8:	2908      	cmp	r1, #8
 80028ba:	d12c      	bne.n	8002916 <HAL_I2C_ER_IRQHandler+0xd6>
 80028bc:	2a28      	cmp	r2, #40	; 0x28
 80028be:	d12a      	bne.n	8002916 <HAL_I2C_ER_IRQHandler+0xd6>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028c0:	4a2b      	ldr	r2, [pc, #172]	; (8002970 <HAL_I2C_ER_IRQHandler+0x130>)
 80028c2:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80028c4:	685a      	ldr	r2, [r3, #4]
 80028c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80028ca:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028cc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80028d0:	615a      	str	r2, [r3, #20]
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028d8:	601a      	str	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 80028da:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80028dc:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 80028de:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 80028e0:	4620      	mov	r0, r4
    hi2c->State = HAL_I2C_STATE_READY;
 80028e2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028e6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 80028ea:	f7ff fba6 	bl	800203a <HAL_I2C_ListenCpltCallback>
  if(((sr1itflags & I2C_FLAG_OVR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 80028ee:	f416 3f84 	tst.w	r6, #67584	; 0x10800
 80028f2:	d009      	beq.n	8002908 <HAL_I2C_ER_IRQHandler+0xc8>
 80028f4:	05eb      	lsls	r3, r5, #23
 80028f6:	d507      	bpl.n	8002908 <HAL_I2C_ER_IRQHandler+0xc8>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80028f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80028fa:	f043 0308 	orr.w	r3, r3, #8
 80028fe:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002900:	6823      	ldr	r3, [r4, #0]
 8002902:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8002906:	615a      	str	r2, [r3, #20]
  if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002908:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800290a:	b373      	cbz	r3, 800296a <HAL_I2C_ER_IRQHandler+0x12a>
    I2C_ITError(hi2c);
 800290c:	4620      	mov	r0, r4
}
 800290e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    I2C_ITError(hi2c);
 8002912:	f7ff bb97 	b.w	8002044 <I2C_ITError>
  else if(CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002916:	2a21      	cmp	r2, #33	; 0x21
 8002918:	d123      	bne.n	8002962 <HAL_I2C_ER_IRQHandler+0x122>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800291a:	4915      	ldr	r1, [pc, #84]	; (8002970 <HAL_I2C_ER_IRQHandler+0x130>)
 800291c:	62e1      	str	r1, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800291e:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 8002920:	2220      	movs	r2, #32
 8002922:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002926:	2200      	movs	r2, #0
 8002928:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800292c:	685a      	ldr	r2, [r3, #4]
 800292e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002932:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002934:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002938:	615a      	str	r2, [r3, #20]
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002940:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002942:	4620      	mov	r0, r4
 8002944:	f7ff fb76 	bl	8002034 <HAL_I2C_SlaveTxCpltCallback>
 8002948:	e7d1      	b.n	80028ee <HAL_I2C_ER_IRQHandler+0xae>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800294a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800294c:	f042 0204 	orr.w	r2, r2, #4
 8002950:	6422      	str	r2, [r4, #64]	; 0x40
      if(hi2c->Mode == HAL_I2C_MODE_MASTER)
 8002952:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8002956:	2a10      	cmp	r2, #16
        SET_BIT(hi2c->Instance->CR1,I2C_CR1_STOP);
 8002958:	bf02      	ittt	eq
 800295a:	681a      	ldreq	r2, [r3, #0]
 800295c:	f442 7200 	orreq.w	r2, r2, #512	; 0x200
 8002960:	601a      	streq	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002962:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002966:	615a      	str	r2, [r3, #20]
 8002968:	e7c1      	b.n	80028ee <HAL_I2C_ER_IRQHandler+0xae>
 800296a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800296c:	00010100 	.word	0x00010100
 8002970:	ffff0000 	.word	0xffff0000

08002974 <I2C_DMAAbort>:
  I2C_HandleTypeDef* hi2c = ( I2C_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002974:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8002976:	b508      	push	{r3, lr}
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002978:	6803      	ldr	r3, [r0, #0]
  hi2c->hdmatx->XferAbortCallback = NULL;
 800297a:	6b41      	ldr	r1, [r0, #52]	; 0x34
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002982:	601a      	str	r2, [r3, #0]
  hi2c->XferCount = 0U;
 8002984:	2200      	movs	r2, #0
 8002986:	8542      	strh	r2, [r0, #42]	; 0x2a
  hi2c->hdmatx->XferAbortCallback = NULL;
 8002988:	650a      	str	r2, [r1, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 800298a:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800298c:	650a      	str	r2, [r1, #80]	; 0x50
  if(hi2c->State == HAL_I2C_STATE_ABORT)
 800298e:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 8002992:	2960      	cmp	r1, #96	; 0x60
 8002994:	f04f 0120 	mov.w	r1, #32
    hi2c->State = HAL_I2C_STATE_READY;
 8002998:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800299c:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  if(hi2c->State == HAL_I2C_STATE_ABORT)
 80029a0:	d107      	bne.n	80029b2 <I2C_DMAAbort+0x3e>
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029a2:	6402      	str	r2, [r0, #64]	; 0x40
    __HAL_I2C_DISABLE(hi2c);
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	f022 0201 	bic.w	r2, r2, #1
 80029aa:	601a      	str	r2, [r3, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 80029ac:	f7ff fb49 	bl	8002042 <HAL_I2C_AbortCpltCallback>
 80029b0:	bd08      	pop	{r3, pc}
    __HAL_I2C_DISABLE(hi2c);
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	f022 0201 	bic.w	r2, r2, #1
 80029b8:	601a      	str	r2, [r3, #0]
    HAL_I2C_ErrorCallback(hi2c);
 80029ba:	f7ff fb41 	bl	8002040 <HAL_I2C_ErrorCallback>
 80029be:	bd08      	pop	{r3, pc}

080029c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029c4:	4604      	mov	r4, r0
 80029c6:	b918      	cbnz	r0, 80029d0 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80029c8:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80029ca:	b002      	add	sp, #8
 80029cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029d0:	6803      	ldr	r3, [r0, #0]
 80029d2:	07dd      	lsls	r5, r3, #31
 80029d4:	d410      	bmi.n	80029f8 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029d6:	6823      	ldr	r3, [r4, #0]
 80029d8:	0798      	lsls	r0, r3, #30
 80029da:	d458      	bmi.n	8002a8e <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029dc:	6823      	ldr	r3, [r4, #0]
 80029de:	071a      	lsls	r2, r3, #28
 80029e0:	f100 809a 	bmi.w	8002b18 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029e4:	6823      	ldr	r3, [r4, #0]
 80029e6:	075b      	lsls	r3, r3, #29
 80029e8:	f100 80b8 	bmi.w	8002b5c <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029ec:	69a2      	ldr	r2, [r4, #24]
 80029ee:	2a00      	cmp	r2, #0
 80029f0:	f040 8119 	bne.w	8002c26 <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 80029f4:	2000      	movs	r0, #0
 80029f6:	e7e8      	b.n	80029ca <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029f8:	4ba6      	ldr	r3, [pc, #664]	; (8002c94 <HAL_RCC_OscConfig+0x2d4>)
 80029fa:	689a      	ldr	r2, [r3, #8]
 80029fc:	f002 020c 	and.w	r2, r2, #12
 8002a00:	2a04      	cmp	r2, #4
 8002a02:	d007      	beq.n	8002a14 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a04:	689a      	ldr	r2, [r3, #8]
 8002a06:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a0a:	2a08      	cmp	r2, #8
 8002a0c:	d10a      	bne.n	8002a24 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	0259      	lsls	r1, r3, #9
 8002a12:	d507      	bpl.n	8002a24 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a14:	4b9f      	ldr	r3, [pc, #636]	; (8002c94 <HAL_RCC_OscConfig+0x2d4>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	039a      	lsls	r2, r3, #14
 8002a1a:	d5dc      	bpl.n	80029d6 <HAL_RCC_OscConfig+0x16>
 8002a1c:	6863      	ldr	r3, [r4, #4]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d1d9      	bne.n	80029d6 <HAL_RCC_OscConfig+0x16>
 8002a22:	e7d1      	b.n	80029c8 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a24:	6863      	ldr	r3, [r4, #4]
 8002a26:	4d9b      	ldr	r5, [pc, #620]	; (8002c94 <HAL_RCC_OscConfig+0x2d4>)
 8002a28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a2c:	d111      	bne.n	8002a52 <HAL_RCC_OscConfig+0x92>
 8002a2e:	682b      	ldr	r3, [r5, #0]
 8002a30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a34:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002a36:	f7fe fa71 	bl	8000f1c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a3a:	4d96      	ldr	r5, [pc, #600]	; (8002c94 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8002a3c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a3e:	682b      	ldr	r3, [r5, #0]
 8002a40:	039b      	lsls	r3, r3, #14
 8002a42:	d4c8      	bmi.n	80029d6 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a44:	f7fe fa6a 	bl	8000f1c <HAL_GetTick>
 8002a48:	1b80      	subs	r0, r0, r6
 8002a4a:	2864      	cmp	r0, #100	; 0x64
 8002a4c:	d9f7      	bls.n	8002a3e <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8002a4e:	2003      	movs	r0, #3
 8002a50:	e7bb      	b.n	80029ca <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a52:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a56:	d104      	bne.n	8002a62 <HAL_RCC_OscConfig+0xa2>
 8002a58:	682b      	ldr	r3, [r5, #0]
 8002a5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a5e:	602b      	str	r3, [r5, #0]
 8002a60:	e7e5      	b.n	8002a2e <HAL_RCC_OscConfig+0x6e>
 8002a62:	682a      	ldr	r2, [r5, #0]
 8002a64:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002a68:	602a      	str	r2, [r5, #0]
 8002a6a:	682a      	ldr	r2, [r5, #0]
 8002a6c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a70:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1df      	bne.n	8002a36 <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 8002a76:	f7fe fa51 	bl	8000f1c <HAL_GetTick>
 8002a7a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a7c:	682b      	ldr	r3, [r5, #0]
 8002a7e:	039f      	lsls	r7, r3, #14
 8002a80:	d5a9      	bpl.n	80029d6 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a82:	f7fe fa4b 	bl	8000f1c <HAL_GetTick>
 8002a86:	1b80      	subs	r0, r0, r6
 8002a88:	2864      	cmp	r0, #100	; 0x64
 8002a8a:	d9f7      	bls.n	8002a7c <HAL_RCC_OscConfig+0xbc>
 8002a8c:	e7df      	b.n	8002a4e <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a8e:	4b81      	ldr	r3, [pc, #516]	; (8002c94 <HAL_RCC_OscConfig+0x2d4>)
 8002a90:	689a      	ldr	r2, [r3, #8]
 8002a92:	f012 0f0c 	tst.w	r2, #12
 8002a96:	d007      	beq.n	8002aa8 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a98:	689a      	ldr	r2, [r3, #8]
 8002a9a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a9e:	2a08      	cmp	r2, #8
 8002aa0:	d111      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	025e      	lsls	r6, r3, #9
 8002aa6:	d40e      	bmi.n	8002ac6 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aa8:	4b7a      	ldr	r3, [pc, #488]	; (8002c94 <HAL_RCC_OscConfig+0x2d4>)
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	0795      	lsls	r5, r2, #30
 8002aae:	d502      	bpl.n	8002ab6 <HAL_RCC_OscConfig+0xf6>
 8002ab0:	68e2      	ldr	r2, [r4, #12]
 8002ab2:	2a01      	cmp	r2, #1
 8002ab4:	d188      	bne.n	80029c8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	6921      	ldr	r1, [r4, #16]
 8002aba:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002abe:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8002ac2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ac4:	e78a      	b.n	80029dc <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ac6:	68e2      	ldr	r2, [r4, #12]
 8002ac8:	4b73      	ldr	r3, [pc, #460]	; (8002c98 <HAL_RCC_OscConfig+0x2d8>)
 8002aca:	b1b2      	cbz	r2, 8002afa <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8002acc:	2201      	movs	r2, #1
 8002ace:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002ad0:	f7fe fa24 	bl	8000f1c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ad4:	4d6f      	ldr	r5, [pc, #444]	; (8002c94 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8002ad6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ad8:	682b      	ldr	r3, [r5, #0]
 8002ada:	0798      	lsls	r0, r3, #30
 8002adc:	d507      	bpl.n	8002aee <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ade:	682b      	ldr	r3, [r5, #0]
 8002ae0:	6922      	ldr	r2, [r4, #16]
 8002ae2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002ae6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002aea:	602b      	str	r3, [r5, #0]
 8002aec:	e776      	b.n	80029dc <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002aee:	f7fe fa15 	bl	8000f1c <HAL_GetTick>
 8002af2:	1b80      	subs	r0, r0, r6
 8002af4:	2802      	cmp	r0, #2
 8002af6:	d9ef      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x118>
 8002af8:	e7a9      	b.n	8002a4e <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8002afa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002afc:	f7fe fa0e 	bl	8000f1c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b00:	4d64      	ldr	r5, [pc, #400]	; (8002c94 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8002b02:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b04:	682b      	ldr	r3, [r5, #0]
 8002b06:	0799      	lsls	r1, r3, #30
 8002b08:	f57f af68 	bpl.w	80029dc <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b0c:	f7fe fa06 	bl	8000f1c <HAL_GetTick>
 8002b10:	1b80      	subs	r0, r0, r6
 8002b12:	2802      	cmp	r0, #2
 8002b14:	d9f6      	bls.n	8002b04 <HAL_RCC_OscConfig+0x144>
 8002b16:	e79a      	b.n	8002a4e <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b18:	6962      	ldr	r2, [r4, #20]
 8002b1a:	4b60      	ldr	r3, [pc, #384]	; (8002c9c <HAL_RCC_OscConfig+0x2dc>)
 8002b1c:	b17a      	cbz	r2, 8002b3e <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8002b1e:	2201      	movs	r2, #1
 8002b20:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002b22:	f7fe f9fb 	bl	8000f1c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b26:	4d5b      	ldr	r5, [pc, #364]	; (8002c94 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8002b28:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b2a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002b2c:	079f      	lsls	r7, r3, #30
 8002b2e:	f53f af59 	bmi.w	80029e4 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b32:	f7fe f9f3 	bl	8000f1c <HAL_GetTick>
 8002b36:	1b80      	subs	r0, r0, r6
 8002b38:	2802      	cmp	r0, #2
 8002b3a:	d9f6      	bls.n	8002b2a <HAL_RCC_OscConfig+0x16a>
 8002b3c:	e787      	b.n	8002a4e <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8002b3e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002b40:	f7fe f9ec 	bl	8000f1c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b44:	4d53      	ldr	r5, [pc, #332]	; (8002c94 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8002b46:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b48:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002b4a:	0798      	lsls	r0, r3, #30
 8002b4c:	f57f af4a 	bpl.w	80029e4 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b50:	f7fe f9e4 	bl	8000f1c <HAL_GetTick>
 8002b54:	1b80      	subs	r0, r0, r6
 8002b56:	2802      	cmp	r0, #2
 8002b58:	d9f6      	bls.n	8002b48 <HAL_RCC_OscConfig+0x188>
 8002b5a:	e778      	b.n	8002a4e <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b5c:	4b4d      	ldr	r3, [pc, #308]	; (8002c94 <HAL_RCC_OscConfig+0x2d4>)
 8002b5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b60:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8002b64:	d128      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b66:	9201      	str	r2, [sp, #4]
 8002b68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b6a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002b6e:	641a      	str	r2, [r3, #64]	; 0x40
 8002b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b76:	9301      	str	r3, [sp, #4]
 8002b78:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002b7a:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b7c:	4d48      	ldr	r5, [pc, #288]	; (8002ca0 <HAL_RCC_OscConfig+0x2e0>)
 8002b7e:	682b      	ldr	r3, [r5, #0]
 8002b80:	05d9      	lsls	r1, r3, #23
 8002b82:	d51b      	bpl.n	8002bbc <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b84:	68a3      	ldr	r3, [r4, #8]
 8002b86:	4d43      	ldr	r5, [pc, #268]	; (8002c94 <HAL_RCC_OscConfig+0x2d4>)
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d127      	bne.n	8002bdc <HAL_RCC_OscConfig+0x21c>
 8002b8c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002b8e:	f043 0301 	orr.w	r3, r3, #1
 8002b92:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002b94:	f7fe f9c2 	bl	8000f1c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b98:	4d3e      	ldr	r5, [pc, #248]	; (8002c94 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8002b9a:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b9c:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ba0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002ba2:	079b      	lsls	r3, r3, #30
 8002ba4:	d539      	bpl.n	8002c1a <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8002ba6:	2e00      	cmp	r6, #0
 8002ba8:	f43f af20 	beq.w	80029ec <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bac:	4a39      	ldr	r2, [pc, #228]	; (8002c94 <HAL_RCC_OscConfig+0x2d4>)
 8002bae:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002bb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8002bb6:	e719      	b.n	80029ec <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8002bb8:	2600      	movs	r6, #0
 8002bba:	e7df      	b.n	8002b7c <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bbc:	682b      	ldr	r3, [r5, #0]
 8002bbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bc2:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002bc4:	f7fe f9aa 	bl	8000f1c <HAL_GetTick>
 8002bc8:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bca:	682b      	ldr	r3, [r5, #0]
 8002bcc:	05da      	lsls	r2, r3, #23
 8002bce:	d4d9      	bmi.n	8002b84 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bd0:	f7fe f9a4 	bl	8000f1c <HAL_GetTick>
 8002bd4:	1bc0      	subs	r0, r0, r7
 8002bd6:	2802      	cmp	r0, #2
 8002bd8:	d9f7      	bls.n	8002bca <HAL_RCC_OscConfig+0x20a>
 8002bda:	e738      	b.n	8002a4e <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bdc:	2b05      	cmp	r3, #5
 8002bde:	d104      	bne.n	8002bea <HAL_RCC_OscConfig+0x22a>
 8002be0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002be2:	f043 0304 	orr.w	r3, r3, #4
 8002be6:	672b      	str	r3, [r5, #112]	; 0x70
 8002be8:	e7d0      	b.n	8002b8c <HAL_RCC_OscConfig+0x1cc>
 8002bea:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002bec:	f022 0201 	bic.w	r2, r2, #1
 8002bf0:	672a      	str	r2, [r5, #112]	; 0x70
 8002bf2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002bf4:	f022 0204 	bic.w	r2, r2, #4
 8002bf8:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d1ca      	bne.n	8002b94 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8002bfe:	f7fe f98d 	bl	8000f1c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c02:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002c06:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c08:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002c0a:	0798      	lsls	r0, r3, #30
 8002c0c:	d5cb      	bpl.n	8002ba6 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c0e:	f7fe f985 	bl	8000f1c <HAL_GetTick>
 8002c12:	1bc0      	subs	r0, r0, r7
 8002c14:	4540      	cmp	r0, r8
 8002c16:	d9f7      	bls.n	8002c08 <HAL_RCC_OscConfig+0x248>
 8002c18:	e719      	b.n	8002a4e <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c1a:	f7fe f97f 	bl	8000f1c <HAL_GetTick>
 8002c1e:	1bc0      	subs	r0, r0, r7
 8002c20:	4540      	cmp	r0, r8
 8002c22:	d9bd      	bls.n	8002ba0 <HAL_RCC_OscConfig+0x1e0>
 8002c24:	e713      	b.n	8002a4e <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c26:	4d1b      	ldr	r5, [pc, #108]	; (8002c94 <HAL_RCC_OscConfig+0x2d4>)
 8002c28:	68ab      	ldr	r3, [r5, #8]
 8002c2a:	f003 030c 	and.w	r3, r3, #12
 8002c2e:	2b08      	cmp	r3, #8
 8002c30:	f43f aeca 	beq.w	80029c8 <HAL_RCC_OscConfig+0x8>
 8002c34:	4e1b      	ldr	r6, [pc, #108]	; (8002ca4 <HAL_RCC_OscConfig+0x2e4>)
 8002c36:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c38:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8002c3a:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c3c:	d134      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8002c3e:	f7fe f96d 	bl	8000f1c <HAL_GetTick>
 8002c42:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c44:	682b      	ldr	r3, [r5, #0]
 8002c46:	0199      	lsls	r1, r3, #6
 8002c48:	d41e      	bmi.n	8002c88 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c4a:	6a22      	ldr	r2, [r4, #32]
 8002c4c:	69e3      	ldr	r3, [r4, #28]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002c52:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002c56:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002c58:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002c5c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c5e:	4c0d      	ldr	r4, [pc, #52]	; (8002c94 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c60:	0852      	lsrs	r2, r2, #1
 8002c62:	3a01      	subs	r2, #1
 8002c64:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002c68:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002c6e:	f7fe f955 	bl	8000f1c <HAL_GetTick>
 8002c72:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c74:	6823      	ldr	r3, [r4, #0]
 8002c76:	019a      	lsls	r2, r3, #6
 8002c78:	f53f aebc 	bmi.w	80029f4 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c7c:	f7fe f94e 	bl	8000f1c <HAL_GetTick>
 8002c80:	1b40      	subs	r0, r0, r5
 8002c82:	2802      	cmp	r0, #2
 8002c84:	d9f6      	bls.n	8002c74 <HAL_RCC_OscConfig+0x2b4>
 8002c86:	e6e2      	b.n	8002a4e <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c88:	f7fe f948 	bl	8000f1c <HAL_GetTick>
 8002c8c:	1bc0      	subs	r0, r0, r7
 8002c8e:	2802      	cmp	r0, #2
 8002c90:	d9d8      	bls.n	8002c44 <HAL_RCC_OscConfig+0x284>
 8002c92:	e6dc      	b.n	8002a4e <HAL_RCC_OscConfig+0x8e>
 8002c94:	40023800 	.word	0x40023800
 8002c98:	42470000 	.word	0x42470000
 8002c9c:	42470e80 	.word	0x42470e80
 8002ca0:	40007000 	.word	0x40007000
 8002ca4:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8002ca8:	f7fe f938 	bl	8000f1c <HAL_GetTick>
 8002cac:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cae:	682b      	ldr	r3, [r5, #0]
 8002cb0:	019b      	lsls	r3, r3, #6
 8002cb2:	f57f ae9f 	bpl.w	80029f4 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cb6:	f7fe f931 	bl	8000f1c <HAL_GetTick>
 8002cba:	1b00      	subs	r0, r0, r4
 8002cbc:	2802      	cmp	r0, #2
 8002cbe:	d9f6      	bls.n	8002cae <HAL_RCC_OscConfig+0x2ee>
 8002cc0:	e6c5      	b.n	8002a4e <HAL_RCC_OscConfig+0x8e>
 8002cc2:	bf00      	nop

08002cc4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cc4:	4913      	ldr	r1, [pc, #76]	; (8002d14 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8002cc6:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cc8:	688b      	ldr	r3, [r1, #8]
 8002cca:	f003 030c 	and.w	r3, r3, #12
 8002cce:	2b04      	cmp	r3, #4
 8002cd0:	d003      	beq.n	8002cda <HAL_RCC_GetSysClockFreq+0x16>
 8002cd2:	2b08      	cmp	r3, #8
 8002cd4:	d003      	beq.n	8002cde <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cd6:	4810      	ldr	r0, [pc, #64]	; (8002d18 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002cd8:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8002cda:	4810      	ldr	r0, [pc, #64]	; (8002d1c <HAL_RCC_GetSysClockFreq+0x58>)
 8002cdc:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cde:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ce0:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ce2:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ce4:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ce8:	bf14      	ite	ne
 8002cea:	480c      	ldrne	r0, [pc, #48]	; (8002d1c <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cec:	480a      	ldreq	r0, [pc, #40]	; (8002d18 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cee:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002cf2:	bf18      	it	ne
 8002cf4:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cf6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cfa:	fba1 0100 	umull	r0, r1, r1, r0
 8002cfe:	f7fd ff3b 	bl	8000b78 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d02:	4b04      	ldr	r3, [pc, #16]	; (8002d14 <HAL_RCC_GetSysClockFreq+0x50>)
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8002d0e:	fbb0 f0f3 	udiv	r0, r0, r3
 8002d12:	bd08      	pop	{r3, pc}
 8002d14:	40023800 	.word	0x40023800
 8002d18:	00f42400 	.word	0x00f42400
 8002d1c:	007a1200 	.word	0x007a1200

08002d20 <HAL_RCC_ClockConfig>:
{
 8002d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d24:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8002d26:	4604      	mov	r4, r0
 8002d28:	b910      	cbnz	r0, 8002d30 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002d2a:	2001      	movs	r0, #1
 8002d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d30:	4b44      	ldr	r3, [pc, #272]	; (8002e44 <HAL_RCC_ClockConfig+0x124>)
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	f002 020f 	and.w	r2, r2, #15
 8002d38:	428a      	cmp	r2, r1
 8002d3a:	d328      	bcc.n	8002d8e <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d3c:	6821      	ldr	r1, [r4, #0]
 8002d3e:	078f      	lsls	r7, r1, #30
 8002d40:	d42d      	bmi.n	8002d9e <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d42:	07c8      	lsls	r0, r1, #31
 8002d44:	d440      	bmi.n	8002dc8 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d46:	4b3f      	ldr	r3, [pc, #252]	; (8002e44 <HAL_RCC_ClockConfig+0x124>)
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	f002 020f 	and.w	r2, r2, #15
 8002d4e:	4295      	cmp	r5, r2
 8002d50:	d366      	bcc.n	8002e20 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d52:	6822      	ldr	r2, [r4, #0]
 8002d54:	0751      	lsls	r1, r2, #29
 8002d56:	d46c      	bmi.n	8002e32 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d58:	0713      	lsls	r3, r2, #28
 8002d5a:	d507      	bpl.n	8002d6c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d5c:	4a3a      	ldr	r2, [pc, #232]	; (8002e48 <HAL_RCC_ClockConfig+0x128>)
 8002d5e:	6921      	ldr	r1, [r4, #16]
 8002d60:	6893      	ldr	r3, [r2, #8]
 8002d62:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002d66:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002d6a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d6c:	f7ff ffaa 	bl	8002cc4 <HAL_RCC_GetSysClockFreq>
 8002d70:	4b35      	ldr	r3, [pc, #212]	; (8002e48 <HAL_RCC_ClockConfig+0x128>)
 8002d72:	4a36      	ldr	r2, [pc, #216]	; (8002e4c <HAL_RCC_ClockConfig+0x12c>)
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002d7a:	5cd3      	ldrb	r3, [r2, r3]
 8002d7c:	40d8      	lsrs	r0, r3
 8002d7e:	4b34      	ldr	r3, [pc, #208]	; (8002e50 <HAL_RCC_ClockConfig+0x130>)
 8002d80:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002d82:	2000      	movs	r0, #0
 8002d84:	f7fe f880 	bl	8000e88 <HAL_InitTick>
  return HAL_OK;
 8002d88:	2000      	movs	r0, #0
 8002d8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d8e:	b2ca      	uxtb	r2, r1
 8002d90:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 030f 	and.w	r3, r3, #15
 8002d98:	4299      	cmp	r1, r3
 8002d9a:	d1c6      	bne.n	8002d2a <HAL_RCC_ClockConfig+0xa>
 8002d9c:	e7ce      	b.n	8002d3c <HAL_RCC_ClockConfig+0x1c>
 8002d9e:	4b2a      	ldr	r3, [pc, #168]	; (8002e48 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002da0:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002da4:	bf1e      	ittt	ne
 8002da6:	689a      	ldrne	r2, [r3, #8]
 8002da8:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8002dac:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dae:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002db0:	bf42      	ittt	mi
 8002db2:	689a      	ldrmi	r2, [r3, #8]
 8002db4:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8002db8:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dba:	689a      	ldr	r2, [r3, #8]
 8002dbc:	68a0      	ldr	r0, [r4, #8]
 8002dbe:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002dc2:	4302      	orrs	r2, r0
 8002dc4:	609a      	str	r2, [r3, #8]
 8002dc6:	e7bc      	b.n	8002d42 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dc8:	6862      	ldr	r2, [r4, #4]
 8002dca:	4b1f      	ldr	r3, [pc, #124]	; (8002e48 <HAL_RCC_ClockConfig+0x128>)
 8002dcc:	2a01      	cmp	r2, #1
 8002dce:	d11d      	bne.n	8002e0c <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dd6:	d0a8      	beq.n	8002d2a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dd8:	4e1b      	ldr	r6, [pc, #108]	; (8002e48 <HAL_RCC_ClockConfig+0x128>)
 8002dda:	68b3      	ldr	r3, [r6, #8]
 8002ddc:	f023 0303 	bic.w	r3, r3, #3
 8002de0:	4313      	orrs	r3, r2
 8002de2:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002de4:	f7fe f89a 	bl	8000f1c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002de8:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002dec:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dee:	68b3      	ldr	r3, [r6, #8]
 8002df0:	6862      	ldr	r2, [r4, #4]
 8002df2:	f003 030c 	and.w	r3, r3, #12
 8002df6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002dfa:	d0a4      	beq.n	8002d46 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dfc:	f7fe f88e 	bl	8000f1c <HAL_GetTick>
 8002e00:	1bc0      	subs	r0, r0, r7
 8002e02:	4540      	cmp	r0, r8
 8002e04:	d9f3      	bls.n	8002dee <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8002e06:	2003      	movs	r0, #3
}
 8002e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e0c:	1e91      	subs	r1, r2, #2
 8002e0e:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e10:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e12:	d802      	bhi.n	8002e1a <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e14:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002e18:	e7dd      	b.n	8002dd6 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e1a:	f013 0f02 	tst.w	r3, #2
 8002e1e:	e7da      	b.n	8002dd6 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e20:	b2ea      	uxtb	r2, r5
 8002e22:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 030f 	and.w	r3, r3, #15
 8002e2a:	429d      	cmp	r5, r3
 8002e2c:	f47f af7d 	bne.w	8002d2a <HAL_RCC_ClockConfig+0xa>
 8002e30:	e78f      	b.n	8002d52 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e32:	4905      	ldr	r1, [pc, #20]	; (8002e48 <HAL_RCC_ClockConfig+0x128>)
 8002e34:	68e0      	ldr	r0, [r4, #12]
 8002e36:	688b      	ldr	r3, [r1, #8]
 8002e38:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002e3c:	4303      	orrs	r3, r0
 8002e3e:	608b      	str	r3, [r1, #8]
 8002e40:	e78a      	b.n	8002d58 <HAL_RCC_ClockConfig+0x38>
 8002e42:	bf00      	nop
 8002e44:	40023c00 	.word	0x40023c00
 8002e48:	40023800 	.word	0x40023800
 8002e4c:	08006d42 	.word	0x08006d42
 8002e50:	20000018 	.word	0x20000018

08002e54 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002e54:	4b01      	ldr	r3, [pc, #4]	; (8002e5c <HAL_RCC_GetHCLKFreq+0x8>)
 8002e56:	6818      	ldr	r0, [r3, #0]
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	20000018 	.word	0x20000018

08002e60 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e60:	4b04      	ldr	r3, [pc, #16]	; (8002e74 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002e62:	4a05      	ldr	r2, [pc, #20]	; (8002e78 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002e6a:	5cd3      	ldrb	r3, [r2, r3]
 8002e6c:	4a03      	ldr	r2, [pc, #12]	; (8002e7c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002e6e:	6810      	ldr	r0, [r2, #0]
}
 8002e70:	40d8      	lsrs	r0, r3
 8002e72:	4770      	bx	lr
 8002e74:	40023800 	.word	0x40023800
 8002e78:	08006d52 	.word	0x08006d52
 8002e7c:	20000018 	.word	0x20000018

08002e80 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e80:	4b04      	ldr	r3, [pc, #16]	; (8002e94 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002e82:	4a05      	ldr	r2, [pc, #20]	; (8002e98 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002e8a:	5cd3      	ldrb	r3, [r2, r3]
 8002e8c:	4a03      	ldr	r2, [pc, #12]	; (8002e9c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002e8e:	6810      	ldr	r0, [r2, #0]
}
 8002e90:	40d8      	lsrs	r0, r3
 8002e92:	4770      	bx	lr
 8002e94:	40023800 	.word	0x40023800
 8002e98:	08006d52 	.word	0x08006d52
 8002e9c:	20000018 	.word	0x20000018

08002ea0 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ea0:	6a03      	ldr	r3, [r0, #32]
 8002ea2:	f023 0301 	bic.w	r3, r3, #1
 8002ea6:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ea8:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002eaa:	6842      	ldr	r2, [r0, #4]
{
 8002eac:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002eae:	6984      	ldr	r4, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002eb0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002eb2:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002eb6:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002eb8:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8002eba:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8002ebe:	4323      	orrs	r3, r4

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002ec0:	4c0c      	ldr	r4, [pc, #48]	; (8002ef4 <TIM_OC1_SetConfig+0x54>)
 8002ec2:	42a0      	cmp	r0, r4
 8002ec4:	d009      	beq.n	8002eda <TIM_OC1_SetConfig+0x3a>
 8002ec6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002eca:	42a0      	cmp	r0, r4
 8002ecc:	d005      	beq.n	8002eda <TIM_OC1_SetConfig+0x3a>
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ece:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002ed0:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002ed2:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8002ed4:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002ed6:	6203      	str	r3, [r0, #32]
} 
 8002ed8:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= OC_Config->OCNPolarity;
 8002eda:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8002edc:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ede:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8002ee2:	4323      	orrs	r3, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ee4:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002ee6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8002eea:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8002eec:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ef0:	4322      	orrs	r2, r4
 8002ef2:	e7ec      	b.n	8002ece <TIM_OC1_SetConfig+0x2e>
 8002ef4:	40010000 	.word	0x40010000

08002ef8 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ef8:	6a03      	ldr	r3, [r0, #32]
 8002efa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002efe:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f00:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002f02:	6842      	ldr	r2, [r0, #4]
{
 8002f04:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f06:	69c4      	ldr	r4, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f08:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8002f0a:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002f0e:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002f10:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8002f12:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002f16:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002f1a:	4c0e      	ldr	r4, [pc, #56]	; (8002f54 <TIM_OC3_SetConfig+0x5c>)
 8002f1c:	42a0      	cmp	r0, r4
 8002f1e:	d009      	beq.n	8002f34 <TIM_OC3_SetConfig+0x3c>
 8002f20:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002f24:	42a0      	cmp	r0, r4
 8002f26:	d005      	beq.n	8002f34 <TIM_OC3_SetConfig+0x3c>
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f28:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002f2a:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002f2c:	61c5      	str	r5, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8002f2e:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f30:	6203      	str	r3, [r0, #32]
}
 8002f32:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002f34:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002f36:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 8002f38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002f3c:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002f40:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002f42:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002f46:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8002f48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002f4c:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 8002f50:	e7ea      	b.n	8002f28 <TIM_OC3_SetConfig+0x30>
 8002f52:	bf00      	nop
 8002f54:	40010000 	.word	0x40010000

08002f58 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f58:	6a03      	ldr	r3, [r0, #32]
 8002f5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f5e:	6203      	str	r3, [r0, #32]
{
 8002f60:	b530      	push	{r4, r5, lr}
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f62:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002f64:	6843      	ldr	r3, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f66:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f68:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002f6a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f6e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002f72:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8002f74:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002f78:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002f7c:	4d09      	ldr	r5, [pc, #36]	; (8002fa4 <TIM_OC4_SetConfig+0x4c>)
 8002f7e:	42a8      	cmp	r0, r5
 8002f80:	d009      	beq.n	8002f96 <TIM_OC4_SetConfig+0x3e>
 8002f82:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002f86:	42a8      	cmp	r0, r5
 8002f88:	d005      	beq.n	8002f96 <TIM_OC4_SetConfig+0x3e>
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f8a:	6043      	str	r3, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002f8c:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002f8e:	61c2      	str	r2, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8002f90:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f92:	6204      	str	r4, [r0, #32]
}
 8002f94:	bd30      	pop	{r4, r5, pc}
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002f96:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002f98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002f9c:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8002fa0:	e7f3      	b.n	8002f8a <TIM_OC4_SetConfig+0x32>
 8002fa2:	bf00      	nop
 8002fa4:	40010000 	.word	0x40010000

08002fa8 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002fa8:	6803      	ldr	r3, [r0, #0]
 8002faa:	68da      	ldr	r2, [r3, #12]
 8002fac:	f042 0201 	orr.w	r2, r2, #1
 8002fb0:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	f042 0201 	orr.w	r2, r2, #1
 8002fb8:	601a      	str	r2, [r3, #0]
}
 8002fba:	2000      	movs	r0, #0
 8002fbc:	4770      	bx	lr

08002fbe <HAL_TIM_PWM_MspInit>:
 8002fbe:	4770      	bx	lr

08002fc0 <HAL_TIM_Encoder_Start>:
{
 8002fc0:	6803      	ldr	r3, [r0, #0]
  switch (Channel)
 8002fc2:	b189      	cbz	r1, 8002fe8 <HAL_TIM_Encoder_Start+0x28>
 8002fc4:	2904      	cmp	r1, #4
 8002fc6:	d007      	beq.n	8002fd8 <HAL_TIM_Encoder_Start+0x18>
  TIMx->CCER &= ~tmp;
 8002fc8:	6a1a      	ldr	r2, [r3, #32]
 8002fca:	f022 0201 	bic.w	r2, r2, #1
 8002fce:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8002fd0:	6a1a      	ldr	r2, [r3, #32]
 8002fd2:	f042 0201 	orr.w	r2, r2, #1
 8002fd6:	621a      	str	r2, [r3, #32]
  TIMx->CCER &= ~tmp;
 8002fd8:	6a1a      	ldr	r2, [r3, #32]
 8002fda:	f022 0210 	bic.w	r2, r2, #16
 8002fde:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8002fe0:	6a1a      	ldr	r2, [r3, #32]
 8002fe2:	f042 0210 	orr.w	r2, r2, #16
 8002fe6:	e006      	b.n	8002ff6 <HAL_TIM_Encoder_Start+0x36>
  TIMx->CCER &= ~tmp;
 8002fe8:	6a1a      	ldr	r2, [r3, #32]
 8002fea:	f022 0201 	bic.w	r2, r2, #1
 8002fee:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8002ff0:	6a1a      	ldr	r2, [r3, #32]
 8002ff2:	f042 0201 	orr.w	r2, r2, #1
 8002ff6:	621a      	str	r2, [r3, #32]
  __HAL_TIM_ENABLE(htim);
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	f042 0201 	orr.w	r2, r2, #1
 8002ffe:	601a      	str	r2, [r3, #0]
}
 8003000:	2000      	movs	r0, #0
 8003002:	4770      	bx	lr

08003004 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003004:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003008:	2b01      	cmp	r3, #1
{
 800300a:	b570      	push	{r4, r5, r6, lr}
 800300c:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8003010:	d01c      	beq.n	800304c <HAL_TIM_ConfigClockSource+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 8003012:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  tmpsmcr = htim->Instance->SMCR;
 8003016:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8003018:	2201      	movs	r2, #1
 800301a:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  tmpsmcr = htim->Instance->SMCR;
 800301e:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003020:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003024:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8003028:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 800302a:	680a      	ldr	r2, [r1, #0]
 800302c:	2a40      	cmp	r2, #64	; 0x40
 800302e:	d079      	beq.n	8003124 <HAL_TIM_ConfigClockSource+0x120>
 8003030:	d819      	bhi.n	8003066 <HAL_TIM_ConfigClockSource+0x62>
 8003032:	2a10      	cmp	r2, #16
 8003034:	f000 8093 	beq.w	800315e <HAL_TIM_ConfigClockSource+0x15a>
 8003038:	d80a      	bhi.n	8003050 <HAL_TIM_ConfigClockSource+0x4c>
 800303a:	2a00      	cmp	r2, #0
 800303c:	f000 8089 	beq.w	8003152 <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 8003040:	2301      	movs	r3, #1
 8003042:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8003046:	2300      	movs	r3, #0
 8003048:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 800304c:	4618      	mov	r0, r3
}
 800304e:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8003050:	2a20      	cmp	r2, #32
 8003052:	f000 808a 	beq.w	800316a <HAL_TIM_ConfigClockSource+0x166>
 8003056:	2a30      	cmp	r2, #48	; 0x30
 8003058:	d1f2      	bne.n	8003040 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 800305a:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 800305c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8003060:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8003064:	e036      	b.n	80030d4 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8003066:	2a70      	cmp	r2, #112	; 0x70
 8003068:	d036      	beq.n	80030d8 <HAL_TIM_ConfigClockSource+0xd4>
 800306a:	d81b      	bhi.n	80030a4 <HAL_TIM_ConfigClockSource+0xa0>
 800306c:	2a50      	cmp	r2, #80	; 0x50
 800306e:	d042      	beq.n	80030f6 <HAL_TIM_ConfigClockSource+0xf2>
 8003070:	2a60      	cmp	r2, #96	; 0x60
 8003072:	d1e5      	bne.n	8003040 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003074:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8003076:	684d      	ldr	r5, [r1, #4]
 8003078:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800307a:	f024 0410 	bic.w	r4, r4, #16
 800307e:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003080:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8003082:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003084:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003088:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800308c:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003090:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8003094:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8003096:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8003098:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800309a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800309e:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 80030a2:	e017      	b.n	80030d4 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 80030a4:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80030a8:	d011      	beq.n	80030ce <HAL_TIM_ConfigClockSource+0xca>
 80030aa:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80030ae:	d1c7      	bne.n	8003040 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80030b0:	688a      	ldr	r2, [r1, #8]
 80030b2:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80030b4:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80030b6:	68c9      	ldr	r1, [r1, #12]
 80030b8:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030ba:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80030be:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80030c2:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030c4:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030c6:	689a      	ldr	r2, [r3, #8]
 80030c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030cc:	e002      	b.n	80030d4 <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80030ce:	689a      	ldr	r2, [r3, #8]
 80030d0:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 80030d4:	609a      	str	r2, [r3, #8]
 80030d6:	e7b3      	b.n	8003040 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80030d8:	688a      	ldr	r2, [r1, #8]
 80030da:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80030dc:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80030de:	68c9      	ldr	r1, [r1, #12]
 80030e0:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030e2:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80030e6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80030ea:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 80030ec:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 80030ee:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030f0:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 80030f4:	e7ee      	b.n	80030d4 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80030f6:	684c      	ldr	r4, [r1, #4]
 80030f8:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80030fa:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030fc:	6a1d      	ldr	r5, [r3, #32]
 80030fe:	f025 0501 	bic.w	r5, r5, #1
 8003102:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8003104:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003106:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800310a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800310e:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8003112:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8003114:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003116:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8003118:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800311a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800311e:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8003122:	e7d7      	b.n	80030d4 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8003124:	684c      	ldr	r4, [r1, #4]
 8003126:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8003128:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800312a:	6a1d      	ldr	r5, [r3, #32]
 800312c:	f025 0501 	bic.w	r5, r5, #1
 8003130:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8003132:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003134:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003138:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800313c:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8003140:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8003142:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003144:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8003146:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8003148:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800314c:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8003150:	e7c0      	b.n	80030d4 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8003152:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8003154:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8003158:	f042 0207 	orr.w	r2, r2, #7
 800315c:	e7ba      	b.n	80030d4 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 800315e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8003160:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8003164:	f042 0217 	orr.w	r2, r2, #23
 8003168:	e7b4      	b.n	80030d4 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 800316a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800316c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8003170:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8003174:	e7ae      	b.n	80030d4 <HAL_TIM_ConfigClockSource+0xd0>

08003176 <HAL_TIM_OC_DelayElapsedCallback>:
 8003176:	4770      	bx	lr

08003178 <HAL_TIM_IC_CaptureCallback>:
 8003178:	4770      	bx	lr

0800317a <HAL_TIM_PWM_PulseFinishedCallback>:
 800317a:	4770      	bx	lr

0800317c <HAL_TIM_TriggerCallback>:
 800317c:	4770      	bx	lr

0800317e <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800317e:	6803      	ldr	r3, [r0, #0]
 8003180:	691a      	ldr	r2, [r3, #16]
 8003182:	0791      	lsls	r1, r2, #30
{
 8003184:	b510      	push	{r4, lr}
 8003186:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003188:	d50e      	bpl.n	80031a8 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800318a:	68da      	ldr	r2, [r3, #12]
 800318c:	0792      	lsls	r2, r2, #30
 800318e:	d50b      	bpl.n	80031a8 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003190:	f06f 0202 	mvn.w	r2, #2
 8003194:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003196:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003198:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800319a:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800319c:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800319e:	d077      	beq.n	8003290 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 80031a0:	f7ff ffea 	bl	8003178 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031a4:	2300      	movs	r3, #0
 80031a6:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80031a8:	6823      	ldr	r3, [r4, #0]
 80031aa:	691a      	ldr	r2, [r3, #16]
 80031ac:	0750      	lsls	r0, r2, #29
 80031ae:	d510      	bpl.n	80031d2 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80031b0:	68da      	ldr	r2, [r3, #12]
 80031b2:	0751      	lsls	r1, r2, #29
 80031b4:	d50d      	bpl.n	80031d2 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80031b6:	f06f 0204 	mvn.w	r2, #4
 80031ba:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031bc:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031be:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031c0:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031c4:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 80031c6:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031c8:	d068      	beq.n	800329c <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 80031ca:	f7ff ffd5 	bl	8003178 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ce:	2300      	movs	r3, #0
 80031d0:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80031d2:	6823      	ldr	r3, [r4, #0]
 80031d4:	691a      	ldr	r2, [r3, #16]
 80031d6:	0712      	lsls	r2, r2, #28
 80031d8:	d50f      	bpl.n	80031fa <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80031da:	68da      	ldr	r2, [r3, #12]
 80031dc:	0710      	lsls	r0, r2, #28
 80031de:	d50c      	bpl.n	80031fa <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031e0:	f06f 0208 	mvn.w	r2, #8
 80031e4:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031e6:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031e8:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031ea:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031ec:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 80031ee:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031f0:	d05a      	beq.n	80032a8 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80031f2:	f7ff ffc1 	bl	8003178 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031f6:	2300      	movs	r3, #0
 80031f8:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031fa:	6823      	ldr	r3, [r4, #0]
 80031fc:	691a      	ldr	r2, [r3, #16]
 80031fe:	06d2      	lsls	r2, r2, #27
 8003200:	d510      	bpl.n	8003224 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8003202:	68da      	ldr	r2, [r3, #12]
 8003204:	06d0      	lsls	r0, r2, #27
 8003206:	d50d      	bpl.n	8003224 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003208:	f06f 0210 	mvn.w	r2, #16
 800320c:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800320e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003210:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003212:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003216:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8003218:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800321a:	d04b      	beq.n	80032b4 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 800321c:	f7ff ffac 	bl	8003178 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003220:	2300      	movs	r3, #0
 8003222:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003224:	6823      	ldr	r3, [r4, #0]
 8003226:	691a      	ldr	r2, [r3, #16]
 8003228:	07d1      	lsls	r1, r2, #31
 800322a:	d508      	bpl.n	800323e <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800322c:	68da      	ldr	r2, [r3, #12]
 800322e:	07d2      	lsls	r2, r2, #31
 8003230:	d505      	bpl.n	800323e <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003232:	f06f 0201 	mvn.w	r2, #1
 8003236:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003238:	4620      	mov	r0, r4
 800323a:	f002 fa2d 	bl	8005698 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800323e:	6823      	ldr	r3, [r4, #0]
 8003240:	691a      	ldr	r2, [r3, #16]
 8003242:	0610      	lsls	r0, r2, #24
 8003244:	d508      	bpl.n	8003258 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8003246:	68da      	ldr	r2, [r3, #12]
 8003248:	0611      	lsls	r1, r2, #24
 800324a:	d505      	bpl.n	8003258 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800324c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003250:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003252:	4620      	mov	r0, r4
 8003254:	f000 fa19 	bl	800368a <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003258:	6823      	ldr	r3, [r4, #0]
 800325a:	691a      	ldr	r2, [r3, #16]
 800325c:	0652      	lsls	r2, r2, #25
 800325e:	d508      	bpl.n	8003272 <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8003260:	68da      	ldr	r2, [r3, #12]
 8003262:	0650      	lsls	r0, r2, #25
 8003264:	d505      	bpl.n	8003272 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003266:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800326a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800326c:	4620      	mov	r0, r4
 800326e:	f7ff ff85 	bl	800317c <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003272:	6823      	ldr	r3, [r4, #0]
 8003274:	691a      	ldr	r2, [r3, #16]
 8003276:	0691      	lsls	r1, r2, #26
 8003278:	d522      	bpl.n	80032c0 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800327a:	68da      	ldr	r2, [r3, #12]
 800327c:	0692      	lsls	r2, r2, #26
 800327e:	d51f      	bpl.n	80032c0 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003280:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8003284:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003286:	611a      	str	r2, [r3, #16]
}
 8003288:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 800328c:	f000 b9fc 	b.w	8003688 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003290:	f7ff ff71 	bl	8003176 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003294:	4620      	mov	r0, r4
 8003296:	f7ff ff70 	bl	800317a <HAL_TIM_PWM_PulseFinishedCallback>
 800329a:	e783      	b.n	80031a4 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800329c:	f7ff ff6b 	bl	8003176 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032a0:	4620      	mov	r0, r4
 80032a2:	f7ff ff6a 	bl	800317a <HAL_TIM_PWM_PulseFinishedCallback>
 80032a6:	e792      	b.n	80031ce <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032a8:	f7ff ff65 	bl	8003176 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80032ac:	4620      	mov	r0, r4
 80032ae:	f7ff ff64 	bl	800317a <HAL_TIM_PWM_PulseFinishedCallback>
 80032b2:	e7a0      	b.n	80031f6 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032b4:	f7ff ff5f 	bl	8003176 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032b8:	4620      	mov	r0, r4
 80032ba:	f7ff ff5e 	bl	800317a <HAL_TIM_PWM_PulseFinishedCallback>
 80032be:	e7af      	b.n	8003220 <HAL_TIM_IRQHandler+0xa2>
 80032c0:	bd10      	pop	{r4, pc}
	...

080032c4 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80032c4:	4a2e      	ldr	r2, [pc, #184]	; (8003380 <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 80032c6:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80032c8:	4290      	cmp	r0, r2
 80032ca:	d012      	beq.n	80032f2 <TIM_Base_SetConfig+0x2e>
 80032cc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80032d0:	d00f      	beq.n	80032f2 <TIM_Base_SetConfig+0x2e>
 80032d2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80032d6:	4290      	cmp	r0, r2
 80032d8:	d00b      	beq.n	80032f2 <TIM_Base_SetConfig+0x2e>
 80032da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80032de:	4290      	cmp	r0, r2
 80032e0:	d007      	beq.n	80032f2 <TIM_Base_SetConfig+0x2e>
 80032e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80032e6:	4290      	cmp	r0, r2
 80032e8:	d003      	beq.n	80032f2 <TIM_Base_SetConfig+0x2e>
 80032ea:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80032ee:	4290      	cmp	r0, r2
 80032f0:	d11d      	bne.n	800332e <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 80032f2:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80032f8:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80032fa:	4a21      	ldr	r2, [pc, #132]	; (8003380 <TIM_Base_SetConfig+0xbc>)
 80032fc:	4290      	cmp	r0, r2
 80032fe:	d104      	bne.n	800330a <TIM_Base_SetConfig+0x46>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003300:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003302:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003306:	4313      	orrs	r3, r2
 8003308:	e028      	b.n	800335c <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800330a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800330e:	d0f7      	beq.n	8003300 <TIM_Base_SetConfig+0x3c>
 8003310:	4a1c      	ldr	r2, [pc, #112]	; (8003384 <TIM_Base_SetConfig+0xc0>)
 8003312:	4290      	cmp	r0, r2
 8003314:	d0f4      	beq.n	8003300 <TIM_Base_SetConfig+0x3c>
 8003316:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800331a:	4290      	cmp	r0, r2
 800331c:	d0f0      	beq.n	8003300 <TIM_Base_SetConfig+0x3c>
 800331e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003322:	4290      	cmp	r0, r2
 8003324:	d0ec      	beq.n	8003300 <TIM_Base_SetConfig+0x3c>
 8003326:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800332a:	4290      	cmp	r0, r2
 800332c:	d0e8      	beq.n	8003300 <TIM_Base_SetConfig+0x3c>
 800332e:	4a16      	ldr	r2, [pc, #88]	; (8003388 <TIM_Base_SetConfig+0xc4>)
 8003330:	4290      	cmp	r0, r2
 8003332:	d0e5      	beq.n	8003300 <TIM_Base_SetConfig+0x3c>
 8003334:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003338:	4290      	cmp	r0, r2
 800333a:	d0e1      	beq.n	8003300 <TIM_Base_SetConfig+0x3c>
 800333c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003340:	4290      	cmp	r0, r2
 8003342:	d0dd      	beq.n	8003300 <TIM_Base_SetConfig+0x3c>
 8003344:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8003348:	4290      	cmp	r0, r2
 800334a:	d0d9      	beq.n	8003300 <TIM_Base_SetConfig+0x3c>
 800334c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003350:	4290      	cmp	r0, r2
 8003352:	d0d5      	beq.n	8003300 <TIM_Base_SetConfig+0x3c>
 8003354:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003358:	4290      	cmp	r0, r2
 800335a:	d0d1      	beq.n	8003300 <TIM_Base_SetConfig+0x3c>
  TIMx->CR1 = tmpcr1;
 800335c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800335e:	688b      	ldr	r3, [r1, #8]
 8003360:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8003362:	680b      	ldr	r3, [r1, #0]
 8003364:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8003366:	4b06      	ldr	r3, [pc, #24]	; (8003380 <TIM_Base_SetConfig+0xbc>)
 8003368:	4298      	cmp	r0, r3
 800336a:	d006      	beq.n	800337a <TIM_Base_SetConfig+0xb6>
 800336c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003370:	4298      	cmp	r0, r3
 8003372:	d002      	beq.n	800337a <TIM_Base_SetConfig+0xb6>
  TIMx->EGR = TIM_EGR_UG;
 8003374:	2301      	movs	r3, #1
 8003376:	6143      	str	r3, [r0, #20]
}
 8003378:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 800337a:	690b      	ldr	r3, [r1, #16]
 800337c:	6303      	str	r3, [r0, #48]	; 0x30
 800337e:	e7f9      	b.n	8003374 <TIM_Base_SetConfig+0xb0>
 8003380:	40010000 	.word	0x40010000
 8003384:	40000400 	.word	0x40000400
 8003388:	40014000 	.word	0x40014000

0800338c <HAL_TIM_Base_Init>:
{ 
 800338c:	b510      	push	{r4, lr}
  if(htim == NULL)
 800338e:	4604      	mov	r4, r0
 8003390:	b1a0      	cbz	r0, 80033bc <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8003392:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003396:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800339a:	b91b      	cbnz	r3, 80033a4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800339c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 80033a0:	f002 fc0c 	bl	8005bbc <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80033a4:	2302      	movs	r3, #2
 80033a6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80033aa:	6820      	ldr	r0, [r4, #0]
 80033ac:	1d21      	adds	r1, r4, #4
 80033ae:	f7ff ff89 	bl	80032c4 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80033b2:	2301      	movs	r3, #1
 80033b4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 80033b8:	2000      	movs	r0, #0
 80033ba:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80033bc:	2001      	movs	r0, #1
}
 80033be:	bd10      	pop	{r4, pc}

080033c0 <HAL_TIM_PWM_Init>:
{
 80033c0:	b510      	push	{r4, lr}
  if(htim == NULL)
 80033c2:	4604      	mov	r4, r0
 80033c4:	b1a0      	cbz	r0, 80033f0 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80033c6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80033ca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80033ce:	b91b      	cbnz	r3, 80033d8 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80033d0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 80033d4:	f7ff fdf3 	bl	8002fbe <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;  
 80033d8:	2302      	movs	r3, #2
 80033da:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80033de:	6820      	ldr	r0, [r4, #0]
 80033e0:	1d21      	adds	r1, r4, #4
 80033e2:	f7ff ff6f 	bl	80032c4 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80033e6:	2301      	movs	r3, #1
 80033e8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 80033ec:	2000      	movs	r0, #0
 80033ee:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80033f0:	2001      	movs	r0, #1
}  
 80033f2:	bd10      	pop	{r4, pc}

080033f4 <HAL_TIM_Encoder_Init>:
{
 80033f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033f6:	460c      	mov	r4, r1
  if(htim == NULL)
 80033f8:	4605      	mov	r5, r0
 80033fa:	2800      	cmp	r0, #0
 80033fc:	d041      	beq.n	8003482 <HAL_TIM_Encoder_Init+0x8e>
  if(htim->State == HAL_TIM_STATE_RESET)
 80033fe:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003402:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003406:	b91b      	cbnz	r3, 8003410 <HAL_TIM_Encoder_Init+0x1c>
    htim->Lock = HAL_UNLOCKED;
 8003408:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Encoder_MspInit(htim);
 800340c:	f002 fbb2 	bl	8005b74 <HAL_TIM_Encoder_MspInit>
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8003410:	4629      	mov	r1, r5
  htim->State= HAL_TIM_STATE_BUSY;   
 8003412:	2302      	movs	r3, #2
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8003414:	f851 0b04 	ldr.w	r0, [r1], #4
  htim->State= HAL_TIM_STATE_BUSY;   
 8003418:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800341c:	6883      	ldr	r3, [r0, #8]
 800341e:	f023 0307 	bic.w	r3, r3, #7
 8003422:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);  
 8003424:	f7ff ff4e 	bl	80032c4 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8003428:	6828      	ldr	r0, [r5, #0]
  tmpsmcr |= sConfig->EncoderMode;
 800342a:	6823      	ldr	r3, [r4, #0]
  tmpsmcr = htim->Instance->SMCR;
 800342c:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 800342e:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003430:	68a1      	ldr	r1, [r4, #8]
  tmpccer = htim->Instance->CCER;
 8003432:	6a07      	ldr	r7, [r0, #32]
  tmpsmcr |= sConfig->EncoderMode;
 8003434:	431e      	orrs	r6, r3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003436:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003438:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800343c:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003440:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 8003444:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003446:	f423 427c 	bic.w	r2, r3, #64512	; 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800344a:	6923      	ldr	r3, [r4, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800344c:	69e1      	ldr	r1, [r4, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800344e:	011b      	lsls	r3, r3, #4
 8003450:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003454:	68e1      	ldr	r1, [r4, #12]
 8003456:	430b      	orrs	r3, r1
 8003458:	6a21      	ldr	r1, [r4, #32]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800345a:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800345e:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8003462:	4313      	orrs	r3, r2
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003464:	6961      	ldr	r1, [r4, #20]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003466:	f027 02aa 	bic.w	r2, r7, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800346a:	6867      	ldr	r7, [r4, #4]
  htim->Instance->SMCR = tmpsmcr;
 800346c:	6086      	str	r6, [r0, #8]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800346e:	ea47 1701 	orr.w	r7, r7, r1, lsl #4
  htim->Instance->CCMR1 = tmpccmr1;
 8003472:	6183      	str	r3, [r0, #24]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003474:	4317      	orrs	r7, r2
  htim->State= HAL_TIM_STATE_READY;
 8003476:	2301      	movs	r3, #1
  htim->Instance->CCER = tmpccer;
 8003478:	6207      	str	r7, [r0, #32]
  htim->State= HAL_TIM_STATE_READY;
 800347a:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
  return HAL_OK;
 800347e:	2000      	movs	r0, #0
 8003480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8003482:	2001      	movs	r0, #1
}
 8003484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003488 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003488:	6a03      	ldr	r3, [r0, #32]
 800348a:	f023 0310 	bic.w	r3, r3, #16
 800348e:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8003490:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8003492:	6842      	ldr	r2, [r0, #4]
{
 8003494:	b570      	push	{r4, r5, r6, lr}
  tmpccmrx = TIMx->CCMR1;
 8003496:	6984      	ldr	r4, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003498:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800349a:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800349e:	ea44 2505 	orr.w	r5, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034a2:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80034a4:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034a8:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80034ac:	4c0d      	ldr	r4, [pc, #52]	; (80034e4 <TIM_OC2_SetConfig+0x5c>)
 80034ae:	42a0      	cmp	r0, r4
 80034b0:	d009      	beq.n	80034c6 <TIM_OC2_SetConfig+0x3e>
 80034b2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80034b6:	42a0      	cmp	r0, r4
 80034b8:	d005      	beq.n	80034c6 <TIM_OC2_SetConfig+0x3e>
  TIMx->CR2 = tmpcr2;
 80034ba:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 80034bc:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 80034be:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80034c0:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80034c2:	6203      	str	r3, [r0, #32]
}
 80034c4:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80034c6:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80034c8:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 80034ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80034ce:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80034d2:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80034d4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80034d8:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 80034da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80034de:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
 80034e2:	e7ea      	b.n	80034ba <TIM_OC2_SetConfig+0x32>
 80034e4:	40010000 	.word	0x40010000

080034e8 <HAL_TIM_PWM_ConfigChannel>:
{
 80034e8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80034ea:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80034ee:	2b01      	cmp	r3, #1
{
 80034f0:	4604      	mov	r4, r0
 80034f2:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80034f6:	d025      	beq.n	8003544 <HAL_TIM_PWM_ConfigChannel+0x5c>
 80034f8:	2301      	movs	r3, #1
 80034fa:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 80034fe:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  switch (Channel)
 8003502:	2a0c      	cmp	r2, #12
 8003504:	d818      	bhi.n	8003538 <HAL_TIM_PWM_ConfigChannel+0x50>
 8003506:	e8df f002 	tbb	[pc, r2]
 800350a:	1707      	.short	0x1707
 800350c:	171e1717 	.word	0x171e1717
 8003510:	172f1717 	.word	0x172f1717
 8003514:	1717      	.short	0x1717
 8003516:	40          	.byte	0x40
 8003517:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003518:	6820      	ldr	r0, [r4, #0]
 800351a:	f7ff fcc1 	bl	8002ea0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800351e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003520:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003522:	699a      	ldr	r2, [r3, #24]
 8003524:	f042 0208 	orr.w	r2, r2, #8
 8003528:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800352a:	699a      	ldr	r2, [r3, #24]
 800352c:	f022 0204 	bic.w	r2, r2, #4
 8003530:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003532:	699a      	ldr	r2, [r3, #24]
 8003534:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003536:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8003538:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800353a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800353c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8003540:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 8003544:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003546:	6820      	ldr	r0, [r4, #0]
 8003548:	f7ff ff9e 	bl	8003488 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800354c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800354e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003550:	699a      	ldr	r2, [r3, #24]
 8003552:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003556:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003558:	699a      	ldr	r2, [r3, #24]
 800355a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800355e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003560:	699a      	ldr	r2, [r3, #24]
 8003562:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003566:	e7e6      	b.n	8003536 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003568:	6820      	ldr	r0, [r4, #0]
 800356a:	f7ff fcc5 	bl	8002ef8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800356e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8003570:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003572:	69da      	ldr	r2, [r3, #28]
 8003574:	f042 0208 	orr.w	r2, r2, #8
 8003578:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800357a:	69da      	ldr	r2, [r3, #28]
 800357c:	f022 0204 	bic.w	r2, r2, #4
 8003580:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8003582:	69da      	ldr	r2, [r3, #28]
 8003584:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8003586:	61da      	str	r2, [r3, #28]
    break;
 8003588:	e7d6      	b.n	8003538 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800358a:	6820      	ldr	r0, [r4, #0]
 800358c:	f7ff fce4 	bl	8002f58 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003590:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8003592:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003594:	69da      	ldr	r2, [r3, #28]
 8003596:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800359a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800359c:	69da      	ldr	r2, [r3, #28]
 800359e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035a2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 80035a4:	69da      	ldr	r2, [r3, #28]
 80035a6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80035aa:	e7ec      	b.n	8003586 <HAL_TIM_PWM_ConfigChannel+0x9e>

080035ac <TIM_CCxChannelCmd>:
  TIMx->CCER &= ~tmp;
 80035ac:	6a03      	ldr	r3, [r0, #32]
{
 80035ae:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << Channel;
 80035b0:	2401      	movs	r4, #1
 80035b2:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80035b4:	ea23 0304 	bic.w	r3, r3, r4
 80035b8:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80035ba:	6a03      	ldr	r3, [r0, #32]
 80035bc:	408a      	lsls	r2, r1
 80035be:	431a      	orrs	r2, r3
 80035c0:	6202      	str	r2, [r0, #32]
 80035c2:	bd10      	pop	{r4, pc}

080035c4 <HAL_TIM_PWM_Start>:
{
 80035c4:	b510      	push	{r4, lr}
 80035c6:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80035c8:	2201      	movs	r2, #1
 80035ca:	6800      	ldr	r0, [r0, #0]
 80035cc:	f7ff ffee 	bl	80035ac <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 80035d0:	6823      	ldr	r3, [r4, #0]
 80035d2:	4a08      	ldr	r2, [pc, #32]	; (80035f4 <HAL_TIM_PWM_Start+0x30>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d003      	beq.n	80035e0 <HAL_TIM_PWM_Start+0x1c>
 80035d8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80035dc:	4293      	cmp	r3, r2
 80035de:	d103      	bne.n	80035e8 <HAL_TIM_PWM_Start+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 80035e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035e6:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	f042 0201 	orr.w	r2, r2, #1
 80035ee:	601a      	str	r2, [r3, #0]
} 
 80035f0:	2000      	movs	r0, #0
 80035f2:	bd10      	pop	{r4, pc}
 80035f4:	40010000 	.word	0x40010000

080035f8 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 80035f8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80035fc:	2b01      	cmp	r3, #1
{
 80035fe:	b510      	push	{r4, lr}
 8003600:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8003604:	d018      	beq.n	8003638 <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 8003606:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800360a:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 800360c:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800360e:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8003610:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8003612:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003616:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8003618:	685a      	ldr	r2, [r3, #4]
 800361a:	4322      	orrs	r2, r4
 800361c:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800361e:	689a      	ldr	r2, [r3, #8]
 8003620:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003624:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8003626:	689a      	ldr	r2, [r3, #8]
 8003628:	430a      	orrs	r2, r1
 800362a:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 800362c:	2301      	movs	r3, #1
 800362e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8003632:	2300      	movs	r3, #0
 8003634:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8003638:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 800363a:	bd10      	pop	{r4, pc}

0800363c <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 800363c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003640:	2b01      	cmp	r3, #1
 8003642:	d01f      	beq.n	8003684 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003644:	68cb      	ldr	r3, [r1, #12]
 8003646:	688a      	ldr	r2, [r1, #8]
 8003648:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800364c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800364e:	684a      	ldr	r2, [r1, #4]
 8003650:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003654:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003656:	680a      	ldr	r2, [r1, #0]
 8003658:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800365c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800365e:	690a      	ldr	r2, [r1, #16]
 8003660:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003664:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003666:	694a      	ldr	r2, [r1, #20]
 8003668:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800366c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800366e:	698a      	ldr	r2, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003670:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003674:	4313      	orrs	r3, r2
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003676:	6802      	ldr	r2, [r0, #0]
 8003678:	6453      	str	r3, [r2, #68]	; 0x44
  
  __HAL_UNLOCK(htim);
 800367a:	2300      	movs	r3, #0
 800367c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  return HAL_OK;
 8003680:	4618      	mov	r0, r3
 8003682:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003684:	2002      	movs	r0, #2
}
 8003686:	4770      	bx	lr

08003688 <HAL_TIMEx_CommutationCallback>:
 8003688:	4770      	bx	lr

0800368a <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800368a:	4770      	bx	lr

0800368c <USART_EndRxTransfer>:
  * @retval None
  */
static void USART_EndRxTransfer(USART_HandleTypeDef *husart)
{
  /* Disable RXNE, PE and ERR interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800368c:	6803      	ldr	r3, [r0, #0]
 800368e:	68da      	ldr	r2, [r3, #12]
 8003690:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003694:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8003696:	695a      	ldr	r2, [r3, #20]
 8003698:	f022 0201 	bic.w	r2, r2, #1
 800369c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 800369e:	2301      	movs	r3, #1
 80036a0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 80036a4:	4770      	bx	lr
	...

080036a8 <HAL_USART_Init>:
{
 80036a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(husart == NULL)
 80036ac:	4605      	mov	r5, r0
 80036ae:	2800      	cmp	r0, #0
 80036b0:	f000 808c 	beq.w	80037cc <HAL_USART_Init+0x124>
  if(husart->State == HAL_USART_STATE_RESET)
 80036b4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80036b8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80036bc:	b91b      	cbnz	r3, 80036c6 <HAL_USART_Init+0x1e>
    husart->Lock = HAL_UNLOCKED;
 80036be:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_USART_MspInit(husart);
 80036c2:	f002 fc87 	bl	8005fd4 <HAL_USART_MspInit>
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 80036c6:	682e      	ldr	r6, [r5, #0]
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE| husart->Init.CLKPolarity |
 80036c8:	69e9      	ldr	r1, [r5, #28]
  husart->State = HAL_USART_STATE_BUSY;
 80036ca:	2302      	movs	r3, #2
 80036cc:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 80036d0:	68f3      	ldr	r3, [r6, #12]
 80036d2:	f023 030c 	bic.w	r3, r3, #12
 80036d6:	60f3      	str	r3, [r6, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE| husart->Init.CLKPolarity |
 80036d8:	69ab      	ldr	r3, [r5, #24]
  tmpreg = husart->Instance->CR2;
 80036da:	6932      	ldr	r2, [r6, #16]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE| husart->Init.CLKPolarity |
 80036dc:	430b      	orrs	r3, r1
 80036de:	6a29      	ldr	r1, [r5, #32]
 80036e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80036e4:	430b      	orrs	r3, r1
 80036e6:	68e9      	ldr	r1, [r5, #12]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 80036e8:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE| husart->Init.CLKPolarity |
 80036ec:	430b      	orrs	r3, r1
 80036ee:	4313      	orrs	r3, r2
                       husart->Init.CLKPhase| husart->Init.CLKLastBit | husart->Init.StopBits);
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 80036f0:	6133      	str	r3, [r6, #16]
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
     Force OVER8 bit to 1 in order to reach the max USART frequencies */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 80036f2:	6929      	ldr	r1, [r5, #16]
 80036f4:	68ab      	ldr	r3, [r5, #8]
  tmpreg = husart->Instance->CR1;
 80036f6:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 80036f8:	430b      	orrs	r3, r1
 80036fa:	6969      	ldr	r1, [r5, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80036fc:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8003700:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8003704:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8003708:	430b      	orrs	r3, r1
 800370a:	4313      	orrs	r3, r2

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 800370c:	60f3      	str	r3, [r6, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 800370e:	6973      	ldr	r3, [r6, #20]
 8003710:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003714:	6173      	str	r3, [r6, #20]

  /*-------------------------- USART BRR Configuration -----------------------*/
#if defined(USART6) 
  if((husart->Instance == USART1) || (husart->Instance == USART6))
 8003716:	4b2f      	ldr	r3, [pc, #188]	; (80037d4 <HAL_USART_Init+0x12c>)
 8003718:	429e      	cmp	r6, r3
 800371a:	d003      	beq.n	8003724 <HAL_USART_Init+0x7c>
 800371c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003720:	429e      	cmp	r6, r3
 8003722:	d13b      	bne.n	800379c <HAL_USART_Init+0xf4>
  {
    husart->Instance->BRR = USART_BRR(HAL_RCC_GetPCLK2Freq(), husart->Init.BaudRate);
 8003724:	f7ff fbac 	bl	8002e80 <HAL_RCC_GetPCLK2Freq>
 8003728:	686f      	ldr	r7, [r5, #4]
 800372a:	2419      	movs	r4, #25
 800372c:	fb04 f300 	mul.w	r3, r4, r0
 8003730:	007f      	lsls	r7, r7, #1
 8003732:	f04f 0864 	mov.w	r8, #100	; 0x64
 8003736:	fbb3 f3f7 	udiv	r3, r3, r7
 800373a:	fbb3 f3f8 	udiv	r3, r3, r8
 800373e:	011f      	lsls	r7, r3, #4
 8003740:	f7ff fb9e 	bl	8002e80 <HAL_RCC_GetPCLK2Freq>
 8003744:	686b      	ldr	r3, [r5, #4]
 8003746:	4360      	muls	r0, r4
 8003748:	005b      	lsls	r3, r3, #1
 800374a:	fbb0 f9f3 	udiv	r9, r0, r3
 800374e:	f7ff fb97 	bl	8002e80 <HAL_RCC_GetPCLK2Freq>
    husart->Instance->BRR = USART_BRR(HAL_RCC_GetPCLK2Freq(), husart->Init.BaudRate);
  }	
#endif /* USART6 */	
  else
  {
    husart->Instance->BRR = USART_BRR(HAL_RCC_GetPCLK1Freq(), husart->Init.BaudRate);
 8003752:	686b      	ldr	r3, [r5, #4]
 8003754:	4360      	muls	r0, r4
 8003756:	005b      	lsls	r3, r3, #1
 8003758:	fbb0 f3f3 	udiv	r3, r0, r3
 800375c:	fbb3 f3f8 	udiv	r3, r3, r8
 8003760:	fb08 9313 	mls	r3, r8, r3, r9
 8003764:	011b      	lsls	r3, r3, #4
 8003766:	3332      	adds	r3, #50	; 0x32
 8003768:	fbb3 f3f8 	udiv	r3, r3, r8
 800376c:	f003 030f 	and.w	r3, r3, #15
 8003770:	433b      	orrs	r3, r7
 8003772:	60b3      	str	r3, [r6, #8]
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 8003774:	682b      	ldr	r3, [r5, #0]
 8003776:	691a      	ldr	r2, [r3, #16]
 8003778:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800377c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800377e:	695a      	ldr	r2, [r3, #20]
 8003780:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003784:	615a      	str	r2, [r3, #20]
  __HAL_USART_ENABLE(husart);
 8003786:	68da      	ldr	r2, [r3, #12]
 8003788:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800378c:	60da      	str	r2, [r3, #12]
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800378e:	2000      	movs	r0, #0
  husart->State= HAL_USART_STATE_READY;
 8003790:	2301      	movs	r3, #1
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8003792:	6428      	str	r0, [r5, #64]	; 0x40
  husart->State= HAL_USART_STATE_READY;
 8003794:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  return HAL_OK;
 8003798:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    husart->Instance->BRR = USART_BRR(HAL_RCC_GetPCLK1Freq(), husart->Init.BaudRate);
 800379c:	f7ff fb60 	bl	8002e60 <HAL_RCC_GetPCLK1Freq>
 80037a0:	686f      	ldr	r7, [r5, #4]
 80037a2:	2419      	movs	r4, #25
 80037a4:	fb04 f300 	mul.w	r3, r4, r0
 80037a8:	007f      	lsls	r7, r7, #1
 80037aa:	f04f 0864 	mov.w	r8, #100	; 0x64
 80037ae:	fbb3 f3f7 	udiv	r3, r3, r7
 80037b2:	fbb3 f3f8 	udiv	r3, r3, r8
 80037b6:	011f      	lsls	r7, r3, #4
 80037b8:	f7ff fb52 	bl	8002e60 <HAL_RCC_GetPCLK1Freq>
 80037bc:	686b      	ldr	r3, [r5, #4]
 80037be:	4360      	muls	r0, r4
 80037c0:	005b      	lsls	r3, r3, #1
 80037c2:	fbb0 f9f3 	udiv	r9, r0, r3
 80037c6:	f7ff fb4b 	bl	8002e60 <HAL_RCC_GetPCLK1Freq>
 80037ca:	e7c2      	b.n	8003752 <HAL_USART_Init+0xaa>
    return HAL_ERROR;
 80037cc:	2001      	movs	r0, #1
}
 80037ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80037d2:	bf00      	nop
 80037d4:	40011000 	.word	0x40011000

080037d8 <HAL_USART_TxCpltCallback>:
 80037d8:	4770      	bx	lr

080037da <HAL_USART_RxCpltCallback>:
 80037da:	4770      	bx	lr

080037dc <USART_Receive_IT>:
  if(husart->State == HAL_USART_STATE_BUSY_RX)
 80037dc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80037e0:	2b22      	cmp	r3, #34	; 0x22
{
 80037e2:	b510      	push	{r4, lr}
  if(husart->State == HAL_USART_STATE_BUSY_RX)
 80037e4:	d146      	bne.n	8003874 <USART_Receive_IT+0x98>
    if(husart->Init.WordLength == USART_WORDLENGTH_9B)
 80037e6:	6883      	ldr	r3, [r0, #8]
 80037e8:	6901      	ldr	r1, [r0, #16]
 80037ea:	6802      	ldr	r2, [r0, #0]
 80037ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037f0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80037f2:	d12a      	bne.n	800384a <USART_Receive_IT+0x6e>
      if(husart->Init.Parity == USART_PARITY_NONE)
 80037f4:	bb21      	cbnz	r1, 8003840 <USART_Receive_IT+0x64>
        *tmp = (uint16_t)(husart->Instance->DR & (uint16_t)0x01FF);
 80037f6:	6851      	ldr	r1, [r2, #4]
 80037f8:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80037fc:	f823 1b02 	strh.w	r1, [r3], #2
        husart->pRxBuffPtr += 1U;
 8003800:	62c3      	str	r3, [r0, #44]	; 0x2c
      if(--husart->RxXferCount != 0x00U)
 8003802:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8003804:	3b01      	subs	r3, #1
 8003806:	b29b      	uxth	r3, r3
 8003808:	8643      	strh	r3, [r0, #50]	; 0x32
 800380a:	b113      	cbz	r3, 8003812 <USART_Receive_IT+0x36>
        husart->Instance->DR = (DUMMY_DATA & (uint16_t)0x01FF);
 800380c:	f240 13ff 	movw	r3, #511	; 0x1ff
 8003810:	6053      	str	r3, [r2, #4]
    if(husart->RxXferCount == 0U)
 8003812:	8e44      	ldrh	r4, [r0, #50]	; 0x32
 8003814:	b2a4      	uxth	r4, r4
 8003816:	b98c      	cbnz	r4, 800383c <USART_Receive_IT+0x60>
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 8003818:	6803      	ldr	r3, [r0, #0]
 800381a:	68da      	ldr	r2, [r3, #12]
 800381c:	f022 0220 	bic.w	r2, r2, #32
 8003820:	60da      	str	r2, [r3, #12]
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 8003822:	68da      	ldr	r2, [r3, #12]
 8003824:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003828:	60da      	str	r2, [r3, #12]
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 800382a:	695a      	ldr	r2, [r3, #20]
 800382c:	f022 0201 	bic.w	r2, r2, #1
 8003830:	615a      	str	r2, [r3, #20]
      husart->State = HAL_USART_STATE_READY;
 8003832:	2301      	movs	r3, #1
 8003834:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_USART_RxCpltCallback(husart);
 8003838:	f7ff ffcf 	bl	80037da <HAL_USART_RxCpltCallback>
    if(husart->RxXferCount == 0U)
 800383c:	2000      	movs	r0, #0
}
 800383e:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(husart->Instance->DR & (uint16_t)0x00FF);
 8003840:	6851      	ldr	r1, [r2, #4]
 8003842:	b2c9      	uxtb	r1, r1
 8003844:	f823 1b01 	strh.w	r1, [r3], #1
 8003848:	e7da      	b.n	8003800 <USART_Receive_IT+0x24>
      if(husart->Init.Parity == USART_PARITY_NONE)
 800384a:	b969      	cbnz	r1, 8003868 <USART_Receive_IT+0x8c>
        *husart->pRxBuffPtr++ = (uint8_t)(husart->Instance->DR & (uint8_t)0x00FF);
 800384c:	1c59      	adds	r1, r3, #1
 800384e:	6852      	ldr	r2, [r2, #4]
 8003850:	62c1      	str	r1, [r0, #44]	; 0x2c
        *husart->pRxBuffPtr++ = (uint8_t)(husart->Instance->DR & (uint8_t)0x007F);
 8003852:	701a      	strb	r2, [r3, #0]
      if(--husart->RxXferCount != 0x00U)
 8003854:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8003856:	3b01      	subs	r3, #1
 8003858:	b29b      	uxth	r3, r3
 800385a:	8643      	strh	r3, [r0, #50]	; 0x32
 800385c:	2b00      	cmp	r3, #0
 800385e:	d0d8      	beq.n	8003812 <USART_Receive_IT+0x36>
        husart->Instance->DR = (DUMMY_DATA & (uint16_t)0x00FF);
 8003860:	6803      	ldr	r3, [r0, #0]
 8003862:	22ff      	movs	r2, #255	; 0xff
 8003864:	605a      	str	r2, [r3, #4]
 8003866:	e7d4      	b.n	8003812 <USART_Receive_IT+0x36>
        *husart->pRxBuffPtr++ = (uint8_t)(husart->Instance->DR & (uint8_t)0x007F);
 8003868:	6852      	ldr	r2, [r2, #4]
 800386a:	1c59      	adds	r1, r3, #1
 800386c:	62c1      	str	r1, [r0, #44]	; 0x2c
 800386e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003872:	e7ee      	b.n	8003852 <USART_Receive_IT+0x76>
    return HAL_BUSY;
 8003874:	2002      	movs	r0, #2
 8003876:	bd10      	pop	{r4, pc}

08003878 <HAL_USART_TxRxCpltCallback>:
 8003878:	4770      	bx	lr

0800387a <USART_TransmitReceive_IT>:
  if(husart->State == HAL_USART_STATE_BUSY_TX_RX)
 800387a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800387e:	2b32      	cmp	r3, #50	; 0x32
{
 8003880:	b510      	push	{r4, lr}
  if(husart->State == HAL_USART_STATE_BUSY_TX_RX)
 8003882:	d165      	bne.n	8003950 <USART_TransmitReceive_IT+0xd6>
    if(husart->TxXferCount != 0x00U)
 8003884:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003886:	b29b      	uxth	r3, r3
 8003888:	b1e3      	cbz	r3, 80038c4 <USART_TransmitReceive_IT+0x4a>
      if(__HAL_USART_GET_FLAG(husart, USART_FLAG_TXE) != RESET)
 800388a:	6802      	ldr	r2, [r0, #0]
 800388c:	6813      	ldr	r3, [r2, #0]
 800388e:	0619      	lsls	r1, r3, #24
 8003890:	d518      	bpl.n	80038c4 <USART_TransmitReceive_IT+0x4a>
        if(husart->Init.WordLength == USART_WORDLENGTH_9B)
 8003892:	6883      	ldr	r3, [r0, #8]
 8003894:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003898:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800389a:	d144      	bne.n	8003926 <USART_TransmitReceive_IT+0xac>
          husart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800389c:	8819      	ldrh	r1, [r3, #0]
 800389e:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80038a2:	6051      	str	r1, [r2, #4]
          if(husart->Init.Parity == USART_PARITY_NONE)
 80038a4:	6901      	ldr	r1, [r0, #16]
 80038a6:	2900      	cmp	r1, #0
 80038a8:	d13b      	bne.n	8003922 <USART_TransmitReceive_IT+0xa8>
            husart->pTxBuffPtr += 2U;
 80038aa:	3302      	adds	r3, #2
            husart->pTxBuffPtr += 1U;
 80038ac:	6243      	str	r3, [r0, #36]	; 0x24
        husart->TxXferCount--;
 80038ae:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80038b0:	3b01      	subs	r3, #1
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	8543      	strh	r3, [r0, #42]	; 0x2a
        if(husart->TxXferCount == 0U)
 80038b6:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	b91b      	cbnz	r3, 80038c4 <USART_TransmitReceive_IT+0x4a>
          CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 80038bc:	68d3      	ldr	r3, [r2, #12]
 80038be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038c2:	60d3      	str	r3, [r2, #12]
    if(husart->RxXferCount != 0x00U)
 80038c4:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	b1a3      	cbz	r3, 80038f4 <USART_TransmitReceive_IT+0x7a>
      if(__HAL_USART_GET_FLAG(husart, USART_FLAG_RXNE) != RESET)
 80038ca:	6802      	ldr	r2, [r0, #0]
 80038cc:	6813      	ldr	r3, [r2, #0]
 80038ce:	069b      	lsls	r3, r3, #26
 80038d0:	d510      	bpl.n	80038f4 <USART_TransmitReceive_IT+0x7a>
        if(husart->Init.WordLength == USART_WORDLENGTH_9B)
 80038d2:	6883      	ldr	r3, [r0, #8]
 80038d4:	6901      	ldr	r1, [r0, #16]
 80038d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038da:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80038dc:	d12c      	bne.n	8003938 <USART_TransmitReceive_IT+0xbe>
            *tmp = (uint16_t)(husart->Instance->DR & (uint16_t)0x01FF);
 80038de:	6852      	ldr	r2, [r2, #4]
          if(husart->Init.Parity == USART_PARITY_NONE)
 80038e0:	bb31      	cbnz	r1, 8003930 <USART_TransmitReceive_IT+0xb6>
            *tmp = (uint16_t)(husart->Instance->DR & (uint16_t)0x01FF);
 80038e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038e6:	f823 2b02 	strh.w	r2, [r3], #2
            husart->pRxBuffPtr += 1U;
 80038ea:	62c3      	str	r3, [r0, #44]	; 0x2c
        husart->RxXferCount--;
 80038ec:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80038ee:	3b01      	subs	r3, #1
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	8643      	strh	r3, [r0, #50]	; 0x32
    if(husart->RxXferCount == 0U)
 80038f4:	8e44      	ldrh	r4, [r0, #50]	; 0x32
 80038f6:	b2a4      	uxth	r4, r4
 80038f8:	b98c      	cbnz	r4, 800391e <USART_TransmitReceive_IT+0xa4>
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 80038fa:	6803      	ldr	r3, [r0, #0]
 80038fc:	68da      	ldr	r2, [r3, #12]
 80038fe:	f022 0220 	bic.w	r2, r2, #32
 8003902:	60da      	str	r2, [r3, #12]
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 8003904:	68da      	ldr	r2, [r3, #12]
 8003906:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800390a:	60da      	str	r2, [r3, #12]
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 800390c:	695a      	ldr	r2, [r3, #20]
 800390e:	f022 0201 	bic.w	r2, r2, #1
 8003912:	615a      	str	r2, [r3, #20]
      husart->State = HAL_USART_STATE_READY;
 8003914:	2301      	movs	r3, #1
 8003916:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_USART_TxRxCpltCallback(husart);
 800391a:	f7ff ffad 	bl	8003878 <HAL_USART_TxRxCpltCallback>
    if(husart->RxXferCount == 0U)
 800391e:	2000      	movs	r0, #0
}
 8003920:	bd10      	pop	{r4, pc}
            husart->pTxBuffPtr += 1U;
 8003922:	3301      	adds	r3, #1
 8003924:	e7c2      	b.n	80038ac <USART_TransmitReceive_IT+0x32>
          husart->Instance->DR = (uint8_t)(*husart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003926:	1c59      	adds	r1, r3, #1
 8003928:	6241      	str	r1, [r0, #36]	; 0x24
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	6053      	str	r3, [r2, #4]
 800392e:	e7be      	b.n	80038ae <USART_TransmitReceive_IT+0x34>
            *tmp = (uint16_t)(husart->Instance->DR & (uint16_t)0x00FF);
 8003930:	b2d2      	uxtb	r2, r2
 8003932:	f823 2b01 	strh.w	r2, [r3], #1
 8003936:	e7d8      	b.n	80038ea <USART_TransmitReceive_IT+0x70>
          if(husart->Init.Parity == USART_PARITY_NONE)
 8003938:	b921      	cbnz	r1, 8003944 <USART_TransmitReceive_IT+0xca>
            *husart->pRxBuffPtr++ = (uint8_t)(husart->Instance->DR & (uint8_t)0x00FF);
 800393a:	1c59      	adds	r1, r3, #1
 800393c:	6852      	ldr	r2, [r2, #4]
 800393e:	62c1      	str	r1, [r0, #44]	; 0x2c
            *husart->pRxBuffPtr++ = (uint8_t)(husart->Instance->DR & (uint8_t)0x007F);
 8003940:	701a      	strb	r2, [r3, #0]
 8003942:	e7d3      	b.n	80038ec <USART_TransmitReceive_IT+0x72>
 8003944:	6852      	ldr	r2, [r2, #4]
 8003946:	1c59      	adds	r1, r3, #1
 8003948:	62c1      	str	r1, [r0, #44]	; 0x2c
 800394a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800394e:	e7f7      	b.n	8003940 <USART_TransmitReceive_IT+0xc6>
    return HAL_BUSY;
 8003950:	2002      	movs	r0, #2
 8003952:	bd10      	pop	{r4, pc}

08003954 <HAL_USART_ErrorCallback>:
 8003954:	4770      	bx	lr
	...

08003958 <HAL_USART_IRQHandler>:
  uint32_t isrflags = READ_REG(husart->Instance->SR);
 8003958:	6803      	ldr	r3, [r0, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its   = READ_REG(husart->Instance->CR1);
 800395c:	68d9      	ldr	r1, [r3, #12]
{
 800395e:	b570      	push	{r4, r5, r6, lr}
  if(errorflags == RESET)
 8003960:	0716      	lsls	r6, r2, #28
{
 8003962:	4604      	mov	r4, r0
  uint32_t cr3its   = READ_REG(husart->Instance->CR3);
 8003964:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 8003966:	d110      	bne.n	800398a <HAL_USART_IRQHandler+0x32>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003968:	0696      	lsls	r6, r2, #26
 800396a:	d56a      	bpl.n	8003a42 <HAL_USART_IRQHandler+0xea>
 800396c:	068d      	lsls	r5, r1, #26
 800396e:	d568      	bpl.n	8003a42 <HAL_USART_IRQHandler+0xea>
      if(husart->State == HAL_USART_STATE_BUSY_RX)
 8003970:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003974:	2b22      	cmp	r3, #34	; 0x22
 8003976:	d103      	bne.n	8003980 <HAL_USART_IRQHandler+0x28>
}
 8003978:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        USART_Receive_IT(husart);
 800397c:	f7ff bf2e 	b.w	80037dc <USART_Receive_IT>
        USART_TransmitReceive_IT(husart);
 8003980:	4620      	mov	r0, r4
}
 8003982:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        USART_TransmitReceive_IT(husart);
 8003986:	f7ff bf78 	b.w	800387a <USART_TransmitReceive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800398a:	f015 0501 	ands.w	r5, r5, #1
 800398e:	d102      	bne.n	8003996 <HAL_USART_IRQHandler+0x3e>
 8003990:	f411 7f90 	tst.w	r1, #288	; 0x120
 8003994:	d055      	beq.n	8003a42 <HAL_USART_IRQHandler+0xea>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003996:	07d3      	lsls	r3, r2, #31
 8003998:	d505      	bpl.n	80039a6 <HAL_USART_IRQHandler+0x4e>
 800399a:	05ce      	lsls	r6, r1, #23
      husart->ErrorCode |= HAL_USART_ERROR_PE;
 800399c:	bf42      	ittt	mi
 800399e:	6c23      	ldrmi	r3, [r4, #64]	; 0x40
 80039a0:	f043 0301 	orrmi.w	r3, r3, #1
 80039a4:	6423      	strmi	r3, [r4, #64]	; 0x40
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039a6:	0750      	lsls	r0, r2, #29
 80039a8:	d504      	bpl.n	80039b4 <HAL_USART_IRQHandler+0x5c>
 80039aa:	b11d      	cbz	r5, 80039b4 <HAL_USART_IRQHandler+0x5c>
      husart->ErrorCode |= HAL_USART_ERROR_NE;
 80039ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80039ae:	f043 0302 	orr.w	r3, r3, #2
 80039b2:	6423      	str	r3, [r4, #64]	; 0x40
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039b4:	0793      	lsls	r3, r2, #30
 80039b6:	d504      	bpl.n	80039c2 <HAL_USART_IRQHandler+0x6a>
 80039b8:	b11d      	cbz	r5, 80039c2 <HAL_USART_IRQHandler+0x6a>
      husart->ErrorCode |= HAL_USART_ERROR_FE;
 80039ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80039bc:	f043 0304 	orr.w	r3, r3, #4
 80039c0:	6423      	str	r3, [r4, #64]	; 0x40
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039c2:	0716      	lsls	r6, r2, #28
 80039c4:	d504      	bpl.n	80039d0 <HAL_USART_IRQHandler+0x78>
 80039c6:	b11d      	cbz	r5, 80039d0 <HAL_USART_IRQHandler+0x78>
      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 80039c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80039ca:	f043 0308 	orr.w	r3, r3, #8
 80039ce:	6423      	str	r3, [r4, #64]	; 0x40
    if(husart->ErrorCode != HAL_USART_ERROR_NONE)
 80039d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d075      	beq.n	8003ac2 <HAL_USART_IRQHandler+0x16a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039d6:	0695      	lsls	r5, r2, #26
 80039d8:	d508      	bpl.n	80039ec <HAL_USART_IRQHandler+0x94>
 80039da:	0688      	lsls	r0, r1, #26
 80039dc:	d506      	bpl.n	80039ec <HAL_USART_IRQHandler+0x94>
        if(husart->State == HAL_USART_STATE_BUSY_RX)
 80039de:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80039e2:	2b22      	cmp	r3, #34	; 0x22
          USART_Receive_IT(husart);
 80039e4:	4620      	mov	r0, r4
        if(husart->State == HAL_USART_STATE_BUSY_RX)
 80039e6:	d121      	bne.n	8003a2c <HAL_USART_IRQHandler+0xd4>
          USART_Receive_IT(husart);
 80039e8:	f7ff fef8 	bl	80037dc <USART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR);
 80039ec:	6823      	ldr	r3, [r4, #0]
 80039ee:	695d      	ldr	r5, [r3, #20]
      if(((husart->ErrorCode & HAL_USART_ERROR_ORE) != RESET) || dmarequest)
 80039f0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80039f2:	0711      	lsls	r1, r2, #28
        USART_EndRxTransfer(husart);
 80039f4:	4620      	mov	r0, r4
      if(((husart->ErrorCode & HAL_USART_ERROR_ORE) != RESET) || dmarequest)
 80039f6:	d402      	bmi.n	80039fe <HAL_USART_IRQHandler+0xa6>
 80039f8:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 80039fc:	d01d      	beq.n	8003a3a <HAL_USART_IRQHandler+0xe2>
        USART_EndRxTransfer(husart);
 80039fe:	f7ff fe45 	bl	800368c <USART_EndRxTransfer>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8003a02:	6823      	ldr	r3, [r4, #0]
 8003a04:	695a      	ldr	r2, [r3, #20]
 8003a06:	0652      	lsls	r2, r2, #25
 8003a08:	d513      	bpl.n	8003a32 <HAL_USART_IRQHandler+0xda>
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR);
 8003a0a:	695a      	ldr	r2, [r3, #20]
          if(husart->hdmarx != NULL)
 8003a0c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR);
 8003a0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a12:	615a      	str	r2, [r3, #20]
          if(husart->hdmarx != NULL)
 8003a14:	b168      	cbz	r0, 8003a32 <HAL_USART_IRQHandler+0xda>
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 8003a16:	4b2b      	ldr	r3, [pc, #172]	; (8003ac4 <HAL_USART_IRQHandler+0x16c>)
 8003a18:	6503      	str	r3, [r0, #80]	; 0x50
            if(HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 8003a1a:	f7fd fd7b 	bl	8001514 <HAL_DMA_Abort_IT>
 8003a1e:	2800      	cmp	r0, #0
 8003a20:	d04f      	beq.n	8003ac2 <HAL_USART_IRQHandler+0x16a>
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 8003a22:	6ba0      	ldr	r0, [r4, #56]	; 0x38
}
 8003a24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 8003a28:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003a2a:	4718      	bx	r3
          USART_TransmitReceive_IT(husart);
 8003a2c:	f7ff ff25 	bl	800387a <USART_TransmitReceive_IT>
 8003a30:	e7dc      	b.n	80039ec <HAL_USART_IRQHandler+0x94>
            HAL_USART_ErrorCallback(husart);
 8003a32:	4620      	mov	r0, r4
 8003a34:	f7ff ff8e 	bl	8003954 <HAL_USART_ErrorCallback>
 8003a38:	bd70      	pop	{r4, r5, r6, pc}
        HAL_USART_ErrorCallback(husart);
 8003a3a:	f7ff ff8b 	bl	8003954 <HAL_USART_ErrorCallback>
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 8003a3e:	6425      	str	r5, [r4, #64]	; 0x40
 8003a40:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003a42:	0616      	lsls	r6, r2, #24
 8003a44:	d52b      	bpl.n	8003a9e <HAL_USART_IRQHandler+0x146>
 8003a46:	060d      	lsls	r5, r1, #24
 8003a48:	d529      	bpl.n	8003a9e <HAL_USART_IRQHandler+0x146>
    if(husart->State == HAL_USART_STATE_BUSY_TX)
 8003a4a:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8003a4e:	2a12      	cmp	r2, #18
 8003a50:	d196      	bne.n	8003980 <HAL_USART_IRQHandler+0x28>
  if(husart->State == HAL_USART_STATE_BUSY_TX)
 8003a52:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8003a56:	2a12      	cmp	r2, #18
 8003a58:	d133      	bne.n	8003ac2 <HAL_USART_IRQHandler+0x16a>
    if(husart->Init.WordLength == USART_WORDLENGTH_9B)
 8003a5a:	68a2      	ldr	r2, [r4, #8]
 8003a5c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8003a60:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003a62:	d117      	bne.n	8003a94 <HAL_USART_IRQHandler+0x13c>
      husart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003a64:	8811      	ldrh	r1, [r2, #0]
 8003a66:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8003a6a:	6059      	str	r1, [r3, #4]
      if(husart->Init.Parity == USART_PARITY_NONE)
 8003a6c:	6921      	ldr	r1, [r4, #16]
 8003a6e:	b979      	cbnz	r1, 8003a90 <HAL_USART_IRQHandler+0x138>
        husart->pTxBuffPtr += 2U;
 8003a70:	3202      	adds	r2, #2
        husart->pTxBuffPtr += 1U;
 8003a72:	6262      	str	r2, [r4, #36]	; 0x24
    if(--husart->TxXferCount == 0U)
 8003a74:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003a76:	3a01      	subs	r2, #1
 8003a78:	b292      	uxth	r2, r2
 8003a7a:	8562      	strh	r2, [r4, #42]	; 0x2a
 8003a7c:	bb0a      	cbnz	r2, 8003ac2 <HAL_USART_IRQHandler+0x16a>
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 8003a7e:	68da      	ldr	r2, [r3, #12]
 8003a80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a84:	60da      	str	r2, [r3, #12]
      SET_BIT(husart->Instance->CR1, USART_CR1_TCIE);
 8003a86:	68da      	ldr	r2, [r3, #12]
 8003a88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a8c:	60da      	str	r2, [r3, #12]
 8003a8e:	bd70      	pop	{r4, r5, r6, pc}
        husart->pTxBuffPtr += 1U;
 8003a90:	3201      	adds	r2, #1
 8003a92:	e7ee      	b.n	8003a72 <HAL_USART_IRQHandler+0x11a>
      husart->Instance->DR = (uint8_t)(*husart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003a94:	1c51      	adds	r1, r2, #1
 8003a96:	6261      	str	r1, [r4, #36]	; 0x24
 8003a98:	7812      	ldrb	r2, [r2, #0]
 8003a9a:	605a      	str	r2, [r3, #4]
 8003a9c:	e7ea      	b.n	8003a74 <HAL_USART_IRQHandler+0x11c>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003a9e:	0650      	lsls	r0, r2, #25
 8003aa0:	d50f      	bpl.n	8003ac2 <HAL_USART_IRQHandler+0x16a>
 8003aa2:	064a      	lsls	r2, r1, #25
 8003aa4:	d50d      	bpl.n	8003ac2 <HAL_USART_IRQHandler+0x16a>
  CLEAR_BIT(husart->Instance->CR1, USART_CR1_TCIE);
 8003aa6:	68da      	ldr	r2, [r3, #12]
 8003aa8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003aac:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8003aae:	695a      	ldr	r2, [r3, #20]
 8003ab0:	f022 0201 	bic.w	r2, r2, #1
 8003ab4:	615a      	str	r2, [r3, #20]
  husart->State = HAL_USART_STATE_READY;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  HAL_USART_TxCpltCallback(husart);
 8003abc:	4620      	mov	r0, r4
 8003abe:	f7ff fe8b 	bl	80037d8 <HAL_USART_TxCpltCallback>
 8003ac2:	bd70      	pop	{r4, r5, r6, pc}
 8003ac4:	08003ac9 	.word	0x08003ac9

08003ac8 <USART_DMAAbortOnError>:
{
 8003ac8:	b508      	push	{r3, lr}
  USART_HandleTypeDef* husart = ( USART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003aca:	6b80      	ldr	r0, [r0, #56]	; 0x38
  husart->RxXferCount = 0x00U;
 8003acc:	2300      	movs	r3, #0
 8003ace:	8643      	strh	r3, [r0, #50]	; 0x32
  husart->TxXferCount = 0x00U;
 8003ad0:	8543      	strh	r3, [r0, #42]	; 0x2a
  HAL_USART_ErrorCallback(husart);
 8003ad2:	f7ff ff3f 	bl	8003954 <HAL_USART_ErrorCallback>
 8003ad6:	bd08      	pop	{r3, pc}

08003ad8 <pid_init>:
{
    pid->Kp = Kp;
    pid->Ki= Ki;
    pid->Kd = Kd;
    pid->A0 =  Kp + Ki + Kd ;
    pid->A1 =  -Kp - 2*Kd ;
 8003ad8:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
    pid->Kp = Kp;
 8003adc:	ed80 0a00 	vstr	s0, [r0]
    pid->Ki= Ki;
 8003ae0:	edc0 0a01 	vstr	s1, [r0, #4]
    pid->A0 =  Kp + Ki + Kd ;
 8003ae4:	ee70 0a20 	vadd.f32	s1, s0, s1
    pid->A1 =  -Kp - 2*Kd ;
 8003ae8:	ee91 0a67 	vfnma.f32	s0, s2, s15
    pid->A2 = Kd ;
    pid->state[0] =0;
 8003aec:	2300      	movs	r3, #0
 8003aee:	6183      	str	r3, [r0, #24]
    pid->A0 =  Kp + Ki + Kd ;
 8003af0:	ee70 0a81 	vadd.f32	s1, s1, s2
    pid->Kd = Kd;
 8003af4:	ed80 1a02 	vstr	s2, [r0, #8]
    pid->A0 =  Kp + Ki + Kd ;
 8003af8:	edc0 0a03 	vstr	s1, [r0, #12]
    pid->A1 =  -Kp - 2*Kd ;
 8003afc:	ed80 0a04 	vstr	s0, [r0, #16]
    pid->A2 = Kd ;
 8003b00:	ed80 1a05 	vstr	s2, [r0, #20]
    pid->state[1] =0;
 8003b04:	61c3      	str	r3, [r0, #28]
 8003b06:	4770      	bx	lr

08003b08 <pid_controller>:
float pid_controller(PID_OBJ* pid0 , float in)
{
    float out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (pid0->A0 * in) + (pid0->A1 * pid0->state[0]) 
 8003b08:	ed90 7a06 	vldr	s14, [r0, #24]
 8003b0c:	edd0 7a04 	vldr	s15, [r0, #16]
 8003b10:	edd0 6a03 	vldr	s13, [r0, #12]
           + (pid0->A2 * pid0->state[1]) + (pid0->state[2]);
 8003b14:	ed90 6a05 	vldr	s12, [r0, #20]

    /* Update state */
    pid0->state[1] = pid0->state[0];
    pid0->state[0] = in;
 8003b18:	ed80 0a06 	vstr	s0, [r0, #24]
    out = (pid0->A0 * in) + (pid0->A1 * pid0->state[0]) 
 8003b1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b20:	eee6 7a80 	vfma.f32	s15, s13, s0
           + (pid0->A2 * pid0->state[1]) + (pid0->state[2]);
 8003b24:	edd0 6a07 	vldr	s13, [r0, #28]
    pid0->state[1] = pid0->state[0];
 8003b28:	ed80 7a07 	vstr	s14, [r0, #28]
           + (pid0->A2 * pid0->state[1]) + (pid0->state[2]);
 8003b2c:	eee6 7a26 	vfma.f32	s15, s12, s13
    out = (pid0->A0 * in) + (pid0->A1 * pid0->state[0]) 
 8003b30:	edd0 6a08 	vldr	s13, [r0, #32]
 8003b34:	ee77 7aa6 	vadd.f32	s15, s15, s13
    pid0->state[2] = out;
 8003b38:	edc0 7a08 	vstr	s15, [r0, #32]

    return (out);
}
 8003b3c:	eeb0 0a67 	vmov.f32	s0, s15
 8003b40:	4770      	bx	lr

08003b42 <cal_error>:
    bldc2.Kf = 0.1;
}
/**/
int cal_error(int ref, int fb)
{
    int ee=ref-fb;
 8003b42:	1a40      	subs	r0, r0, r1
    if(ee>600)      ee-=1200;
 8003b44:	f5b0 7f16 	cmp.w	r0, #600	; 0x258
 8003b48:	dd02      	ble.n	8003b50 <cal_error+0xe>
 8003b4a:	f5a0 6096 	sub.w	r0, r0, #1200	; 0x4b0
 8003b4e:	4770      	bx	lr
    if(ee<-600)     ee+=1200;
 8003b50:	f510 7f16 	cmn.w	r0, #600	; 0x258
 8003b54:	bfb8      	it	lt
 8003b56:	f500 6096 	addlt.w	r0, r0, #1200	; 0x4b0
    return ee;
}
 8003b5a:	4770      	bx	lr

08003b5c <invSqrt>:
float invSqrt(float x) {
	float halfx = 0.5f * x;
	float y = x;
	long i = *(long*)&y;
	i = 0x5f3759df - (i>>1);
	y = *(float*)&i;
 8003b5c:	ee10 2a10 	vmov	r2, s0
 8003b60:	4b0c      	ldr	r3, [pc, #48]	; (8003b94 <invSqrt+0x38>)
	float halfx = 0.5f * x;
 8003b62:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	y = *(float*)&i;
 8003b66:	eba3 0362 	sub.w	r3, r3, r2, asr #1
	float halfx = 0.5f * x;
 8003b6a:	ee60 7a27 	vmul.f32	s15, s0, s15
	y = *(float*)&i;
 8003b6e:	ee00 3a10 	vmov	s0, r3
	y = y * (1.5f - (halfx * y * y));
 8003b72:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8003b76:	ee27 7a80 	vmul.f32	s14, s15, s0
 8003b7a:	eeb0 6a66 	vmov.f32	s12, s13
 8003b7e:	eea0 6a47 	vfms.f32	s12, s0, s14
 8003b82:	ee26 0a00 	vmul.f32	s0, s12, s0
    y = y * (1.5f - (halfx * y * y));
 8003b86:	ee67 7a80 	vmul.f32	s15, s15, s0
 8003b8a:	eee0 6a67 	vfms.f32	s13, s0, s15
	return y;
}
 8003b8e:	ee26 0a80 	vmul.f32	s0, s13, s0
 8003b92:	4770      	bx	lr
 8003b94:	5f3759df 	.word	0x5f3759df

08003b98 <MadgwickAHRSupdateIMU>:
void MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az) {
 8003b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b9c:	ed2d 8b10 	vpush	{d8-d15}
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8003ba0:	ee10 0a10 	vmov	r0, s0
void MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az) {
 8003ba4:	b08b      	sub	sp, #44	; 0x2c
 8003ba6:	eef0 8a61 	vmov.f32	s17, s3
 8003baa:	eeb0 8a42 	vmov.f32	s16, s4
 8003bae:	eeb0 9a62 	vmov.f32	s18, s5
 8003bb2:	ed8d 1a04 	vstr	s2, [sp, #16]
 8003bb6:	edcd 0a02 	vstr	s1, [sp, #8]
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8003bba:	f7fc fc69 	bl	8000490 <__aeabi_f2d>
 8003bbe:	eddd 0a02 	vldr	s1, [sp, #8]
 8003bc2:	f8df a364 	ldr.w	sl, [pc, #868]	; 8003f28 <MadgwickAHRSupdateIMU+0x390>
 8003bc6:	f8df b364 	ldr.w	fp, [pc, #868]	; 8003f2c <MadgwickAHRSupdateIMU+0x394>
 8003bca:	e9cd 0100 	strd	r0, r1, [sp]
 8003bce:	ee10 0a90 	vmov	r0, s1
 8003bd2:	f7fc fc5d 	bl	8000490 <__aeabi_f2d>
 8003bd6:	ed9d 1a04 	vldr	s2, [sp, #16]
 8003bda:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003bde:	ee11 0a10 	vmov	r0, s2
 8003be2:	f7fc fc55 	bl	8000490 <__aeabi_f2d>
 8003be6:	e9da 4500 	ldrd	r4, r5, [sl]
 8003bea:	4bca      	ldr	r3, [pc, #808]	; (8003f14 <MadgwickAHRSupdateIMU+0x37c>)
 8003bec:	e9db 6700 	ldrd	r6, r7, [fp]
 8003bf0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003bf4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003bf8:	4620      	mov	r0, r4
 8003bfa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003bfe:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8003c02:	f7fc fc99 	bl	8000538 <__aeabi_dmul>
 8003c06:	4632      	mov	r2, r6
 8003c08:	4604      	mov	r4, r0
 8003c0a:	460d      	mov	r5, r1
 8003c0c:	463b      	mov	r3, r7
 8003c0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003c12:	f7fc fc91 	bl	8000538 <__aeabi_dmul>
 8003c16:	4602      	mov	r2, r0
 8003c18:	460b      	mov	r3, r1
 8003c1a:	4620      	mov	r0, r4
 8003c1c:	4629      	mov	r1, r5
 8003c1e:	f7fc fad7 	bl	80001d0 <__aeabi_dsub>
 8003c22:	4642      	mov	r2, r8
 8003c24:	4604      	mov	r4, r0
 8003c26:	460d      	mov	r5, r1
 8003c28:	464b      	mov	r3, r9
 8003c2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003c2e:	f7fc fc83 	bl	8000538 <__aeabi_dmul>
 8003c32:	4602      	mov	r2, r0
 8003c34:	460b      	mov	r3, r1
 8003c36:	4620      	mov	r0, r4
 8003c38:	4629      	mov	r1, r5
 8003c3a:	f7fc fac9 	bl	80001d0 <__aeabi_dsub>
 8003c3e:	2200      	movs	r2, #0
 8003c40:	4bb5      	ldr	r3, [pc, #724]	; (8003f18 <MadgwickAHRSupdateIMU+0x380>)
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8003c42:	4cb6      	ldr	r4, [pc, #728]	; (8003f1c <MadgwickAHRSupdateIMU+0x384>)
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8003c44:	f7fc fc78 	bl	8000538 <__aeabi_dmul>
 8003c48:	f7fc ff46 	bl	8000ad8 <__aeabi_d2f>
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8003c4c:	49b1      	ldr	r1, [pc, #708]	; (8003f14 <MadgwickAHRSupdateIMU+0x37c>)
 8003c4e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8003c52:	e9db 8900 	ldrd	r8, r9, [fp]
 8003c56:	ed91 7b00 	vldr	d7, [r1]
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8003c5a:	ee0c 0a10 	vmov	s24, r0
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8003c5e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003c62:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003c66:	f7fc fc67 	bl	8000538 <__aeabi_dmul>
 8003c6a:	4642      	mov	r2, r8
 8003c6c:	4606      	mov	r6, r0
 8003c6e:	460f      	mov	r7, r1
 8003c70:	464b      	mov	r3, r9
 8003c72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003c76:	f7fc fc5f 	bl	8000538 <__aeabi_dmul>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	4630      	mov	r0, r6
 8003c80:	4639      	mov	r1, r7
 8003c82:	f7fc faa7 	bl	80001d4 <__adddf3>
 8003c86:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003c8a:	4606      	mov	r6, r0
 8003c8c:	460f      	mov	r7, r1
 8003c8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003c92:	f7fc fc51 	bl	8000538 <__aeabi_dmul>
 8003c96:	4602      	mov	r2, r0
 8003c98:	460b      	mov	r3, r1
 8003c9a:	4630      	mov	r0, r6
 8003c9c:	4639      	mov	r1, r7
 8003c9e:	f7fc fa97 	bl	80001d0 <__aeabi_dsub>
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	4b9c      	ldr	r3, [pc, #624]	; (8003f18 <MadgwickAHRSupdateIMU+0x380>)
 8003ca6:	f7fc fc47 	bl	8000538 <__aeabi_dmul>
 8003caa:	f7fc ff15 	bl	8000ad8 <__aeabi_d2f>
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8003cae:	4999      	ldr	r1, [pc, #612]	; (8003f14 <MadgwickAHRSupdateIMU+0x37c>)
 8003cb0:	e9d4 2300 	ldrd	r2, r3, [r4]
 8003cb4:	e9da 8900 	ldrd	r8, r9, [sl]
 8003cb8:	ed91 7b00 	vldr	d7, [r1]
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8003cbc:	ee0b 0a90 	vmov	s23, r0
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8003cc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003cc4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003cc8:	f7fc fc36 	bl	8000538 <__aeabi_dmul>
 8003ccc:	4642      	mov	r2, r8
 8003cce:	4606      	mov	r6, r0
 8003cd0:	460f      	mov	r7, r1
 8003cd2:	464b      	mov	r3, r9
 8003cd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003cd8:	f7fc fc2e 	bl	8000538 <__aeabi_dmul>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	460b      	mov	r3, r1
 8003ce0:	4630      	mov	r0, r6
 8003ce2:	4639      	mov	r1, r7
 8003ce4:	f7fc fa74 	bl	80001d0 <__aeabi_dsub>
 8003ce8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003cec:	4606      	mov	r6, r0
 8003cee:	460f      	mov	r7, r1
 8003cf0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003cf4:	f7fc fc20 	bl	8000538 <__aeabi_dmul>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	460b      	mov	r3, r1
 8003cfc:	4630      	mov	r0, r6
 8003cfe:	4639      	mov	r1, r7
 8003d00:	f7fc fa68 	bl	80001d4 <__adddf3>
 8003d04:	2200      	movs	r2, #0
 8003d06:	4b84      	ldr	r3, [pc, #528]	; (8003f18 <MadgwickAHRSupdateIMU+0x380>)
 8003d08:	f7fc fc16 	bl	8000538 <__aeabi_dmul>
 8003d0c:	f7fc fee4 	bl	8000ad8 <__aeabi_d2f>
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8003d10:	e9d4 2300 	ldrd	r2, r3, [r4]
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8003d14:	ee0b 0a10 	vmov	s22, r0
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8003d18:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003d1c:	f7fc fc0c 	bl	8000538 <__aeabi_dmul>
 8003d20:	e9da 8900 	ldrd	r8, r9, [sl]
 8003d24:	4606      	mov	r6, r0
 8003d26:	460f      	mov	r7, r1
 8003d28:	4642      	mov	r2, r8
 8003d2a:	464b      	mov	r3, r9
 8003d2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003d30:	f7fc fc02 	bl	8000538 <__aeabi_dmul>
 8003d34:	4602      	mov	r2, r0
 8003d36:	460b      	mov	r3, r1
 8003d38:	4630      	mov	r0, r6
 8003d3a:	4639      	mov	r1, r7
 8003d3c:	f7fc fa4a 	bl	80001d4 <__adddf3>
 8003d40:	e9db 4500 	ldrd	r4, r5, [fp]
 8003d44:	4606      	mov	r6, r0
 8003d46:	4622      	mov	r2, r4
 8003d48:	462b      	mov	r3, r5
 8003d4a:	460f      	mov	r7, r1
 8003d4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003d50:	f7fc fbf2 	bl	8000538 <__aeabi_dmul>
 8003d54:	4602      	mov	r2, r0
 8003d56:	460b      	mov	r3, r1
 8003d58:	4630      	mov	r0, r6
 8003d5a:	4639      	mov	r1, r7
 8003d5c:	f7fc fa38 	bl	80001d0 <__aeabi_dsub>
 8003d60:	2200      	movs	r2, #0
 8003d62:	4b6d      	ldr	r3, [pc, #436]	; (8003f18 <MadgwickAHRSupdateIMU+0x380>)
 8003d64:	4d6b      	ldr	r5, [pc, #428]	; (8003f14 <MadgwickAHRSupdateIMU+0x37c>)
 8003d66:	f7fc fbe7 	bl	8000538 <__aeabi_dmul>
 8003d6a:	f7fc feb5 	bl	8000ad8 <__aeabi_d2f>
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8003d6e:	eef5 8a40 	vcmp.f32	s17, #0.0
 8003d72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8003d76:	ee0a 0a90 	vmov	s21, r0
 8003d7a:	46d0      	mov	r8, sl
 8003d7c:	465c      	mov	r4, fp
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8003d7e:	d10a      	bne.n	8003d96 <MadgwickAHRSupdateIMU+0x1fe>
 8003d80:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8003d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d88:	d105      	bne.n	8003d96 <MadgwickAHRSupdateIMU+0x1fe>
 8003d8a:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8003d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d92:	f000 81f2 	beq.w	800417a <MadgwickAHRSupdateIMU+0x5e2>
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8003d96:	ee28 0a08 	vmul.f32	s0, s16, s16
		_2q0 = 2.0f * q0;
 8003d9a:	4e60      	ldr	r6, [pc, #384]	; (8003f1c <MadgwickAHRSupdateIMU+0x384>)
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8003d9c:	eea8 0aa8 	vfma.f32	s0, s17, s17
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8003da0:	eeb1 ea00 	vmov.f32	s28, #16	; 0x40800000  4.0
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8003da4:	eea9 0a09 	vfma.f32	s0, s18, s18
 8003da8:	f7ff fed8 	bl	8003b5c <invSqrt>
		_2q0 = 2.0f * q0;
 8003dac:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003db0:	4610      	mov	r0, r2
 8003db2:	4619      	mov	r1, r3
		ax *= recipNorm;
 8003db4:	ee68 8a80 	vmul.f32	s17, s17, s0
		ay *= recipNorm;
 8003db8:	ee28 8a00 	vmul.f32	s16, s16, s0
		az *= recipNorm;   
 8003dbc:	ee29 9a00 	vmul.f32	s18, s18, s0
		_2q0 = 2.0f * q0;
 8003dc0:	f7fc fa08 	bl	80001d4 <__adddf3>
 8003dc4:	f7fc fe88 	bl	8000ad8 <__aeabi_d2f>
		_2q1 = 2.0f * q1;
 8003dc8:	e9d8 2300 	ldrd	r2, r3, [r8]
		_2q0 = 2.0f * q0;
 8003dcc:	ee0f 0a10 	vmov	s30, r0
		_2q1 = 2.0f * q1;
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	4610      	mov	r0, r2
 8003dd4:	f7fc f9fe 	bl	80001d4 <__adddf3>
 8003dd8:	f7fc fe7e 	bl	8000ad8 <__aeabi_d2f>
		_2q2 = 2.0f * q2;
 8003ddc:	e9d4 2300 	ldrd	r2, r3, [r4]
		_2q1 = 2.0f * q1;
 8003de0:	9000      	str	r0, [sp, #0]
		_2q2 = 2.0f * q2;
 8003de2:	4619      	mov	r1, r3
 8003de4:	4610      	mov	r0, r2
 8003de6:	f7fc f9f5 	bl	80001d4 <__adddf3>
 8003dea:	f7fc fe75 	bl	8000ad8 <__aeabi_d2f>
		_2q3 = 2.0f * q3;
 8003dee:	e9d5 2300 	ldrd	r2, r3, [r5]
		_2q2 = 2.0f * q2;
 8003df2:	9002      	str	r0, [sp, #8]
		_2q3 = 2.0f * q3;
 8003df4:	4619      	mov	r1, r3
 8003df6:	4610      	mov	r0, r2
 8003df8:	f7fc f9ec 	bl	80001d4 <__adddf3>
 8003dfc:	f7fc fe6c 	bl	8000ad8 <__aeabi_d2f>
		_4q0 = 4.0f * q0;
 8003e00:	2200      	movs	r2, #0
 8003e02:	4b47      	ldr	r3, [pc, #284]	; (8003f20 <MadgwickAHRSupdateIMU+0x388>)
		_2q3 = 2.0f * q3;
 8003e04:	9004      	str	r0, [sp, #16]
		_4q0 = 4.0f * q0;
 8003e06:	e9d6 0100 	ldrd	r0, r1, [r6]
 8003e0a:	f7fc fb95 	bl	8000538 <__aeabi_dmul>
 8003e0e:	f7fc fe63 	bl	8000ad8 <__aeabi_d2f>
		_4q1 = 4.0f * q1;
 8003e12:	2200      	movs	r2, #0
		_4q0 = 4.0f * q0;
 8003e14:	ee0d 0a90 	vmov	s27, r0
		_4q1 = 4.0f * q1;
 8003e18:	4b41      	ldr	r3, [pc, #260]	; (8003f20 <MadgwickAHRSupdateIMU+0x388>)
 8003e1a:	e9d8 0100 	ldrd	r0, r1, [r8]
 8003e1e:	f7fc fb8b 	bl	8000538 <__aeabi_dmul>
 8003e22:	f7fc fe59 	bl	8000ad8 <__aeabi_d2f>
		_4q2 = 4.0f * q2;
 8003e26:	2200      	movs	r2, #0
		_4q1 = 4.0f * q1;
 8003e28:	ee0d 0a10 	vmov	s26, r0
		_4q2 = 4.0f * q2;
 8003e2c:	4b3c      	ldr	r3, [pc, #240]	; (8003f20 <MadgwickAHRSupdateIMU+0x388>)
 8003e2e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8003e32:	f7fc fb81 	bl	8000538 <__aeabi_dmul>
 8003e36:	f7fc fe4f 	bl	8000ad8 <__aeabi_d2f>
		_8q1 = 8.0f * q1;
 8003e3a:	2200      	movs	r2, #0
		_4q2 = 4.0f * q2;
 8003e3c:	ee0c 0a90 	vmov	s25, r0
		_8q1 = 8.0f * q1;
 8003e40:	4b38      	ldr	r3, [pc, #224]	; (8003f24 <MadgwickAHRSupdateIMU+0x38c>)
 8003e42:	e9d8 0100 	ldrd	r0, r1, [r8]
 8003e46:	f7fc fb77 	bl	8000538 <__aeabi_dmul>
 8003e4a:	f7fc fe45 	bl	8000ad8 <__aeabi_d2f>
		_8q2 = 8.0f * q2;
 8003e4e:	2200      	movs	r2, #0
		_8q1 = 8.0f * q1;
 8003e50:	ee0f 0a90 	vmov	s31, r0
		_8q2 = 8.0f * q2;
 8003e54:	4b33      	ldr	r3, [pc, #204]	; (8003f24 <MadgwickAHRSupdateIMU+0x38c>)
 8003e56:	e9d4 0100 	ldrd	r0, r1, [r4]
 8003e5a:	f7fc fb6d 	bl	8000538 <__aeabi_dmul>
 8003e5e:	f7fc fe3b 	bl	8000ad8 <__aeabi_d2f>
		q0q0 = q0 * q0;
 8003e62:	e9d6 ab00 	ldrd	sl, fp, [r6]
		_8q2 = 8.0f * q2;
 8003e66:	9006      	str	r0, [sp, #24]
		q0q0 = q0 * q0;
 8003e68:	e9d6 6700 	ldrd	r6, r7, [r6]
		q1q1 = q1 * q1;
 8003e6c:	e9d8 0100 	ldrd	r0, r1, [r8]
 8003e70:	e9d8 2300 	ldrd	r2, r3, [r8]
 8003e74:	f7fc fb60 	bl	8000538 <__aeabi_dmul>
 8003e78:	f7fc fe2e 	bl	8000ad8 <__aeabi_d2f>
 8003e7c:	ee0a 0a10 	vmov	s20, r0
		q2q2 = q2 * q2;
 8003e80:	e9d4 0100 	ldrd	r0, r1, [r4]
 8003e84:	e9d4 2300 	ldrd	r2, r3, [r4]
 8003e88:	f7fc fb56 	bl	8000538 <__aeabi_dmul>
 8003e8c:	f7fc fe24 	bl	8000ad8 <__aeabi_d2f>
 8003e90:	ee09 0a90 	vmov	s19, r0
		q3q3 = q3 * q3;
 8003e94:	e9d5 0100 	ldrd	r0, r1, [r5]
 8003e98:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003e9c:	f7fc fb4c 	bl	8000538 <__aeabi_dmul>
 8003ea0:	f7fc fe1a 	bl	8000ad8 <__aeabi_d2f>
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8003ea4:	eddd 7a02 	vldr	s15, [sp, #8]
 8003ea8:	ed9d 7a00 	vldr	s14, [sp]
 8003eac:	ee68 7aa7 	vmul.f32	s15, s17, s15
		q0q0 = q0 * q0;
 8003eb0:	4632      	mov	r2, r6
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8003eb2:	eeed 7aa9 	vfma.f32	s15, s27, s19
		q0q0 = q0 * q0;
 8003eb6:	463b      	mov	r3, r7
 8003eb8:	4659      	mov	r1, fp
		q3q3 = q3 * q3;
 8003eba:	ee0e 0a90 	vmov	s29, r0
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8003ebe:	eeed 7a8a 	vfma.f32	s15, s27, s20
		q0q0 = q0 * q0;
 8003ec2:	4650      	mov	r0, sl
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8003ec4:	eee8 7a47 	vfms.f32	s15, s16, s14
 8003ec8:	eef0 da67 	vmov.f32	s27, s15
		q0q0 = q0 * q0;
 8003ecc:	f7fc fb34 	bl	8000538 <__aeabi_dmul>
 8003ed0:	f7fc fe02 	bl	8000ad8 <__aeabi_d2f>
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8003ed4:	ee07 0a90 	vmov	s15, r0
 8003ed8:	ee67 7a8e 	vmul.f32	s15, s15, s28
 8003edc:	ee17 0a90 	vmov	r0, s15
 8003ee0:	f7fc fad6 	bl	8000490 <__aeabi_f2d>
 8003ee4:	eddd 7a04 	vldr	s15, [sp, #16]
 8003ee8:	ee67 6ae8 	vnmul.f32	s13, s15, s17
 8003eec:	4606      	mov	r6, r0
 8003eee:	eeed 6a2e 	vfma.f32	s13, s26, s29
 8003ef2:	460f      	mov	r7, r1
 8003ef4:	e9d8 ab00 	ldrd	sl, fp, [r8]
 8003ef8:	ee16 0a90 	vmov	r0, s13
 8003efc:	f7fc fac8 	bl	8000490 <__aeabi_f2d>
 8003f00:	4652      	mov	r2, sl
 8003f02:	4680      	mov	r8, r0
 8003f04:	4689      	mov	r9, r1
 8003f06:	465b      	mov	r3, fp
 8003f08:	4630      	mov	r0, r6
 8003f0a:	4639      	mov	r1, r7
 8003f0c:	f7fc fb14 	bl	8000538 <__aeabi_dmul>
 8003f10:	e00e      	b.n	8003f30 <MadgwickAHRSupdateIMU+0x398>
 8003f12:	bf00      	nop
 8003f14:	200000b8 	.word	0x200000b8
 8003f18:	3fe00000 	.word	0x3fe00000
 8003f1c:	20000010 	.word	0x20000010
 8003f20:	40100000 	.word	0x40100000
 8003f24:	40200000 	.word	0x40200000
 8003f28:	200000a8 	.word	0x200000a8
 8003f2c:	200000b0 	.word	0x200000b0
 8003f30:	4602      	mov	r2, r0
 8003f32:	460b      	mov	r3, r1
 8003f34:	4640      	mov	r0, r8
 8003f36:	4649      	mov	r1, r9
 8003f38:	f7fc f94c 	bl	80001d4 <__adddf3>
 8003f3c:	ee68 7a0f 	vmul.f32	s15, s16, s30
 8003f40:	4680      	mov	r8, r0
 8003f42:	ee17 0a90 	vmov	r0, s15
 8003f46:	4689      	mov	r9, r1
 8003f48:	f7fc faa2 	bl	8000490 <__aeabi_f2d>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	460b      	mov	r3, r1
 8003f50:	4640      	mov	r0, r8
 8003f52:	4649      	mov	r1, r9
 8003f54:	f7fc f93c 	bl	80001d0 <__aeabi_dsub>
 8003f58:	4680      	mov	r8, r0
 8003f5a:	ee1d 0a10 	vmov	r0, s26
 8003f5e:	4689      	mov	r9, r1
 8003f60:	f7fc fa96 	bl	8000490 <__aeabi_f2d>
 8003f64:	4602      	mov	r2, r0
 8003f66:	460b      	mov	r3, r1
 8003f68:	4640      	mov	r0, r8
 8003f6a:	4649      	mov	r1, r9
 8003f6c:	f7fc f930 	bl	80001d0 <__aeabi_dsub>
 8003f70:	ee6f 7a8a 	vmul.f32	s15, s31, s20
 8003f74:	4680      	mov	r8, r0
 8003f76:	ee17 0a90 	vmov	r0, s15
 8003f7a:	4689      	mov	r9, r1
 8003f7c:	f7fc fa88 	bl	8000490 <__aeabi_f2d>
 8003f80:	4602      	mov	r2, r0
 8003f82:	460b      	mov	r3, r1
 8003f84:	4640      	mov	r0, r8
 8003f86:	4649      	mov	r1, r9
 8003f88:	f7fc f924 	bl	80001d4 <__adddf3>
 8003f8c:	ee6f 7aa9 	vmul.f32	s15, s31, s19
 8003f90:	4680      	mov	r8, r0
 8003f92:	ee17 0a90 	vmov	r0, s15
 8003f96:	4689      	mov	r9, r1
 8003f98:	f7fc fa7a 	bl	8000490 <__aeabi_f2d>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	460b      	mov	r3, r1
 8003fa0:	4640      	mov	r0, r8
 8003fa2:	4649      	mov	r1, r9
 8003fa4:	f7fc f916 	bl	80001d4 <__adddf3>
 8003fa8:	ee69 7a0d 	vmul.f32	s15, s18, s26
 8003fac:	4680      	mov	r8, r0
 8003fae:	ee17 0a90 	vmov	r0, s15
 8003fb2:	4689      	mov	r9, r1
 8003fb4:	f7fc fa6c 	bl	8000490 <__aeabi_f2d>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	460b      	mov	r3, r1
 8003fbc:	4640      	mov	r0, r8
 8003fbe:	4649      	mov	r1, r9
 8003fc0:	f7fc f908 	bl	80001d4 <__adddf3>
 8003fc4:	f7fc fd88 	bl	8000ad8 <__aeabi_d2f>
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8003fc8:	e9d4 2300 	ldrd	r2, r3, [r4]
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8003fcc:	ee0d 0a10 	vmov	s26, r0
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8003fd0:	4639      	mov	r1, r7
 8003fd2:	4630      	mov	r0, r6
 8003fd4:	f7fc fab0 	bl	8000538 <__aeabi_dmul>
 8003fd8:	ee68 7a8f 	vmul.f32	s15, s17, s30
 8003fdc:	4606      	mov	r6, r0
 8003fde:	ee17 0a90 	vmov	r0, s15
 8003fe2:	460f      	mov	r7, r1
 8003fe4:	f7fc fa54 	bl	8000490 <__aeabi_f2d>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	460b      	mov	r3, r1
 8003fec:	4630      	mov	r0, r6
 8003fee:	4639      	mov	r1, r7
 8003ff0:	f7fc f8f0 	bl	80001d4 <__adddf3>
 8003ff4:	ee6c 7aae 	vmul.f32	s15, s25, s29
 8003ff8:	4606      	mov	r6, r0
 8003ffa:	ee17 0a90 	vmov	r0, s15
 8003ffe:	460f      	mov	r7, r1
 8004000:	f7fc fa46 	bl	8000490 <__aeabi_f2d>
 8004004:	4602      	mov	r2, r0
 8004006:	460b      	mov	r3, r1
 8004008:	4630      	mov	r0, r6
 800400a:	4639      	mov	r1, r7
 800400c:	f7fc f8e2 	bl	80001d4 <__adddf3>
 8004010:	eddd 7a04 	vldr	s15, [sp, #16]
 8004014:	ee68 7a27 	vmul.f32	s15, s16, s15
 8004018:	4606      	mov	r6, r0
 800401a:	ee17 0a90 	vmov	r0, s15
 800401e:	460f      	mov	r7, r1
 8004020:	f7fc fa36 	bl	8000490 <__aeabi_f2d>
 8004024:	4602      	mov	r2, r0
 8004026:	460b      	mov	r3, r1
 8004028:	4630      	mov	r0, r6
 800402a:	4639      	mov	r1, r7
 800402c:	f7fc f8d0 	bl	80001d0 <__aeabi_dsub>
 8004030:	4606      	mov	r6, r0
 8004032:	ee1c 0a90 	vmov	r0, s25
 8004036:	460f      	mov	r7, r1
 8004038:	f7fc fa2a 	bl	8000490 <__aeabi_f2d>
 800403c:	4602      	mov	r2, r0
 800403e:	460b      	mov	r3, r1
 8004040:	4630      	mov	r0, r6
 8004042:	4639      	mov	r1, r7
 8004044:	f7fc f8c4 	bl	80001d0 <__aeabi_dsub>
 8004048:	eddd 7a06 	vldr	s15, [sp, #24]
 800404c:	ee67 7a8a 	vmul.f32	s15, s15, s20
 8004050:	4606      	mov	r6, r0
 8004052:	ee17 0a90 	vmov	r0, s15
 8004056:	460f      	mov	r7, r1
 8004058:	f7fc fa1a 	bl	8000490 <__aeabi_f2d>
 800405c:	4602      	mov	r2, r0
 800405e:	460b      	mov	r3, r1
 8004060:	4630      	mov	r0, r6
 8004062:	4639      	mov	r1, r7
 8004064:	f7fc f8b6 	bl	80001d4 <__adddf3>
 8004068:	eddd 7a06 	vldr	s15, [sp, #24]
 800406c:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8004070:	4606      	mov	r6, r0
 8004072:	ee17 0a90 	vmov	r0, s15
 8004076:	460f      	mov	r7, r1
 8004078:	f7fc fa0a 	bl	8000490 <__aeabi_f2d>
 800407c:	4602      	mov	r2, r0
 800407e:	460b      	mov	r3, r1
 8004080:	4630      	mov	r0, r6
 8004082:	4639      	mov	r1, r7
 8004084:	f7fc f8a6 	bl	80001d4 <__adddf3>
 8004088:	ee69 7a2c 	vmul.f32	s15, s18, s25
 800408c:	4606      	mov	r6, r0
 800408e:	ee17 0a90 	vmov	r0, s15
 8004092:	460f      	mov	r7, r1
 8004094:	f7fc f9fc 	bl	8000490 <__aeabi_f2d>
 8004098:	4602      	mov	r2, r0
 800409a:	460b      	mov	r3, r1
 800409c:	4630      	mov	r0, r6
 800409e:	4639      	mov	r1, r7
 80040a0:	f7fc f898 	bl	80001d4 <__adddf3>
 80040a4:	f7fc fd18 	bl	8000ad8 <__aeabi_d2f>
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 80040a8:	e9d5 8900 	ldrd	r8, r9, [r5]
 80040ac:	ee6a 7a0e 	vmul.f32	s15, s20, s28
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 80040b0:	ee09 0a10 	vmov	s18, r0
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 80040b4:	ee17 0a90 	vmov	r0, s15
 80040b8:	f7fc f9ea 	bl	8000490 <__aeabi_f2d>
 80040bc:	4642      	mov	r2, r8
 80040be:	464b      	mov	r3, r9
 80040c0:	f7fc fa3a 	bl	8000538 <__aeabi_dmul>
 80040c4:	eddd 7a00 	vldr	s15, [sp]
 80040c8:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80040cc:	4604      	mov	r4, r0
 80040ce:	ee17 0a90 	vmov	r0, s15
 80040d2:	e9d5 6700 	ldrd	r6, r7, [r5]
 80040d6:	460d      	mov	r5, r1
 80040d8:	f7fc f9da 	bl	8000490 <__aeabi_f2d>
 80040dc:	4602      	mov	r2, r0
 80040de:	460b      	mov	r3, r1
 80040e0:	4620      	mov	r0, r4
 80040e2:	4629      	mov	r1, r5
 80040e4:	f7fc f874 	bl	80001d0 <__aeabi_dsub>
 80040e8:	ee69 7a8e 	vmul.f32	s15, s19, s28
 80040ec:	4604      	mov	r4, r0
 80040ee:	ee17 0a90 	vmov	r0, s15
 80040f2:	460d      	mov	r5, r1
 80040f4:	f7fc f9cc 	bl	8000490 <__aeabi_f2d>
 80040f8:	4632      	mov	r2, r6
 80040fa:	463b      	mov	r3, r7
 80040fc:	f7fc fa1c 	bl	8000538 <__aeabi_dmul>
 8004100:	4602      	mov	r2, r0
 8004102:	460b      	mov	r3, r1
 8004104:	4620      	mov	r0, r4
 8004106:	4629      	mov	r1, r5
 8004108:	f7fc f864 	bl	80001d4 <__adddf3>
 800410c:	eddd 7a02 	vldr	s15, [sp, #8]
 8004110:	ee68 7a27 	vmul.f32	s15, s16, s15
 8004114:	4604      	mov	r4, r0
 8004116:	ee17 0a90 	vmov	r0, s15
 800411a:	460d      	mov	r5, r1
 800411c:	f7fc f9b8 	bl	8000490 <__aeabi_f2d>
 8004120:	460b      	mov	r3, r1
 8004122:	4602      	mov	r2, r0
 8004124:	4629      	mov	r1, r5
 8004126:	4620      	mov	r0, r4
 8004128:	f7fc f852 	bl	80001d0 <__aeabi_dsub>
 800412c:	f7fc fcd4 	bl	8000ad8 <__aeabi_d2f>
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8004130:	ee2d 0a0d 	vmul.f32	s0, s26, s26
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 8004134:	ee05 0a90 	vmov	s11, r0
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8004138:	eead 0aad 	vfma.f32	s0, s27, s27
 800413c:	eea9 0a09 	vfma.f32	s0, s18, s18
 8004140:	eea5 0aa5 	vfma.f32	s0, s11, s11
 8004144:	f7ff fd0a 	bl	8003b5c <invSqrt>
		qDot1 -= beta * s0;
 8004148:	4b65      	ldr	r3, [pc, #404]	; (80042e0 <MadgwickAHRSupdateIMU+0x748>)
 800414a:	ee60 7a6d 	vnmul.f32	s15, s0, s27
 800414e:	ed93 7a00 	vldr	s14, [r3]
		qDot2 -= beta * s1;
 8004152:	ee20 da4d 	vnmul.f32	s26, s0, s26
		qDot1 -= beta * s0;
 8004156:	eea7 ca87 	vfma.f32	s24, s15, s14
		qDot2 -= beta * s1;
 800415a:	edd3 7a00 	vldr	s15, [r3]
		qDot3 -= beta * s2;
 800415e:	ee20 9a49 	vnmul.f32	s18, s0, s18
		qDot2 -= beta * s1;
 8004162:	eeed ba27 	vfma.f32	s23, s26, s15
		qDot3 -= beta * s2;
 8004166:	edd3 7a00 	vldr	s15, [r3]
		qDot4 -= beta * s3;
 800416a:	ee20 0a65 	vnmul.f32	s0, s0, s11
		qDot3 -= beta * s2;
 800416e:	eea9 ba27 	vfma.f32	s22, s18, s15
		qDot4 -= beta * s3;
 8004172:	edd3 7a00 	vldr	s15, [r3]
 8004176:	eee0 aa27 	vfma.f32	s21, s0, s15
	q0 += qDot1 * (1.0f / sampleFreq);
 800417a:	4e5a      	ldr	r6, [pc, #360]	; (80042e4 <MadgwickAHRSupdateIMU+0x74c>)
	q3 += qDot4 * (1.0f / sampleFreq);
 800417c:	4f5a      	ldr	r7, [pc, #360]	; (80042e8 <MadgwickAHRSupdateIMU+0x750>)
	q0 += qDot1 * (1.0f / sampleFreq);
 800417e:	ed9f 8a5b 	vldr	s16, [pc, #364]	; 80042ec <MadgwickAHRSupdateIMU+0x754>
 8004182:	e9d6 4500 	ldrd	r4, r5, [r6]
 8004186:	ee6c 7a08 	vmul.f32	s15, s24, s16
 800418a:	ee17 0a90 	vmov	r0, s15
 800418e:	f7fc f97f 	bl	8000490 <__aeabi_f2d>
 8004192:	4622      	mov	r2, r4
 8004194:	462b      	mov	r3, r5
 8004196:	f7fc f81d 	bl	80001d4 <__adddf3>
 800419a:	e9c6 0100 	strd	r0, r1, [r6]
	q1 += qDot2 * (1.0f / sampleFreq);
 800419e:	4d54      	ldr	r5, [pc, #336]	; (80042f0 <MadgwickAHRSupdateIMU+0x758>)
	q2 += qDot3 * (1.0f / sampleFreq);
 80041a0:	4c54      	ldr	r4, [pc, #336]	; (80042f4 <MadgwickAHRSupdateIMU+0x75c>)
	q1 += qDot2 * (1.0f / sampleFreq);
 80041a2:	e9d5 8900 	ldrd	r8, r9, [r5]
 80041a6:	ee6b 7a88 	vmul.f32	s15, s23, s16
 80041aa:	ee17 0a90 	vmov	r0, s15
 80041ae:	f7fc f96f 	bl	8000490 <__aeabi_f2d>
 80041b2:	4642      	mov	r2, r8
 80041b4:	464b      	mov	r3, r9
 80041b6:	f7fc f80d 	bl	80001d4 <__adddf3>
 80041ba:	e9c5 0100 	strd	r0, r1, [r5]
	q2 += qDot3 * (1.0f / sampleFreq);
 80041be:	ee6b 7a08 	vmul.f32	s15, s22, s16
 80041c2:	e9d4 8900 	ldrd	r8, r9, [r4]
 80041c6:	ee17 0a90 	vmov	r0, s15
 80041ca:	f7fc f961 	bl	8000490 <__aeabi_f2d>
 80041ce:	4642      	mov	r2, r8
 80041d0:	464b      	mov	r3, r9
 80041d2:	f7fb ffff 	bl	80001d4 <__adddf3>
 80041d6:	e9c4 0100 	strd	r0, r1, [r4]
	q3 += qDot4 * (1.0f / sampleFreq);
 80041da:	e9d7 8900 	ldrd	r8, r9, [r7]
 80041de:	ee6a 7a88 	vmul.f32	s15, s21, s16
 80041e2:	ee17 0a90 	vmov	r0, s15
 80041e6:	f7fc f953 	bl	8000490 <__aeabi_f2d>
 80041ea:	4642      	mov	r2, r8
 80041ec:	464b      	mov	r3, r9
 80041ee:	f7fb fff1 	bl	80001d4 <__adddf3>
 80041f2:	e9c7 0100 	strd	r0, r1, [r7]
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 80041f6:	e9d6 0100 	ldrd	r0, r1, [r6]
 80041fa:	e9d6 2300 	ldrd	r2, r3, [r6]
 80041fe:	ed95 7b00 	vldr	d7, [r5]
 8004202:	e9d5 ab00 	ldrd	sl, fp, [r5]
 8004206:	ed8d 7b00 	vstr	d7, [sp]
 800420a:	ed94 7b00 	vldr	d7, [r4]
 800420e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004212:	ed94 7b00 	vldr	d7, [r4]
 8004216:	ed8d 7b04 	vstr	d7, [sp, #16]
 800421a:	ed97 7b00 	vldr	d7, [r7]
 800421e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004222:	ed97 7b00 	vldr	d7, [r7]
 8004226:	ed8d 7b08 	vstr	d7, [sp, #32]
 800422a:	f7fc f985 	bl	8000538 <__aeabi_dmul>
 800422e:	4652      	mov	r2, sl
 8004230:	4680      	mov	r8, r0
 8004232:	4689      	mov	r9, r1
 8004234:	465b      	mov	r3, fp
 8004236:	e9dd 0100 	ldrd	r0, r1, [sp]
 800423a:	f7fc f97d 	bl	8000538 <__aeabi_dmul>
 800423e:	4602      	mov	r2, r0
 8004240:	460b      	mov	r3, r1
 8004242:	4640      	mov	r0, r8
 8004244:	4649      	mov	r1, r9
 8004246:	f7fb ffc5 	bl	80001d4 <__adddf3>
 800424a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800424e:	4680      	mov	r8, r0
 8004250:	4689      	mov	r9, r1
 8004252:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004256:	f7fc f96f 	bl	8000538 <__aeabi_dmul>
 800425a:	4602      	mov	r2, r0
 800425c:	460b      	mov	r3, r1
 800425e:	4640      	mov	r0, r8
 8004260:	4649      	mov	r1, r9
 8004262:	f7fb ffb7 	bl	80001d4 <__adddf3>
 8004266:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800426a:	4680      	mov	r8, r0
 800426c:	4689      	mov	r9, r1
 800426e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004272:	f7fc f961 	bl	8000538 <__aeabi_dmul>
 8004276:	4602      	mov	r2, r0
 8004278:	460b      	mov	r3, r1
 800427a:	4640      	mov	r0, r8
 800427c:	4649      	mov	r1, r9
 800427e:	f7fb ffa9 	bl	80001d4 <__adddf3>
 8004282:	f7fc fc29 	bl	8000ad8 <__aeabi_d2f>
 8004286:	ee00 0a10 	vmov	s0, r0
 800428a:	f7ff fc67 	bl	8003b5c <invSqrt>
	q0 *= recipNorm;
 800428e:	ee10 0a10 	vmov	r0, s0
 8004292:	f7fc f8fd 	bl	8000490 <__aeabi_f2d>
 8004296:	e9d6 2300 	ldrd	r2, r3, [r6]
 800429a:	4680      	mov	r8, r0
 800429c:	4689      	mov	r9, r1
 800429e:	f7fc f94b 	bl	8000538 <__aeabi_dmul>
 80042a2:	e9c6 0100 	strd	r0, r1, [r6]
	q1 *= recipNorm;
 80042a6:	4640      	mov	r0, r8
 80042a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80042ac:	4649      	mov	r1, r9
 80042ae:	f7fc f943 	bl	8000538 <__aeabi_dmul>
 80042b2:	e9c5 0100 	strd	r0, r1, [r5]
	q2 *= recipNorm;
 80042b6:	4640      	mov	r0, r8
 80042b8:	e9d4 2300 	ldrd	r2, r3, [r4]
 80042bc:	4649      	mov	r1, r9
 80042be:	f7fc f93b 	bl	8000538 <__aeabi_dmul>
 80042c2:	e9c4 0100 	strd	r0, r1, [r4]
	q3 *= recipNorm;
 80042c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042ca:	4640      	mov	r0, r8
 80042cc:	4649      	mov	r1, r9
 80042ce:	f7fc f933 	bl	8000538 <__aeabi_dmul>
 80042d2:	e9c7 0100 	strd	r0, r1, [r7]
}
 80042d6:	b00b      	add	sp, #44	; 0x2c
 80042d8:	ecbd 8b10 	vpop	{d8-d15}
 80042dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042e0:	20000008 	.word	0x20000008
 80042e4:	20000010 	.word	0x20000010
 80042e8:	200000b8 	.word	0x200000b8
 80042ec:	3b03126f 	.word	0x3b03126f
 80042f0:	200000a8 	.word	0x200000a8
 80042f4:	200000b0 	.word	0x200000b0

080042f8 <MPU9250_Madgwick>:
    float roll, pitch, yaw;
//    float PI = 3.14159265358979323846f;
    float ax = mpu->AccX;
    float ay = mpu->AccY;
    float az = mpu->AccZ;
    float gx = mpu->GyroX * PI / 180.0f;
 80042f8:	eddf 6a23 	vldr	s13, [pc, #140]	; 8004388 <MPU9250_Madgwick+0x90>
 80042fc:	ed90 7a0e 	vldr	s14, [r0, #56]	; 0x38
 8004300:	eddf 7a22 	vldr	s15, [pc, #136]	; 800438c <MPU9250_Madgwick+0x94>
    float ax = mpu->AccX;
 8004304:	edd0 1a09 	vldr	s3, [r0, #36]	; 0x24
    float ay = mpu->AccY;
 8004308:	ed90 2a0a 	vldr	s4, [r0, #40]	; 0x28
    float gx = mpu->GyroX * PI / 180.0f;
 800430c:	ee27 7a26 	vmul.f32	s14, s14, s13
{
 8004310:	b510      	push	{r4, lr}
    float gx = mpu->GyroX * PI / 180.0f;
 8004312:	ee87 0a27 	vdiv.f32	s0, s14, s15
{
 8004316:	4604      	mov	r4, r0
    float gy = mpu->GyroY * PI / 180.0f;
 8004318:	ed90 7a0f 	vldr	s14, [r0, #60]	; 0x3c
 800431c:	ee27 7a26 	vmul.f32	s14, s14, s13
{
 8004320:	ed2d 8b10 	vpush	{d8-d15}
    float gy = mpu->GyroY * PI / 180.0f;
 8004324:	eec7 0a27 	vdiv.f32	s1, s14, s15
{
 8004328:	b08c      	sub	sp, #48	; 0x30
    float gz = mpu->GyroZ * PI / 180.0f;
 800432a:	ed90 7a10 	vldr	s14, [r0, #64]	; 0x40
    float mx = mpu->MagY;
 800432e:	edd0 aa1d 	vldr	s21, [r0, #116]	; 0x74
    float az = mpu->AccZ;
 8004332:	ed90 fa0b 	vldr	s30, [r0, #44]	; 0x2c
    float my = mpu->MagX;
 8004336:	ed90 aa1c 	vldr	s20, [r0, #112]	; 0x70
    float mz = mpu->MagZ;
 800433a:	ed90 ca1e 	vldr	s24, [r0, #120]	; 0x78
    float q0 = mpu->q[0];
 800433e:	edd0 9a22 	vldr	s19, [r0, #136]	; 0x88
    float q1 = mpu->q[1];
 8004342:	ed90 9a23 	vldr	s18, [r0, #140]	; 0x8c
    float q2 = mpu->q[2];
 8004346:	ed90 8a24 	vldr	s16, [r0, #144]	; 0x90
    float q3 = mpu->q[3];
 800434a:	edd0 8a25 	vldr	s17, [r0, #148]	; 0x94
    float gz = mpu->GyroZ * PI / 180.0f;
 800434e:	ee27 7a26 	vmul.f32	s14, s14, s13
//    float sampleFreq = 500.0f;
    // Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation)
    if ((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f))
 8004352:	eef5 aa40 	vcmp.f32	s21, #0.0
 8004356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float gz = mpu->GyroZ * PI / 180.0f;
 800435a:	ee87 1a27 	vdiv.f32	s2, s14, s15
    if ((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f))
 800435e:	d117      	bne.n	8004390 <MPU9250_Madgwick+0x98>
 8004360:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8004364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004368:	d112      	bne.n	8004390 <MPU9250_Madgwick+0x98>
 800436a:	eeb5 ca40 	vcmp.f32	s24, #0.0
 800436e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004372:	d10d      	bne.n	8004390 <MPU9250_Madgwick+0x98>
    {
        MadgwickAHRSupdateIMU(gx, gy, gz, ax, ay, az);
 8004374:	eef0 2a4f 	vmov.f32	s5, s30
//    yaw   -= 13.8f; // Declination at Danville, California is 13 degrees 48 minutes and 47 seconds on 2014-04-04
    roll *= 180.0f / PI;
    mpu->roll = roll;
    mpu->pitch = pitch;
    mpu->yaw = yaw;
}
 8004378:	b00c      	add	sp, #48	; 0x30
 800437a:	ecbd 8b10 	vpop	{d8-d15}
 800437e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        MadgwickAHRSupdateIMU(gx, gy, gz, ax, ay, az);
 8004382:	f7ff bc09 	b.w	8003b98 <MadgwickAHRSupdateIMU>
 8004386:	bf00      	nop
 8004388:	40490fda 	.word	0x40490fda
 800438c:	43340000 	.word	0x43340000
    qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8004390:	ee68 da60 	vnmul.f32	s27, s16, s1
    qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8004394:	ee21 da08 	vmul.f32	s26, s2, s16
    qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8004398:	ee69 ca41 	vnmul.f32	s25, s18, s2
    qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 800439c:	ee20 ba89 	vmul.f32	s22, s1, s18
    qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 80043a0:	eee9 da40 	vfms.f32	s27, s18, s0
    qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 80043a4:	eea0 da29 	vfma.f32	s26, s0, s19
    qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 80043a8:	eee0 caa9 	vfma.f32	s25, s1, s19
    qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 80043ac:	eea1 ba29 	vfma.f32	s22, s2, s19
    qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 80043b0:	eee1 da68 	vfms.f32	s27, s2, s17
    qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 80043b4:	eea0 dae8 	vfms.f32	s26, s1, s17
    qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 80043b8:	eee0 ca28 	vfma.f32	s25, s0, s17
    qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 80043bc:	eea0 ba48 	vfms.f32	s22, s0, s16
    if (!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f)))
 80043c0:	eef5 1a40 	vcmp.f32	s3, #0.0
    qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 80043c4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    if (!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f)))
 80043c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 80043cc:	ee6d daa7 	vmul.f32	s27, s27, s15
    qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 80043d0:	ee2d da27 	vmul.f32	s26, s26, s15
    qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 80043d4:	ee6c caa7 	vmul.f32	s25, s25, s15
    qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 80043d8:	ee2b ba27 	vmul.f32	s22, s22, s15
    if (!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f)))
 80043dc:	d10a      	bne.n	80043f4 <MPU9250_Madgwick+0xfc>
 80043de:	eeb5 2a40 	vcmp.f32	s4, #0.0
 80043e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043e6:	d105      	bne.n	80043f4 <MPU9250_Madgwick+0xfc>
 80043e8:	eeb5 fa40 	vcmp.f32	s30, #0.0
 80043ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043f0:	f000 8171 	beq.w	80046d6 <MPU9250_Madgwick+0x3de>
        recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 80043f4:	ee22 0a02 	vmul.f32	s0, s4, s4
 80043f8:	ed8d 2a0b 	vstr	s4, [sp, #44]	; 0x2c
 80043fc:	eea1 0aa1 	vfma.f32	s0, s3, s3
 8004400:	edcd 1a0a 	vstr	s3, [sp, #40]	; 0x28
 8004404:	eeaf 0a0f 	vfma.f32	s0, s30, s30
 8004408:	f7ff fba8 	bl	8003b5c <invSqrt>
 800440c:	ed8d 0a09 	vstr	s0, [sp, #36]	; 0x24
        recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 8004410:	ee2a 0a0a 	vmul.f32	s0, s20, s20
 8004414:	eeaa 0aaa 	vfma.f32	s0, s21, s21
 8004418:	eeac 0a0c 	vfma.f32	s0, s24, s24
 800441c:	f7ff fb9e 	bl	8003b5c <invSqrt>
        _2q0mx = 2.0f * q0 * mx;
 8004420:	ee39 eaa9 	vadd.f32	s28, s19, s19
        my *= recipNorm;
 8004424:	ee2a aa00 	vmul.f32	s20, s20, s0
        mx *= recipNorm;
 8004428:	ee6a 2a80 	vmul.f32	s5, s21, s0
        _2q0my = 2.0f * q0 * my;
 800442c:	ee6a 7a0e 	vmul.f32	s15, s20, s28
        q0q0 = q0 * q0;
 8004430:	ee29 3aa9 	vmul.f32	s6, s19, s19
        hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2
 8004434:	ee67 5ae8 	vnmul.f32	s11, s15, s17
        mz *= recipNorm;
 8004438:	ee2c ca00 	vmul.f32	s24, s24, s0
        hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2
 800443c:	eee2 5a83 	vfma.f32	s11, s5, s6
        _2q0mz = 2.0f * q0 * mz;
 8004440:	ee6c 4a0e 	vmul.f32	s9, s24, s28
        q1q1 = q1 * q1;
 8004444:	ee69 fa09 	vmul.f32	s31, s18, s18
        hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2
 8004448:	eee8 5a24 	vfma.f32	s11, s16, s9
        _2q1mx = 2.0f * q1 * mx;
 800444c:	ee79 ea09 	vadd.f32	s29, s18, s18
        hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2
 8004450:	eee2 5aaf 	vfma.f32	s11, s5, s31
 8004454:	ee2a 0a2e 	vmul.f32	s0, s20, s29
        _2q0mx = 2.0f * q0 * mx;
 8004458:	ee22 1a8e 	vmul.f32	s2, s5, s28
        hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2
 800445c:	eee8 5a00 	vfma.f32	s11, s16, s0
 8004460:	ee2c 0a2e 	vmul.f32	s0, s24, s29
        q2q2 = q2 * q2;
 8004464:	ee68 ba08 	vmul.f32	s23, s16, s16
        hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2
 8004468:	eee8 5a80 	vfma.f32	s11, s17, s0
        hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3
 800446c:	ee2a 0a03 	vmul.f32	s0, s20, s6
        _2q1mx = 2.0f * q1 * mx;
 8004470:	ee62 3aae 	vmul.f32	s7, s5, s29
        hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3
 8004474:	eea8 0a81 	vfma.f32	s0, s17, s2
        hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2
 8004478:	eef1 0a62 	vneg.f32	s1, s5
        hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3
 800447c:	eea9 0a64 	vfms.f32	s0, s18, s9
        hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2
 8004480:	eee0 5aab 	vfma.f32	s11, s1, s23
        hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3
 8004484:	eef0 4a40 	vmov.f32	s9, s0
 8004488:	eee8 4a23 	vfma.f32	s9, s16, s7
        q3q3 = q3 * q3;
 800448c:	ee28 6aa8 	vmul.f32	s12, s17, s17
        _2q2 = 2.0f * q2;
 8004490:	ee78 aa08 	vadd.f32	s21, s16, s16
        hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2
 8004494:	eee0 5a86 	vfma.f32	s11, s1, s12
        hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3
 8004498:	eef1 0a4a 	vneg.f32	s1, s20
 800449c:	eee0 4aaf 	vfma.f32	s9, s1, s31
 80044a0:	ee2c 0a2a 	vmul.f32	s0, s24, s21
 80044a4:	eeea 4a2b 	vfma.f32	s9, s20, s23
        q0q1 = q0 * q1;
 80044a8:	ee69 6a89 	vmul.f32	s13, s19, s18
        hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3
 80044ac:	eee8 4a80 	vfma.f32	s9, s17, s0
        q1q3 = q1 * q3;
 80044b0:	ee29 5a28 	vmul.f32	s10, s18, s17
        hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3
 80044b4:	eee0 4a86 	vfma.f32	s9, s1, s12
        q0q1 = q0 * q1;
 80044b8:	edcd 6a08 	vstr	s13, [sp, #32]
        _2bx = sqrt(hx * hx + hy * hy);
 80044bc:	ee64 4aa4 	vmul.f32	s9, s9, s9
        q1q3 = q1 * q3;
 80044c0:	ed8d 5a07 	vstr	s10, [sp, #28]
        _2bx = sqrt(hx * hx + hy * hy);
 80044c4:	eee5 4aa5 	vfma.f32	s9, s11, s11
        hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2
 80044c8:	edcd 7a06 	vstr	s15, [sp, #24]
        _2bx = sqrt(hx * hx + hy * hy);
 80044cc:	ee14 0a90 	vmov	r0, s9
        hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2
 80044d0:	edcd 2a05 	vstr	s5, [sp, #20]
        hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3
 80044d4:	ed8d 3a04 	vstr	s6, [sp, #16]
 80044d8:	ed8d 1a03 	vstr	s2, [sp, #12]
 80044dc:	edcd 3a02 	vstr	s7, [sp, #8]
 80044e0:	ed8d 6a00 	vstr	s12, [sp]
        _2bx = sqrt(hx * hx + hy * hy);
 80044e4:	f7fb ffd4 	bl	8000490 <__aeabi_f2d>
 80044e8:	ec41 0b10 	vmov	d0, r0, r1
 80044ec:	f001 fe56 	bl	800619c <sqrt>
 80044f0:	ec51 0b10 	vmov	r0, r1, d0
 80044f4:	f7fc faf0 	bl	8000ad8 <__aeabi_d2f>
        _2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2
 80044f8:	eddd 7a06 	vldr	s15, [sp, #24]
 80044fc:	ed9d 1a03 	vldr	s2, [sp, #12]
 8004500:	ed9d 3a04 	vldr	s6, [sp, #16]
 8004504:	eddd 3a02 	vldr	s7, [sp, #8]
        s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay)
 8004508:	ed9d 5a07 	vldr	s10, [sp, #28]
 800450c:	eddd 6a08 	vldr	s13, [sp, #32]
 8004510:	ed9d 7a09 	vldr	s14, [sp, #36]	; 0x24
        _2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2
 8004514:	ed9d 6a00 	vldr	s12, [sp]
        s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay)
 8004518:	eddd 1a0a 	vldr	s3, [sp, #40]	; 0x28
 800451c:	ed9d 2a0b 	vldr	s4, [sp, #44]	; 0x2c
                - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx)
 8004520:	eddd 2a05 	vldr	s5, [sp, #20]
        _2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2
 8004524:	ee69 7a27 	vmul.f32	s15, s18, s15
 8004528:	eef1 4a4c 	vneg.f32	s9, s24
 800452c:	eee1 7a48 	vfms.f32	s15, s2, s16
        s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay)
 8004530:	eeb0 0a45 	vmov.f32	s0, s10
        _2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2
 8004534:	eeec 7a03 	vfma.f32	s15, s24, s6
        s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay)
 8004538:	ee35 5a05 	vadd.f32	s10, s10, s10
        _2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2
 800453c:	eee8 7aa3 	vfma.f32	s15, s17, s7
 8004540:	ee6a 3a2a 	vmul.f32	s7, s20, s21
 8004544:	eee4 7aaf 	vfma.f32	s15, s9, s31
        s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay)
 8004548:	eea8 5a4e 	vfms.f32	s10, s16, s28
        _2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2
 800454c:	eee8 7aa3 	vfma.f32	s15, s17, s7
                - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx)
 8004550:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
        _2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2
 8004554:	eee4 7aab 	vfma.f32	s15, s9, s23
        s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay)
 8004558:	ee76 4aa6 	vadd.f32	s9, s13, s13
        _2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2
 800455c:	eeec 7a06 	vfma.f32	s15, s24, s12
        s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay)
 8004560:	eee8 4aaa 	vfma.f32	s9, s17, s21
 8004564:	eea1 5ac7 	vfms.f32	s10, s3, s14
                - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx)
 8004568:	ee71 1a6b 	vsub.f32	s3, s2, s23
                + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 800456c:	ee31 1a6f 	vsub.f32	s2, s2, s31
        s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay)
 8004570:	eee2 4a47 	vfms.f32	s9, s4, s14
                - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx)
 8004574:	eef1 0a69 	vneg.f32	s1, s19
 8004578:	eeb0 2a40 	vmov.f32	s4, s0
                + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 800457c:	ee31 1a6b 	vsub.f32	s2, s2, s23
 8004580:	eea9 0a88 	vfma.f32	s0, s19, s16
                - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx)
 8004584:	eea0 2a88 	vfma.f32	s4, s1, s16
        _2bx = sqrt(hx * hx + hy * hy);
 8004588:	ee05 0a90 	vmov	s11, r0
                + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 800458c:	ee21 1a27 	vmul.f32	s2, s2, s15
                - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx)
 8004590:	ee22 2a27 	vmul.f32	s4, s4, s15
                + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8004594:	eea5 1a80 	vfma.f32	s2, s11, s0
                - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx)
 8004598:	ee31 6ac6 	vsub.f32	s12, s3, s12
                + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my)
 800459c:	eee8 6a28 	vfma.f32	s13, s16, s17
        q1q2 = q1 * q2;
 80045a0:	ee69 1a08 	vmul.f32	s3, s18, s16
                - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx)
 80045a4:	eea5 2a86 	vfma.f32	s4, s11, s12
                + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 80045a8:	ee31 0a4c 	vsub.f32	s0, s2, s24
                + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my)
 80045ac:	eee0 1aa8 	vfma.f32	s3, s1, s17
        s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay)
 80045b0:	ee2e caa4 	vmul.f32	s24, s29, s9
                + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my)
 80045b4:	ee66 6aa7 	vmul.f32	s13, s13, s15
        s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay)
 80045b8:	eeaa cac5 	vfms.f32	s24, s21, s10
                - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx)
 80045bc:	ee32 6a62 	vsub.f32	s12, s4, s5
                + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my)
 80045c0:	ee29 2a27 	vmul.f32	s4, s18, s15
                - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx)
 80045c4:	ee28 3a27 	vmul.f32	s6, s16, s15
                + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my)
 80045c8:	eee5 6aa1 	vfma.f32	s13, s11, s3
 80045cc:	eef1 2a65 	vneg.f32	s5, s11
 80045d0:	eeb0 4a42 	vmov.f32	s8, s4
 80045d4:	eea8 4aa2 	vfma.f32	s8, s17, s5
                - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx)
 80045d8:	eea3 ca46 	vfms.f32	s24, s6, s12
                + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my)
 80045dc:	ee76 6aca 	vsub.f32	s13, s13, s20
                - 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az)
 80045e0:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
                + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my)
 80045e4:	eea4 ca26 	vfma.f32	s24, s8, s13
                - 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az)
 80045e8:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 80045ec:	eeaf 4ac1 	vfms.f32	s8, s31, s2
 80045f0:	eef1 fa00 	vmov.f32	s31, #16	; 0x40800000  4.0
 80045f4:	eeab 4ac1 	vfms.f32	s8, s23, s2
        s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay)
 80045f8:	ee6e ba24 	vmul.f32	s23, s28, s9
                - 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az)
 80045fc:	eeaf 4a47 	vfms.f32	s8, s30, s14
        s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay)
 8004600:	ee38 7aa8 	vadd.f32	s14, s17, s17
                - 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az)
 8004604:	ee2f 1ac9 	vnmul.f32	s2, s31, s18
        s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay)
 8004608:	eee7 ba05 	vfma.f32	s23, s14, s10
                + _2bz * q3 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx)
 800460c:	ee28 faa7 	vmul.f32	s30, s17, s15
                - 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az)
 8004610:	eee1 ba04 	vfma.f32	s23, s2, s8
                + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8004614:	ee68 1a25 	vmul.f32	s3, s16, s11
                + _2bz * q3 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx)
 8004618:	eee6 ba0f 	vfma.f32	s23, s12, s30
        s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay)
 800461c:	eea1 ca80 	vfma.f32	s24, s3, s0
        s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3 - ay)
 8004620:	ee27 aa24 	vmul.f32	s20, s14, s9
                + (_2bx * q2 + _2bz * q0) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my)
 8004624:	eee9 1aa7 	vfma.f32	s3, s19, s15
        _4bx = 2.0f * _2bx;
 8004628:	ee35 1aa5 	vadd.f32	s2, s11, s11
        _4bz = 2.0f * _2bz;
 800462c:	ee77 3aa7 	vadd.f32	s7, s15, s15
        s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3 - ay)
 8004630:	eeae aa45 	vfms.f32	s20, s28, s10
                + (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx)
 8004634:	eeb1 1a41 	vneg.f32	s2, s2
                + (_2bx * q2 + _2bz * q0) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my)
 8004638:	eee6 baa1 	vfma.f32	s23, s13, s3
                + (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx)
 800463c:	ee28 7a01 	vmul.f32	s14, s16, s2
                + (_2bx * q3 - _4bz * q1) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8004640:	ee63 1ac9 	vnmul.f32	s3, s7, s18
        s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3 - ay)
 8004644:	ee6a aaa4 	vmul.f32	s21, s21, s9
                - 4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az)
 8004648:	ee68 fa2f 	vmul.f32	s31, s16, s31
                + (_2bx * q3 - _4bz * q1) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 800464c:	eee8 1aa5 	vfma.f32	s3, s17, s11
                + (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx)
 8004650:	eea0 7aa7 	vfma.f32	s14, s1, s15
                - 4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az)
 8004654:	eea4 aa6f 	vfms.f32	s20, s8, s31
        s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3 - ay)
 8004658:	eeee aa85 	vfma.f32	s21, s29, s10
                + (-_4bx * q3 + _2bz * q1) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx)
 800465c:	eea8 2a81 	vfma.f32	s4, s17, s2
        s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay)
 8004660:	eee0 ba21 	vfma.f32	s23, s0, s3
                + (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx)
 8004664:	eea6 aa07 	vfma.f32	s20, s12, s14
                + (_2bx * q1 + _2bz * q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my)
 8004668:	ee69 1a25 	vmul.f32	s3, s18, s11
                + (-_4bx * q3 + _2bz * q1) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx)
 800466c:	eee6 aa02 	vfma.f32	s21, s12, s4
                + (-_2bx * q0 + _2bz * q2) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my)
 8004670:	eea9 3aa2 	vfma.f32	s6, s19, s5
                + (_2bx * q1 + _2bz * q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my)
 8004674:	ee3f fa21 	vadd.f32	s30, s30, s3
                + (_2bx * q0 - _4bz * q2) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8004678:	ee63 3ac8 	vnmul.f32	s7, s7, s16
                + (_2bx * q1 + _2bz * q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my)
 800467c:	eea6 aa8f 	vfma.f32	s20, s13, s30
                + (_2bx * q0 - _4bz * q2) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8004680:	eee9 3aa5 	vfma.f32	s7, s19, s11
                + (-_2bx * q0 + _2bz * q2) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my)
 8004684:	eee6 aa83 	vfma.f32	s21, s13, s6
        s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3 - ay)
 8004688:	eea0 aa23 	vfma.f32	s20, s0, s7
        s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3 - ay)
 800468c:	eee0 aa21 	vfma.f32	s21, s0, s3
        recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8004690:	ee2b 0aab 	vmul.f32	s0, s23, s23
 8004694:	eeac 0a0c 	vfma.f32	s0, s24, s24
 8004698:	eeaa 0a0a 	vfma.f32	s0, s20, s20
 800469c:	eeaa 0aaa 	vfma.f32	s0, s21, s21
 80046a0:	f7ff fa5c 	bl	8003b5c <invSqrt>
        qDot1 -= beta * s0;
 80046a4:	4b57      	ldr	r3, [pc, #348]	; (8004804 <MPU9250_Madgwick+0x50c>)
 80046a6:	ee20 ca4c 	vnmul.f32	s24, s0, s24
 80046aa:	edd3 7a00 	vldr	s15, [r3]
        qDot2 -= beta * s1;
 80046ae:	ee60 ba6b 	vnmul.f32	s23, s0, s23
        qDot1 -= beta * s0;
 80046b2:	eeec da27 	vfma.f32	s27, s24, s15
        qDot2 -= beta * s1;
 80046b6:	edd3 7a00 	vldr	s15, [r3]
        qDot3 -= beta * s2;
 80046ba:	ee20 aa4a 	vnmul.f32	s20, s0, s20
        qDot2 -= beta * s1;
 80046be:	eeab daa7 	vfma.f32	s26, s23, s15
        qDot3 -= beta * s2;
 80046c2:	edd3 7a00 	vldr	s15, [r3]
        qDot4 -= beta * s3;
 80046c6:	ee20 0a6a 	vnmul.f32	s0, s0, s21
        qDot3 -= beta * s2;
 80046ca:	eeea ca27 	vfma.f32	s25, s20, s15
        qDot4 -= beta * s3;
 80046ce:	edd3 7a00 	vldr	s15, [r3]
 80046d2:	eea0 ba27 	vfma.f32	s22, s0, s15
    q0 += qDot1 * (1.0f / sampleFreq);
 80046d6:	eddf 7a4c 	vldr	s15, [pc, #304]	; 8004808 <MPU9250_Madgwick+0x510>
    q1 += qDot2 * (1.0f / sampleFreq);
 80046da:	eead 9a27 	vfma.f32	s18, s26, s15
    q0 += qDot1 * (1.0f / sampleFreq);
 80046de:	eeed 9aa7 	vfma.f32	s19, s27, s15
    recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 80046e2:	ee29 0a09 	vmul.f32	s0, s18, s18
    q2 += qDot3 * (1.0f / sampleFreq);
 80046e6:	eeac 8aa7 	vfma.f32	s16, s25, s15
    recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 80046ea:	eea9 0aa9 	vfma.f32	s0, s19, s19
    q3 += qDot4 * (1.0f / sampleFreq);
 80046ee:	eeeb 8a27 	vfma.f32	s17, s22, s15
    recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 80046f2:	eea8 0a08 	vfma.f32	s0, s16, s16
 80046f6:	eea8 0aa8 	vfma.f32	s0, s17, s17
 80046fa:	f7ff fa2f 	bl	8003b5c <invSqrt>
    q1 *= recipNorm;
 80046fe:	ee29 9a00 	vmul.f32	s18, s18, s0
    q0 *= recipNorm;
 8004702:	ee69 9a80 	vmul.f32	s19, s19, s0
    yaw = atan2(2.0f * (q1 * q2 + q0 * q3), q0 * q0 + q1 * q1 - q2 * q2 - q3 * q3);
 8004706:	ee29 aa09 	vmul.f32	s20, s18, s18
    q2 *= recipNorm;
 800470a:	ee28 8a00 	vmul.f32	s16, s16, s0
    yaw = atan2(2.0f * (q1 * q2 + q0 * q3), q0 * q0 + q1 * q1 - q2 * q2 - q3 * q3);
 800470e:	eef0 7a4a 	vmov.f32	s15, s20
 8004712:	eee9 7aa9 	vfma.f32	s15, s19, s19
 8004716:	eef1 ba48 	vneg.f32	s23, s16
 800471a:	eeeb 7a88 	vfma.f32	s15, s23, s16
    q3 *= recipNorm;
 800471e:	ee68 8a80 	vmul.f32	s17, s17, s0
    mpu->q[2] = q2;
 8004722:	ed84 8a24 	vstr	s16, [r4, #144]	; 0x90
    yaw = atan2(2.0f * (q1 * q2 + q0 * q3), q0 * q0 + q1 * q1 - q2 * q2 - q3 * q3);
 8004726:	eee8 7ae8 	vfms.f32	s15, s17, s17
    mpu->q[0] = q0;
 800472a:	edc4 9a22 	vstr	s19, [r4, #136]	; 0x88
    mpu->q[1] = q1;
 800472e:	ed84 9a23 	vstr	s18, [r4, #140]	; 0x8c
    mpu->q[3] = q3;
 8004732:	edc4 8a25 	vstr	s17, [r4, #148]	; 0x94
    yaw = atan2(2.0f * (q1 * q2 + q0 * q3), q0 * q0 + q1 * q1 - q2 * q2 - q3 * q3);
 8004736:	ee17 0a90 	vmov	r0, s15
 800473a:	f7fb fea9 	bl	8000490 <__aeabi_f2d>
 800473e:	ee69 7aa8 	vmul.f32	s15, s19, s17
 8004742:	e9cd 0100 	strd	r0, r1, [sp]
 8004746:	eee9 7a08 	vfma.f32	s15, s18, s16
 800474a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800474e:	ee17 0a90 	vmov	r0, s15
 8004752:	f7fb fe9d 	bl	8000490 <__aeabi_f2d>
 8004756:	ed9d 1b00 	vldr	d1, [sp]
 800475a:	ec41 0b10 	vmov	d0, r0, r1
 800475e:	f001 fd1b 	bl	8006198 <atan2>
 8004762:	ec51 0b10 	vmov	r0, r1, d0
 8004766:	f7fc f9b7 	bl	8000ad8 <__aeabi_d2f>
    pitch = -asin(2.0f * (q1 * q3 - q0 * q2));
 800476a:	ee68 7a69 	vnmul.f32	s15, s16, s19
    yaw = atan2(2.0f * (q1 * q2 + q0 * q3), q0 * q0 + q1 * q1 - q2 * q2 - q3 * q3);
 800476e:	ee0a 0a90 	vmov	s21, r0
    pitch = -asin(2.0f * (q1 * q3 - q0 * q2));
 8004772:	eee9 7a28 	vfma.f32	s15, s18, s17
 8004776:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800477a:	ee17 0a90 	vmov	r0, s15
 800477e:	f7fb fe87 	bl	8000490 <__aeabi_f2d>
 8004782:	ec41 0b10 	vmov	d0, r0, r1
 8004786:	f001 fcaf 	bl	80060e8 <asin>
    roll = atan2(2.0f * (q0 * q1 + q2 * q3), q0 * q0 - q1 * q1 - q2 * q2 + q3 * q3);
 800478a:	ee99 aaa9 	vfnms.f32	s20, s19, s19
    pitch = -asin(2.0f * (q1 * q3 - q0 * q2));
 800478e:	ec51 0b10 	vmov	r0, r1, d0
    roll = atan2(2.0f * (q0 * q1 + q2 * q3), q0 * q0 - q1 * q1 - q2 * q2 + q3 * q3);
 8004792:	eeab aa88 	vfma.f32	s20, s23, s16
    pitch = -asin(2.0f * (q1 * q3 - q0 * q2));
 8004796:	f7fc f99f 	bl	8000ad8 <__aeabi_d2f>
    roll = atan2(2.0f * (q0 * q1 + q2 * q3), q0 * q0 - q1 * q1 - q2 * q2 + q3 * q3);
 800479a:	eea8 aaa8 	vfma.f32	s20, s17, s17
 800479e:	ee28 8a28 	vmul.f32	s16, s16, s17
    pitch = -asin(2.0f * (q1 * q3 - q0 * q2));
 80047a2:	ee07 0a90 	vmov	s15, r0
    roll = atan2(2.0f * (q0 * q1 + q2 * q3), q0 * q0 - q1 * q1 - q2 * q2 + q3 * q3);
 80047a6:	eea9 8a89 	vfma.f32	s16, s19, s18
 80047aa:	ee1a 0a10 	vmov	r0, s20
    pitch = -asin(2.0f * (q1 * q3 - q0 * q2));
 80047ae:	eeb1 ba67 	vneg.f32	s22, s15
    roll = atan2(2.0f * (q0 * q1 + q2 * q3), q0 * q0 - q1 * q1 - q2 * q2 + q3 * q3);
 80047b2:	f7fb fe6d 	bl	8000490 <__aeabi_f2d>
 80047b6:	ee78 7a08 	vadd.f32	s15, s16, s16
 80047ba:	e9cd 0100 	strd	r0, r1, [sp]
 80047be:	ee17 0a90 	vmov	r0, s15
 80047c2:	f7fb fe65 	bl	8000490 <__aeabi_f2d>
 80047c6:	ed9d 1b00 	vldr	d1, [sp]
 80047ca:	ec41 0b10 	vmov	d0, r0, r1
 80047ce:	f001 fce3 	bl	8006198 <atan2>
 80047d2:	ec51 0b10 	vmov	r0, r1, d0
 80047d6:	f7fc f97f 	bl	8000ad8 <__aeabi_d2f>
    roll *= 180.0f / PI;
 80047da:	eddf 7a0c 	vldr	s15, [pc, #48]	; 800480c <MPU9250_Madgwick+0x514>
 80047de:	ee07 0a10 	vmov	s14, r0
    pitch *= 180.0f / PI;
 80047e2:	ee2b ba27 	vmul.f32	s22, s22, s15
    roll *= 180.0f / PI;
 80047e6:	ee27 7a27 	vmul.f32	s14, s14, s15
    yaw *= 180.0f / PI;
 80047ea:	ee6a aaa7 	vmul.f32	s21, s21, s15
    mpu->roll = roll;
 80047ee:	ed84 7a26 	vstr	s14, [r4, #152]	; 0x98
    mpu->pitch = pitch;
 80047f2:	ed84 ba27 	vstr	s22, [r4, #156]	; 0x9c
    mpu->yaw = yaw;
 80047f6:	edc4 aa28 	vstr	s21, [r4, #160]	; 0xa0
}
 80047fa:	b00c      	add	sp, #48	; 0x30
 80047fc:	ecbd 8b10 	vpop	{d8-d15}
 8004800:	bd10      	pop	{r4, pc}
 8004802:	bf00      	nop
 8004804:	20000008 	.word	0x20000008
 8004808:	3b03126f 	.word	0x3b03126f
 800480c:	42652ee2 	.word	0x42652ee2

08004810 <i2cWrite>:

/**/
void i2cWrite(I2C_HandleTypeDef *hi2c, uint16_t address, uint16_t reg, uint8_t *data, uint8_t data_length)
{
 8004810:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    HAL_I2C_Mem_Write(hi2c, address, reg, I2C_MEMADD_SIZE_8BIT, data, data_length, 1000);
 8004812:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8004816:	9402      	str	r4, [sp, #8]
 8004818:	f89d 4018 	ldrb.w	r4, [sp, #24]
 800481c:	e88d 0018 	stmia.w	sp, {r3, r4}
 8004820:	2301      	movs	r3, #1
 8004822:	f7fd fa5f 	bl	8001ce4 <HAL_I2C_Mem_Write>
}
 8004826:	b004      	add	sp, #16
 8004828:	bd10      	pop	{r4, pc}

0800482a <MPU9250_Reset>:
{
 800482a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    temp = 0x80;
 800482c:	ab04      	add	r3, sp, #16
 800482e:	2280      	movs	r2, #128	; 0x80
 8004830:	f803 2d01 	strb.w	r2, [r3, #-1]!
    i2cWrite(hi2c, MPU9250_ADDRESS, PWR_MGMT_1, &temp, 1);
 8004834:	2201      	movs	r2, #1
 8004836:	9200      	str	r2, [sp, #0]
 8004838:	21d0      	movs	r1, #208	; 0xd0
 800483a:	226b      	movs	r2, #107	; 0x6b
 800483c:	f7ff ffe8 	bl	8004810 <i2cWrite>
    HAL_Delay(10);
 8004840:	200a      	movs	r0, #10
 8004842:	f7fc fb71 	bl	8000f28 <HAL_Delay>
}
 8004846:	b005      	add	sp, #20
 8004848:	f85d fb04 	ldr.w	pc, [sp], #4

0800484c <i2cRead>:

void i2cRead(I2C_HandleTypeDef *hi2c, uint16_t address, uint16_t reg, uint8_t *data, uint8_t data_length)
{
 800484c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    HAL_I2C_Mem_Read(hi2c, address, reg, I2C_MEMADD_SIZE_8BIT, data, data_length, 1000);
 800484e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8004852:	9402      	str	r4, [sp, #8]
 8004854:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8004858:	e88d 0018 	stmia.w	sp, {r3, r4}
 800485c:	2301      	movs	r3, #1
 800485e:	f7fd fad7 	bl	8001e10 <HAL_I2C_Mem_Read>

}
 8004862:	b004      	add	sp, #16
 8004864:	bd10      	pop	{r4, pc}

08004866 <MPU9250_readGyro>:
{
 8004866:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    i2cRead(hi2c, MPU9250_ADDRESS, GYRO_XOUT_H, &rawData[0], 6);
 8004868:	2306      	movs	r3, #6
{
 800486a:	460c      	mov	r4, r1
    i2cRead(hi2c, MPU9250_ADDRESS, GYRO_XOUT_H, &rawData[0], 6);
 800486c:	9300      	str	r3, [sp, #0]
 800486e:	2243      	movs	r2, #67	; 0x43
 8004870:	ab02      	add	r3, sp, #8
 8004872:	21d0      	movs	r1, #208	; 0xd0
 8004874:	f7ff ffea 	bl	800484c <i2cRead>
    mpu->GyroX_raw = (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]);
 8004878:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800487c:	f89d 1009 	ldrb.w	r1, [sp, #9]
    mpu->GyroX = (float) mpu->GyroX_raw * mpu->Gyro_factor - mpu->GyroX_offset;
 8004880:	edd4 6a01 	vldr	s13, [r4, #4]
    mpu->GyroY_raw = (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 8004884:	f89d 200b 	ldrb.w	r2, [sp, #11]
    mpu->GyroX = (float) mpu->GyroX_raw * mpu->Gyro_factor - mpu->GyroX_offset;
 8004888:	ed94 7a11 	vldr	s14, [r4, #68]	; 0x44
    mpu->GyroZ_raw = (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 800488c:	f89d 000c 	ldrb.w	r0, [sp, #12]
    mpu->GyroX_raw = (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]);
 8004890:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 8004894:	b209      	sxth	r1, r1
    mpu->GyroX = (float) mpu->GyroX_raw * mpu->Gyro_factor - mpu->GyroX_offset;
 8004896:	ee07 1a90 	vmov	s15, r1
    mpu->GyroY_raw = (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 800489a:	f89d 300a 	ldrb.w	r3, [sp, #10]
    mpu->GyroX_raw = (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]);
 800489e:	8621      	strh	r1, [r4, #48]	; 0x30
    mpu->GyroX = (float) mpu->GyroX_raw * mpu->Gyro_factor - mpu->GyroX_offset;
 80048a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    mpu->GyroY_raw = (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 80048a4:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    mpu->GyroX = (float) mpu->GyroX_raw * mpu->Gyro_factor - mpu->GyroX_offset;
 80048a8:	ee97 7aa6 	vfnms.f32	s14, s15, s13
    mpu->GyroY_raw = (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 80048ac:	b212      	sxth	r2, r2
    mpu->GyroZ_raw = (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 80048ae:	f89d 300d 	ldrb.w	r3, [sp, #13]
    mpu->GyroY_raw = (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 80048b2:	8662      	strh	r2, [r4, #50]	; 0x32
    mpu->GyroY = (float) mpu->GyroY_raw * mpu->Gyro_factor - mpu->GyroY_offset;
 80048b4:	ee07 2a90 	vmov	s15, r2
    mpu->GyroX = (float) mpu->GyroX_raw * mpu->Gyro_factor - mpu->GyroX_offset;
 80048b8:	ed84 7a0e 	vstr	s14, [r4, #56]	; 0x38
    mpu->GyroY = (float) mpu->GyroY_raw * mpu->Gyro_factor - mpu->GyroY_offset;
 80048bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048c0:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
    mpu->GyroZ_raw = (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 80048c4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    mpu->GyroY = (float) mpu->GyroY_raw * mpu->Gyro_factor - mpu->GyroY_offset;
 80048c8:	ee96 7aa7 	vfnms.f32	s14, s13, s15
    mpu->GyroZ_raw = (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 80048cc:	b21b      	sxth	r3, r3
 80048ce:	86a3      	strh	r3, [r4, #52]	; 0x34
    mpu->GyroZ = (float) mpu->GyroZ_raw * mpu->Gyro_factor - mpu->GyroZ_offset;
 80048d0:	ee07 3a90 	vmov	s15, r3
    mpu->GyroY = (float) mpu->GyroY_raw * mpu->Gyro_factor - mpu->GyroY_offset;
 80048d4:	ed84 7a0f 	vstr	s14, [r4, #60]	; 0x3c
    mpu->GyroZ = (float) mpu->GyroZ_raw * mpu->Gyro_factor - mpu->GyroZ_offset;
 80048d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048dc:	ed94 7a13 	vldr	s14, [r4, #76]	; 0x4c
 80048e0:	ee96 7aa7 	vfnms.f32	s14, s13, s15
 80048e4:	ed84 7a10 	vstr	s14, [r4, #64]	; 0x40
}
 80048e8:	b004      	add	sp, #16
 80048ea:	bd10      	pop	{r4, pc}

080048ec <MPU9250_readAcc>:
{
 80048ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    i2cRead(hi2c, MPU9250_ADDRESS, ACCEL_XOUT_H, &rawData[0], 6);
 80048ee:	2306      	movs	r3, #6
{
 80048f0:	460c      	mov	r4, r1
    i2cRead(hi2c, MPU9250_ADDRESS, ACCEL_XOUT_H, &rawData[0], 6);
 80048f2:	9300      	str	r3, [sp, #0]
 80048f4:	223b      	movs	r2, #59	; 0x3b
 80048f6:	ab02      	add	r3, sp, #8
 80048f8:	21d0      	movs	r1, #208	; 0xd0
 80048fa:	f7ff ffa7 	bl	800484c <i2cRead>
    mpu->AccX_raw = (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]);
 80048fe:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8004902:	f89d 1009 	ldrb.w	r1, [sp, #9]
    mpu->AccX = (float) mpu->AccX_raw * mpu->Acc_factor - mpu->AccX_offset;
 8004906:	edd4 6a02 	vldr	s13, [r4, #8]
    mpu->AccY_raw = (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 800490a:	f89d 200b 	ldrb.w	r2, [sp, #11]
    mpu->AccX = (float) mpu->AccX_raw * mpu->Acc_factor - mpu->AccX_offset;
 800490e:	ed94 7a06 	vldr	s14, [r4, #24]
    mpu->AccZ_raw = (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 8004912:	f89d 000c 	ldrb.w	r0, [sp, #12]
    mpu->AccX_raw = (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]);
 8004916:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 800491a:	b209      	sxth	r1, r1
    mpu->AccX = (float) mpu->AccX_raw * mpu->Acc_factor - mpu->AccX_offset;
 800491c:	ee07 1a90 	vmov	s15, r1
    mpu->AccY_raw = (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 8004920:	f89d 300a 	ldrb.w	r3, [sp, #10]
    mpu->AccX_raw = (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]);
 8004924:	8221      	strh	r1, [r4, #16]
    mpu->AccX = (float) mpu->AccX_raw * mpu->Acc_factor - mpu->AccX_offset;
 8004926:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    mpu->AccY_raw = (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 800492a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    mpu->AccX = (float) mpu->AccX_raw * mpu->Acc_factor - mpu->AccX_offset;
 800492e:	ee97 7aa6 	vfnms.f32	s14, s15, s13
    mpu->AccY_raw = (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 8004932:	b212      	sxth	r2, r2
    mpu->AccZ_raw = (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 8004934:	f89d 300d 	ldrb.w	r3, [sp, #13]
    mpu->AccY_raw = (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 8004938:	8262      	strh	r2, [r4, #18]
    mpu->AccY = (float) mpu->AccY_raw * mpu->Acc_factor - mpu->AccY_offset;
 800493a:	ee07 2a90 	vmov	s15, r2
    mpu->AccX = (float) mpu->AccX_raw * mpu->Acc_factor - mpu->AccX_offset;
 800493e:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
    mpu->AccY = (float) mpu->AccY_raw * mpu->Acc_factor - mpu->AccY_offset;
 8004942:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004946:	ed94 7a07 	vldr	s14, [r4, #28]
    mpu->AccZ_raw = (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 800494a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    mpu->AccY = (float) mpu->AccY_raw * mpu->Acc_factor - mpu->AccY_offset;
 800494e:	ee96 7aa7 	vfnms.f32	s14, s13, s15
    mpu->AccZ_raw = (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 8004952:	b21b      	sxth	r3, r3
 8004954:	82a3      	strh	r3, [r4, #20]
    mpu->AccZ = (float) mpu->AccZ_raw * mpu->Acc_factor - mpu->AccZ_offset;
 8004956:	ee07 3a90 	vmov	s15, r3
    mpu->AccY = (float) mpu->AccY_raw * mpu->Acc_factor - mpu->AccY_offset;
 800495a:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
    mpu->AccZ = (float) mpu->AccZ_raw * mpu->Acc_factor - mpu->AccZ_offset;
 800495e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004962:	ed94 7a08 	vldr	s14, [r4, #32]
 8004966:	ee96 7aa7 	vfnms.f32	s14, s13, s15
 800496a:	ed84 7a0b 	vstr	s14, [r4, #44]	; 0x2c
}
 800496e:	b004      	add	sp, #16
 8004970:	bd10      	pop	{r4, pc}

08004972 <MPU9250_readMag>:
{
 8004972:	b530      	push	{r4, r5, lr}
 8004974:	b087      	sub	sp, #28
    i2cRead(hi2c, AK8963_ADDRESS, AK8963_ST1, &temp, 1);
 8004976:	2301      	movs	r3, #1
 8004978:	9300      	str	r3, [sp, #0]
 800497a:	2202      	movs	r2, #2
 800497c:	f10d 030f 	add.w	r3, sp, #15
{
 8004980:	460c      	mov	r4, r1
    i2cRead(hi2c, AK8963_ADDRESS, AK8963_ST1, &temp, 1);
 8004982:	2118      	movs	r1, #24
{
 8004984:	4605      	mov	r5, r0
    i2cRead(hi2c, AK8963_ADDRESS, AK8963_ST1, &temp, 1);
 8004986:	f7ff ff61 	bl	800484c <i2cRead>
    if (temp & 0x01)
 800498a:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800498e:	07da      	lsls	r2, r3, #31
 8004990:	d523      	bpl.n	80049da <MPU9250_readMag+0x68>
        i2cRead(hi2c, AK8963_ADDRESS, AK8963_XOUT_L, &rawData[0], 7);
 8004992:	2307      	movs	r3, #7
 8004994:	9300      	str	r3, [sp, #0]
 8004996:	2203      	movs	r2, #3
 8004998:	ab04      	add	r3, sp, #16
 800499a:	2118      	movs	r1, #24
 800499c:	4628      	mov	r0, r5
 800499e:	f7ff ff55 	bl	800484c <i2cRead>
        if (!(c & 0x08)) // Check if magnetic sensor overflow set, if not then report data
 80049a2:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80049a6:	071b      	lsls	r3, r3, #28
 80049a8:	d417      	bmi.n	80049da <MPU9250_readMag+0x68>
            mpu->MagX_raw = (int16_t) (((int16_t) rawData[1] << 8) | rawData[0]); // Turn the MSB and LSB into a signed 16-bit value
 80049aa:	f89d 2011 	ldrb.w	r2, [sp, #17]
 80049ae:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80049b2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80049b6:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
            mpu->MagY_raw = (int16_t) (((int16_t) rawData[3] << 8) | rawData[2]); // Data stored as little Endian
 80049ba:	f89d 2013 	ldrb.w	r2, [sp, #19]
 80049be:	f89d 3012 	ldrb.w	r3, [sp, #18]
 80049c2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80049c6:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
            mpu->MagZ_raw = (int16_t) (((int16_t) rawData[5] << 8) | rawData[4]);
 80049ca:	f89d 2015 	ldrb.w	r2, [sp, #21]
 80049ce:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80049d2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80049d6:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
        if(mpu->calib_done==1)
 80049da:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 80049de:	ed94 6a03 	vldr	s12, [r4, #12]
 80049e2:	edd4 5a16 	vldr	s11, [r4, #88]	; 0x58
 80049e6:	edd4 4a17 	vldr	s9, [r4, #92]	; 0x5c
 80049ea:	ed94 5a18 	vldr	s10, [r4, #96]	; 0x60
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	f9b4 3050 	ldrsh.w	r3, [r4, #80]	; 0x50
 80049f4:	ee06 3a90 	vmov	s13, r3
 80049f8:	f9b4 3052 	ldrsh.w	r3, [r4, #82]	; 0x52
        	mpu->MagX = (float) mpu->MagX_raw * mpu->Mag_factor * mpu->MagCalibX * mpu->MagX_calibscale - mpu->MagX_offset;
 80049fc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8004a00:	ee07 3a10 	vmov	s14, r3
 8004a04:	ee66 6a86 	vmul.f32	s13, s13, s12
 8004a08:	f9b4 3054 	ldrsh.w	r3, [r4, #84]	; 0x54
 8004a0c:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8004a10:	ee07 3a90 	vmov	s15, r3
        if(mpu->calib_done==1)
 8004a14:	d127      	bne.n	8004a66 <MPU9250_readMag+0xf4>
        	mpu->MagX = (float) mpu->MagX_raw * mpu->Mag_factor * mpu->MagCalibX * mpu->MagX_calibscale - mpu->MagX_offset;
 8004a16:	edd4 5a1f 	vldr	s11, [r4, #124]	; 0x7c
 8004a1a:	ed94 4a19 	vldr	s8, [r4, #100]	; 0x64
        	mpu->MagY = (float) mpu->MagY_raw * mpu->Mag_factor * mpu->MagCalibY * mpu->MagY_calibscale - mpu->MagY_offset;
 8004a1e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
        	mpu->MagX = (float) mpu->MagX_raw * mpu->Mag_factor * mpu->MagCalibX * mpu->MagX_calibscale - mpu->MagX_offset;
 8004a22:	eed6 5a84 	vfnms.f32	s11, s13, s8
        	mpu->MagY = (float) mpu->MagY_raw * mpu->Mag_factor * mpu->MagCalibY * mpu->MagY_calibscale - mpu->MagY_offset;
 8004a26:	ee27 7a06 	vmul.f32	s14, s14, s12
        	mpu->MagX = (float) mpu->MagX_raw * mpu->Mag_factor * mpu->MagCalibX * mpu->MagX_calibscale - mpu->MagX_offset;
 8004a2a:	edc4 5a1c 	vstr	s11, [r4, #112]	; 0x70
        	mpu->MagY = (float) mpu->MagY_raw * mpu->Mag_factor * mpu->MagCalibY * mpu->MagY_calibscale - mpu->MagY_offset;
 8004a2e:	ee27 7a24 	vmul.f32	s14, s14, s9
 8004a32:	edd4 6a20 	vldr	s13, [r4, #128]	; 0x80
 8004a36:	edd4 5a1a 	vldr	s11, [r4, #104]	; 0x68
        	mpu->MagZ = (float) mpu->MagZ_raw * mpu->Mag_factor * mpu->MagCalibZ * mpu->MagZ_calibscale - mpu->MagZ_offset;
 8004a3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        	mpu->MagY = (float) mpu->MagY_raw * mpu->Mag_factor * mpu->MagCalibY * mpu->MagY_calibscale - mpu->MagY_offset;
 8004a3e:	eed7 6a25 	vfnms.f32	s13, s14, s11
        	mpu->MagZ = (float) mpu->MagZ_raw * mpu->Mag_factor * mpu->MagCalibZ * mpu->MagZ_calibscale - mpu->MagZ_offset;
 8004a42:	ee67 7a86 	vmul.f32	s15, s15, s12
        	mpu->MagY = (float) mpu->MagY_raw * mpu->Mag_factor * mpu->MagCalibY * mpu->MagY_calibscale - mpu->MagY_offset;
 8004a46:	edc4 6a1d 	vstr	s13, [r4, #116]	; 0x74
        	mpu->MagZ = (float) mpu->MagZ_raw * mpu->Mag_factor * mpu->MagCalibZ * mpu->MagZ_calibscale - mpu->MagZ_offset;
 8004a4a:	ee67 7a85 	vmul.f32	s15, s15, s10
 8004a4e:	ed94 7a21 	vldr	s14, [r4, #132]	; 0x84
 8004a52:	edd4 6a1b 	vldr	s13, [r4, #108]	; 0x6c
 8004a56:	ee97 7aa6 	vfnms.f32	s14, s15, s13
 8004a5a:	eef0 7a47 	vmov.f32	s15, s14
        	mpu->MagZ = (float) mpu->MagZ_raw * mpu->Mag_factor * mpu->MagCalibZ;
 8004a5e:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
}
 8004a62:	b007      	add	sp, #28
 8004a64:	bd30      	pop	{r4, r5, pc}
        	mpu->MagY = (float) mpu->MagY_raw * mpu->Mag_factor * mpu->MagCalibY;
 8004a66:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
        	mpu->MagZ = (float) mpu->MagZ_raw * mpu->Mag_factor * mpu->MagCalibZ;
 8004a6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        	mpu->MagY = (float) mpu->MagY_raw * mpu->Mag_factor * mpu->MagCalibY;
 8004a6e:	ee27 7a06 	vmul.f32	s14, s14, s12
        	mpu->MagZ = (float) mpu->MagZ_raw * mpu->Mag_factor * mpu->MagCalibZ;
 8004a72:	ee67 7a86 	vmul.f32	s15, s15, s12
        	mpu->MagY = (float) mpu->MagY_raw * mpu->Mag_factor * mpu->MagCalibY;
 8004a76:	ee27 7a24 	vmul.f32	s14, s14, s9
        	mpu->MagX = (float) mpu->MagX_raw * mpu->Mag_factor * mpu->MagCalibX;
 8004a7a:	edc4 6a1c 	vstr	s13, [r4, #112]	; 0x70
        	mpu->MagY = (float) mpu->MagY_raw * mpu->Mag_factor * mpu->MagCalibY;
 8004a7e:	ed84 7a1d 	vstr	s14, [r4, #116]	; 0x74
        	mpu->MagZ = (float) mpu->MagZ_raw * mpu->Mag_factor * mpu->MagCalibZ;
 8004a82:	ee67 7a85 	vmul.f32	s15, s15, s10
 8004a86:	e7ea      	b.n	8004a5e <MPU9250_readMag+0xec>

08004a88 <MPU9250_read>:
{
 8004a88:	b538      	push	{r3, r4, r5, lr}
 8004a8a:	460c      	mov	r4, r1
 8004a8c:	4605      	mov	r5, r0
    MPU9250_readGyro(hi2c, mpu);
 8004a8e:	f7ff feea 	bl	8004866 <MPU9250_readGyro>
    MPU9250_readAcc(hi2c, mpu);
 8004a92:	4621      	mov	r1, r4
 8004a94:	4628      	mov	r0, r5
 8004a96:	f7ff ff29 	bl	80048ec <MPU9250_readAcc>
    MPU9250_readMag(hi2c, mpu);
 8004a9a:	4628      	mov	r0, r5
 8004a9c:	4621      	mov	r1, r4
 8004a9e:	f7ff ff68 	bl	8004972 <MPU9250_readMag>
    MPU9250_Madgwick(mpu);
 8004aa2:	4620      	mov	r0, r4
}
 8004aa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    MPU9250_Madgwick(mpu);
 8004aa8:	f7ff bc26 	b.w	80042f8 <MPU9250_Madgwick>

08004aac <Magnet_Calib>:
{
 8004aac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int32_t mag_max[3] = {-32767, -32767, -32767};
 8004ab0:	4d4e      	ldr	r5, [pc, #312]	; (8004bec <Magnet_Calib+0x140>)
	int32_t mag_min[3] = {32767, 32767, 32767};
 8004ab2:	f647 78ff 	movw	r8, #32767	; 0x7fff
{
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	460c      	mov	r4, r1
 8004aba:	f44f 7bfa 	mov.w	fp, #500	; 0x1f4
	int32_t mag_min[3] = {32767, 32767, 32767};
 8004abe:	46c1      	mov	r9, r8
 8004ac0:	46c2      	mov	sl, r8
	int32_t mag_max[3] = {-32767, -32767, -32767};
 8004ac2:	462e      	mov	r6, r5
 8004ac4:	462f      	mov	r7, r5
		MPU9250_readMag(hi2c, mpu);
 8004ac6:	4610      	mov	r0, r2
 8004ac8:	4621      	mov	r1, r4
 8004aca:	9201      	str	r2, [sp, #4]
 8004acc:	f7ff ff51 	bl	8004972 <MPU9250_readMag>
		if(mpu->MagX_raw>mag_max[0])
 8004ad0:	f9b4 0050 	ldrsh.w	r0, [r4, #80]	; 0x50
		if(mpu->MagY_raw>mag_max[1])
 8004ad4:	f9b4 1052 	ldrsh.w	r1, [r4, #82]	; 0x52
		if(mpu->MagZ_raw>mag_max[2])
 8004ad8:	f9b4 3054 	ldrsh.w	r3, [r4, #84]	; 0x54
 8004adc:	4287      	cmp	r7, r0
 8004ade:	bfb8      	it	lt
 8004ae0:	4607      	movlt	r7, r0
 8004ae2:	428e      	cmp	r6, r1
 8004ae4:	bfb8      	it	lt
 8004ae6:	460e      	movlt	r6, r1
 8004ae8:	429d      	cmp	r5, r3
 8004aea:	bfb8      	it	lt
 8004aec:	461d      	movlt	r5, r3
 8004aee:	4582      	cmp	sl, r0
 8004af0:	bfa8      	it	ge
 8004af2:	4682      	movge	sl, r0
 8004af4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004af8:	4589      	cmp	r9, r1
 8004afa:	bfa8      	it	ge
 8004afc:	4689      	movge	r9, r1
		HAL_Delay(12);
 8004afe:	200c      	movs	r0, #12
 8004b00:	4598      	cmp	r8, r3
 8004b02:	fa1f fb8b 	uxth.w	fp, fp
 8004b06:	bfa8      	it	ge
 8004b08:	4698      	movge	r8, r3
 8004b0a:	f7fc fa0d 	bl	8000f28 <HAL_Delay>
	for(i = 0; i<sample_count; i++)
 8004b0e:	9a01      	ldr	r2, [sp, #4]
 8004b10:	f1bb 0f00 	cmp.w	fp, #0
 8004b14:	d1d7      	bne.n	8004ac6 <Magnet_Calib+0x1a>
	mag_bias[0] = (mag_max[0] + mag_min[0])/2;
 8004b16:	2202      	movs	r2, #2
 8004b18:	eb0a 0307 	add.w	r3, sl, r7
 8004b1c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004b20:	ee07 3a10 	vmov	s14, r3
	mpu->MagX_offset = mag_bias[0] * mpu->Mag_factor * mpu->MagCalibX;
 8004b24:	edd4 6a03 	vldr	s13, [r4, #12]
 8004b28:	edd4 7a16 	vldr	s15, [r4, #88]	; 0x58
 8004b2c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	mag_bias[1] = (mag_max[1] + mag_min[1])/2;
 8004b30:	eb09 0306 	add.w	r3, r9, r6
	mpu->MagX_offset = mag_bias[0] * mpu->Mag_factor * mpu->MagCalibX;
 8004b34:	ee27 7a26 	vmul.f32	s14, s14, s13
	mag_bias[1] = (mag_max[1] + mag_min[1])/2;
 8004b38:	fb93 f3f2 	sdiv	r3, r3, r2
	mpu->MagX_offset = mag_bias[0] * mpu->Mag_factor * mpu->MagCalibX;
 8004b3c:	ee27 7a27 	vmul.f32	s14, s14, s15
	mpu->MagY_offset = mag_bias[1] * mpu->Mag_factor * mpu->MagCalibY;
 8004b40:	edd4 7a17 	vldr	s15, [r4, #92]	; 0x5c
	mpu->MagX_offset = mag_bias[0] * mpu->Mag_factor * mpu->MagCalibX;
 8004b44:	ed84 7a1f 	vstr	s14, [r4, #124]	; 0x7c
	mag_bias[1] = (mag_max[1] + mag_min[1])/2;
 8004b48:	ee07 3a10 	vmov	s14, r3
	mpu->MagY_offset = mag_bias[1] * mpu->Mag_factor * mpu->MagCalibY;
 8004b4c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	mag_bias[2] = (mag_max[2] + mag_min[2])/2;
 8004b50:	eb08 0305 	add.w	r3, r8, r5
	mpu->MagY_offset = mag_bias[1] * mpu->Mag_factor * mpu->MagCalibY;
 8004b54:	ee27 7a26 	vmul.f32	s14, s14, s13
	mag_bias[2] = (mag_max[2] + mag_min[2])/2;
 8004b58:	fb93 f3f2 	sdiv	r3, r3, r2
	mpu->MagY_offset = mag_bias[1] * mpu->Mag_factor * mpu->MagCalibY;
 8004b5c:	ee27 7a27 	vmul.f32	s14, s14, s15
	mag_bias[2] = (mag_max[2] + mag_min[2])/2;
 8004b60:	ee07 3a90 	vmov	s15, r3
	mpu->MagZ_offset = mag_bias[2] * mpu->Mag_factor * mpu->MagCalibZ;
 8004b64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	mpu->MagY_offset = mag_bias[1] * mpu->Mag_factor * mpu->MagCalibY;
 8004b68:	ed84 7a20 	vstr	s14, [r4, #128]	; 0x80
	mpu->MagZ_offset = mag_bias[2] * mpu->Mag_factor * mpu->MagCalibZ;
 8004b6c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004b70:	ed94 7a18 	vldr	s14, [r4, #96]	; 0x60
	mag_scale[0]  = (mag_max[0] - mag_min[0])/2;
 8004b74:	eba7 070a 	sub.w	r7, r7, sl
	mpu->MagZ_offset = mag_bias[2] * mpu->Mag_factor * mpu->MagCalibZ;
 8004b78:	ee67 7a87 	vmul.f32	s15, s15, s14
	mag_scale[0]  = (mag_max[0] - mag_min[0])/2;
 8004b7c:	fb97 f7f2 	sdiv	r7, r7, r2
	mag_scale[1]  = (mag_max[1] - mag_min[1])/2;
 8004b80:	eba6 0609 	sub.w	r6, r6, r9
 8004b84:	fb96 f6f2 	sdiv	r6, r6, r2
	avg_rad = mag_scale[0]+mag_scale[1]+mag_scale[2];
 8004b88:	19bb      	adds	r3, r7, r6
	mag_scale[2]  = (mag_max[2] - mag_min[2])/2;
 8004b8a:	eba5 0508 	sub.w	r5, r5, r8
 8004b8e:	fb95 f5f2 	sdiv	r5, r5, r2
	avg_rad = mag_scale[0]+mag_scale[1]+mag_scale[2];
 8004b92:	442b      	add	r3, r5
	mpu->MagZ_offset = mag_bias[2] * mpu->Mag_factor * mpu->MagCalibZ;
 8004b94:	edc4 7a21 	vstr	s15, [r4, #132]	; 0x84
	avg_rad = mag_scale[0]+mag_scale[1]+mag_scale[2];
 8004b98:	ee07 3a90 	vmov	s15, r3
 8004b9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	avg_rad/=3.0;
 8004ba0:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8004ba4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004ba8:	4b11      	ldr	r3, [pc, #68]	; (8004bf0 <Magnet_Calib+0x144>)
	mpu->MagX_calibscale = avg_rad/((float)mag_scale[0]);
 8004baa:	ee07 7a90 	vmov	s15, r7
 8004bae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	avg_rad/=3.0;
 8004bb2:	ed83 7a00 	vstr	s14, [r3]
	mpu->MagX_calibscale = avg_rad/((float)mag_scale[0]);
 8004bb6:	eec7 6a27 	vdiv.f32	s13, s14, s15
	mpu->calib_done = 1;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	mpu->MagY_calibscale = avg_rad/((float)mag_scale[1]);
 8004bc0:	ee07 6a90 	vmov	s15, r6
 8004bc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	mpu->MagX_calibscale = avg_rad/((float)mag_scale[0]);
 8004bc8:	edc4 6a19 	vstr	s13, [r4, #100]	; 0x64
	mpu->MagY_calibscale = avg_rad/((float)mag_scale[1]);
 8004bcc:	eec7 6a27 	vdiv.f32	s13, s14, s15
	mpu->MagZ_calibscale = avg_rad/((float)mag_scale[2]);
 8004bd0:	ee07 5a90 	vmov	s15, r5
 8004bd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	mpu->MagY_calibscale = avg_rad/((float)mag_scale[1]);
 8004bd8:	edc4 6a1a 	vstr	s13, [r4, #104]	; 0x68
	mpu->MagZ_calibscale = avg_rad/((float)mag_scale[2]);
 8004bdc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004be0:	edc4 6a1b 	vstr	s13, [r4, #108]	; 0x6c
}
 8004be4:	b003      	add	sp, #12
 8004be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bea:	bf00      	nop
 8004bec:	ffff8001 	.word	0xffff8001
 8004bf0:	200000d4 	.word	0x200000d4

08004bf4 <MPU9250_calib>:
{
 8004bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bf8:	b08b      	sub	sp, #44	; 0x2c
    temp = 0x01;
 8004bfa:	ae0a      	add	r6, sp, #40	; 0x28
 8004bfc:	2701      	movs	r7, #1
{
 8004bfe:	4605      	mov	r5, r0
 8004c00:	468a      	mov	sl, r1
    MPU9250_Reset(hi2c, mpu);
 8004c02:	f7ff fe12 	bl	800482a <MPU9250_Reset>
    temp = 0x01;
 8004c06:	f806 7d0d 	strb.w	r7, [r6, #-13]!
    i2cWrite(hi2c, MPU9250_ADDRESS, PWR_MGMT_1, &temp, 1);
 8004c0a:	226b      	movs	r2, #107	; 0x6b
 8004c0c:	4633      	mov	r3, r6
 8004c0e:	9700      	str	r7, [sp, #0]
 8004c10:	21d0      	movs	r1, #208	; 0xd0
 8004c12:	4628      	mov	r0, r5
    temp = 0x00;
 8004c14:	2400      	movs	r4, #0
    i2cWrite(hi2c, MPU9250_ADDRESS, PWR_MGMT_1, &temp, 1);
 8004c16:	f7ff fdfb 	bl	8004810 <i2cWrite>
    i2cWrite(hi2c, MPU9250_ADDRESS, PWR_MGMT_2, &temp, 1);
 8004c1a:	4633      	mov	r3, r6
 8004c1c:	9700      	str	r7, [sp, #0]
 8004c1e:	226c      	movs	r2, #108	; 0x6c
 8004c20:	21d0      	movs	r1, #208	; 0xd0
 8004c22:	4628      	mov	r0, r5
    temp = 0x00;
 8004c24:	f88d 401b 	strb.w	r4, [sp, #27]
    i2cWrite(hi2c, MPU9250_ADDRESS, PWR_MGMT_2, &temp, 1);
 8004c28:	f7ff fdf2 	bl	8004810 <i2cWrite>
    i2cWrite(hi2c, MPU9250_ADDRESS, INT_ENABLE, &temp, 1);
 8004c2c:	4633      	mov	r3, r6
 8004c2e:	9700      	str	r7, [sp, #0]
 8004c30:	2238      	movs	r2, #56	; 0x38
 8004c32:	21d0      	movs	r1, #208	; 0xd0
 8004c34:	4628      	mov	r0, r5
    temp = 0x00;
 8004c36:	f88d 401b 	strb.w	r4, [sp, #27]
    i2cWrite(hi2c, MPU9250_ADDRESS, INT_ENABLE, &temp, 1);
 8004c3a:	f7ff fde9 	bl	8004810 <i2cWrite>
    i2cWrite(hi2c, MPU9250_ADDRESS, FIFO_EN, &temp, 1);
 8004c3e:	4633      	mov	r3, r6
 8004c40:	9700      	str	r7, [sp, #0]
 8004c42:	2223      	movs	r2, #35	; 0x23
 8004c44:	21d0      	movs	r1, #208	; 0xd0
 8004c46:	4628      	mov	r0, r5
    temp = 0x00;
 8004c48:	f88d 401b 	strb.w	r4, [sp, #27]
    i2cWrite(hi2c, MPU9250_ADDRESS, FIFO_EN, &temp, 1);
 8004c4c:	f7ff fde0 	bl	8004810 <i2cWrite>
    i2cWrite(hi2c, MPU9250_ADDRESS, PWR_MGMT_1, &temp, 1);
 8004c50:	4633      	mov	r3, r6
 8004c52:	9700      	str	r7, [sp, #0]
 8004c54:	226b      	movs	r2, #107	; 0x6b
 8004c56:	21d0      	movs	r1, #208	; 0xd0
 8004c58:	4628      	mov	r0, r5
    temp = 0x00;
 8004c5a:	f88d 401b 	strb.w	r4, [sp, #27]
    i2cWrite(hi2c, MPU9250_ADDRESS, PWR_MGMT_1, &temp, 1);
 8004c5e:	f7ff fdd7 	bl	8004810 <i2cWrite>
    i2cWrite(hi2c, MPU9250_ADDRESS, I2C_MST_CTRL, &temp, 1);
 8004c62:	4633      	mov	r3, r6
 8004c64:	9700      	str	r7, [sp, #0]
 8004c66:	2224      	movs	r2, #36	; 0x24
 8004c68:	21d0      	movs	r1, #208	; 0xd0
 8004c6a:	4628      	mov	r0, r5
    temp = 0x00;
 8004c6c:	f88d 401b 	strb.w	r4, [sp, #27]
    i2cWrite(hi2c, MPU9250_ADDRESS, I2C_MST_CTRL, &temp, 1);
 8004c70:	f7ff fdce 	bl	8004810 <i2cWrite>
    i2cWrite(hi2c, MPU9250_ADDRESS, USER_CTRL, &temp, 1);
 8004c74:	4633      	mov	r3, r6
 8004c76:	9700      	str	r7, [sp, #0]
 8004c78:	226a      	movs	r2, #106	; 0x6a
 8004c7a:	21d0      	movs	r1, #208	; 0xd0
 8004c7c:	4628      	mov	r0, r5
    temp = 0x0C;
 8004c7e:	f04f 0b0c 	mov.w	fp, #12
    temp = 0x00;
 8004c82:	f88d 401b 	strb.w	r4, [sp, #27]
    i2cWrite(hi2c, MPU9250_ADDRESS, USER_CTRL, &temp, 1);
 8004c86:	f7ff fdc3 	bl	8004810 <i2cWrite>
    i2cWrite(hi2c, MPU9250_ADDRESS, USER_CTRL, &temp, 1);
 8004c8a:	4633      	mov	r3, r6
 8004c8c:	226a      	movs	r2, #106	; 0x6a
 8004c8e:	21d0      	movs	r1, #208	; 0xd0
 8004c90:	9700      	str	r7, [sp, #0]
 8004c92:	4628      	mov	r0, r5
    temp = 0x0C;
 8004c94:	f88d b01b 	strb.w	fp, [sp, #27]
    i2cWrite(hi2c, MPU9250_ADDRESS, USER_CTRL, &temp, 1);
 8004c98:	f7ff fdba 	bl	8004810 <i2cWrite>
    HAL_Delay(10);
 8004c9c:	200a      	movs	r0, #10
 8004c9e:	f7fc f943 	bl	8000f28 <HAL_Delay>
    i2cWrite(hi2c, MPU9250_ADDRESS, CONFIG, &temp, 1);
 8004ca2:	4633      	mov	r3, r6
 8004ca4:	9700      	str	r7, [sp, #0]
 8004ca6:	221a      	movs	r2, #26
 8004ca8:	21d0      	movs	r1, #208	; 0xd0
 8004caa:	4628      	mov	r0, r5
    temp = 0x01;
 8004cac:	f88d 701b 	strb.w	r7, [sp, #27]
    i2cWrite(hi2c, MPU9250_ADDRESS, CONFIG, &temp, 1);
 8004cb0:	f7ff fdae 	bl	8004810 <i2cWrite>
    i2cWrite(hi2c, MPU9250_ADDRESS, SMPLRT_DIV, &temp, 1);
 8004cb4:	4633      	mov	r3, r6
 8004cb6:	9700      	str	r7, [sp, #0]
 8004cb8:	2219      	movs	r2, #25
 8004cba:	21d0      	movs	r1, #208	; 0xd0
 8004cbc:	4628      	mov	r0, r5
    temp = 0x00;
 8004cbe:	f88d 401b 	strb.w	r4, [sp, #27]
    i2cWrite(hi2c, MPU9250_ADDRESS, SMPLRT_DIV, &temp, 1);
 8004cc2:	f7ff fda5 	bl	8004810 <i2cWrite>
    i2cWrite(hi2c, MPU9250_ADDRESS, GYRO_CONFIG, &temp, 1);
 8004cc6:	4633      	mov	r3, r6
 8004cc8:	9700      	str	r7, [sp, #0]
 8004cca:	221b      	movs	r2, #27
 8004ccc:	21d0      	movs	r1, #208	; 0xd0
 8004cce:	4628      	mov	r0, r5
    temp = 0x00;
 8004cd0:	f88d 401b 	strb.w	r4, [sp, #27]
    i2cWrite(hi2c, MPU9250_ADDRESS, GYRO_CONFIG, &temp, 1);
 8004cd4:	f7ff fd9c 	bl	8004810 <i2cWrite>
    i2cWrite(hi2c, MPU9250_ADDRESS, ACCEL_CONFIG, &temp, 1);
 8004cd8:	4633      	mov	r3, r6
 8004cda:	9700      	str	r7, [sp, #0]
 8004cdc:	221c      	movs	r2, #28
 8004cde:	21d0      	movs	r1, #208	; 0xd0
 8004ce0:	4628      	mov	r0, r5
    temp = 0x00;
 8004ce2:	f88d 401b 	strb.w	r4, [sp, #27]
    i2cWrite(hi2c, MPU9250_ADDRESS, ACCEL_CONFIG, &temp, 1);
 8004ce6:	f7ff fd93 	bl	8004810 <i2cWrite>
    temp = 0x40;
 8004cea:	2340      	movs	r3, #64	; 0x40
 8004cec:	f88d 301b 	strb.w	r3, [sp, #27]
    i2cWrite(hi2c, MPU9250_ADDRESS, USER_CTRL, &temp, 1);
 8004cf0:	9700      	str	r7, [sp, #0]
 8004cf2:	4633      	mov	r3, r6
 8004cf4:	226a      	movs	r2, #106	; 0x6a
 8004cf6:	21d0      	movs	r1, #208	; 0xd0
 8004cf8:	4628      	mov	r0, r5
 8004cfa:	f7ff fd89 	bl	8004810 <i2cWrite>
    temp = 0x78;
 8004cfe:	2378      	movs	r3, #120	; 0x78
    i2cWrite(hi2c, MPU9250_ADDRESS, FIFO_EN, &temp, 1);
 8004d00:	2223      	movs	r2, #35	; 0x23
 8004d02:	21d0      	movs	r1, #208	; 0xd0
    temp = 0x78;
 8004d04:	f88d 301b 	strb.w	r3, [sp, #27]
    i2cWrite(hi2c, MPU9250_ADDRESS, FIFO_EN, &temp, 1);
 8004d08:	9700      	str	r7, [sp, #0]
 8004d0a:	4633      	mov	r3, r6
 8004d0c:	4628      	mov	r0, r5
 8004d0e:	f7ff fd7f 	bl	8004810 <i2cWrite>
    HAL_Delay(40);
 8004d12:	2028      	movs	r0, #40	; 0x28
 8004d14:	f7fc f908 	bl	8000f28 <HAL_Delay>
    i2cWrite(hi2c, MPU9250_ADDRESS, FIFO_EN, &temp, 1);
 8004d18:	4633      	mov	r3, r6
 8004d1a:	9700      	str	r7, [sp, #0]
 8004d1c:	2223      	movs	r2, #35	; 0x23
 8004d1e:	21d0      	movs	r1, #208	; 0xd0
 8004d20:	4628      	mov	r0, r5
    temp = 0x00;
 8004d22:	f88d 401b 	strb.w	r4, [sp, #27]
    i2cRead(hi2c, MPU9250_ADDRESS, FIFO_COUNTH, &data[0], 2);
 8004d26:	f10d 091c 	add.w	r9, sp, #28
    i2cWrite(hi2c, MPU9250_ADDRESS, FIFO_EN, &temp, 1);
 8004d2a:	f7ff fd71 	bl	8004810 <i2cWrite>
    i2cRead(hi2c, MPU9250_ADDRESS, FIFO_COUNTH, &data[0], 2);
 8004d2e:	2302      	movs	r3, #2
 8004d30:	9300      	str	r3, [sp, #0]
 8004d32:	2272      	movs	r2, #114	; 0x72
 8004d34:	464b      	mov	r3, r9
 8004d36:	21d0      	movs	r1, #208	; 0xd0
 8004d38:	4628      	mov	r0, r5
 8004d3a:	f7ff fd87 	bl	800484c <i2cRead>
    fifo_count = ((uint16_t) data[0] << 8) | data[1];
 8004d3e:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8004d42:	f89d 601d 	ldrb.w	r6, [sp, #29]
    { 0, 0, 0 }, accel_bias[3] =
 8004d46:	9402      	str	r4, [sp, #8]
 8004d48:	4627      	mov	r7, r4
 8004d4a:	46a0      	mov	r8, r4
    int32_t gyro_bias[3] =
 8004d4c:	9405      	str	r4, [sp, #20]
 8004d4e:	9404      	str	r4, [sp, #16]
 8004d50:	9403      	str	r4, [sp, #12]
    packet_count = fifo_count / 12; // How many sets of full gyro and accelerometer data for averaging
 8004d52:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
 8004d56:	fbb6 f6fb 	udiv	r6, r6, fp
    for (ii = 0; ii < packet_count; ii++)
 8004d5a:	b2a3      	uxth	r3, r4
 8004d5c:	429e      	cmp	r6, r3
 8004d5e:	d87d      	bhi.n	8004e5c <MPU9250_calib+0x268>
    accel_bias[2] /= (int32_t) packet_count;
 8004d60:	9b02      	ldr	r3, [sp, #8]
 8004d62:	fb93 f1f6 	sdiv	r1, r3, r6
    gyro_bias[0] /= (int32_t) packet_count;
 8004d66:	9b03      	ldr	r3, [sp, #12]
 8004d68:	fb93 f2f6 	sdiv	r2, r3, r6
    mpu->GyroX_offset = (float) gyro_bias[0] / (float) gyrosensitivity; // construct gyro bias in deg/s for later manual subtraction
 8004d6c:	ee07 2a90 	vmov	s15, r2
    accel_bias[0] /= (int32_t) packet_count;
 8004d70:	fb98 f8f6 	sdiv	r8, r8, r6
    mpu->GyroX_offset = (float) gyro_bias[0] / (float) gyrosensitivity; // construct gyro bias in deg/s for later manual subtraction
 8004d74:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8004ee0 <MPU9250_calib+0x2ec>
    gyro_bias[1] /= (int32_t) packet_count;
 8004d78:	9b04      	ldr	r3, [sp, #16]
 8004d7a:	fb93 f3f6 	sdiv	r3, r3, r6
    mpu->GyroX_offset = (float) gyro_bias[0] / (float) gyrosensitivity; // construct gyro bias in deg/s for later manual subtraction
 8004d7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    gyro_bias[2] /= (int32_t) packet_count;
 8004d82:	9805      	ldr	r0, [sp, #20]
    accel_bias[1] /= (int32_t) packet_count;
 8004d84:	fb97 f7f6 	sdiv	r7, r7, r6
    mpu->GyroX_offset = (float) gyro_bias[0] / (float) gyrosensitivity; // construct gyro bias in deg/s for later manual subtraction
 8004d88:	eec7 6a87 	vdiv.f32	s13, s15, s14
    gyro_bias[2] /= (int32_t) packet_count;
 8004d8c:	fb90 f6f6 	sdiv	r6, r0, r6
    if (accel_bias[2] > 0L)
 8004d90:	2900      	cmp	r1, #0
        accel_bias[2] -= (int32_t) accelsensitivity;
 8004d92:	bfcc      	ite	gt
 8004d94:	f5a1 4480 	subgt.w	r4, r1, #16384	; 0x4000
        accel_bias[2] += (int32_t) accelsensitivity;
 8004d98:	f501 4480 	addle.w	r4, r1, #16384	; 0x4000
    data[0] = (-gyro_bias[0] / 4 >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 8004d9c:	2104      	movs	r1, #4
 8004d9e:	fb92 f0f1 	sdiv	r0, r2, r1
 8004da2:	4240      	negs	r0, r0
 8004da4:	ea4f 2e20 	mov.w	lr, r0, asr #8
    data[1] = (-gyro_bias[0] / 4) & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
 8004da8:	f88d 001d 	strb.w	r0, [sp, #29]
    data[2] = (-gyro_bias[1] / 4 >> 8) & 0xFF;
 8004dac:	fb93 f0f1 	sdiv	r0, r3, r1
    data[4] = (-gyro_bias[2] / 4 >> 8) & 0xFF;
 8004db0:	fb96 f1f1 	sdiv	r1, r6, r1
    data[2] = (-gyro_bias[1] / 4 >> 8) & 0xFF;
 8004db4:	4240      	negs	r0, r0
    data[4] = (-gyro_bias[2] / 4 >> 8) & 0xFF;
 8004db6:	4249      	negs	r1, r1
    mpu->GyroY_offset = (float) gyro_bias[1] / (float) gyrosensitivity;
 8004db8:	ee07 3a90 	vmov	s15, r3
 8004dbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    mpu->GyroX_offset = (float) gyro_bias[0] / (float) gyrosensitivity; // construct gyro bias in deg/s for later manual subtraction
 8004dc0:	edca 6a11 	vstr	s13, [sl, #68]	; 0x44
    mpu->GyroY_offset = (float) gyro_bias[1] / (float) gyrosensitivity;
 8004dc4:	eec7 6a87 	vdiv.f32	s13, s15, s14
    data[0] = (-gyro_bias[0] / 4 >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 8004dc8:	f88d e01c 	strb.w	lr, [sp, #28]
    data[3] = (-gyro_bias[1] / 4) & 0xFF;
 8004dcc:	f88d 001f 	strb.w	r0, [sp, #31]
    data[2] = (-gyro_bias[1] / 4 >> 8) & 0xFF;
 8004dd0:	ea4f 2e20 	mov.w	lr, r0, asr #8
    data[4] = (-gyro_bias[2] / 4 >> 8) & 0xFF;
 8004dd4:	1208      	asrs	r0, r1, #8
 8004dd6:	f88d 0020 	strb.w	r0, [sp, #32]
    data[5] = (-gyro_bias[2] / 4) & 0xFF;
 8004dda:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
    i2cRead(hi2c, MPU9250_ADDRESS, XA_OFFSET_H, &data[0], 2);
 8004dde:	464b      	mov	r3, r9
 8004de0:	4628      	mov	r0, r5
 8004de2:	2277      	movs	r2, #119	; 0x77
 8004de4:	21d0      	movs	r1, #208	; 0xd0
    data[2] = (-gyro_bias[1] / 4 >> 8) & 0xFF;
 8004de6:	f88d e01e 	strb.w	lr, [sp, #30]
    mpu->GyroZ_offset = (float) gyro_bias[2] / (float) gyrosensitivity;
 8004dea:	ee07 6a90 	vmov	s15, r6
 8004dee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    mpu->GyroY_offset = (float) gyro_bias[1] / (float) gyrosensitivity;
 8004df2:	edca 6a12 	vstr	s13, [sl, #72]	; 0x48
    mpu->GyroZ_offset = (float) gyro_bias[2] / (float) gyrosensitivity;
 8004df6:	eec7 6a87 	vdiv.f32	s13, s15, s14
    i2cRead(hi2c, MPU9250_ADDRESS, XA_OFFSET_H, &data[0], 2);
 8004dfa:	2602      	movs	r6, #2
 8004dfc:	9600      	str	r6, [sp, #0]
    mpu->GyroZ_offset = (float) gyro_bias[2] / (float) gyrosensitivity;
 8004dfe:	edca 6a13 	vstr	s13, [sl, #76]	; 0x4c
    i2cRead(hi2c, MPU9250_ADDRESS, XA_OFFSET_H, &data[0], 2);
 8004e02:	f7ff fd23 	bl	800484c <i2cRead>
    i2cRead(hi2c, MPU9250_ADDRESS, YA_OFFSET_H, &data[0], 2);
 8004e06:	464b      	mov	r3, r9
 8004e08:	4628      	mov	r0, r5
 8004e0a:	9600      	str	r6, [sp, #0]
 8004e0c:	227a      	movs	r2, #122	; 0x7a
 8004e0e:	21d0      	movs	r1, #208	; 0xd0
 8004e10:	f7ff fd1c 	bl	800484c <i2cRead>
    i2cRead(hi2c, MPU9250_ADDRESS, ZA_OFFSET_H, &data[0], 2);
 8004e14:	9600      	str	r6, [sp, #0]
 8004e16:	464b      	mov	r3, r9
 8004e18:	227d      	movs	r2, #125	; 0x7d
 8004e1a:	21d0      	movs	r1, #208	; 0xd0
 8004e1c:	4628      	mov	r0, r5
 8004e1e:	f7ff fd15 	bl	800484c <i2cRead>
    mpu->AccX_offset = (float) accel_bias[0] / (float) accelsensitivity;
 8004e22:	ee07 8a90 	vmov	s15, r8
 8004e26:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8004ee4 <MPU9250_calib+0x2f0>
 8004e2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e32:	edca 7a06 	vstr	s15, [sl, #24]
    mpu->AccY_offset = (float) accel_bias[1] / (float) accelsensitivity;
 8004e36:	ee07 7a90 	vmov	s15, r7
 8004e3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e42:	edca 7a07 	vstr	s15, [sl, #28]
    mpu->AccZ_offset = (float) accel_bias[2] / (float) accelsensitivity;
 8004e46:	ee07 4a90 	vmov	s15, r4
 8004e4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e52:	edca 7a08 	vstr	s15, [sl, #32]
}
 8004e56:	b00b      	add	sp, #44	; 0x2c
 8004e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        i2cRead(hi2c, MPU9250_ADDRESS, FIFO_R_W, &data[0], 12);
 8004e5c:	464b      	mov	r3, r9
 8004e5e:	2274      	movs	r2, #116	; 0x74
 8004e60:	f8cd b000 	str.w	fp, [sp]
 8004e64:	21d0      	movs	r1, #208	; 0xd0
 8004e66:	4628      	mov	r0, r5
 8004e68:	f7ff fcf0 	bl	800484c <i2cRead>
        accel_temp[0] = (int16_t) (((int16_t) data[0] << 8) | data[1]);
 8004e6c:	f89d 201c 	ldrb.w	r2, [sp, #28]
 8004e70:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8004e74:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        accel_bias[0] += (int32_t) accel_temp[0];
 8004e78:	fa08 f883 	sxtah	r8, r8, r3
        accel_temp[1] = (int16_t) (((int16_t) data[2] << 8) | data[3]);
 8004e7c:	f89d 201e 	ldrb.w	r2, [sp, #30]
 8004e80:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8004e84:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        accel_bias[1] += (int32_t) accel_temp[1];
 8004e88:	fa07 f783 	sxtah	r7, r7, r3
        accel_temp[2] = (int16_t) (((int16_t) data[4] << 8) | data[5]);
 8004e8c:	f89d 2020 	ldrb.w	r2, [sp, #32]
 8004e90:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 8004e94:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        accel_bias[2] += (int32_t) accel_temp[2];
 8004e98:	9a02      	ldr	r2, [sp, #8]
 8004e9a:	fa02 f383 	sxtah	r3, r2, r3
 8004e9e:	9302      	str	r3, [sp, #8]
        gyro_temp[0] = (int16_t) (((int16_t) data[6] << 8) | data[7]);
 8004ea0:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
 8004ea4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004ea8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        gyro_bias[0] += (int32_t) gyro_temp[0];
 8004eac:	9a03      	ldr	r2, [sp, #12]
 8004eae:	fa02 f383 	sxtah	r3, r2, r3
 8004eb2:	9303      	str	r3, [sp, #12]
        gyro_temp[1] = (int16_t) (((int16_t) data[8] << 8) | data[9]);
 8004eb4:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
 8004eb8:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8004ebc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        gyro_bias[1] += (int32_t) gyro_temp[1];
 8004ec0:	9a04      	ldr	r2, [sp, #16]
 8004ec2:	fa02 f383 	sxtah	r3, r2, r3
 8004ec6:	9304      	str	r3, [sp, #16]
        gyro_temp[2] = (int16_t) (((int16_t) data[10] << 8) | data[11]);
 8004ec8:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 8004ecc:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8004ed0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        gyro_bias[2] += (int32_t) gyro_temp[2];
 8004ed4:	9a05      	ldr	r2, [sp, #20]
 8004ed6:	fa02 f383 	sxtah	r3, r2, r3
 8004eda:	9305      	str	r3, [sp, #20]
 8004edc:	3401      	adds	r4, #1
 8004ede:	e73c      	b.n	8004d5a <MPU9250_calib+0x166>
 8004ee0:	43030000 	.word	0x43030000
 8004ee4:	38800000 	.word	0x38800000

08004ee8 <MPU9250_Init8963>:
{
 8004ee8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    temp = 0x00;
 8004eec:	ac04      	add	r4, sp, #16
 8004eee:	f04f 0800 	mov.w	r8, #0
 8004ef2:	f804 8d05 	strb.w	r8, [r4, #-5]!
    i2cWrite(hi2c, AK8963_ADDRESS, AK8963_CNTL, &temp, 1);
 8004ef6:	2701      	movs	r7, #1
{
 8004ef8:	460e      	mov	r6, r1
    i2cWrite(hi2c, AK8963_ADDRESS, AK8963_CNTL, &temp, 1);
 8004efa:	4623      	mov	r3, r4
 8004efc:	220a      	movs	r2, #10
 8004efe:	2118      	movs	r1, #24
 8004f00:	9700      	str	r7, [sp, #0]
{
 8004f02:	4605      	mov	r5, r0
    i2cWrite(hi2c, AK8963_ADDRESS, AK8963_CNTL, &temp, 1);
 8004f04:	f7ff fc84 	bl	8004810 <i2cWrite>
    HAL_Delay(10);
 8004f08:	200a      	movs	r0, #10
 8004f0a:	f7fc f80d 	bl	8000f28 <HAL_Delay>
    temp = 0x0F;
 8004f0e:	230f      	movs	r3, #15
 8004f10:	f88d 300b 	strb.w	r3, [sp, #11]
    i2cWrite(hi2c, AK8963_ADDRESS, AK8963_CNTL, &temp, 1);
 8004f14:	220a      	movs	r2, #10
 8004f16:	4623      	mov	r3, r4
 8004f18:	2118      	movs	r1, #24
 8004f1a:	4628      	mov	r0, r5
 8004f1c:	9700      	str	r7, [sp, #0]
 8004f1e:	f7ff fc77 	bl	8004810 <i2cWrite>
    HAL_Delay(10);
 8004f22:	200a      	movs	r0, #10
 8004f24:	f7fc f800 	bl	8000f28 <HAL_Delay>
    i2cRead(hi2c, AK8963_ADDRESS, AK8963_ASAX, &rawData[0], 3);
 8004f28:	2303      	movs	r3, #3
 8004f2a:	9300      	str	r3, [sp, #0]
 8004f2c:	4628      	mov	r0, r5
 8004f2e:	ab03      	add	r3, sp, #12
 8004f30:	2210      	movs	r2, #16
 8004f32:	2118      	movs	r1, #24
 8004f34:	f7ff fc8a 	bl	800484c <i2cRead>
    mpu->MagCalibX = (float) (rawData[0] - 128) / 256.0f + 1.0f; // Return x-axis sensitivity adjustment values, etc.
 8004f38:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8004f3c:	eddf 6a24 	vldr	s13, [pc, #144]	; 8004fd0 <MPU9250_Init8963+0xe8>
    i2cWrite(hi2c, AK8963_ADDRESS, AK8963_CNTL, &temp, 1);
 8004f40:	9700      	str	r7, [sp, #0]
    mpu->MagCalibX = (float) (rawData[0] - 128) / 256.0f + 1.0f; // Return x-axis sensitivity adjustment values, etc.
 8004f42:	3b80      	subs	r3, #128	; 0x80
 8004f44:	ee07 3a90 	vmov	s15, r3
    mpu->MagCalibY = (float) (rawData[1] - 128) / 256.0f + 1.0f;
 8004f48:	f89d 300d 	ldrb.w	r3, [sp, #13]
    temp = 0x00;
 8004f4c:	f88d 800b 	strb.w	r8, [sp, #11]
    mpu->MagCalibX = (float) (rawData[0] - 128) / 256.0f + 1.0f; // Return x-axis sensitivity adjustment values, etc.
 8004f50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f54:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8004f58:	eeb0 6a67 	vmov.f32	s12, s15
 8004f5c:	eea7 6a26 	vfma.f32	s12, s14, s13
    mpu->MagCalibY = (float) (rawData[1] - 128) / 256.0f + 1.0f;
 8004f60:	3b80      	subs	r3, #128	; 0x80
    i2cWrite(hi2c, AK8963_ADDRESS, AK8963_CNTL, &temp, 1);
 8004f62:	220a      	movs	r2, #10
    mpu->MagCalibY = (float) (rawData[1] - 128) / 256.0f + 1.0f;
 8004f64:	ee07 3a10 	vmov	s14, r3
    mpu->MagCalibZ = (float) (rawData[2] - 128) / 256.0f + 1.0f;
 8004f68:	f89d 300e 	ldrb.w	r3, [sp, #14]
    mpu->MagCalibX = (float) (rawData[0] - 128) / 256.0f + 1.0f; // Return x-axis sensitivity adjustment values, etc.
 8004f6c:	ed86 6a16 	vstr	s12, [r6, #88]	; 0x58
    mpu->MagCalibY = (float) (rawData[1] - 128) / 256.0f + 1.0f;
 8004f70:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004f74:	eeb0 6a67 	vmov.f32	s12, s15
    mpu->MagCalibZ = (float) (rawData[2] - 128) / 256.0f + 1.0f;
 8004f78:	3b80      	subs	r3, #128	; 0x80
    mpu->MagCalibY = (float) (rawData[1] - 128) / 256.0f + 1.0f;
 8004f7a:	eea7 6a26 	vfma.f32	s12, s14, s13
    i2cWrite(hi2c, AK8963_ADDRESS, AK8963_CNTL, &temp, 1);
 8004f7e:	2118      	movs	r1, #24
 8004f80:	4628      	mov	r0, r5
    mpu->MagCalibZ = (float) (rawData[2] - 128) / 256.0f + 1.0f;
 8004f82:	ee07 3a10 	vmov	s14, r3
 8004f86:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    mpu->MagCalibY = (float) (rawData[1] - 128) / 256.0f + 1.0f;
 8004f8a:	ed86 6a17 	vstr	s12, [r6, #92]	; 0x5c
    mpu->MagCalibZ = (float) (rawData[2] - 128) / 256.0f + 1.0f;
 8004f8e:	eee7 7a26 	vfma.f32	s15, s14, s13
    i2cWrite(hi2c, AK8963_ADDRESS, AK8963_CNTL, &temp, 1);
 8004f92:	4623      	mov	r3, r4
    mpu->MagCalibZ = (float) (rawData[2] - 128) / 256.0f + 1.0f;
 8004f94:	edc6 7a18 	vstr	s15, [r6, #96]	; 0x60
    i2cWrite(hi2c, AK8963_ADDRESS, AK8963_CNTL, &temp, 1);
 8004f98:	f7ff fc3a 	bl	8004810 <i2cWrite>
    HAL_Delay(10);
 8004f9c:	200a      	movs	r0, #10
 8004f9e:	f7fb ffc3 	bl	8000f28 <HAL_Delay>
    temp = (mpu->mscale << 4) | 0x06;
 8004fa2:	78b3      	ldrb	r3, [r6, #2]
    i2cWrite(hi2c, AK8963_ADDRESS, AK8963_CNTL, &temp, 1);
 8004fa4:	9700      	str	r7, [sp, #0]
    temp = (mpu->mscale << 4) | 0x06;
 8004fa6:	011b      	lsls	r3, r3, #4
 8004fa8:	f043 0306 	orr.w	r3, r3, #6
    i2cWrite(hi2c, AK8963_ADDRESS, AK8963_CNTL, &temp, 1);
 8004fac:	220a      	movs	r2, #10
    temp = (mpu->mscale << 4) | 0x06;
 8004fae:	f88d 300b 	strb.w	r3, [sp, #11]
    i2cWrite(hi2c, AK8963_ADDRESS, AK8963_CNTL, &temp, 1);
 8004fb2:	2118      	movs	r1, #24
 8004fb4:	4623      	mov	r3, r4
 8004fb6:	4628      	mov	r0, r5
 8004fb8:	f7ff fc2a 	bl	8004810 <i2cWrite>
    HAL_Delay(10);
 8004fbc:	200a      	movs	r0, #10
 8004fbe:	f7fb ffb3 	bl	8000f28 <HAL_Delay>
    Magnet_Calib(hi2c,mpu);
 8004fc2:	4631      	mov	r1, r6
 8004fc4:	4628      	mov	r0, r5
 8004fc6:	f7ff fd71 	bl	8004aac <Magnet_Calib>
}
 8004fca:	b004      	add	sp, #16
 8004fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fd0:	3b800000 	.word	0x3b800000

08004fd4 <MPU9250_SetParam>:
{
 8004fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fd6:	b085      	sub	sp, #20
    temp = 0x00;
 8004fd8:	ae04      	add	r6, sp, #16
 8004fda:	2300      	movs	r3, #0
 8004fdc:	f806 3d01 	strb.w	r3, [r6, #-1]!
    i2cWrite(hi2c, MPU9250_ADDRESS, PWR_MGMT_1, &temp, 1);
 8004fe0:	2501      	movs	r5, #1
{
 8004fe2:	460c      	mov	r4, r1
    i2cWrite(hi2c, MPU9250_ADDRESS, PWR_MGMT_1, &temp, 1);
 8004fe4:	4633      	mov	r3, r6
 8004fe6:	226b      	movs	r2, #107	; 0x6b
 8004fe8:	21d0      	movs	r1, #208	; 0xd0
 8004fea:	9500      	str	r5, [sp, #0]
{
 8004fec:	4607      	mov	r7, r0
    i2cWrite(hi2c, MPU9250_ADDRESS, PWR_MGMT_1, &temp, 1);
 8004fee:	f7ff fc0f 	bl	8004810 <i2cWrite>
    HAL_Delay(100);
 8004ff2:	2064      	movs	r0, #100	; 0x64
 8004ff4:	f7fb ff98 	bl	8000f28 <HAL_Delay>
    i2cWrite(hi2c, MPU9250_ADDRESS, PWR_MGMT_1, &temp, 1);
 8004ff8:	4633      	mov	r3, r6
 8004ffa:	226b      	movs	r2, #107	; 0x6b
 8004ffc:	21d0      	movs	r1, #208	; 0xd0
 8004ffe:	4638      	mov	r0, r7
 8005000:	9500      	str	r5, [sp, #0]
    temp = 0x01; // Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
 8005002:	f88d 500f 	strb.w	r5, [sp, #15]
    i2cWrite(hi2c, MPU9250_ADDRESS, PWR_MGMT_1, &temp, 1);
 8005006:	f7ff fc03 	bl	8004810 <i2cWrite>
    temp = 0x03;
 800500a:	2303      	movs	r3, #3
 800500c:	f88d 300f 	strb.w	r3, [sp, #15]
    i2cWrite(hi2c, MPU9250_ADDRESS, CONFIG, &temp, 1);
 8005010:	221a      	movs	r2, #26
 8005012:	4633      	mov	r3, r6
 8005014:	21d0      	movs	r1, #208	; 0xd0
 8005016:	4638      	mov	r0, r7
 8005018:	9500      	str	r5, [sp, #0]
 800501a:	f7ff fbf9 	bl	8004810 <i2cWrite>
    i2cWrite(hi2c, MPU9250_ADDRESS, SMPLRT_DIV, &temp, 1);
 800501e:	4633      	mov	r3, r6
 8005020:	2219      	movs	r2, #25
 8005022:	21d0      	movs	r1, #208	; 0xd0
 8005024:	4638      	mov	r0, r7
 8005026:	9500      	str	r5, [sp, #0]
    temp = 0x01;    // Use a 500 Hz rate; the same rate set in CONFIG above
 8005028:	f88d 500f 	strb.w	r5, [sp, #15]
    i2cWrite(hi2c, MPU9250_ADDRESS, SMPLRT_DIV, &temp, 1);
 800502c:	f7ff fbf0 	bl	8004810 <i2cWrite>
    i2cRead(hi2c, MPU9250_ADDRESS, GYRO_CONFIG, &temp, 1);
 8005030:	4633      	mov	r3, r6
 8005032:	221b      	movs	r2, #27
 8005034:	21d0      	movs	r1, #208	; 0xd0
 8005036:	4638      	mov	r0, r7
 8005038:	9500      	str	r5, [sp, #0]
 800503a:	f7ff fc07 	bl	800484c <i2cRead>
    temp = temp & 0xE7;
 800503e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    temp = temp | ((uint8_t) mpu->gscale << 3);
 8005042:	7862      	ldrb	r2, [r4, #1]
    i2cWrite(hi2c, MPU9250_ADDRESS, GYRO_CONFIG, &temp, 1);
 8005044:	9500      	str	r5, [sp, #0]
    temp = temp & 0xE7;
 8005046:	f023 031a 	bic.w	r3, r3, #26
    temp = temp | ((uint8_t) mpu->gscale << 3);
 800504a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800504e:	f88d 300f 	strb.w	r3, [sp, #15]
    i2cWrite(hi2c, MPU9250_ADDRESS, GYRO_CONFIG, &temp, 1);
 8005052:	221b      	movs	r2, #27
 8005054:	4633      	mov	r3, r6
 8005056:	21d0      	movs	r1, #208	; 0xd0
 8005058:	4638      	mov	r0, r7
 800505a:	f7ff fbd9 	bl	8004810 <i2cWrite>
    i2cRead(hi2c, MPU9250_ADDRESS, ACCEL_CONFIG, &temp, 1);
 800505e:	4633      	mov	r3, r6
 8005060:	221c      	movs	r2, #28
 8005062:	21d0      	movs	r1, #208	; 0xd0
 8005064:	4638      	mov	r0, r7
 8005066:	9500      	str	r5, [sp, #0]
 8005068:	f7ff fbf0 	bl	800484c <i2cRead>
    temp = temp & 0xE7;
 800506c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    temp = temp | ((uint8_t) mpu->ascale << 3);
 8005070:	7822      	ldrb	r2, [r4, #0]
    i2cWrite(hi2c, MPU9250_ADDRESS, ACCEL_CONFIG, &temp, 1);
 8005072:	9500      	str	r5, [sp, #0]
    temp = temp & 0xE7;
 8005074:	f023 0318 	bic.w	r3, r3, #24
    temp = temp | ((uint8_t) mpu->ascale << 3);
 8005078:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800507c:	f88d 300f 	strb.w	r3, [sp, #15]
    i2cWrite(hi2c, MPU9250_ADDRESS, ACCEL_CONFIG, &temp, 1);
 8005080:	221c      	movs	r2, #28
 8005082:	4633      	mov	r3, r6
 8005084:	21d0      	movs	r1, #208	; 0xd0
 8005086:	4638      	mov	r0, r7
 8005088:	f7ff fbc2 	bl	8004810 <i2cWrite>
    i2cRead(hi2c, MPU9250_ADDRESS, ACCEL_CONFIG2, &temp, 1);
 800508c:	4633      	mov	r3, r6
 800508e:	221d      	movs	r2, #29
 8005090:	21d0      	movs	r1, #208	; 0xd0
 8005092:	4638      	mov	r0, r7
 8005094:	9500      	str	r5, [sp, #0]
 8005096:	f7ff fbd9 	bl	800484c <i2cRead>
    temp = temp & 0xF0;
 800509a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    i2cWrite(hi2c, MPU9250_ADDRESS, ACCEL_CONFIG2, &temp, 1);
 800509e:	9500      	str	r5, [sp, #0]
    temp = temp & 0xF0;
 80050a0:	f023 030f 	bic.w	r3, r3, #15
    temp = temp | 0x03;
 80050a4:	f043 0303 	orr.w	r3, r3, #3
 80050a8:	f88d 300f 	strb.w	r3, [sp, #15]
    i2cWrite(hi2c, MPU9250_ADDRESS, ACCEL_CONFIG2, &temp, 1);
 80050ac:	221d      	movs	r2, #29
 80050ae:	4633      	mov	r3, r6
 80050b0:	21d0      	movs	r1, #208	; 0xd0
 80050b2:	4638      	mov	r0, r7
 80050b4:	f7ff fbac 	bl	8004810 <i2cWrite>
    temp = 0x22;
 80050b8:	2322      	movs	r3, #34	; 0x22
 80050ba:	f88d 300f 	strb.w	r3, [sp, #15]
    i2cWrite(hi2c, MPU9250_ADDRESS, INT_PIN_CFG, &temp, 1);
 80050be:	2237      	movs	r2, #55	; 0x37
 80050c0:	4633      	mov	r3, r6
 80050c2:	21d0      	movs	r1, #208	; 0xd0
 80050c4:	4638      	mov	r0, r7
 80050c6:	9500      	str	r5, [sp, #0]
 80050c8:	f7ff fba2 	bl	8004810 <i2cWrite>
    i2cWrite(hi2c, MPU9250_ADDRESS, INT_ENABLE, &temp, 1);
 80050cc:	4633      	mov	r3, r6
 80050ce:	9500      	str	r5, [sp, #0]
 80050d0:	2238      	movs	r2, #56	; 0x38
 80050d2:	21d0      	movs	r1, #208	; 0xd0
 80050d4:	4638      	mov	r0, r7
    temp = 0x01;
 80050d6:	f88d 500f 	strb.w	r5, [sp, #15]
    i2cWrite(hi2c, MPU9250_ADDRESS, INT_ENABLE, &temp, 1);
 80050da:	f7ff fb99 	bl	8004810 <i2cWrite>
    switch (mpu->ascale)
 80050de:	7823      	ldrb	r3, [r4, #0]
 80050e0:	2b03      	cmp	r3, #3
 80050e2:	d806      	bhi.n	80050f2 <MPU9250_SetParam+0x11e>
 80050e4:	e8df f003 	tbb	[pc, r3]
 80050e8:	120f0c02 	.word	0x120f0c02
        mpu->Acc_factor = 2.0 / 32768.0;
 80050ec:	f04f 5362 	mov.w	r3, #947912704	; 0x38800000
        mpu->Acc_factor = 16.0 / 32768.0;
 80050f0:	60a3      	str	r3, [r4, #8]
    switch (mpu->gscale)
 80050f2:	7863      	ldrb	r3, [r4, #1]
 80050f4:	2b03      	cmp	r3, #3
 80050f6:	d80e      	bhi.n	8005116 <MPU9250_SetParam+0x142>
 80050f8:	e8df f003 	tbb	[pc, r3]
 80050fc:	1715130b 	.word	0x1715130b
        mpu->Acc_factor = 4.0 / 32768.0;
 8005100:	f04f 5364 	mov.w	r3, #956301312	; 0x39000000
 8005104:	e7f4      	b.n	80050f0 <MPU9250_SetParam+0x11c>
        mpu->Acc_factor = 8.0 / 32768.0;
 8005106:	f04f 5366 	mov.w	r3, #964689920	; 0x39800000
 800510a:	e7f1      	b.n	80050f0 <MPU9250_SetParam+0x11c>
        mpu->Acc_factor = 16.0 / 32768.0;
 800510c:	f04f 5368 	mov.w	r3, #973078528	; 0x3a000000
 8005110:	e7ee      	b.n	80050f0 <MPU9250_SetParam+0x11c>
        mpu->Gyro_factor = 250.0 / 32768.0;
 8005112:	4b09      	ldr	r3, [pc, #36]	; (8005138 <MPU9250_SetParam+0x164>)
        mpu->Gyro_factor = 2000.0 / 32768.0;
 8005114:	6063      	str	r3, [r4, #4]
    switch (mpu->mscale)
 8005116:	78a3      	ldrb	r3, [r4, #2]
 8005118:	b14b      	cbz	r3, 800512e <MPU9250_SetParam+0x15a>
 800511a:	2b01      	cmp	r3, #1
 800511c:	d00a      	beq.n	8005134 <MPU9250_SetParam+0x160>
}
 800511e:	b005      	add	sp, #20
 8005120:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mpu->Gyro_factor = 500.0 / 32768.0;
 8005122:	4b06      	ldr	r3, [pc, #24]	; (800513c <MPU9250_SetParam+0x168>)
 8005124:	e7f6      	b.n	8005114 <MPU9250_SetParam+0x140>
        mpu->Gyro_factor = 1000.0 / 32768.0;
 8005126:	4b06      	ldr	r3, [pc, #24]	; (8005140 <MPU9250_SetParam+0x16c>)
 8005128:	e7f4      	b.n	8005114 <MPU9250_SetParam+0x140>
        mpu->Gyro_factor = 2000.0 / 32768.0;
 800512a:	4b06      	ldr	r3, [pc, #24]	; (8005144 <MPU9250_SetParam+0x170>)
 800512c:	e7f2      	b.n	8005114 <MPU9250_SetParam+0x140>
        mpu->Mag_factor = 10.0 * 4912.0 / 8190.0; // Proper scale to return milliGauss
 800512e:	4b06      	ldr	r3, [pc, #24]	; (8005148 <MPU9250_SetParam+0x174>)
        mpu->Mag_factor = 10.0 * 4912.0 / 32760.0; // Proper scale to return milliGauss
 8005130:	60e3      	str	r3, [r4, #12]
}
 8005132:	e7f4      	b.n	800511e <MPU9250_SetParam+0x14a>
        mpu->Mag_factor = 10.0 * 4912.0 / 32760.0; // Proper scale to return milliGauss
 8005134:	4b05      	ldr	r3, [pc, #20]	; (800514c <MPU9250_SetParam+0x178>)
 8005136:	e7fb      	b.n	8005130 <MPU9250_SetParam+0x15c>
 8005138:	3bfa0000 	.word	0x3bfa0000
 800513c:	3c7a0000 	.word	0x3c7a0000
 8005140:	3cfa0000 	.word	0x3cfa0000
 8005144:	3d7a0000 	.word	0x3d7a0000
 8005148:	40bfebff 	.word	0x40bfebff
 800514c:	3fbfebff 	.word	0x3fbfebff

08005150 <MPU9250_Init>:
{
 8005150:	b530      	push	{r4, r5, lr}
 8005152:	460c      	mov	r4, r1
 8005154:	b085      	sub	sp, #20
    mpu->gscale = Gscale0;
 8005156:	7063      	strb	r3, [r4, #1]
    mpu->mscale = Mscale0;
 8005158:	f89d 3020 	ldrb.w	r3, [sp, #32]
 800515c:	70a3      	strb	r3, [r4, #2]
    mpu->q[0] = 1.0f;
 800515e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8005162:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    mpu->q[1] = 0.0f;
 8005166:	2300      	movs	r3, #0
	mpu->calib_done = 0;
 8005168:	2100      	movs	r1, #0
    mpu->q[1] = 0.0f;
 800516a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    mpu->q[2] = 0.0f;
 800516e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    mpu->q[3] = 0.0f;
 8005172:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    i2cRead(hi2c, MPU9250_ADDRESS, WHO_AM_I_MPU9250, &whoami, 1);
 8005176:	2301      	movs	r3, #1
	mpu->calib_done = 0;
 8005178:	f8c4 10a8 	str.w	r1, [r4, #168]	; 0xa8
    mpu->ascale = Ascale0;
 800517c:	7022      	strb	r2, [r4, #0]
    i2cRead(hi2c, MPU9250_ADDRESS, WHO_AM_I_MPU9250, &whoami, 1);
 800517e:	9300      	str	r3, [sp, #0]
 8005180:	2275      	movs	r2, #117	; 0x75
 8005182:	f10d 030f 	add.w	r3, sp, #15
 8005186:	21d0      	movs	r1, #208	; 0xd0
{
 8005188:	4605      	mov	r5, r0
    i2cRead(hi2c, MPU9250_ADDRESS, WHO_AM_I_MPU9250, &whoami, 1);
 800518a:	f7ff fb5f 	bl	800484c <i2cRead>
    if (whoami == 0x71)
 800518e:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8005192:	2b71      	cmp	r3, #113	; 0x71
 8005194:	d112      	bne.n	80051bc <MPU9250_Init+0x6c>
        MPU9250_Reset(hi2c, mpu);
 8005196:	4621      	mov	r1, r4
 8005198:	4628      	mov	r0, r5
 800519a:	f7ff fb46 	bl	800482a <MPU9250_Reset>
        MPU9250_calib(hi2c, mpu);
 800519e:	4621      	mov	r1, r4
 80051a0:	4628      	mov	r0, r5
 80051a2:	f7ff fd27 	bl	8004bf4 <MPU9250_calib>
        HAL_Delay(20);
 80051a6:	2014      	movs	r0, #20
 80051a8:	f7fb febe 	bl	8000f28 <HAL_Delay>
        MPU9250_SetParam(hi2c, mpu);
 80051ac:	4621      	mov	r1, r4
 80051ae:	4628      	mov	r0, r5
 80051b0:	f7ff ff10 	bl	8004fd4 <MPU9250_SetParam>
        MPU9250_Init8963(hi2c, mpu);
 80051b4:	4621      	mov	r1, r4
 80051b6:	4628      	mov	r0, r5
 80051b8:	f7ff fe96 	bl	8004ee8 <MPU9250_Init8963>
}
 80051bc:	b005      	add	sp, #20
 80051be:	bd30      	pop	{r4, r5, pc}

080051c0 <MX_ADC2_Init>:
  }

}
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80051c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc2.Instance = ADC2;
 80051c2:	4814      	ldr	r0, [pc, #80]	; (8005214 <MX_ADC2_Init+0x54>)
 80051c4:	4b14      	ldr	r3, [pc, #80]	; (8005218 <MX_ADC2_Init+0x58>)
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
  hadc2.Init.ScanConvMode = DISABLE;
  hadc2.Init.ContinuousConvMode = DISABLE;
  hadc2.Init.DiscontinuousConvMode = DISABLE;
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80051c6:	4a15      	ldr	r2, [pc, #84]	; (800521c <MX_ADC2_Init+0x5c>)
  hadc2.Instance = ADC2;
 80051c8:	6003      	str	r3, [r0, #0]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80051ca:	6282      	str	r2, [r0, #40]	; 0x28
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80051cc:	2300      	movs	r3, #0
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc2.Init.NbrOfConversion = 1;
 80051ce:	2201      	movs	r2, #1
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80051d0:	6043      	str	r3, [r0, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80051d2:	6083      	str	r3, [r0, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80051d4:	6103      	str	r3, [r0, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80051d6:	6183      	str	r3, [r0, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80051d8:	6203      	str	r3, [r0, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80051da:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80051dc:	60c3      	str	r3, [r0, #12]
  hadc2.Init.NbrOfConversion = 1;
 80051de:	61c2      	str	r2, [r0, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80051e0:	6303      	str	r3, [r0, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80051e2:	6142      	str	r2, [r0, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80051e4:	f7fb feb4 	bl	8000f50 <HAL_ADC_Init>
 80051e8:	b118      	cbz	r0, 80051f2 <MX_ADC2_Init+0x32>
  {
    _Error_Handler(__FILE__, __LINE__);
 80051ea:	216c      	movs	r1, #108	; 0x6c
 80051ec:	480c      	ldr	r0, [pc, #48]	; (8005220 <MX_ADC2_Init+0x60>)
 80051ee:	f000 fb9f 	bl	8005930 <_Error_Handler>

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_2;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80051f2:	2102      	movs	r1, #2
 80051f4:	2201      	movs	r2, #1
 80051f6:	2300      	movs	r3, #0
 80051f8:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80051fc:	4805      	ldr	r0, [pc, #20]	; (8005214 <MX_ADC2_Init+0x54>)
 80051fe:	4669      	mov	r1, sp
 8005200:	f7fb ffe2 	bl	80011c8 <HAL_ADC_ConfigChannel>
 8005204:	b118      	cbz	r0, 800520e <MX_ADC2_Init+0x4e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005206:	2176      	movs	r1, #118	; 0x76
 8005208:	4805      	ldr	r0, [pc, #20]	; (8005220 <MX_ADC2_Init+0x60>)
 800520a:	f000 fb91 	bl	8005930 <_Error_Handler>
  }

}
 800520e:	b005      	add	sp, #20
 8005210:	f85d fb04 	ldr.w	pc, [sp], #4
 8005214:	200000d8 	.word	0x200000d8
 8005218:	40012100 	.word	0x40012100
 800521c:	0f000001 	.word	0x0f000001
 8005220:	08006d28 	.word	0x08006d28

08005224 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8005224:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(adcHandle->Instance==ADC1)
 8005226:	6803      	ldr	r3, [r0, #0]
 8005228:	4a19      	ldr	r2, [pc, #100]	; (8005290 <HAL_ADC_MspInit+0x6c>)
 800522a:	4293      	cmp	r3, r2
{
 800522c:	b088      	sub	sp, #32
  if(adcHandle->Instance==ADC1)
 800522e:	d11e      	bne.n	800526e <HAL_ADC_MspInit+0x4a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005230:	4b18      	ldr	r3, [pc, #96]	; (8005294 <HAL_ADC_MspInit+0x70>)
 8005232:	2400      	movs	r4, #0
 8005234:	9401      	str	r4, [sp, #4]
 8005236:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005238:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800523c:	645a      	str	r2, [r3, #68]	; 0x44
 800523e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005244:	9301      	str	r3, [sp, #4]
 8005246:	9b01      	ldr	r3, [sp, #4]
  
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0
    PA4     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 8005248:	2311      	movs	r3, #17
    __HAL_RCC_ADC2_CLK_ENABLE();
  
    /**ADC2 GPIO Configuration    
    PA2     ------> ADC2_IN2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800524a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800524c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800524e:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005250:	4811      	ldr	r0, [pc, #68]	; (8005298 <HAL_ADC_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005252:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005254:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005256:	f7fc fa29 	bl	80016ac <HAL_GPIO_Init>

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800525a:	2012      	movs	r0, #18
 800525c:	4622      	mov	r2, r4
 800525e:	4621      	mov	r1, r4
 8005260:	f7fc f85c 	bl	800131c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8005264:	2012      	movs	r0, #18
 8005266:	f7fc f88d 	bl	8001384 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800526a:	b008      	add	sp, #32
 800526c:	bd10      	pop	{r4, pc}
  else if(adcHandle->Instance==ADC2)
 800526e:	4a0b      	ldr	r2, [pc, #44]	; (800529c <HAL_ADC_MspInit+0x78>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d1fa      	bne.n	800526a <HAL_ADC_MspInit+0x46>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8005274:	4b07      	ldr	r3, [pc, #28]	; (8005294 <HAL_ADC_MspInit+0x70>)
 8005276:	2400      	movs	r4, #0
 8005278:	9402      	str	r4, [sp, #8]
 800527a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800527c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005280:	645a      	str	r2, [r3, #68]	; 0x44
 8005282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005284:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005288:	9302      	str	r3, [sp, #8]
 800528a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800528c:	2304      	movs	r3, #4
 800528e:	e7dc      	b.n	800524a <HAL_ADC_MspInit+0x26>
 8005290:	40012000 	.word	0x40012000
 8005294:	40023800 	.word	0x40023800
 8005298:	40020000 	.word	0x40020000
 800529c:	40012100 	.word	0x40012100

080052a0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80052a0:	b513      	push	{r0, r1, r4, lr}
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80052a2:	4b17      	ldr	r3, [pc, #92]	; (8005300 <MX_DMA_Init+0x60>)
 80052a4:	2400      	movs	r4, #0
 80052a6:	9401      	str	r4, [sp, #4]
 80052a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052aa:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80052ae:	631a      	str	r2, [r3, #48]	; 0x30
 80052b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80052b6:	4622      	mov	r2, r4
 80052b8:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 80052ba:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80052bc:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 80052be:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80052c0:	f7fc f82c 	bl	800131c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80052c4:	200b      	movs	r0, #11
 80052c6:	f7fc f85d 	bl	8001384 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80052ca:	4622      	mov	r2, r4
 80052cc:	4621      	mov	r1, r4
 80052ce:	200d      	movs	r0, #13
 80052d0:	f7fc f824 	bl	800131c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80052d4:	200d      	movs	r0, #13
 80052d6:	f7fc f855 	bl	8001384 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80052da:	4622      	mov	r2, r4
 80052dc:	4621      	mov	r1, r4
 80052de:	2011      	movs	r0, #17
 80052e0:	f7fc f81c 	bl	800131c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80052e4:	2011      	movs	r0, #17
 80052e6:	f7fc f84d 	bl	8001384 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80052ea:	4622      	mov	r2, r4
 80052ec:	4621      	mov	r1, r4
 80052ee:	202f      	movs	r0, #47	; 0x2f
 80052f0:	f7fc f814 	bl	800131c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80052f4:	202f      	movs	r0, #47	; 0x2f
 80052f6:	f7fc f845 	bl	8001384 <HAL_NVIC_EnableIRQ>

}
 80052fa:	b002      	add	sp, #8
 80052fc:	bd10      	pop	{r4, pc}
 80052fe:	bf00      	nop
 8005300:	40023800 	.word	0x40023800

08005304 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005304:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005308:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800530a:	2400      	movs	r4, #0
 800530c:	4b45      	ldr	r3, [pc, #276]	; (8005424 <MX_GPIO_Init+0x120>)
 800530e:	9401      	str	r4, [sp, #4]
 8005310:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_1, GPIO_PIN_RESET);
 8005312:	4e45      	ldr	r6, [pc, #276]	; (8005428 <MX_GPIO_Init+0x124>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8005314:	f8df 9118 	ldr.w	r9, [pc, #280]	; 8005430 <MX_GPIO_Init+0x12c>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN1C_Pin|EN2C_Pin, GPIO_PIN_RESET);
 8005318:	f8df 8118 	ldr.w	r8, [pc, #280]	; 8005434 <MX_GPIO_Init+0x130>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, EN1A_Pin|EN1B_Pin|EN2A_Pin|EN2B_Pin 
 800531c:	4f43      	ldr	r7, [pc, #268]	; (800542c <MX_GPIO_Init+0x128>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800531e:	f042 0210 	orr.w	r2, r2, #16
 8005322:	631a      	str	r2, [r3, #48]	; 0x30
 8005324:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005326:	f002 0210 	and.w	r2, r2, #16
 800532a:	9201      	str	r2, [sp, #4]
 800532c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800532e:	9402      	str	r4, [sp, #8]
 8005330:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005332:	f042 0204 	orr.w	r2, r2, #4
 8005336:	631a      	str	r2, [r3, #48]	; 0x30
 8005338:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800533a:	f002 0204 	and.w	r2, r2, #4
 800533e:	9202      	str	r2, [sp, #8]
 8005340:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005342:	9403      	str	r4, [sp, #12]
 8005344:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005346:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800534a:	631a      	str	r2, [r3, #48]	; 0x30
 800534c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800534e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8005352:	9203      	str	r2, [sp, #12]
 8005354:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005356:	9404      	str	r4, [sp, #16]
 8005358:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800535a:	f042 0201 	orr.w	r2, r2, #1
 800535e:	631a      	str	r2, [r3, #48]	; 0x30
 8005360:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005362:	f002 0201 	and.w	r2, r2, #1
 8005366:	9204      	str	r2, [sp, #16]
 8005368:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800536a:	9405      	str	r4, [sp, #20]
 800536c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800536e:	f042 0202 	orr.w	r2, r2, #2
 8005372:	631a      	str	r2, [r3, #48]	; 0x30
 8005374:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005376:	f002 0202 	and.w	r2, r2, #2
 800537a:	9205      	str	r2, [sp, #20]
 800537c:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800537e:	9406      	str	r4, [sp, #24]
 8005380:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005382:	f042 0208 	orr.w	r2, r2, #8
 8005386:	631a      	str	r2, [r3, #48]	; 0x30
 8005388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800538a:	f003 0308 	and.w	r3, r3, #8
 800538e:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_1, GPIO_PIN_RESET);
 8005390:	4622      	mov	r2, r4
 8005392:	4630      	mov	r0, r6
 8005394:	212a      	movs	r1, #42	; 0x2a
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005396:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_1, GPIO_PIN_RESET);
 8005398:	f7fc fa68 	bl	800186c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800539c:	4622      	mov	r2, r4
 800539e:	4648      	mov	r0, r9
 80053a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80053a4:	f7fc fa62 	bl	800186c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, EN1C_Pin|EN2C_Pin, GPIO_PIN_RESET);
 80053a8:	4622      	mov	r2, r4
 80053aa:	4640      	mov	r0, r8
 80053ac:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80053b0:	f7fc fa5c 	bl	800186c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, EN1A_Pin|EN1B_Pin|EN2A_Pin|EN2B_Pin 
 80053b4:	4622      	mov	r2, r4
 80053b6:	4638      	mov	r0, r7
 80053b8:	213f      	movs	r1, #63	; 0x3f
 80053ba:	f7fc fa57 	bl	800186c <HAL_GPIO_WritePin>
                          |EN3A_Pin|EN3B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE4 PE6 PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_0;
 80053be:	2355      	movs	r3, #85	; 0x55
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80053c0:	a907      	add	r1, sp, #28
 80053c2:	4630      	mov	r0, r6

  /*Configure GPIO pins : PE3 PE5 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80053c4:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_0;
 80053c6:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80053c8:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053ca:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80053cc:	f7fc f96e 	bl	80016ac <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_1;
 80053d0:	232a      	movs	r3, #42	; 0x2a
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80053d2:	a907      	add	r1, sp, #28
 80053d4:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_1;
 80053d6:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80053d8:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053da:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053dc:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80053de:	f7fc f965 	bl	80016ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80053e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80053e6:	a907      	add	r1, sp, #28
 80053e8:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80053ea:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80053ec:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053ee:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053f0:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80053f2:	f7fc f95b 	bl	80016ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = EN1C_Pin|EN2C_Pin;
 80053f6:	f44f 63a0 	mov.w	r3, #1280	; 0x500
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053fa:	a907      	add	r1, sp, #28
 80053fc:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = EN1C_Pin|EN2C_Pin;
 80053fe:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005400:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005402:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005404:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005406:	f7fc f951 	bl	80016ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin 
                           PDPin PDPin */
  GPIO_InitStruct.Pin = EN1A_Pin|EN1B_Pin|EN2A_Pin|EN2B_Pin 
 800540a:	233f      	movs	r3, #63	; 0x3f
                          |EN3A_Pin|EN3B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800540c:	a907      	add	r1, sp, #28
 800540e:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = EN1A_Pin|EN1B_Pin|EN2A_Pin|EN2B_Pin 
 8005410:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005412:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005414:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005416:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005418:	f7fc f948 	bl	80016ac <HAL_GPIO_Init>

}
 800541c:	b00d      	add	sp, #52	; 0x34
 800541e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005422:	bf00      	nop
 8005424:	40023800 	.word	0x40023800
 8005428:	40021000 	.word	0x40021000
 800542c:	40020c00 	.word	0x40020c00
 8005430:	40020800 	.word	0x40020800
 8005434:	40020000 	.word	0x40020000

08005438 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c2_rx;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8005438:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 800543a:	480d      	ldr	r0, [pc, #52]	; (8005470 <MX_I2C1_Init+0x38>)
  hi2c1.Init.ClockSpeed = 400000;
 800543c:	4b0d      	ldr	r3, [pc, #52]	; (8005474 <MX_I2C1_Init+0x3c>)
 800543e:	f8df e03c 	ldr.w	lr, [pc, #60]	; 800547c <MX_I2C1_Init+0x44>
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005442:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 400000;
 8005446:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800544a:	2300      	movs	r3, #0
 800544c:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800544e:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005450:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005452:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005454:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005456:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005458:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800545a:	f7fc fbd5 	bl	8001c08 <HAL_I2C_Init>
 800545e:	b128      	cbz	r0, 800546c <MX_I2C1_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005460:	2148      	movs	r1, #72	; 0x48
 8005462:	4805      	ldr	r0, [pc, #20]	; (8005478 <MX_I2C1_Init+0x40>)
  }

}
 8005464:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8005468:	f000 ba62 	b.w	8005930 <_Error_Handler>
 800546c:	bd08      	pop	{r3, pc}
 800546e:	bf00      	nop
 8005470:	200001c8 	.word	0x200001c8
 8005474:	40005400 	.word	0x40005400
 8005478:	08006d35 	.word	0x08006d35
 800547c:	00061a80 	.word	0x00061a80

08005480 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8005480:	b508      	push	{r3, lr}

  hi2c2.Instance = I2C2;
 8005482:	480d      	ldr	r0, [pc, #52]	; (80054b8 <MX_I2C2_Init+0x38>)
  hi2c2.Init.ClockSpeed = 400000;
 8005484:	4b0d      	ldr	r3, [pc, #52]	; (80054bc <MX_I2C2_Init+0x3c>)
 8005486:	f8df e03c 	ldr.w	lr, [pc, #60]	; 80054c4 <MX_I2C2_Init+0x44>
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800548a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c2.Init.ClockSpeed = 400000;
 800548e:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005492:	2300      	movs	r3, #0
 8005494:	6083      	str	r3, [r0, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8005496:	60c3      	str	r3, [r0, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005498:	6102      	str	r2, [r0, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800549a:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800549c:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800549e:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80054a0:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80054a2:	f7fc fbb1 	bl	8001c08 <HAL_I2C_Init>
 80054a6:	b128      	cbz	r0, 80054b4 <MX_I2C2_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 80054a8:	215b      	movs	r1, #91	; 0x5b
 80054aa:	4805      	ldr	r0, [pc, #20]	; (80054c0 <MX_I2C2_Init+0x40>)
  }

}
 80054ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 80054b0:	f000 ba3e 	b.w	8005930 <_Error_Handler>
 80054b4:	bd08      	pop	{r3, pc}
 80054b6:	bf00      	nop
 80054b8:	2000021c 	.word	0x2000021c
 80054bc:	40005800 	.word	0x40005800
 80054c0:	08006d35 	.word	0x08006d35
 80054c4:	00061a80 	.word	0x00061a80

080054c8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80054c8:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C1)
 80054ca:	6803      	ldr	r3, [r0, #0]
 80054cc:	4a65      	ldr	r2, [pc, #404]	; (8005664 <HAL_I2C_MspInit+0x19c>)
 80054ce:	4293      	cmp	r3, r2
{
 80054d0:	b089      	sub	sp, #36	; 0x24
 80054d2:	4605      	mov	r5, r0
  if(i2cHandle->Instance==I2C1)
 80054d4:	d162      	bne.n	800559c <HAL_I2C_MspInit+0xd4>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80054d6:	23c0      	movs	r3, #192	; 0xc0
 80054d8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80054da:	2312      	movs	r3, #18
 80054dc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80054de:	2301      	movs	r3, #1
 80054e0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054e2:	2303      	movs	r3, #3
 80054e4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054e6:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80054e8:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054ea:	485f      	ldr	r0, [pc, #380]	; (8005668 <HAL_I2C_MspInit+0x1a0>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80054ec:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054ee:	f7fc f8dd 	bl	80016ac <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80054f2:	2300      	movs	r3, #0
 80054f4:	4a5d      	ldr	r2, [pc, #372]	; (800566c <HAL_I2C_MspInit+0x1a4>)
 80054f6:	9301      	str	r3, [sp, #4]
 80054f8:	6c11      	ldr	r1, [r2, #64]	; 0x40
  
    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80054fa:	4c5d      	ldr	r4, [pc, #372]	; (8005670 <HAL_I2C_MspInit+0x1a8>)
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80054fc:	485d      	ldr	r0, [pc, #372]	; (8005674 <HAL_I2C_MspInit+0x1ac>)
    __HAL_RCC_I2C1_CLK_ENABLE();
 80054fe:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
 8005502:	6411      	str	r1, [r2, #64]	; 0x40
 8005504:	6c12      	ldr	r2, [r2, #64]	; 0x40
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005506:	60a3      	str	r3, [r4, #8]
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005508:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800550c:	9201      	str	r2, [sp, #4]
 800550e:	9a01      	ldr	r2, [sp, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005510:	60e3      	str	r3, [r4, #12]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8005512:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005516:	e884 0005 	stmia.w	r4, {r0, r2}
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800551a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800551e:	4620      	mov	r0, r4
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005520:	6122      	str	r2, [r4, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005522:	6163      	str	r3, [r4, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005524:	61a3      	str	r3, [r4, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8005526:	61e3      	str	r3, [r4, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005528:	6223      	str	r3, [r4, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800552a:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800552c:	f7fb ff74 	bl	8001418 <HAL_DMA_Init>
 8005530:	b118      	cbz	r0, 800553a <HAL_I2C_MspInit+0x72>
    {
      _Error_Handler(__FILE__, __LINE__);
 8005532:	2186      	movs	r1, #134	; 0x86
 8005534:	4850      	ldr	r0, [pc, #320]	; (8005678 <HAL_I2C_MspInit+0x1b0>)
 8005536:	f000 f9fb 	bl	8005930 <_Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800553a:	63ac      	str	r4, [r5, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800553c:	494f      	ldr	r1, [pc, #316]	; (800567c <HAL_I2C_MspInit+0x1b4>)
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800553e:	63a5      	str	r5, [r4, #56]	; 0x38
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8005540:	4c4f      	ldr	r4, [pc, #316]	; (8005680 <HAL_I2C_MspInit+0x1b8>)
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005542:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005546:	2340      	movs	r3, #64	; 0x40
 8005548:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800554c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005550:	2300      	movs	r3, #0
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005552:	6122      	str	r2, [r4, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_i2c1_tx.Init.Mode = DMA_CIRCULAR;
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8005554:	4620      	mov	r0, r4
    hdma_i2c1_tx.Init.Mode = DMA_CIRCULAR;
 8005556:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800555a:	60e3      	str	r3, [r4, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800555c:	6163      	str	r3, [r4, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800555e:	61a3      	str	r3, [r4, #24]
    hdma_i2c1_tx.Init.Mode = DMA_CIRCULAR;
 8005560:	61e2      	str	r2, [r4, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005562:	6223      	str	r3, [r4, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005564:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8005566:	f7fb ff57 	bl	8001418 <HAL_DMA_Init>
 800556a:	b118      	cbz	r0, 8005574 <HAL_I2C_MspInit+0xac>
    {
      _Error_Handler(__FILE__, __LINE__);
 800556c:	2198      	movs	r1, #152	; 0x98
 800556e:	4842      	ldr	r0, [pc, #264]	; (8005678 <HAL_I2C_MspInit+0x1b0>)
 8005570:	f000 f9de 	bl	8005930 <_Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8005574:	2200      	movs	r2, #0
 8005576:	4611      	mov	r1, r2
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8005578:	636c      	str	r4, [r5, #52]	; 0x34
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800557a:	201f      	movs	r0, #31
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800557c:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800557e:	f7fb fecd 	bl	800131c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8005582:	201f      	movs	r0, #31
 8005584:	f7fb fefe 	bl	8001384 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8005588:	2200      	movs	r2, #0
 800558a:	2020      	movs	r0, #32
 800558c:	4611      	mov	r1, r2
 800558e:	f7fb fec5 	bl	800131c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8005592:	2020      	movs	r0, #32

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8005594:	f7fb fef6 	bl	8001384 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8005598:	b009      	add	sp, #36	; 0x24
 800559a:	bd30      	pop	{r4, r5, pc}
  else if(i2cHandle->Instance==I2C2)
 800559c:	4a39      	ldr	r2, [pc, #228]	; (8005684 <HAL_I2C_MspInit+0x1bc>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d1fa      	bne.n	8005598 <HAL_I2C_MspInit+0xd0>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80055a2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80055a6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80055a8:	2312      	movs	r3, #18
 80055aa:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80055ac:	2301      	movs	r3, #1
 80055ae:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055b0:	2303      	movs	r3, #3
 80055b2:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055b4:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80055b6:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055b8:	482b      	ldr	r0, [pc, #172]	; (8005668 <HAL_I2C_MspInit+0x1a0>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80055ba:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055bc:	f7fc f876 	bl	80016ac <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80055c0:	2300      	movs	r3, #0
 80055c2:	4a2a      	ldr	r2, [pc, #168]	; (800566c <HAL_I2C_MspInit+0x1a4>)
 80055c4:	9302      	str	r3, [sp, #8]
 80055c6:	6c11      	ldr	r1, [r2, #64]	; 0x40
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 80055c8:	4c2f      	ldr	r4, [pc, #188]	; (8005688 <HAL_I2C_MspInit+0x1c0>)
    __HAL_RCC_I2C2_CLK_ENABLE();
 80055ca:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 80055ce:	6411      	str	r1, [r2, #64]	; 0x40
 80055d0:	6c12      	ldr	r2, [r2, #64]	; 0x40
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 80055d2:	492e      	ldr	r1, [pc, #184]	; (800568c <HAL_I2C_MspInit+0x1c4>)
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80055d4:	60a3      	str	r3, [r4, #8]
    __HAL_RCC_I2C2_CLK_ENABLE();
 80055d6:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80055da:	9202      	str	r2, [sp, #8]
 80055dc:	9a02      	ldr	r2, [sp, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80055de:	60e3      	str	r3, [r4, #12]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 80055e0:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80055e4:	e884 0006 	stmia.w	r4, {r1, r2}
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 80055e8:	4620      	mov	r0, r4
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80055ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80055ee:	6122      	str	r2, [r4, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80055f0:	6163      	str	r3, [r4, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80055f2:	61a3      	str	r3, [r4, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 80055f4:	61e3      	str	r3, [r4, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80055f6:	6223      	str	r3, [r4, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80055f8:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 80055fa:	f7fb ff0d 	bl	8001418 <HAL_DMA_Init>
 80055fe:	b118      	cbz	r0, 8005608 <HAL_I2C_MspInit+0x140>
      _Error_Handler(__FILE__, __LINE__);
 8005600:	21c8      	movs	r1, #200	; 0xc8
 8005602:	481d      	ldr	r0, [pc, #116]	; (8005678 <HAL_I2C_MspInit+0x1b0>)
 8005604:	f000 f994 	bl	8005930 <_Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 8005608:	63ac      	str	r4, [r5, #56]	; 0x38
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800560a:	4b21      	ldr	r3, [pc, #132]	; (8005690 <HAL_I2C_MspInit+0x1c8>)
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 800560c:	63a5      	str	r5, [r4, #56]	; 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 800560e:	4c21      	ldr	r4, [pc, #132]	; (8005694 <HAL_I2C_MspInit+0x1cc>)
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005610:	f04f 6c60 	mov.w	ip, #234881024	; 0xe000000
 8005614:	f04f 0e40 	mov.w	lr, #64	; 0x40
 8005618:	e884 5008 	stmia.w	r4, {r3, ip, lr}
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800561c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005620:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8005622:	4620      	mov	r0, r4
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005624:	60e3      	str	r3, [r4, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005626:	6122      	str	r2, [r4, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005628:	6163      	str	r3, [r4, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800562a:	61a3      	str	r3, [r4, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 800562c:	61e3      	str	r3, [r4, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800562e:	6223      	str	r3, [r4, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005630:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8005632:	f7fb fef1 	bl	8001418 <HAL_DMA_Init>
 8005636:	b118      	cbz	r0, 8005640 <HAL_I2C_MspInit+0x178>
      _Error_Handler(__FILE__, __LINE__);
 8005638:	21da      	movs	r1, #218	; 0xda
 800563a:	480f      	ldr	r0, [pc, #60]	; (8005678 <HAL_I2C_MspInit+0x1b0>)
 800563c:	f000 f978 	bl	8005930 <_Error_Handler>
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8005640:	2200      	movs	r2, #0
 8005642:	4611      	mov	r1, r2
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 8005644:	636c      	str	r4, [r5, #52]	; 0x34
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8005646:	2021      	movs	r0, #33	; 0x21
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 8005648:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800564a:	f7fb fe67 	bl	800131c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800564e:	2021      	movs	r0, #33	; 0x21
 8005650:	f7fb fe98 	bl	8001384 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8005654:	2200      	movs	r2, #0
 8005656:	2022      	movs	r0, #34	; 0x22
 8005658:	4611      	mov	r1, r2
 800565a:	f7fb fe5f 	bl	800131c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800565e:	2022      	movs	r0, #34	; 0x22
 8005660:	e798      	b.n	8005594 <HAL_I2C_MspInit+0xcc>
 8005662:	bf00      	nop
 8005664:	40005400 	.word	0x40005400
 8005668:	40020400 	.word	0x40020400
 800566c:	40023800 	.word	0x40023800
 8005670:	20000330 	.word	0x20000330
 8005674:	40026010 	.word	0x40026010
 8005678:	08006d35 	.word	0x08006d35
 800567c:	400260a0 	.word	0x400260a0
 8005680:	20000168 	.word	0x20000168
 8005684:	40005800 	.word	0x40005800
 8005688:	20000270 	.word	0x20000270
 800568c:	40026040 	.word	0x40026040
 8005690:	400260b8 	.word	0x400260b8
 8005694:	200002d0 	.word	0x200002d0

08005698 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    if (htim->Instance == htim10.Instance)
 800569a:	4b37      	ldr	r3, [pc, #220]	; (8005778 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800569c:	6802      	ldr	r2, [r0, #0]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	429a      	cmp	r2, r3
{
 80056a2:	ed2d 8b02 	vpush	{d8}
    if (htim->Instance == htim10.Instance)
 80056a6:	d157      	bne.n	8005758 <HAL_TIM_PeriodElapsedCallback+0xc0>
    {
        dutya+=1;
 80056a8:	4b34      	ldr	r3, [pc, #208]	; (800577c <HAL_TIM_PeriodElapsedCallback+0xe4>)
//        err = phi_ref - TIM2->CNT;
        MPU9250_read(&hi2c1, &mpu2);
 80056aa:	4935      	ldr	r1, [pc, #212]	; (8005780 <HAL_TIM_PeriodElapsedCallback+0xe8>)
        dutya+=1;
 80056ac:	edd3 7a00 	vldr	s15, [r3]
        MPU9250_read(&hi2c1, &mpu2);
 80056b0:	4834      	ldr	r0, [pc, #208]	; (8005784 <HAL_TIM_PeriodElapsedCallback+0xec>)
//        phi_ref=mpu2.pitch*3.333333;
        phi_ref=0;
        out=TIM2->CNT;
 80056b2:	4f35      	ldr	r7, [pc, #212]	; (8005788 <HAL_TIM_PeriodElapsedCallback+0xf0>)
        deg0=out*0.3;
 80056b4:	4e35      	ldr	r6, [pc, #212]	; (800578c <HAL_TIM_PeriodElapsedCallback+0xf4>)
        dutya+=1;
 80056b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80056ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80056be:	edc3 7a00 	vstr	s15, [r3]
        MPU9250_read(&hi2c1, &mpu2);
 80056c2:	f7ff f9e1 	bl	8004a88 <MPU9250_read>
        phi_ref=0;
 80056c6:	4b32      	ldr	r3, [pc, #200]	; (8005790 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80056c8:	2000      	movs	r0, #0
 80056ca:	2100      	movs	r1, #0
 80056cc:	e9c3 0100 	strd	r0, r1, [r3]
        out=TIM2->CNT;
 80056d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80056d4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80056d6:	4620      	mov	r0, r4
 80056d8:	f7fa feb8 	bl	800044c <__aeabi_ui2d>
        deg0=out*0.3;
 80056dc:	a324      	add	r3, pc, #144	; (adr r3, 8005770 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80056de:	e9d3 2300 	ldrd	r2, r3, [r3]
        out=TIM2->CNT;
 80056e2:	e9c7 0100 	strd	r0, r1, [r7]
        deg0=out*0.3;
 80056e6:	f7fa ff27 	bl	8000538 <__aeabi_dmul>
 80056ea:	e9c6 0100 	strd	r0, r1, [r6]
        err=cal_error(phi_ref, out);
 80056ee:	4621      	mov	r1, r4
 80056f0:	2000      	movs	r0, #0
 80056f2:	f7fe fa26 	bl	8003b42 <cal_error>
 80056f6:	f7fa feb9 	bl	800046c <__aeabi_i2d>
 80056fa:	4b26      	ldr	r3, [pc, #152]	; (8005794 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80056fc:	4604      	mov	r4, r0
 80056fe:	460d      	mov	r5, r1
 8005700:	e9c3 4500 	strd	r4, r5, [r3]

        deg0=out*0.3;
 8005704:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005708:	a319      	add	r3, pc, #100	; (adr r3, 8005770 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800570a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800570e:	f7fa ff13 	bl	8000538 <__aeabi_dmul>
 8005712:	e9c6 0100 	strd	r0, r1, [r6]
                Vout = pid_controller(&pid1, err);
 8005716:	4629      	mov	r1, r5
 8005718:	4620      	mov	r0, r4
 800571a:	f7fb f9dd 	bl	8000ad8 <__aeabi_d2f>
 800571e:	ee00 0a10 	vmov	s0, r0
 8005722:	481d      	ldr	r0, [pc, #116]	; (8005798 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8005724:	f7fe f9f0 	bl	8003b08 <pid_controller>
 8005728:	ee10 0a10 	vmov	r0, s0
 800572c:	eeb0 8a40 	vmov.f32	s16, s0
 8005730:	f7fa feae 	bl	8000490 <__aeabi_f2d>
 8005734:	4b19      	ldr	r3, [pc, #100]	; (800579c <HAL_TIM_PeriodElapsedCallback+0x104>)
                if (Vout < 0)
 8005736:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800573a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                Vout = pid_controller(&pid1, err);
 800573e:	e9c3 0100 	strd	r0, r1, [r3]
 8005742:	4b17      	ldr	r3, [pc, #92]	; (80057a0 <HAL_TIM_PeriodElapsedCallback+0x108>)
                if (Vout < 0)
 8005744:	d50b      	bpl.n	800575e <HAL_TIM_PeriodElapsedCallback+0xc6>
                {
                    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8005746:	681c      	ldr	r4, [r3, #0]
 8005748:	2300      	movs	r3, #0
 800574a:	63a3      	str	r3, [r4, #56]	; 0x38
                    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, -Vout);
 800574c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005750:	4619      	mov	r1, r3
 8005752:	f7fb f9a1 	bl	8000a98 <__aeabi_d2uiz>
 8005756:	63e0      	str	r0, [r4, #60]	; 0x3c



        /**/
    }
}
 8005758:	ecbd 8b02 	vpop	{d8}
 800575c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, Vout);
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	eebc 8ac8 	vcvt.u32.f32	s16, s16
                    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8005764:	2200      	movs	r2, #0
                    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, Vout);
 8005766:	ed83 8a0e 	vstr	s16, [r3, #56]	; 0x38
                    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 800576a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800576c:	e7f4      	b.n	8005758 <HAL_TIM_PeriodElapsedCallback+0xc0>
 800576e:	bf00      	nop
 8005770:	33333333 	.word	0x33333333
 8005774:	3fd33333 	.word	0x3fd33333
 8005778:	200005cc 	.word	0x200005cc
 800577c:	200004b0 	.word	0x200004b0
 8005780:	200003f0 	.word	0x200003f0
 8005784:	200001c8 	.word	0x200001c8
 8005788:	200003e8 	.word	0x200003e8
 800578c:	200000c8 	.word	0x200000c8
 8005790:	200004c0 	.word	0x200004c0
 8005794:	200004a8 	.word	0x200004a8
 8005798:	20000560 	.word	0x20000560
 800579c:	200000c0 	.word	0x200000c0
 80057a0:	20000608 	.word	0x20000608

080057a4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80057a4:	b530      	push	{r4, r5, lr}
 80057a6:	b095      	sub	sp, #84	; 0x54
    RCC_OscInitTypeDef RCC_OscInitStruct;
    RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
     */
    __HAL_RCC_PWR_CLK_ENABLE()
 80057a8:	4b26      	ldr	r3, [pc, #152]	; (8005844 <SystemClock_Config+0xa0>)
 80057aa:	2100      	movs	r1, #0
 80057ac:	9101      	str	r1, [sp, #4]
 80057ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057b0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80057b4:	641a      	str	r2, [r3, #64]	; 0x40
 80057b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057bc:	9301      	str	r3, [sp, #4]
 80057be:	9b01      	ldr	r3, [sp, #4]
    ;

    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80057c0:	4b21      	ldr	r3, [pc, #132]	; (8005848 <SystemClock_Config+0xa4>)
 80057c2:	9102      	str	r1, [sp, #8]
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80057ca:	601a      	str	r2, [r3, #0]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057d2:	9302      	str	r3, [sp, #8]
 80057d4:	9b02      	ldr	r3, [sp, #8]

    /**Initializes the CPU, AHB and APB busses clocks 
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80057d6:	2301      	movs	r3, #1
 80057d8:	9308      	str	r3, [sp, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80057da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80057de:	9309      	str	r3, [sp, #36]	; 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80057e0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80057e4:	2502      	movs	r5, #2
    RCC_OscInitStruct.PLL.PLLM = 4;
 80057e6:	2404      	movs	r4, #4
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80057e8:	930f      	str	r3, [sp, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLN = 168;
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
    RCC_OscInitStruct.PLL.PLLQ = 4;
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80057ea:	a808      	add	r0, sp, #32
    RCC_OscInitStruct.PLL.PLLN = 168;
 80057ec:	23a8      	movs	r3, #168	; 0xa8
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80057ee:	950e      	str	r5, [sp, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLM = 4;
 80057f0:	9410      	str	r4, [sp, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLN = 168;
 80057f2:	9311      	str	r3, [sp, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80057f4:	9512      	str	r5, [sp, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ = 4;
 80057f6:	9413      	str	r4, [sp, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80057f8:	f7fd f8e2 	bl	80029c0 <HAL_RCC_OscConfig>
 80057fc:	b100      	cbz	r0, 8005800 <SystemClock_Config+0x5c>
 80057fe:	e7fe      	b.n	80057fe <SystemClock_Config+0x5a>
        _Error_Handler(__FILE__, __LINE__);
    }

    /**Initializes the CPU, AHB and APB busses clocks 
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8005800:	230f      	movs	r3, #15
 8005802:	9303      	str	r3, [sp, #12]
            | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005804:	9005      	str	r0, [sp, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005806:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800580a:	2105      	movs	r1, #5
 800580c:	a803      	add	r0, sp, #12
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800580e:	9504      	str	r5, [sp, #16]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005810:	9306      	str	r3, [sp, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8005812:	9307      	str	r3, [sp, #28]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005814:	f7fd fa84 	bl	8002d20 <HAL_RCC_ClockConfig>
 8005818:	4605      	mov	r5, r0
 800581a:	b100      	cbz	r0, 800581e <SystemClock_Config+0x7a>
 800581c:	e7fe      	b.n	800581c <SystemClock_Config+0x78>
        _Error_Handler(__FILE__, __LINE__);
    }

    /**Configure the Systick interrupt time 
     */
    HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 800581e:	f7fd fb19 	bl	8002e54 <HAL_RCC_GetHCLKFreq>
 8005822:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005826:	fbb0 f0f3 	udiv	r0, r0, r3
 800582a:	f7fb fdb7 	bl	800139c <HAL_SYSTICK_Config>

    /**Configure the Systick 
     */
    HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800582e:	4620      	mov	r0, r4
 8005830:	f7fb fdca 	bl	80013c8 <HAL_SYSTICK_CLKSourceConfig>

    /* SysTick_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8005834:	462a      	mov	r2, r5
 8005836:	4629      	mov	r1, r5
 8005838:	f04f 30ff 	mov.w	r0, #4294967295
 800583c:	f7fb fd6e 	bl	800131c <HAL_NVIC_SetPriority>
}
 8005840:	b015      	add	sp, #84	; 0x54
 8005842:	bd30      	pop	{r4, r5, pc}
 8005844:	40023800 	.word	0x40023800
 8005848:	40007000 	.word	0x40007000

0800584c <main>:
{
 800584c:	b507      	push	{r0, r1, r2, lr}
    HAL_Init();
 800584e:	f7fb fb3f 	bl	8000ed0 <HAL_Init>
    MPU9250_Init(&hi2c1, &mpu2, AFS_4G, GFS_250DPS, MFS_16BITS);
 8005852:	2401      	movs	r4, #1
    SystemClock_Config();
 8005854:	f7ff ffa6 	bl	80057a4 <SystemClock_Config>
    MX_GPIO_Init();
 8005858:	f7ff fd54 	bl	8005304 <MX_GPIO_Init>
    MX_DMA_Init();
 800585c:	f7ff fd20 	bl	80052a0 <MX_DMA_Init>
    MX_I2C1_Init();
 8005860:	f7ff fdea 	bl	8005438 <MX_I2C1_Init>
    MX_I2C2_Init();
 8005864:	f7ff fe0c 	bl	8005480 <MX_I2C2_Init>
    MX_TIM1_Init();
 8005868:	f000 fa4c 	bl	8005d04 <MX_TIM1_Init>
    MX_TIM2_Init();
 800586c:	f000 f932 	bl	8005ad4 <MX_TIM2_Init>
    MX_TIM3_Init();
 8005870:	f000 fac4 	bl	8005dfc <MX_TIM3_Init>
    MX_TIM4_Init();
 8005874:	f000 fb26 	bl	8005ec4 <MX_TIM4_Init>
    MX_USART3_Init();
 8005878:	f000 fb8c 	bl	8005f94 <MX_USART3_Init>
    MX_TIM10_Init();
 800587c:	f000 f95c 	bl	8005b38 <MX_TIM10_Init>
    MX_ADC2_Init();
 8005880:	f7ff fc9e 	bl	80051c0 <MX_ADC2_Init>
    HAL_Delay(100);
 8005884:	2064      	movs	r0, #100	; 0x64
 8005886:	f7fb fb4f 	bl	8000f28 <HAL_Delay>
    MPU9250_Init(&hi2c1, &mpu2, AFS_4G, GFS_250DPS, MFS_16BITS);
 800588a:	4622      	mov	r2, r4
 800588c:	2300      	movs	r3, #0
 800588e:	491d      	ldr	r1, [pc, #116]	; (8005904 <main+0xb8>)
 8005890:	481d      	ldr	r0, [pc, #116]	; (8005908 <main+0xbc>)
 8005892:	9400      	str	r4, [sp, #0]
 8005894:	f7ff fc5c 	bl	8005150 <MPU9250_Init>
    dutya=0;
 8005898:	ed9f 8a1c 	vldr	s16, [pc, #112]	; 800590c <main+0xc0>
 800589c:	4b1c      	ldr	r3, [pc, #112]	; (8005910 <main+0xc4>)
    HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 800589e:	481d      	ldr	r0, [pc, #116]	; (8005914 <main+0xc8>)
    dutya=0;
 80058a0:	ed83 8a00 	vstr	s16, [r3]
    HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80058a4:	2104      	movs	r1, #4
 80058a6:	f7fd fb8b 	bl	8002fc0 <HAL_TIM_Encoder_Start>
    phi_ref = 0;
 80058aa:	4b1b      	ldr	r3, [pc, #108]	; (8005918 <main+0xcc>)
    pid_init(&pid1, 10, 0.3, 0);
 80058ac:	eddf 0a1b 	vldr	s1, [pc, #108]	; 800591c <main+0xd0>
    phi_ref = 0;
 80058b0:	2100      	movs	r1, #0
 80058b2:	2000      	movs	r0, #0
 80058b4:	e9c3 0100 	strd	r0, r1, [r3]
    pid_init(&pid1, 10, 0.3, 0);
 80058b8:	eeb0 1a48 	vmov.f32	s2, s16
 80058bc:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80058c0:	4817      	ldr	r0, [pc, #92]	; (8005920 <main+0xd4>)
 80058c2:	f7fe f909 	bl	8003ad8 <pid_init>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_SET);
 80058c6:	4622      	mov	r2, r4
 80058c8:	2102      	movs	r1, #2
 80058ca:	4816      	ldr	r0, [pc, #88]	; (8005924 <main+0xd8>)
 80058cc:	f7fb ffce 	bl	800186c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);
 80058d0:	4622      	mov	r2, r4
 80058d2:	2108      	movs	r1, #8
 80058d4:	4813      	ldr	r0, [pc, #76]	; (8005924 <main+0xd8>)
 80058d6:	f7fb ffc9 	bl	800186c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_SET);
 80058da:	4622      	mov	r2, r4
 80058dc:	2120      	movs	r1, #32
 80058de:	4811      	ldr	r0, [pc, #68]	; (8005924 <main+0xd8>)
 80058e0:	f7fb ffc4 	bl	800186c <HAL_GPIO_WritePin>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80058e4:	2100      	movs	r1, #0
 80058e6:	4810      	ldr	r0, [pc, #64]	; (8005928 <main+0xdc>)
 80058e8:	f7fd fe6c 	bl	80035c4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80058ec:	2104      	movs	r1, #4
 80058ee:	480e      	ldr	r0, [pc, #56]	; (8005928 <main+0xdc>)
 80058f0:	f7fd fe68 	bl	80035c4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80058f4:	2108      	movs	r1, #8
 80058f6:	480c      	ldr	r0, [pc, #48]	; (8005928 <main+0xdc>)
 80058f8:	f7fd fe64 	bl	80035c4 <HAL_TIM_PWM_Start>
    HAL_TIM_Base_Start_IT(&htim10);
 80058fc:	480b      	ldr	r0, [pc, #44]	; (800592c <main+0xe0>)
 80058fe:	f7fd fb53 	bl	8002fa8 <HAL_TIM_Base_Start_IT>
 8005902:	e7fe      	b.n	8005902 <main+0xb6>
 8005904:	200003f0 	.word	0x200003f0
 8005908:	200001c8 	.word	0x200001c8
 800590c:	00000000 	.word	0x00000000
 8005910:	200004b0 	.word	0x200004b0
 8005914:	20000680 	.word	0x20000680
 8005918:	200004c0 	.word	0x200004c0
 800591c:	3e99999a 	.word	0x3e99999a
 8005920:	20000560 	.word	0x20000560
 8005924:	40020c00 	.word	0x40020c00
 8005928:	20000608 	.word	0x20000608
 800592c:	200005cc 	.word	0x200005cc

08005930 <_Error_Handler>:
 * @param  file: The file name as string.
 * @param  line: The line in file as a number.
 * @retval None
 */
void _Error_Handler(char *file, int line)
{
 8005930:	e7fe      	b.n	8005930 <_Error_Handler>
	...

08005934 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005934:	b513      	push	{r0, r1, r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005936:	4b22      	ldr	r3, [pc, #136]	; (80059c0 <HAL_MspInit+0x8c>)
 8005938:	2400      	movs	r4, #0
 800593a:	9400      	str	r4, [sp, #0]
 800593c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800593e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005942:	645a      	str	r2, [r3, #68]	; 0x44
 8005944:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005946:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800594a:	9200      	str	r2, [sp, #0]
 800594c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800594e:	9401      	str	r4, [sp, #4]
 8005950:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005952:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005956:	641a      	str	r2, [r3, #64]	; 0x40
 8005958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800595e:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005960:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 8005962:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005964:	f7fb fcc8 	bl	80012f8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8005968:	4622      	mov	r2, r4
 800596a:	4621      	mov	r1, r4
 800596c:	f06f 000b 	mvn.w	r0, #11
 8005970:	f7fb fcd4 	bl	800131c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8005974:	4622      	mov	r2, r4
 8005976:	4621      	mov	r1, r4
 8005978:	f06f 000a 	mvn.w	r0, #10
 800597c:	f7fb fcce 	bl	800131c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8005980:	4622      	mov	r2, r4
 8005982:	4621      	mov	r1, r4
 8005984:	f06f 0009 	mvn.w	r0, #9
 8005988:	f7fb fcc8 	bl	800131c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800598c:	4622      	mov	r2, r4
 800598e:	4621      	mov	r1, r4
 8005990:	f06f 0004 	mvn.w	r0, #4
 8005994:	f7fb fcc2 	bl	800131c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8005998:	4622      	mov	r2, r4
 800599a:	4621      	mov	r1, r4
 800599c:	f06f 0003 	mvn.w	r0, #3
 80059a0:	f7fb fcbc 	bl	800131c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80059a4:	4622      	mov	r2, r4
 80059a6:	4621      	mov	r1, r4
 80059a8:	f06f 0001 	mvn.w	r0, #1
 80059ac:	f7fb fcb6 	bl	800131c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80059b0:	4622      	mov	r2, r4
 80059b2:	4621      	mov	r1, r4
 80059b4:	f04f 30ff 	mov.w	r0, #4294967295
 80059b8:	f7fb fcb0 	bl	800131c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80059bc:	b002      	add	sp, #8
 80059be:	bd10      	pop	{r4, pc}
 80059c0:	40023800 	.word	0x40023800

080059c4 <NMI_Handler>:
 80059c4:	4770      	bx	lr

080059c6 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80059c6:	e7fe      	b.n	80059c6 <HardFault_Handler>

080059c8 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80059c8:	e7fe      	b.n	80059c8 <MemManage_Handler>

080059ca <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80059ca:	e7fe      	b.n	80059ca <BusFault_Handler>

080059cc <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80059cc:	e7fe      	b.n	80059cc <UsageFault_Handler>

080059ce <SVC_Handler>:
 80059ce:	4770      	bx	lr

080059d0 <DebugMon_Handler>:
 80059d0:	4770      	bx	lr

080059d2 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80059d2:	4770      	bx	lr

080059d4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80059d4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80059d6:	f7fb fa95 	bl	8000f04 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80059da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80059de:	f7fb bd00 	b.w	80013e2 <HAL_SYSTICK_IRQHandler>
	...

080059e4 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80059e4:	4801      	ldr	r0, [pc, #4]	; (80059ec <DMA1_Stream0_IRQHandler+0x8>)
 80059e6:	f7fb bda7 	b.w	8001538 <HAL_DMA_IRQHandler>
 80059ea:	bf00      	nop
 80059ec:	20000330 	.word	0x20000330

080059f0 <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 80059f0:	4801      	ldr	r0, [pc, #4]	; (80059f8 <DMA1_Stream2_IRQHandler+0x8>)
 80059f2:	f7fb bda1 	b.w	8001538 <HAL_DMA_IRQHandler>
 80059f6:	bf00      	nop
 80059f8:	20000270 	.word	0x20000270

080059fc <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80059fc:	4801      	ldr	r0, [pc, #4]	; (8005a04 <DMA1_Stream6_IRQHandler+0x8>)
 80059fe:	f7fb bd9b 	b.w	8001538 <HAL_DMA_IRQHandler>
 8005a02:	bf00      	nop
 8005a04:	20000168 	.word	0x20000168

08005a08 <ADC_IRQHandler>:

/**
* @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
*/
void ADC_IRQHandler(void)
{
 8005a08:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005a0a:	4804      	ldr	r0, [pc, #16]	; (8005a1c <ADC_IRQHandler+0x14>)
 8005a0c:	f7fb fb47 	bl	800109e <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8005a10:	4803      	ldr	r0, [pc, #12]	; (8005a20 <ADC_IRQHandler+0x18>)
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8005a12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_ADC_IRQHandler(&hadc2);
 8005a16:	f7fb bb42 	b.w	800109e <HAL_ADC_IRQHandler>
 8005a1a:	bf00      	nop
 8005a1c:	20000120 	.word	0x20000120
 8005a20:	200000d8 	.word	0x200000d8

08005a24 <TIM1_UP_TIM10_IRQHandler>:

/**
* @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
*/
void TIM1_UP_TIM10_IRQHandler(void)
{
 8005a24:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005a26:	4804      	ldr	r0, [pc, #16]	; (8005a38 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8005a28:	f7fd fba9 	bl	800317e <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8005a2c:	4803      	ldr	r0, [pc, #12]	; (8005a3c <TIM1_UP_TIM10_IRQHandler+0x18>)
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8005a2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim10);
 8005a32:	f7fd bba4 	b.w	800317e <HAL_TIM_IRQHandler>
 8005a36:	bf00      	nop
 8005a38:	20000644 	.word	0x20000644
 8005a3c:	200005cc 	.word	0x200005cc

08005a40 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005a40:	4801      	ldr	r0, [pc, #4]	; (8005a48 <I2C1_EV_IRQHandler+0x8>)
 8005a42:	f7fc bb93 	b.w	800216c <HAL_I2C_EV_IRQHandler>
 8005a46:	bf00      	nop
 8005a48:	200001c8 	.word	0x200001c8

08005a4c <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8005a4c:	4801      	ldr	r0, [pc, #4]	; (8005a54 <I2C1_ER_IRQHandler+0x8>)
 8005a4e:	f7fc bef7 	b.w	8002840 <HAL_I2C_ER_IRQHandler>
 8005a52:	bf00      	nop
 8005a54:	200001c8 	.word	0x200001c8

08005a58 <I2C2_EV_IRQHandler>:
void I2C2_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8005a58:	4801      	ldr	r0, [pc, #4]	; (8005a60 <I2C2_EV_IRQHandler+0x8>)
 8005a5a:	f7fc bb87 	b.w	800216c <HAL_I2C_EV_IRQHandler>
 8005a5e:	bf00      	nop
 8005a60:	2000021c 	.word	0x2000021c

08005a64 <I2C2_ER_IRQHandler>:
void I2C2_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8005a64:	4801      	ldr	r0, [pc, #4]	; (8005a6c <I2C2_ER_IRQHandler+0x8>)
 8005a66:	f7fc beeb 	b.w	8002840 <HAL_I2C_ER_IRQHandler>
 8005a6a:	bf00      	nop
 8005a6c:	2000021c 	.word	0x2000021c

08005a70 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_USART_IRQHandler(&husart3);
 8005a70:	4801      	ldr	r0, [pc, #4]	; (8005a78 <USART3_IRQHandler+0x8>)
 8005a72:	f7fd bf71 	b.w	8003958 <HAL_USART_IRQHandler>
 8005a76:	bf00      	nop
 8005a78:	200006bc 	.word	0x200006bc

08005a7c <DMA1_Stream7_IRQHandler>:
void DMA1_Stream7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8005a7c:	4801      	ldr	r0, [pc, #4]	; (8005a84 <DMA1_Stream7_IRQHandler+0x8>)
 8005a7e:	f7fb bd5b 	b.w	8001538 <HAL_DMA_IRQHandler>
 8005a82:	bf00      	nop
 8005a84:	200002d0 	.word	0x200002d0

08005a88 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005a88:	490f      	ldr	r1, [pc, #60]	; (8005ac8 <SystemInit+0x40>)
 8005a8a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8005a8e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005a92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8005a96:	4b0d      	ldr	r3, [pc, #52]	; (8005acc <SystemInit+0x44>)
 8005a98:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005a9a:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8005a9c:	f042 0201 	orr.w	r2, r2, #1
 8005aa0:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8005aa2:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8005aaa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005aae:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8005ab0:	4a07      	ldr	r2, [pc, #28]	; (8005ad0 <SystemInit+0x48>)
 8005ab2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005aba:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8005abc:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005abe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005ac2:	608b      	str	r3, [r1, #8]
 8005ac4:	4770      	bx	lr
 8005ac6:	bf00      	nop
 8005ac8:	e000ed00 	.word	0xe000ed00
 8005acc:	40023800 	.word	0x40023800
 8005ad0:	24003010 	.word	0x24003010

08005ad4 <MX_TIM2_Init>:

}

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005ad4:	b510      	push	{r4, lr}
  TIM_Encoder_InitTypeDef sConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim2.Instance = TIM2;
 8005ad6:	4816      	ldr	r0, [pc, #88]	; (8005b30 <MX_TIM2_Init+0x5c>)
  htim2.Init.Prescaler = 0;
 8005ad8:	2400      	movs	r4, #0
 8005ada:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
{
 8005ade:	b08c      	sub	sp, #48	; 0x30
  htim2.Init.Prescaler = 0;
 8005ae0:	e880 0018 	stmia.w	r0, {r3, r4}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 1200;//4294967295
 8005ae4:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8005ae8:	60c3      	str	r3, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005aea:	2303      	movs	r3, #3
 8005aec:	9303      	str	r3, [sp, #12]
  sConfig.IC1Filter = 0;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 0;
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8005aee:	a903      	add	r1, sp, #12
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005af0:	2301      	movs	r3, #1
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005af2:	6084      	str	r4, [r0, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005af4:	6104      	str	r4, [r0, #16]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005af6:	9404      	str	r4, [sp, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005af8:	9305      	str	r3, [sp, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005afa:	9406      	str	r4, [sp, #24]
  sConfig.IC1Filter = 0;
 8005afc:	9407      	str	r4, [sp, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005afe:	9408      	str	r4, [sp, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005b00:	9309      	str	r3, [sp, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005b02:	940a      	str	r4, [sp, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8005b04:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8005b06:	f7fd fc75 	bl	80033f4 <HAL_TIM_Encoder_Init>
 8005b0a:	b118      	cbz	r0, 8005b14 <MX_TIM2_Init+0x40>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005b0c:	2196      	movs	r1, #150	; 0x96
 8005b0e:	4809      	ldr	r0, [pc, #36]	; (8005b34 <MX_TIM2_Init+0x60>)
 8005b10:	f7ff ff0e 	bl	8005930 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005b14:	a901      	add	r1, sp, #4
 8005b16:	4806      	ldr	r0, [pc, #24]	; (8005b30 <MX_TIM2_Init+0x5c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005b18:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005b1a:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005b1c:	f7fd fd6c 	bl	80035f8 <HAL_TIMEx_MasterConfigSynchronization>
 8005b20:	b118      	cbz	r0, 8005b2a <MX_TIM2_Init+0x56>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005b22:	219d      	movs	r1, #157	; 0x9d
 8005b24:	4803      	ldr	r0, [pc, #12]	; (8005b34 <MX_TIM2_Init+0x60>)
 8005b26:	f7ff ff03 	bl	8005930 <_Error_Handler>
  }

}
 8005b2a:	b00c      	add	sp, #48	; 0x30
 8005b2c:	bd10      	pop	{r4, pc}
 8005b2e:	bf00      	nop
 8005b30:	20000680 	.word	0x20000680
 8005b34:	08006d5a 	.word	0x08006d5a

08005b38 <MX_TIM10_Init>:
}
/* TIM10 init function */
void MX_TIM10_Init(void)
{

  htim10.Instance = TIM10;
 8005b38:	480b      	ldr	r0, [pc, #44]	; (8005b68 <MX_TIM10_Init+0x30>)
  htim10.Init.Prescaler = 167;
 8005b3a:	490c      	ldr	r1, [pc, #48]	; (8005b6c <MX_TIM10_Init+0x34>)
{
 8005b3c:	b508      	push	{r3, lr}
  htim10.Init.Prescaler = 167;
 8005b3e:	23a7      	movs	r3, #167	; 0xa7
 8005b40:	e880 000a 	stmia.w	r0, {r1, r3}
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim10.Init.Period = 999;
 8005b44:	f240 32e7 	movw	r2, #999	; 0x3e7
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	6083      	str	r3, [r0, #8]
  htim10.Init.Period = 999;
 8005b4c:	60c2      	str	r2, [r0, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005b4e:	6103      	str	r3, [r0, #16]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8005b50:	f7fd fc1c 	bl	800338c <HAL_TIM_Base_Init>
 8005b54:	b130      	cbz	r0, 8005b64 <MX_TIM10_Init+0x2c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005b56:	f240 111f 	movw	r1, #287	; 0x11f
 8005b5a:	4805      	ldr	r0, [pc, #20]	; (8005b70 <MX_TIM10_Init+0x38>)
  }

}
 8005b5c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8005b60:	f7ff bee6 	b.w	8005930 <_Error_Handler>
 8005b64:	bd08      	pop	{r3, pc}
 8005b66:	bf00      	nop
 8005b68:	200005cc 	.word	0x200005cc
 8005b6c:	40014400 	.word	0x40014400
 8005b70:	08006d5a 	.word	0x08006d5a

08005b74 <HAL_TIM_Encoder_MspInit>:
}



void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8005b74:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(tim_encoderHandle->Instance==TIM2)
 8005b76:	6803      	ldr	r3, [r0, #0]
 8005b78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b7c:	d117      	bne.n	8005bae <HAL_TIM_Encoder_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005b7e:	2300      	movs	r3, #0
 8005b80:	9300      	str	r3, [sp, #0]
 8005b82:	4b0c      	ldr	r3, [pc, #48]	; (8005bb4 <HAL_TIM_Encoder_MspInit+0x40>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b84:	480c      	ldr	r0, [pc, #48]	; (8005bb8 <HAL_TIM_Encoder_MspInit+0x44>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005b86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b88:	f042 0201 	orr.w	r2, r2, #1
 8005b8c:	641a      	str	r2, [r3, #64]	; 0x40
 8005b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b90:	f003 0301 	and.w	r3, r3, #1
 8005b94:	9300      	str	r3, [sp, #0]
 8005b96:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b98:	2302      	movs	r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005b9a:	2203      	movs	r2, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b9c:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b9e:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005ba0:	2301      	movs	r3, #1
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005ba2:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005ba4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ba6:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005ba8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005baa:	f7fb fd7f 	bl	80016ac <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8005bae:	b007      	add	sp, #28
 8005bb0:	f85d fb04 	ldr.w	pc, [sp], #4
 8005bb4:	40023800 	.word	0x40023800
 8005bb8:	40020000 	.word	0x40020000

08005bbc <HAL_TIM_Base_MspInit>:


void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005bbc:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  if(tim_baseHandle->Instance==TIM1)
 8005bbe:	6803      	ldr	r3, [r0, #0]
 8005bc0:	4a24      	ldr	r2, [pc, #144]	; (8005c54 <HAL_TIM_Base_MspInit+0x98>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d113      	bne.n	8005bee <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005bc6:	4b24      	ldr	r3, [pc, #144]	; (8005c58 <HAL_TIM_Base_MspInit+0x9c>)
 8005bc8:	2200      	movs	r2, #0
 8005bca:	9200      	str	r2, [sp, #0]
 8005bcc:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8005bce:	f041 0101 	orr.w	r1, r1, #1
 8005bd2:	6459      	str	r1, [r3, #68]	; 0x44
 8005bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bd6:	f003 0301 	and.w	r3, r3, #1
 8005bda:	9300      	str	r3, [sp, #0]
 8005bdc:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8005bde:	4611      	mov	r1, r2
 8005be0:	2019      	movs	r0, #25
 8005be2:	f7fb fb9b 	bl	800131c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8005be6:	2019      	movs	r0, #25
 8005be8:	f7fb fbcc 	bl	8001384 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8005bec:	e00e      	b.n	8005c0c <HAL_TIM_Base_MspInit+0x50>
  else if(tim_baseHandle->Instance==TIM3)
 8005bee:	4a1b      	ldr	r2, [pc, #108]	; (8005c5c <HAL_TIM_Base_MspInit+0xa0>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d10e      	bne.n	8005c12 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	9301      	str	r3, [sp, #4]
 8005bf8:	4b17      	ldr	r3, [pc, #92]	; (8005c58 <HAL_TIM_Base_MspInit+0x9c>)
 8005bfa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005bfc:	f042 0202 	orr.w	r2, r2, #2
 8005c00:	641a      	str	r2, [r3, #64]	; 0x40
 8005c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c04:	f003 0302 	and.w	r3, r3, #2
 8005c08:	9301      	str	r3, [sp, #4]
 8005c0a:	9b01      	ldr	r3, [sp, #4]
}
 8005c0c:	b005      	add	sp, #20
 8005c0e:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(tim_baseHandle->Instance==TIM4)
 8005c12:	4a13      	ldr	r2, [pc, #76]	; (8005c60 <HAL_TIM_Base_MspInit+0xa4>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d10c      	bne.n	8005c32 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005c18:	2300      	movs	r3, #0
 8005c1a:	9302      	str	r3, [sp, #8]
 8005c1c:	4b0e      	ldr	r3, [pc, #56]	; (8005c58 <HAL_TIM_Base_MspInit+0x9c>)
 8005c1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c20:	f042 0204 	orr.w	r2, r2, #4
 8005c24:	641a      	str	r2, [r3, #64]	; 0x40
 8005c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c28:	f003 0304 	and.w	r3, r3, #4
 8005c2c:	9302      	str	r3, [sp, #8]
 8005c2e:	9b02      	ldr	r3, [sp, #8]
 8005c30:	e7ec      	b.n	8005c0c <HAL_TIM_Base_MspInit+0x50>
  else if(tim_baseHandle->Instance==TIM10)
 8005c32:	4a0c      	ldr	r2, [pc, #48]	; (8005c64 <HAL_TIM_Base_MspInit+0xa8>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d1e9      	bne.n	8005c0c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8005c38:	4b07      	ldr	r3, [pc, #28]	; (8005c58 <HAL_TIM_Base_MspInit+0x9c>)
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	9203      	str	r2, [sp, #12]
 8005c3e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8005c40:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8005c44:	6459      	str	r1, [r3, #68]	; 0x44
 8005c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c4c:	9303      	str	r3, [sp, #12]
 8005c4e:	9b03      	ldr	r3, [sp, #12]
 8005c50:	e7c5      	b.n	8005bde <HAL_TIM_Base_MspInit+0x22>
 8005c52:	bf00      	nop
 8005c54:	40010000 	.word	0x40010000
 8005c58:	40023800 	.word	0x40023800
 8005c5c:	40000400 	.word	0x40000400
 8005c60:	40000800 	.word	0x40000800
 8005c64:	40014400 	.word	0x40014400

08005c68 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005c68:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(timHandle->Instance==TIM1)
 8005c6a:	6803      	ldr	r3, [r0, #0]
 8005c6c:	4a1e      	ldr	r2, [pc, #120]	; (8005ce8 <HAL_TIM_MspPostInit+0x80>)
 8005c6e:	4293      	cmp	r3, r2
{
 8005c70:	b086      	sub	sp, #24
  if(timHandle->Instance==TIM1)
 8005c72:	d110      	bne.n	8005c96 <HAL_TIM_MspPostInit+0x2e>
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 8005c74:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 8005c78:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005c7a:	2312      	movs	r3, #18
 8005c7c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c82:	2303      	movs	r3, #3
 8005c84:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005c86:	4819      	ldr	r0, [pc, #100]	; (8005cec <HAL_TIM_MspPostInit+0x84>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005c8c:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005c8e:	f7fb fd0d 	bl	80016ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8005c92:	b006      	add	sp, #24
 8005c94:	bd70      	pop	{r4, r5, r6, pc}
  else if(timHandle->Instance==TIM3)
 8005c96:	4a16      	ldr	r2, [pc, #88]	; (8005cf0 <HAL_TIM_MspPostInit+0x88>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d115      	bne.n	8005cc8 <HAL_TIM_MspPostInit+0x60>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c9c:	2402      	movs	r4, #2
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005c9e:	23c0      	movs	r3, #192	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ca0:	2600      	movs	r6, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ca2:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ca4:	a901      	add	r1, sp, #4
 8005ca6:	4813      	ldr	r0, [pc, #76]	; (8005cf4 <HAL_TIM_MspPostInit+0x8c>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005ca8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005caa:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cac:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005cae:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005cb0:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005cb2:	f7fb fcfb 	bl	80016ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cba:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cbc:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005cbe:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005cc0:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005cc2:	a901      	add	r1, sp, #4
 8005cc4:	480c      	ldr	r0, [pc, #48]	; (8005cf8 <HAL_TIM_MspPostInit+0x90>)
 8005cc6:	e7e2      	b.n	8005c8e <HAL_TIM_MspPostInit+0x26>
  else if(timHandle->Instance==TIM4)
 8005cc8:	4a0c      	ldr	r2, [pc, #48]	; (8005cfc <HAL_TIM_MspPostInit+0x94>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d1e1      	bne.n	8005c92 <HAL_TIM_MspPostInit+0x2a>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8005cce:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cd2:	2200      	movs	r2, #0
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8005cd4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cd6:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cd8:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005cda:	2203      	movs	r2, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cdc:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005cde:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005ce0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005ce2:	a901      	add	r1, sp, #4
 8005ce4:	4806      	ldr	r0, [pc, #24]	; (8005d00 <HAL_TIM_MspPostInit+0x98>)
 8005ce6:	e7d2      	b.n	8005c8e <HAL_TIM_MspPostInit+0x26>
 8005ce8:	40010000 	.word	0x40010000
 8005cec:	40021000 	.word	0x40021000
 8005cf0:	40000400 	.word	0x40000400
 8005cf4:	40020000 	.word	0x40020000
 8005cf8:	40020400 	.word	0x40020400
 8005cfc:	40000800 	.word	0x40000800
 8005d00:	40020c00 	.word	0x40020c00

08005d04 <MX_TIM1_Init>:
{
 8005d04:	b500      	push	{lr}
  htim1.Instance = TIM1;
 8005d06:	483a      	ldr	r0, [pc, #232]	; (8005df0 <MX_TIM1_Init+0xec>)
  htim1.Init.Prescaler = 6;
 8005d08:	493a      	ldr	r1, [pc, #232]	; (8005df4 <MX_TIM1_Init+0xf0>)
 8005d0a:	2306      	movs	r3, #6
{
 8005d0c:	b095      	sub	sp, #84	; 0x54
  htim1.Init.Prescaler = 6;
 8005d0e:	e880 000a 	stmia.w	r0, {r1, r3}
  htim1.Init.Period = 399;
 8005d12:	f240 128f 	movw	r2, #399	; 0x18f
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d16:	2300      	movs	r3, #0
 8005d18:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 399;
 8005d1a:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005d1c:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8005d1e:	6143      	str	r3, [r0, #20]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005d20:	f7fd fb34 	bl	800338c <HAL_TIM_Base_Init>
 8005d24:	b118      	cbz	r0, 8005d2e <MX_TIM1_Init+0x2a>
    _Error_Handler(__FILE__, __LINE__);
 8005d26:	2145      	movs	r1, #69	; 0x45
 8005d28:	4833      	ldr	r0, [pc, #204]	; (8005df8 <MX_TIM1_Init+0xf4>)
 8005d2a:	f7ff fe01 	bl	8005930 <_Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005d2e:	a914      	add	r1, sp, #80	; 0x50
 8005d30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d34:	f841 3d48 	str.w	r3, [r1, #-72]!
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005d38:	482d      	ldr	r0, [pc, #180]	; (8005df0 <MX_TIM1_Init+0xec>)
 8005d3a:	f7fd f963 	bl	8003004 <HAL_TIM_ConfigClockSource>
 8005d3e:	b118      	cbz	r0, 8005d48 <MX_TIM1_Init+0x44>
    _Error_Handler(__FILE__, __LINE__);
 8005d40:	214b      	movs	r1, #75	; 0x4b
 8005d42:	482d      	ldr	r0, [pc, #180]	; (8005df8 <MX_TIM1_Init+0xf4>)
 8005d44:	f7ff fdf4 	bl	8005930 <_Error_Handler>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005d48:	4829      	ldr	r0, [pc, #164]	; (8005df0 <MX_TIM1_Init+0xec>)
 8005d4a:	f7fd fb39 	bl	80033c0 <HAL_TIM_PWM_Init>
 8005d4e:	b118      	cbz	r0, 8005d58 <MX_TIM1_Init+0x54>
    _Error_Handler(__FILE__, __LINE__);
 8005d50:	2150      	movs	r1, #80	; 0x50
 8005d52:	4829      	ldr	r0, [pc, #164]	; (8005df8 <MX_TIM1_Init+0xf4>)
 8005d54:	f7ff fdec 	bl	8005930 <_Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005d58:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005d5a:	4669      	mov	r1, sp
 8005d5c:	4824      	ldr	r0, [pc, #144]	; (8005df0 <MX_TIM1_Init+0xec>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005d5e:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005d60:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005d62:	f7fd fc49 	bl	80035f8 <HAL_TIMEx_MasterConfigSynchronization>
 8005d66:	b118      	cbz	r0, 8005d70 <MX_TIM1_Init+0x6c>
    _Error_Handler(__FILE__, __LINE__);
 8005d68:	2157      	movs	r1, #87	; 0x57
 8005d6a:	4823      	ldr	r0, [pc, #140]	; (8005df8 <MX_TIM1_Init+0xf4>)
 8005d6c:	f7ff fde0 	bl	8005930 <_Error_Handler>
  sConfigOC.Pulse = 0;
 8005d70:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005d72:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005d74:	a906      	add	r1, sp, #24
 8005d76:	481e      	ldr	r0, [pc, #120]	; (8005df0 <MX_TIM1_Init+0xec>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005d78:	9306      	str	r3, [sp, #24]
  sConfigOC.Pulse = 0;
 8005d7a:	9207      	str	r2, [sp, #28]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005d7c:	9208      	str	r2, [sp, #32]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005d7e:	9209      	str	r2, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005d80:	920a      	str	r2, [sp, #40]	; 0x28
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005d82:	920b      	str	r2, [sp, #44]	; 0x2c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005d84:	920c      	str	r2, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005d86:	f7fd fbaf 	bl	80034e8 <HAL_TIM_PWM_ConfigChannel>
 8005d8a:	b118      	cbz	r0, 8005d94 <MX_TIM1_Init+0x90>
    _Error_Handler(__FILE__, __LINE__);
 8005d8c:	2163      	movs	r1, #99	; 0x63
 8005d8e:	481a      	ldr	r0, [pc, #104]	; (8005df8 <MX_TIM1_Init+0xf4>)
 8005d90:	f7ff fdce 	bl	8005930 <_Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005d94:	2204      	movs	r2, #4
 8005d96:	a906      	add	r1, sp, #24
 8005d98:	4815      	ldr	r0, [pc, #84]	; (8005df0 <MX_TIM1_Init+0xec>)
 8005d9a:	f7fd fba5 	bl	80034e8 <HAL_TIM_PWM_ConfigChannel>
 8005d9e:	b118      	cbz	r0, 8005da8 <MX_TIM1_Init+0xa4>
    _Error_Handler(__FILE__, __LINE__);
 8005da0:	2168      	movs	r1, #104	; 0x68
 8005da2:	4815      	ldr	r0, [pc, #84]	; (8005df8 <MX_TIM1_Init+0xf4>)
 8005da4:	f7ff fdc4 	bl	8005930 <_Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005da8:	2208      	movs	r2, #8
 8005daa:	a906      	add	r1, sp, #24
 8005dac:	4810      	ldr	r0, [pc, #64]	; (8005df0 <MX_TIM1_Init+0xec>)
 8005dae:	f7fd fb9b 	bl	80034e8 <HAL_TIM_PWM_ConfigChannel>
 8005db2:	b118      	cbz	r0, 8005dbc <MX_TIM1_Init+0xb8>
    _Error_Handler(__FILE__, __LINE__);
 8005db4:	216d      	movs	r1, #109	; 0x6d
 8005db6:	4810      	ldr	r0, [pc, #64]	; (8005df8 <MX_TIM1_Init+0xf4>)
 8005db8:	f7ff fdba 	bl	8005930 <_Error_Handler>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005dbc:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005dbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005dc2:	a90d      	add	r1, sp, #52	; 0x34
 8005dc4:	480a      	ldr	r0, [pc, #40]	; (8005df0 <MX_TIM1_Init+0xec>)
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005dc6:	930d      	str	r3, [sp, #52]	; 0x34
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005dc8:	930e      	str	r3, [sp, #56]	; 0x38
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005dca:	930f      	str	r3, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.DeadTime = 0;
 8005dcc:	9310      	str	r3, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005dce:	9311      	str	r3, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005dd0:	9212      	str	r2, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005dd2:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005dd4:	f7fd fc32 	bl	800363c <HAL_TIMEx_ConfigBreakDeadTime>
 8005dd8:	b118      	cbz	r0, 8005de2 <MX_TIM1_Init+0xde>
    _Error_Handler(__FILE__, __LINE__);
 8005dda:	2179      	movs	r1, #121	; 0x79
 8005ddc:	4806      	ldr	r0, [pc, #24]	; (8005df8 <MX_TIM1_Init+0xf4>)
 8005dde:	f7ff fda7 	bl	8005930 <_Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 8005de2:	4803      	ldr	r0, [pc, #12]	; (8005df0 <MX_TIM1_Init+0xec>)
 8005de4:	f7ff ff40 	bl	8005c68 <HAL_TIM_MspPostInit>
}
 8005de8:	b015      	add	sp, #84	; 0x54
 8005dea:	f85d fb04 	ldr.w	pc, [sp], #4
 8005dee:	bf00      	nop
 8005df0:	20000644 	.word	0x20000644
 8005df4:	40010000 	.word	0x40010000
 8005df8:	08006d5a 	.word	0x08006d5a

08005dfc <MX_TIM3_Init>:
{
 8005dfc:	b500      	push	{lr}
  htim3.Instance = TIM3;
 8005dfe:	482e      	ldr	r0, [pc, #184]	; (8005eb8 <MX_TIM3_Init+0xbc>)
  htim3.Init.Prescaler = 6;
 8005e00:	492e      	ldr	r1, [pc, #184]	; (8005ebc <MX_TIM3_Init+0xc0>)
 8005e02:	2306      	movs	r3, #6
{
 8005e04:	b08f      	sub	sp, #60	; 0x3c
  htim3.Init.Prescaler = 6;
 8005e06:	e880 000a 	stmia.w	r0, {r1, r3}
  htim3.Init.Period = 399;
 8005e0a:	f240 128f 	movw	r2, #399	; 0x18f
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 399;
 8005e12:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005e14:	6103      	str	r3, [r0, #16]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005e16:	f7fd fab9 	bl	800338c <HAL_TIM_Base_Init>
 8005e1a:	b118      	cbz	r0, 8005e24 <MX_TIM3_Init+0x28>
    _Error_Handler(__FILE__, __LINE__);
 8005e1c:	21b0      	movs	r1, #176	; 0xb0
 8005e1e:	4828      	ldr	r0, [pc, #160]	; (8005ec0 <MX_TIM3_Init+0xc4>)
 8005e20:	f7ff fd86 	bl	8005930 <_Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005e24:	a90e      	add	r1, sp, #56	; 0x38
 8005e26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e2a:	f841 3d2c 	str.w	r3, [r1, #-44]!
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005e2e:	4822      	ldr	r0, [pc, #136]	; (8005eb8 <MX_TIM3_Init+0xbc>)
 8005e30:	f7fd f8e8 	bl	8003004 <HAL_TIM_ConfigClockSource>
 8005e34:	b118      	cbz	r0, 8005e3e <MX_TIM3_Init+0x42>
    _Error_Handler(__FILE__, __LINE__);
 8005e36:	21b6      	movs	r1, #182	; 0xb6
 8005e38:	4821      	ldr	r0, [pc, #132]	; (8005ec0 <MX_TIM3_Init+0xc4>)
 8005e3a:	f7ff fd79 	bl	8005930 <_Error_Handler>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005e3e:	481e      	ldr	r0, [pc, #120]	; (8005eb8 <MX_TIM3_Init+0xbc>)
 8005e40:	f7fd fabe 	bl	80033c0 <HAL_TIM_PWM_Init>
 8005e44:	b118      	cbz	r0, 8005e4e <MX_TIM3_Init+0x52>
    _Error_Handler(__FILE__, __LINE__);
 8005e46:	21bb      	movs	r1, #187	; 0xbb
 8005e48:	481d      	ldr	r0, [pc, #116]	; (8005ec0 <MX_TIM3_Init+0xc4>)
 8005e4a:	f7ff fd71 	bl	8005930 <_Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005e4e:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005e50:	a901      	add	r1, sp, #4
 8005e52:	4819      	ldr	r0, [pc, #100]	; (8005eb8 <MX_TIM3_Init+0xbc>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005e54:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005e56:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005e58:	f7fd fbce 	bl	80035f8 <HAL_TIMEx_MasterConfigSynchronization>
 8005e5c:	b118      	cbz	r0, 8005e66 <MX_TIM3_Init+0x6a>
    _Error_Handler(__FILE__, __LINE__);
 8005e5e:	21c2      	movs	r1, #194	; 0xc2
 8005e60:	4817      	ldr	r0, [pc, #92]	; (8005ec0 <MX_TIM3_Init+0xc4>)
 8005e62:	f7ff fd65 	bl	8005930 <_Error_Handler>
  sConfigOC.Pulse = 0;
 8005e66:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005e68:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005e6a:	a907      	add	r1, sp, #28
 8005e6c:	4812      	ldr	r0, [pc, #72]	; (8005eb8 <MX_TIM3_Init+0xbc>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005e6e:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 0;
 8005e70:	9208      	str	r2, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005e72:	9209      	str	r2, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005e74:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005e76:	f7fd fb37 	bl	80034e8 <HAL_TIM_PWM_ConfigChannel>
 8005e7a:	b118      	cbz	r0, 8005e84 <MX_TIM3_Init+0x88>
    _Error_Handler(__FILE__, __LINE__);
 8005e7c:	21cb      	movs	r1, #203	; 0xcb
 8005e7e:	4810      	ldr	r0, [pc, #64]	; (8005ec0 <MX_TIM3_Init+0xc4>)
 8005e80:	f7ff fd56 	bl	8005930 <_Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005e84:	2204      	movs	r2, #4
 8005e86:	a907      	add	r1, sp, #28
 8005e88:	480b      	ldr	r0, [pc, #44]	; (8005eb8 <MX_TIM3_Init+0xbc>)
 8005e8a:	f7fd fb2d 	bl	80034e8 <HAL_TIM_PWM_ConfigChannel>
 8005e8e:	b118      	cbz	r0, 8005e98 <MX_TIM3_Init+0x9c>
    _Error_Handler(__FILE__, __LINE__);
 8005e90:	21d0      	movs	r1, #208	; 0xd0
 8005e92:	480b      	ldr	r0, [pc, #44]	; (8005ec0 <MX_TIM3_Init+0xc4>)
 8005e94:	f7ff fd4c 	bl	8005930 <_Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005e98:	2208      	movs	r2, #8
 8005e9a:	a907      	add	r1, sp, #28
 8005e9c:	4806      	ldr	r0, [pc, #24]	; (8005eb8 <MX_TIM3_Init+0xbc>)
 8005e9e:	f7fd fb23 	bl	80034e8 <HAL_TIM_PWM_ConfigChannel>
 8005ea2:	b118      	cbz	r0, 8005eac <MX_TIM3_Init+0xb0>
    _Error_Handler(__FILE__, __LINE__);
 8005ea4:	21d5      	movs	r1, #213	; 0xd5
 8005ea6:	4806      	ldr	r0, [pc, #24]	; (8005ec0 <MX_TIM3_Init+0xc4>)
 8005ea8:	f7ff fd42 	bl	8005930 <_Error_Handler>
  HAL_TIM_MspPostInit(&htim3);
 8005eac:	4802      	ldr	r0, [pc, #8]	; (8005eb8 <MX_TIM3_Init+0xbc>)
 8005eae:	f7ff fedb 	bl	8005c68 <HAL_TIM_MspPostInit>
}
 8005eb2:	b00f      	add	sp, #60	; 0x3c
 8005eb4:	f85d fb04 	ldr.w	pc, [sp], #4
 8005eb8:	20000608 	.word	0x20000608
 8005ebc:	40000400 	.word	0x40000400
 8005ec0:	08006d5a 	.word	0x08006d5a

08005ec4 <MX_TIM4_Init>:
{
 8005ec4:	b500      	push	{lr}
  htim4.Instance = TIM4;
 8005ec6:	4830      	ldr	r0, [pc, #192]	; (8005f88 <MX_TIM4_Init+0xc4>)
  htim4.Init.Prescaler = 6;
 8005ec8:	4930      	ldr	r1, [pc, #192]	; (8005f8c <MX_TIM4_Init+0xc8>)
 8005eca:	2306      	movs	r3, #6
{
 8005ecc:	b08f      	sub	sp, #60	; 0x3c
  htim4.Init.Prescaler = 6;
 8005ece:	e880 000a 	stmia.w	r0, {r1, r3}
  htim4.Init.Period = 399;
 8005ed2:	f240 128f 	movw	r2, #399	; 0x18f
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 399;
 8005eda:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005edc:	6103      	str	r3, [r0, #16]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8005ede:	f7fd fa55 	bl	800338c <HAL_TIM_Base_Init>
 8005ee2:	b118      	cbz	r0, 8005eec <MX_TIM4_Init+0x28>
    _Error_Handler(__FILE__, __LINE__);
 8005ee4:	21e9      	movs	r1, #233	; 0xe9
 8005ee6:	482a      	ldr	r0, [pc, #168]	; (8005f90 <MX_TIM4_Init+0xcc>)
 8005ee8:	f7ff fd22 	bl	8005930 <_Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005eec:	a90e      	add	r1, sp, #56	; 0x38
 8005eee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ef2:	f841 3d2c 	str.w	r3, [r1, #-44]!
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8005ef6:	4824      	ldr	r0, [pc, #144]	; (8005f88 <MX_TIM4_Init+0xc4>)
 8005ef8:	f7fd f884 	bl	8003004 <HAL_TIM_ConfigClockSource>
 8005efc:	b118      	cbz	r0, 8005f06 <MX_TIM4_Init+0x42>
    _Error_Handler(__FILE__, __LINE__);
 8005efe:	21ef      	movs	r1, #239	; 0xef
 8005f00:	4823      	ldr	r0, [pc, #140]	; (8005f90 <MX_TIM4_Init+0xcc>)
 8005f02:	f7ff fd15 	bl	8005930 <_Error_Handler>
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8005f06:	4820      	ldr	r0, [pc, #128]	; (8005f88 <MX_TIM4_Init+0xc4>)
 8005f08:	f7fd fa5a 	bl	80033c0 <HAL_TIM_PWM_Init>
 8005f0c:	b118      	cbz	r0, 8005f16 <MX_TIM4_Init+0x52>
    _Error_Handler(__FILE__, __LINE__);
 8005f0e:	21f4      	movs	r1, #244	; 0xf4
 8005f10:	481f      	ldr	r0, [pc, #124]	; (8005f90 <MX_TIM4_Init+0xcc>)
 8005f12:	f7ff fd0d 	bl	8005930 <_Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005f16:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005f18:	a901      	add	r1, sp, #4
 8005f1a:	481b      	ldr	r0, [pc, #108]	; (8005f88 <MX_TIM4_Init+0xc4>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005f1c:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005f1e:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005f20:	f7fd fb6a 	bl	80035f8 <HAL_TIMEx_MasterConfigSynchronization>
 8005f24:	b118      	cbz	r0, 8005f2e <MX_TIM4_Init+0x6a>
    _Error_Handler(__FILE__, __LINE__);
 8005f26:	21fb      	movs	r1, #251	; 0xfb
 8005f28:	4819      	ldr	r0, [pc, #100]	; (8005f90 <MX_TIM4_Init+0xcc>)
 8005f2a:	f7ff fd01 	bl	8005930 <_Error_Handler>
  sConfigOC.Pulse = 0;
 8005f2e:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005f30:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005f32:	a907      	add	r1, sp, #28
 8005f34:	4814      	ldr	r0, [pc, #80]	; (8005f88 <MX_TIM4_Init+0xc4>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005f36:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 0;
 8005f38:	9208      	str	r2, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005f3a:	9209      	str	r2, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005f3c:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005f3e:	f7fd fad3 	bl	80034e8 <HAL_TIM_PWM_ConfigChannel>
 8005f42:	b120      	cbz	r0, 8005f4e <MX_TIM4_Init+0x8a>
    _Error_Handler(__FILE__, __LINE__);
 8005f44:	f44f 7182 	mov.w	r1, #260	; 0x104
 8005f48:	4811      	ldr	r0, [pc, #68]	; (8005f90 <MX_TIM4_Init+0xcc>)
 8005f4a:	f7ff fcf1 	bl	8005930 <_Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005f4e:	2204      	movs	r2, #4
 8005f50:	a907      	add	r1, sp, #28
 8005f52:	480d      	ldr	r0, [pc, #52]	; (8005f88 <MX_TIM4_Init+0xc4>)
 8005f54:	f7fd fac8 	bl	80034e8 <HAL_TIM_PWM_ConfigChannel>
 8005f58:	b120      	cbz	r0, 8005f64 <MX_TIM4_Init+0xa0>
    _Error_Handler(__FILE__, __LINE__);
 8005f5a:	f240 1109 	movw	r1, #265	; 0x109
 8005f5e:	480c      	ldr	r0, [pc, #48]	; (8005f90 <MX_TIM4_Init+0xcc>)
 8005f60:	f7ff fce6 	bl	8005930 <_Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005f64:	2208      	movs	r2, #8
 8005f66:	a907      	add	r1, sp, #28
 8005f68:	4807      	ldr	r0, [pc, #28]	; (8005f88 <MX_TIM4_Init+0xc4>)
 8005f6a:	f7fd fabd 	bl	80034e8 <HAL_TIM_PWM_ConfigChannel>
 8005f6e:	b120      	cbz	r0, 8005f7a <MX_TIM4_Init+0xb6>
    _Error_Handler(__FILE__, __LINE__);
 8005f70:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8005f74:	4806      	ldr	r0, [pc, #24]	; (8005f90 <MX_TIM4_Init+0xcc>)
 8005f76:	f7ff fcdb 	bl	8005930 <_Error_Handler>
  HAL_TIM_MspPostInit(&htim4);
 8005f7a:	4803      	ldr	r0, [pc, #12]	; (8005f88 <MX_TIM4_Init+0xc4>)
 8005f7c:	f7ff fe74 	bl	8005c68 <HAL_TIM_MspPostInit>
}
 8005f80:	b00f      	add	sp, #60	; 0x3c
 8005f82:	f85d fb04 	ldr.w	pc, [sp], #4
 8005f86:	bf00      	nop
 8005f88:	20000590 	.word	0x20000590
 8005f8c:	40000800 	.word	0x40000800
 8005f90:	08006d5a 	.word	0x08006d5a

08005f94 <MX_USART3_Init>:

USART_HandleTypeDef husart3;

/* USART3 init function */
void MX_USART3_Init(void)
{
 8005f94:	b508      	push	{r3, lr}

  husart3.Instance = USART3;
 8005f96:	480c      	ldr	r0, [pc, #48]	; (8005fc8 <MX_USART3_Init+0x34>)
  husart3.Init.BaudRate = 115200;
 8005f98:	4b0c      	ldr	r3, [pc, #48]	; (8005fcc <MX_USART3_Init+0x38>)
 8005f9a:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8005f9e:	e880 4008 	stmia.w	r0, {r3, lr}
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
  husart3.Init.StopBits = USART_STOPBITS_1;
  husart3.Init.Parity = USART_PARITY_NONE;
  husart3.Init.Mode = USART_MODE_TX_RX;
 8005fa2:	220c      	movs	r2, #12
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	6083      	str	r3, [r0, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 8005fa8:	60c3      	str	r3, [r0, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 8005faa:	6103      	str	r3, [r0, #16]
  husart3.Init.Mode = USART_MODE_TX_RX;
 8005fac:	6142      	str	r2, [r0, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_LOW;
 8005fae:	6183      	str	r3, [r0, #24]
  husart3.Init.CLKPhase = USART_PHASE_1EDGE;
 8005fb0:	61c3      	str	r3, [r0, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8005fb2:	6203      	str	r3, [r0, #32]
  if (HAL_USART_Init(&husart3) != HAL_OK)
 8005fb4:	f7fd fb78 	bl	80036a8 <HAL_USART_Init>
 8005fb8:	b128      	cbz	r0, 8005fc6 <MX_USART3_Init+0x32>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005fba:	2142      	movs	r1, #66	; 0x42
 8005fbc:	4804      	ldr	r0, [pc, #16]	; (8005fd0 <MX_USART3_Init+0x3c>)
  }

}
 8005fbe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8005fc2:	f7ff bcb5 	b.w	8005930 <_Error_Handler>
 8005fc6:	bd08      	pop	{r3, pc}
 8005fc8:	200006bc 	.word	0x200006bc
 8005fcc:	40004800 	.word	0x40004800
 8005fd0:	08006d67 	.word	0x08006d67

08005fd4 <HAL_USART_MspInit>:

void HAL_USART_MspInit(USART_HandleTypeDef* usartHandle)
{
 8005fd4:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(usartHandle->Instance==USART3)
 8005fd6:	6802      	ldr	r2, [r0, #0]
 8005fd8:	4b19      	ldr	r3, [pc, #100]	; (8006040 <HAL_USART_MspInit+0x6c>)
 8005fda:	429a      	cmp	r2, r3
{
 8005fdc:	b087      	sub	sp, #28
  if(usartHandle->Instance==USART3)
 8005fde:	d12d      	bne.n	800603c <HAL_USART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8005fe0:	2400      	movs	r4, #0
 8005fe2:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 8005fe6:	9400      	str	r4, [sp, #0]
 8005fe8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005fea:	4816      	ldr	r0, [pc, #88]	; (8006044 <HAL_USART_MspInit+0x70>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8005fec:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005ff0:	641a      	str	r2, [r3, #64]	; 0x40
 8005ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ff4:	9403      	str	r4, [sp, #12]
    __HAL_RCC_USART3_CLK_ENABLE();
 8005ff6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ffa:	9300      	str	r3, [sp, #0]
 8005ffc:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ffe:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8006000:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006004:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006006:	2507      	movs	r5, #7
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006008:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800600a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800600c:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800600e:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006010:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006012:	f7fb fb4b 	bl	80016ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006016:	f44f 7340 	mov.w	r3, #768	; 0x300
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800601a:	a901      	add	r1, sp, #4
 800601c:	480a      	ldr	r0, [pc, #40]	; (8006048 <HAL_USART_MspInit+0x74>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800601e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006020:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006022:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006024:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006026:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006028:	f7fb fb40 	bl	80016ac <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800602c:	2027      	movs	r0, #39	; 0x27
 800602e:	4622      	mov	r2, r4
 8006030:	4621      	mov	r1, r4
 8006032:	f7fb f973 	bl	800131c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006036:	2027      	movs	r0, #39	; 0x27
 8006038:	f7fb f9a4 	bl	8001384 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800603c:	b007      	add	sp, #28
 800603e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006040:	40004800 	.word	0x40004800
 8006044:	40020400 	.word	0x40020400
 8006048:	40020c00 	.word	0x40020c00

0800604c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800604c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006084 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006050:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006052:	e003      	b.n	800605c <LoopCopyDataInit>

08006054 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006054:	4b0c      	ldr	r3, [pc, #48]	; (8006088 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006056:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006058:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800605a:	3104      	adds	r1, #4

0800605c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800605c:	480b      	ldr	r0, [pc, #44]	; (800608c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800605e:	4b0c      	ldr	r3, [pc, #48]	; (8006090 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006060:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006062:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006064:	d3f6      	bcc.n	8006054 <CopyDataInit>
  ldr  r2, =_sbss
 8006066:	4a0b      	ldr	r2, [pc, #44]	; (8006094 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006068:	e002      	b.n	8006070 <LoopFillZerobss>

0800606a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800606a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800606c:	f842 3b04 	str.w	r3, [r2], #4

08006070 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006070:	4b09      	ldr	r3, [pc, #36]	; (8006098 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006072:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006074:	d3f9      	bcc.n	800606a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006076:	f7ff fd07 	bl	8005a88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800607a:	f000 f811 	bl	80060a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800607e:	f7ff fbe5 	bl	800584c <main>
  bx  lr    
 8006082:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006084:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8006088:	08006dd0 	.word	0x08006dd0
  ldr  r0, =_sdata
 800608c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006090:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 8006094:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 8006098:	20000700 	.word	0x20000700

0800609c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800609c:	e7fe      	b.n	800609c <CAN1_RX0_IRQHandler>
	...

080060a0 <__libc_init_array>:
 80060a0:	b570      	push	{r4, r5, r6, lr}
 80060a2:	4e0d      	ldr	r6, [pc, #52]	; (80060d8 <__libc_init_array+0x38>)
 80060a4:	4c0d      	ldr	r4, [pc, #52]	; (80060dc <__libc_init_array+0x3c>)
 80060a6:	1ba4      	subs	r4, r4, r6
 80060a8:	10a4      	asrs	r4, r4, #2
 80060aa:	2500      	movs	r5, #0
 80060ac:	42a5      	cmp	r5, r4
 80060ae:	d109      	bne.n	80060c4 <__libc_init_array+0x24>
 80060b0:	4e0b      	ldr	r6, [pc, #44]	; (80060e0 <__libc_init_array+0x40>)
 80060b2:	4c0c      	ldr	r4, [pc, #48]	; (80060e4 <__libc_init_array+0x44>)
 80060b4:	f000 fe26 	bl	8006d04 <_init>
 80060b8:	1ba4      	subs	r4, r4, r6
 80060ba:	10a4      	asrs	r4, r4, #2
 80060bc:	2500      	movs	r5, #0
 80060be:	42a5      	cmp	r5, r4
 80060c0:	d105      	bne.n	80060ce <__libc_init_array+0x2e>
 80060c2:	bd70      	pop	{r4, r5, r6, pc}
 80060c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80060c8:	4798      	blx	r3
 80060ca:	3501      	adds	r5, #1
 80060cc:	e7ee      	b.n	80060ac <__libc_init_array+0xc>
 80060ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80060d2:	4798      	blx	r3
 80060d4:	3501      	adds	r5, #1
 80060d6:	e7f2      	b.n	80060be <__libc_init_array+0x1e>
 80060d8:	08006dc8 	.word	0x08006dc8
 80060dc:	08006dc8 	.word	0x08006dc8
 80060e0:	08006dc8 	.word	0x08006dc8
 80060e4:	08006dcc 	.word	0x08006dcc

080060e8 <asin>:
 80060e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060ea:	ed2d 8b02 	vpush	{d8}
 80060ee:	4e26      	ldr	r6, [pc, #152]	; (8006188 <asin+0xa0>)
 80060f0:	b08b      	sub	sp, #44	; 0x2c
 80060f2:	ec55 4b10 	vmov	r4, r5, d0
 80060f6:	f000 f8ab 	bl	8006250 <__ieee754_asin>
 80060fa:	f996 3000 	ldrsb.w	r3, [r6]
 80060fe:	eeb0 8a40 	vmov.f32	s16, s0
 8006102:	eef0 8a60 	vmov.f32	s17, s1
 8006106:	3301      	adds	r3, #1
 8006108:	d036      	beq.n	8006178 <asin+0x90>
 800610a:	4622      	mov	r2, r4
 800610c:	462b      	mov	r3, r5
 800610e:	4620      	mov	r0, r4
 8006110:	4629      	mov	r1, r5
 8006112:	f7fa fcab 	bl	8000a6c <__aeabi_dcmpun>
 8006116:	4607      	mov	r7, r0
 8006118:	bb70      	cbnz	r0, 8006178 <asin+0x90>
 800611a:	ec45 4b10 	vmov	d0, r4, r5
 800611e:	f000 fdd7 	bl	8006cd0 <fabs>
 8006122:	2200      	movs	r2, #0
 8006124:	4b19      	ldr	r3, [pc, #100]	; (800618c <asin+0xa4>)
 8006126:	ec51 0b10 	vmov	r0, r1, d0
 800612a:	f7fa fc95 	bl	8000a58 <__aeabi_dcmpgt>
 800612e:	b318      	cbz	r0, 8006178 <asin+0x90>
 8006130:	2301      	movs	r3, #1
 8006132:	9300      	str	r3, [sp, #0]
 8006134:	4816      	ldr	r0, [pc, #88]	; (8006190 <asin+0xa8>)
 8006136:	4b17      	ldr	r3, [pc, #92]	; (8006194 <asin+0xac>)
 8006138:	9301      	str	r3, [sp, #4]
 800613a:	9708      	str	r7, [sp, #32]
 800613c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8006140:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006144:	f000 fdd0 	bl	8006ce8 <nan>
 8006148:	f996 3000 	ldrsb.w	r3, [r6]
 800614c:	2b02      	cmp	r3, #2
 800614e:	ed8d 0b06 	vstr	d0, [sp, #24]
 8006152:	d104      	bne.n	800615e <asin+0x76>
 8006154:	f000 fdd0 	bl	8006cf8 <__errno>
 8006158:	2321      	movs	r3, #33	; 0x21
 800615a:	6003      	str	r3, [r0, #0]
 800615c:	e004      	b.n	8006168 <asin+0x80>
 800615e:	4668      	mov	r0, sp
 8006160:	f000 fdbd 	bl	8006cde <matherr>
 8006164:	2800      	cmp	r0, #0
 8006166:	d0f5      	beq.n	8006154 <asin+0x6c>
 8006168:	9b08      	ldr	r3, [sp, #32]
 800616a:	b11b      	cbz	r3, 8006174 <asin+0x8c>
 800616c:	f000 fdc4 	bl	8006cf8 <__errno>
 8006170:	9b08      	ldr	r3, [sp, #32]
 8006172:	6003      	str	r3, [r0, #0]
 8006174:	ed9d 8b06 	vldr	d8, [sp, #24]
 8006178:	eeb0 0a48 	vmov.f32	s0, s16
 800617c:	eef0 0a68 	vmov.f32	s1, s17
 8006180:	b00b      	add	sp, #44	; 0x2c
 8006182:	ecbd 8b02 	vpop	{d8}
 8006186:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006188:	2000001c 	.word	0x2000001c
 800618c:	3ff00000 	.word	0x3ff00000
 8006190:	08006d41 	.word	0x08006d41
 8006194:	08006d76 	.word	0x08006d76

08006198 <atan2>:
 8006198:	f000 ba66 	b.w	8006668 <__ieee754_atan2>

0800619c <sqrt>:
 800619c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80061a0:	ed2d 8b02 	vpush	{d8}
 80061a4:	b08b      	sub	sp, #44	; 0x2c
 80061a6:	ec55 4b10 	vmov	r4, r5, d0
 80061aa:	f000 fb37 	bl	800681c <__ieee754_sqrt>
 80061ae:	4b26      	ldr	r3, [pc, #152]	; (8006248 <sqrt+0xac>)
 80061b0:	eeb0 8a40 	vmov.f32	s16, s0
 80061b4:	eef0 8a60 	vmov.f32	s17, s1
 80061b8:	f993 6000 	ldrsb.w	r6, [r3]
 80061bc:	1c73      	adds	r3, r6, #1
 80061be:	d02a      	beq.n	8006216 <sqrt+0x7a>
 80061c0:	4622      	mov	r2, r4
 80061c2:	462b      	mov	r3, r5
 80061c4:	4620      	mov	r0, r4
 80061c6:	4629      	mov	r1, r5
 80061c8:	f7fa fc50 	bl	8000a6c <__aeabi_dcmpun>
 80061cc:	4607      	mov	r7, r0
 80061ce:	bb10      	cbnz	r0, 8006216 <sqrt+0x7a>
 80061d0:	f04f 0800 	mov.w	r8, #0
 80061d4:	f04f 0900 	mov.w	r9, #0
 80061d8:	4642      	mov	r2, r8
 80061da:	464b      	mov	r3, r9
 80061dc:	4620      	mov	r0, r4
 80061de:	4629      	mov	r1, r5
 80061e0:	f7fa fc1c 	bl	8000a1c <__aeabi_dcmplt>
 80061e4:	b1b8      	cbz	r0, 8006216 <sqrt+0x7a>
 80061e6:	2301      	movs	r3, #1
 80061e8:	9300      	str	r3, [sp, #0]
 80061ea:	4b18      	ldr	r3, [pc, #96]	; (800624c <sqrt+0xb0>)
 80061ec:	9301      	str	r3, [sp, #4]
 80061ee:	9708      	str	r7, [sp, #32]
 80061f0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80061f4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80061f8:	b9b6      	cbnz	r6, 8006228 <sqrt+0x8c>
 80061fa:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80061fe:	4668      	mov	r0, sp
 8006200:	f000 fd6d 	bl	8006cde <matherr>
 8006204:	b1d0      	cbz	r0, 800623c <sqrt+0xa0>
 8006206:	9b08      	ldr	r3, [sp, #32]
 8006208:	b11b      	cbz	r3, 8006212 <sqrt+0x76>
 800620a:	f000 fd75 	bl	8006cf8 <__errno>
 800620e:	9b08      	ldr	r3, [sp, #32]
 8006210:	6003      	str	r3, [r0, #0]
 8006212:	ed9d 8b06 	vldr	d8, [sp, #24]
 8006216:	eeb0 0a48 	vmov.f32	s0, s16
 800621a:	eef0 0a68 	vmov.f32	s1, s17
 800621e:	b00b      	add	sp, #44	; 0x2c
 8006220:	ecbd 8b02 	vpop	{d8}
 8006224:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006228:	4642      	mov	r2, r8
 800622a:	464b      	mov	r3, r9
 800622c:	4640      	mov	r0, r8
 800622e:	4649      	mov	r1, r9
 8006230:	f7fa faac 	bl	800078c <__aeabi_ddiv>
 8006234:	2e02      	cmp	r6, #2
 8006236:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800623a:	d1e0      	bne.n	80061fe <sqrt+0x62>
 800623c:	f000 fd5c 	bl	8006cf8 <__errno>
 8006240:	2321      	movs	r3, #33	; 0x21
 8006242:	6003      	str	r3, [r0, #0]
 8006244:	e7df      	b.n	8006206 <sqrt+0x6a>
 8006246:	bf00      	nop
 8006248:	2000001c 	.word	0x2000001c
 800624c:	08006d7b 	.word	0x08006d7b

08006250 <__ieee754_asin>:
 8006250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006254:	ec55 4b10 	vmov	r4, r5, d0
 8006258:	4bcb      	ldr	r3, [pc, #812]	; (8006588 <__ieee754_asin+0x338>)
 800625a:	b085      	sub	sp, #20
 800625c:	f025 4b00 	bic.w	fp, r5, #2147483648	; 0x80000000
 8006260:	459b      	cmp	fp, r3
 8006262:	9501      	str	r5, [sp, #4]
 8006264:	dd32      	ble.n	80062cc <__ieee754_asin+0x7c>
 8006266:	ee10 3a10 	vmov	r3, s0
 800626a:	f10b 4b40 	add.w	fp, fp, #3221225472	; 0xc0000000
 800626e:	f50b 1b80 	add.w	fp, fp, #1048576	; 0x100000
 8006272:	ea5b 0303 	orrs.w	r3, fp, r3
 8006276:	d117      	bne.n	80062a8 <__ieee754_asin+0x58>
 8006278:	a3a9      	add	r3, pc, #676	; (adr r3, 8006520 <__ieee754_asin+0x2d0>)
 800627a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800627e:	ee10 0a10 	vmov	r0, s0
 8006282:	4629      	mov	r1, r5
 8006284:	f7fa f958 	bl	8000538 <__aeabi_dmul>
 8006288:	a3a7      	add	r3, pc, #668	; (adr r3, 8006528 <__ieee754_asin+0x2d8>)
 800628a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800628e:	4606      	mov	r6, r0
 8006290:	460f      	mov	r7, r1
 8006292:	4620      	mov	r0, r4
 8006294:	4629      	mov	r1, r5
 8006296:	f7fa f94f 	bl	8000538 <__aeabi_dmul>
 800629a:	4602      	mov	r2, r0
 800629c:	460b      	mov	r3, r1
 800629e:	4630      	mov	r0, r6
 80062a0:	4639      	mov	r1, r7
 80062a2:	f7f9 ff97 	bl	80001d4 <__adddf3>
 80062a6:	e00a      	b.n	80062be <__ieee754_asin+0x6e>
 80062a8:	ee10 2a10 	vmov	r2, s0
 80062ac:	462b      	mov	r3, r5
 80062ae:	4620      	mov	r0, r4
 80062b0:	4629      	mov	r1, r5
 80062b2:	f7f9 ff8d 	bl	80001d0 <__aeabi_dsub>
 80062b6:	4602      	mov	r2, r0
 80062b8:	460b      	mov	r3, r1
 80062ba:	f7fa fa67 	bl	800078c <__aeabi_ddiv>
 80062be:	4604      	mov	r4, r0
 80062c0:	460d      	mov	r5, r1
 80062c2:	ec45 4b10 	vmov	d0, r4, r5
 80062c6:	b005      	add	sp, #20
 80062c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062cc:	4baf      	ldr	r3, [pc, #700]	; (800658c <__ieee754_asin+0x33c>)
 80062ce:	459b      	cmp	fp, r3
 80062d0:	dc11      	bgt.n	80062f6 <__ieee754_asin+0xa6>
 80062d2:	f1bb 5f79 	cmp.w	fp, #1044381696	; 0x3e400000
 80062d6:	f280 80b0 	bge.w	800643a <__ieee754_asin+0x1ea>
 80062da:	a395      	add	r3, pc, #596	; (adr r3, 8006530 <__ieee754_asin+0x2e0>)
 80062dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e0:	ee10 0a10 	vmov	r0, s0
 80062e4:	4629      	mov	r1, r5
 80062e6:	f7f9 ff75 	bl	80001d4 <__adddf3>
 80062ea:	2200      	movs	r2, #0
 80062ec:	4ba8      	ldr	r3, [pc, #672]	; (8006590 <__ieee754_asin+0x340>)
 80062ee:	f7fa fbb3 	bl	8000a58 <__aeabi_dcmpgt>
 80062f2:	2800      	cmp	r0, #0
 80062f4:	d1e5      	bne.n	80062c2 <__ieee754_asin+0x72>
 80062f6:	ec45 4b10 	vmov	d0, r4, r5
 80062fa:	f000 fce9 	bl	8006cd0 <fabs>
 80062fe:	2000      	movs	r0, #0
 8006300:	ec53 2b10 	vmov	r2, r3, d0
 8006304:	49a2      	ldr	r1, [pc, #648]	; (8006590 <__ieee754_asin+0x340>)
 8006306:	f7f9 ff63 	bl	80001d0 <__aeabi_dsub>
 800630a:	2200      	movs	r2, #0
 800630c:	4ba1      	ldr	r3, [pc, #644]	; (8006594 <__ieee754_asin+0x344>)
 800630e:	f7fa f913 	bl	8000538 <__aeabi_dmul>
 8006312:	a389      	add	r3, pc, #548	; (adr r3, 8006538 <__ieee754_asin+0x2e8>)
 8006314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006318:	4604      	mov	r4, r0
 800631a:	460d      	mov	r5, r1
 800631c:	f7fa f90c 	bl	8000538 <__aeabi_dmul>
 8006320:	a387      	add	r3, pc, #540	; (adr r3, 8006540 <__ieee754_asin+0x2f0>)
 8006322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006326:	f7f9 ff55 	bl	80001d4 <__adddf3>
 800632a:	4622      	mov	r2, r4
 800632c:	462b      	mov	r3, r5
 800632e:	f7fa f903 	bl	8000538 <__aeabi_dmul>
 8006332:	a385      	add	r3, pc, #532	; (adr r3, 8006548 <__ieee754_asin+0x2f8>)
 8006334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006338:	f7f9 ff4a 	bl	80001d0 <__aeabi_dsub>
 800633c:	4622      	mov	r2, r4
 800633e:	462b      	mov	r3, r5
 8006340:	f7fa f8fa 	bl	8000538 <__aeabi_dmul>
 8006344:	a382      	add	r3, pc, #520	; (adr r3, 8006550 <__ieee754_asin+0x300>)
 8006346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800634a:	f7f9 ff43 	bl	80001d4 <__adddf3>
 800634e:	4622      	mov	r2, r4
 8006350:	462b      	mov	r3, r5
 8006352:	f7fa f8f1 	bl	8000538 <__aeabi_dmul>
 8006356:	a380      	add	r3, pc, #512	; (adr r3, 8006558 <__ieee754_asin+0x308>)
 8006358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800635c:	f7f9 ff38 	bl	80001d0 <__aeabi_dsub>
 8006360:	4622      	mov	r2, r4
 8006362:	462b      	mov	r3, r5
 8006364:	f7fa f8e8 	bl	8000538 <__aeabi_dmul>
 8006368:	a37d      	add	r3, pc, #500	; (adr r3, 8006560 <__ieee754_asin+0x310>)
 800636a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800636e:	f7f9 ff31 	bl	80001d4 <__adddf3>
 8006372:	4622      	mov	r2, r4
 8006374:	462b      	mov	r3, r5
 8006376:	f7fa f8df 	bl	8000538 <__aeabi_dmul>
 800637a:	a37b      	add	r3, pc, #492	; (adr r3, 8006568 <__ieee754_asin+0x318>)
 800637c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006380:	4680      	mov	r8, r0
 8006382:	4689      	mov	r9, r1
 8006384:	4620      	mov	r0, r4
 8006386:	4629      	mov	r1, r5
 8006388:	f7fa f8d6 	bl	8000538 <__aeabi_dmul>
 800638c:	a378      	add	r3, pc, #480	; (adr r3, 8006570 <__ieee754_asin+0x320>)
 800638e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006392:	f7f9 ff1d 	bl	80001d0 <__aeabi_dsub>
 8006396:	4622      	mov	r2, r4
 8006398:	462b      	mov	r3, r5
 800639a:	f7fa f8cd 	bl	8000538 <__aeabi_dmul>
 800639e:	a376      	add	r3, pc, #472	; (adr r3, 8006578 <__ieee754_asin+0x328>)
 80063a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a4:	f7f9 ff16 	bl	80001d4 <__adddf3>
 80063a8:	4622      	mov	r2, r4
 80063aa:	462b      	mov	r3, r5
 80063ac:	f7fa f8c4 	bl	8000538 <__aeabi_dmul>
 80063b0:	a373      	add	r3, pc, #460	; (adr r3, 8006580 <__ieee754_asin+0x330>)
 80063b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b6:	f7f9 ff0b 	bl	80001d0 <__aeabi_dsub>
 80063ba:	4622      	mov	r2, r4
 80063bc:	462b      	mov	r3, r5
 80063be:	f7fa f8bb 	bl	8000538 <__aeabi_dmul>
 80063c2:	2200      	movs	r2, #0
 80063c4:	4b72      	ldr	r3, [pc, #456]	; (8006590 <__ieee754_asin+0x340>)
 80063c6:	f7f9 ff05 	bl	80001d4 <__adddf3>
 80063ca:	ec45 4b10 	vmov	d0, r4, r5
 80063ce:	460b      	mov	r3, r1
 80063d0:	4602      	mov	r2, r0
 80063d2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80063d6:	f000 fa21 	bl	800681c <__ieee754_sqrt>
 80063da:	496f      	ldr	r1, [pc, #444]	; (8006598 <__ieee754_asin+0x348>)
 80063dc:	458b      	cmp	fp, r1
 80063de:	ec57 6b10 	vmov	r6, r7, d0
 80063e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80063e6:	f340 80d9 	ble.w	800659c <__ieee754_asin+0x34c>
 80063ea:	4640      	mov	r0, r8
 80063ec:	4649      	mov	r1, r9
 80063ee:	f7fa f9cd 	bl	800078c <__aeabi_ddiv>
 80063f2:	4632      	mov	r2, r6
 80063f4:	463b      	mov	r3, r7
 80063f6:	f7fa f89f 	bl	8000538 <__aeabi_dmul>
 80063fa:	4632      	mov	r2, r6
 80063fc:	463b      	mov	r3, r7
 80063fe:	f7f9 fee9 	bl	80001d4 <__adddf3>
 8006402:	4602      	mov	r2, r0
 8006404:	460b      	mov	r3, r1
 8006406:	f7f9 fee5 	bl	80001d4 <__adddf3>
 800640a:	a347      	add	r3, pc, #284	; (adr r3, 8006528 <__ieee754_asin+0x2d8>)
 800640c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006410:	f7f9 fede 	bl	80001d0 <__aeabi_dsub>
 8006414:	4602      	mov	r2, r0
 8006416:	460b      	mov	r3, r1
 8006418:	a141      	add	r1, pc, #260	; (adr r1, 8006520 <__ieee754_asin+0x2d0>)
 800641a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800641e:	f7f9 fed7 	bl	80001d0 <__aeabi_dsub>
 8006422:	9b01      	ldr	r3, [sp, #4]
 8006424:	2b00      	cmp	r3, #0
 8006426:	bfdc      	itt	le
 8006428:	4602      	movle	r2, r0
 800642a:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800642e:	4604      	mov	r4, r0
 8006430:	460d      	mov	r5, r1
 8006432:	bfdc      	itt	le
 8006434:	4614      	movle	r4, r2
 8006436:	461d      	movle	r5, r3
 8006438:	e743      	b.n	80062c2 <__ieee754_asin+0x72>
 800643a:	ee10 2a10 	vmov	r2, s0
 800643e:	ee10 0a10 	vmov	r0, s0
 8006442:	462b      	mov	r3, r5
 8006444:	4629      	mov	r1, r5
 8006446:	f7fa f877 	bl	8000538 <__aeabi_dmul>
 800644a:	a33b      	add	r3, pc, #236	; (adr r3, 8006538 <__ieee754_asin+0x2e8>)
 800644c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006450:	4606      	mov	r6, r0
 8006452:	460f      	mov	r7, r1
 8006454:	f7fa f870 	bl	8000538 <__aeabi_dmul>
 8006458:	a339      	add	r3, pc, #228	; (adr r3, 8006540 <__ieee754_asin+0x2f0>)
 800645a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800645e:	f7f9 feb9 	bl	80001d4 <__adddf3>
 8006462:	4632      	mov	r2, r6
 8006464:	463b      	mov	r3, r7
 8006466:	f7fa f867 	bl	8000538 <__aeabi_dmul>
 800646a:	a337      	add	r3, pc, #220	; (adr r3, 8006548 <__ieee754_asin+0x2f8>)
 800646c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006470:	f7f9 feae 	bl	80001d0 <__aeabi_dsub>
 8006474:	4632      	mov	r2, r6
 8006476:	463b      	mov	r3, r7
 8006478:	f7fa f85e 	bl	8000538 <__aeabi_dmul>
 800647c:	a334      	add	r3, pc, #208	; (adr r3, 8006550 <__ieee754_asin+0x300>)
 800647e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006482:	f7f9 fea7 	bl	80001d4 <__adddf3>
 8006486:	4632      	mov	r2, r6
 8006488:	463b      	mov	r3, r7
 800648a:	f7fa f855 	bl	8000538 <__aeabi_dmul>
 800648e:	a332      	add	r3, pc, #200	; (adr r3, 8006558 <__ieee754_asin+0x308>)
 8006490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006494:	f7f9 fe9c 	bl	80001d0 <__aeabi_dsub>
 8006498:	4632      	mov	r2, r6
 800649a:	463b      	mov	r3, r7
 800649c:	f7fa f84c 	bl	8000538 <__aeabi_dmul>
 80064a0:	a32f      	add	r3, pc, #188	; (adr r3, 8006560 <__ieee754_asin+0x310>)
 80064a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a6:	f7f9 fe95 	bl	80001d4 <__adddf3>
 80064aa:	4632      	mov	r2, r6
 80064ac:	463b      	mov	r3, r7
 80064ae:	f7fa f843 	bl	8000538 <__aeabi_dmul>
 80064b2:	a32d      	add	r3, pc, #180	; (adr r3, 8006568 <__ieee754_asin+0x318>)
 80064b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b8:	4680      	mov	r8, r0
 80064ba:	4689      	mov	r9, r1
 80064bc:	4630      	mov	r0, r6
 80064be:	4639      	mov	r1, r7
 80064c0:	f7fa f83a 	bl	8000538 <__aeabi_dmul>
 80064c4:	a32a      	add	r3, pc, #168	; (adr r3, 8006570 <__ieee754_asin+0x320>)
 80064c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ca:	f7f9 fe81 	bl	80001d0 <__aeabi_dsub>
 80064ce:	4632      	mov	r2, r6
 80064d0:	463b      	mov	r3, r7
 80064d2:	f7fa f831 	bl	8000538 <__aeabi_dmul>
 80064d6:	a328      	add	r3, pc, #160	; (adr r3, 8006578 <__ieee754_asin+0x328>)
 80064d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064dc:	f7f9 fe7a 	bl	80001d4 <__adddf3>
 80064e0:	4632      	mov	r2, r6
 80064e2:	463b      	mov	r3, r7
 80064e4:	f7fa f828 	bl	8000538 <__aeabi_dmul>
 80064e8:	a325      	add	r3, pc, #148	; (adr r3, 8006580 <__ieee754_asin+0x330>)
 80064ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ee:	f7f9 fe6f 	bl	80001d0 <__aeabi_dsub>
 80064f2:	4632      	mov	r2, r6
 80064f4:	463b      	mov	r3, r7
 80064f6:	f7fa f81f 	bl	8000538 <__aeabi_dmul>
 80064fa:	2200      	movs	r2, #0
 80064fc:	4b24      	ldr	r3, [pc, #144]	; (8006590 <__ieee754_asin+0x340>)
 80064fe:	f7f9 fe69 	bl	80001d4 <__adddf3>
 8006502:	4602      	mov	r2, r0
 8006504:	460b      	mov	r3, r1
 8006506:	4640      	mov	r0, r8
 8006508:	4649      	mov	r1, r9
 800650a:	f7fa f93f 	bl	800078c <__aeabi_ddiv>
 800650e:	4622      	mov	r2, r4
 8006510:	462b      	mov	r3, r5
 8006512:	f7fa f811 	bl	8000538 <__aeabi_dmul>
 8006516:	4602      	mov	r2, r0
 8006518:	460b      	mov	r3, r1
 800651a:	4620      	mov	r0, r4
 800651c:	4629      	mov	r1, r5
 800651e:	e6c0      	b.n	80062a2 <__ieee754_asin+0x52>
 8006520:	54442d18 	.word	0x54442d18
 8006524:	3ff921fb 	.word	0x3ff921fb
 8006528:	33145c07 	.word	0x33145c07
 800652c:	3c91a626 	.word	0x3c91a626
 8006530:	8800759c 	.word	0x8800759c
 8006534:	7e37e43c 	.word	0x7e37e43c
 8006538:	0dfdf709 	.word	0x0dfdf709
 800653c:	3f023de1 	.word	0x3f023de1
 8006540:	7501b288 	.word	0x7501b288
 8006544:	3f49efe0 	.word	0x3f49efe0
 8006548:	b5688f3b 	.word	0xb5688f3b
 800654c:	3fa48228 	.word	0x3fa48228
 8006550:	0e884455 	.word	0x0e884455
 8006554:	3fc9c155 	.word	0x3fc9c155
 8006558:	03eb6f7d 	.word	0x03eb6f7d
 800655c:	3fd4d612 	.word	0x3fd4d612
 8006560:	55555555 	.word	0x55555555
 8006564:	3fc55555 	.word	0x3fc55555
 8006568:	b12e9282 	.word	0xb12e9282
 800656c:	3fb3b8c5 	.word	0x3fb3b8c5
 8006570:	1b8d0159 	.word	0x1b8d0159
 8006574:	3fe6066c 	.word	0x3fe6066c
 8006578:	9c598ac8 	.word	0x9c598ac8
 800657c:	40002ae5 	.word	0x40002ae5
 8006580:	1c8a2d4b 	.word	0x1c8a2d4b
 8006584:	40033a27 	.word	0x40033a27
 8006588:	3fefffff 	.word	0x3fefffff
 800658c:	3fdfffff 	.word	0x3fdfffff
 8006590:	3ff00000 	.word	0x3ff00000
 8006594:	3fe00000 	.word	0x3fe00000
 8006598:	3fef3332 	.word	0x3fef3332
 800659c:	4640      	mov	r0, r8
 800659e:	4649      	mov	r1, r9
 80065a0:	f7fa f8f4 	bl	800078c <__aeabi_ddiv>
 80065a4:	4632      	mov	r2, r6
 80065a6:	4680      	mov	r8, r0
 80065a8:	4689      	mov	r9, r1
 80065aa:	463b      	mov	r3, r7
 80065ac:	4630      	mov	r0, r6
 80065ae:	4639      	mov	r1, r7
 80065b0:	f7f9 fe10 	bl	80001d4 <__adddf3>
 80065b4:	4602      	mov	r2, r0
 80065b6:	460b      	mov	r3, r1
 80065b8:	4640      	mov	r0, r8
 80065ba:	4649      	mov	r1, r9
 80065bc:	f7f9 ffbc 	bl	8000538 <__aeabi_dmul>
 80065c0:	f04f 0a00 	mov.w	sl, #0
 80065c4:	4680      	mov	r8, r0
 80065c6:	4689      	mov	r9, r1
 80065c8:	4652      	mov	r2, sl
 80065ca:	463b      	mov	r3, r7
 80065cc:	4650      	mov	r0, sl
 80065ce:	4639      	mov	r1, r7
 80065d0:	f7f9 ffb2 	bl	8000538 <__aeabi_dmul>
 80065d4:	4602      	mov	r2, r0
 80065d6:	460b      	mov	r3, r1
 80065d8:	4620      	mov	r0, r4
 80065da:	4629      	mov	r1, r5
 80065dc:	f7f9 fdf8 	bl	80001d0 <__aeabi_dsub>
 80065e0:	4652      	mov	r2, sl
 80065e2:	4604      	mov	r4, r0
 80065e4:	460d      	mov	r5, r1
 80065e6:	463b      	mov	r3, r7
 80065e8:	4630      	mov	r0, r6
 80065ea:	4639      	mov	r1, r7
 80065ec:	f7f9 fdf2 	bl	80001d4 <__adddf3>
 80065f0:	4602      	mov	r2, r0
 80065f2:	460b      	mov	r3, r1
 80065f4:	4620      	mov	r0, r4
 80065f6:	4629      	mov	r1, r5
 80065f8:	f7fa f8c8 	bl	800078c <__aeabi_ddiv>
 80065fc:	4602      	mov	r2, r0
 80065fe:	460b      	mov	r3, r1
 8006600:	f7f9 fde8 	bl	80001d4 <__adddf3>
 8006604:	4602      	mov	r2, r0
 8006606:	460b      	mov	r3, r1
 8006608:	a113      	add	r1, pc, #76	; (adr r1, 8006658 <__ieee754_asin+0x408>)
 800660a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800660e:	f7f9 fddf 	bl	80001d0 <__aeabi_dsub>
 8006612:	4602      	mov	r2, r0
 8006614:	460b      	mov	r3, r1
 8006616:	4640      	mov	r0, r8
 8006618:	4649      	mov	r1, r9
 800661a:	f7f9 fdd9 	bl	80001d0 <__aeabi_dsub>
 800661e:	4652      	mov	r2, sl
 8006620:	4604      	mov	r4, r0
 8006622:	460d      	mov	r5, r1
 8006624:	463b      	mov	r3, r7
 8006626:	4650      	mov	r0, sl
 8006628:	4639      	mov	r1, r7
 800662a:	f7f9 fdd3 	bl	80001d4 <__adddf3>
 800662e:	4602      	mov	r2, r0
 8006630:	460b      	mov	r3, r1
 8006632:	a10b      	add	r1, pc, #44	; (adr r1, 8006660 <__ieee754_asin+0x410>)
 8006634:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006638:	f7f9 fdca 	bl	80001d0 <__aeabi_dsub>
 800663c:	4602      	mov	r2, r0
 800663e:	460b      	mov	r3, r1
 8006640:	4620      	mov	r0, r4
 8006642:	4629      	mov	r1, r5
 8006644:	f7f9 fdc4 	bl	80001d0 <__aeabi_dsub>
 8006648:	4602      	mov	r2, r0
 800664a:	460b      	mov	r3, r1
 800664c:	a104      	add	r1, pc, #16	; (adr r1, 8006660 <__ieee754_asin+0x410>)
 800664e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006652:	e6e4      	b.n	800641e <__ieee754_asin+0x1ce>
 8006654:	f3af 8000 	nop.w
 8006658:	33145c07 	.word	0x33145c07
 800665c:	3c91a626 	.word	0x3c91a626
 8006660:	54442d18 	.word	0x54442d18
 8006664:	3fe921fb 	.word	0x3fe921fb

08006668 <__ieee754_atan2>:
 8006668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800666c:	ec57 6b11 	vmov	r6, r7, d1
 8006670:	4273      	negs	r3, r6
 8006672:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8006676:	4333      	orrs	r3, r6
 8006678:	f8df c19c 	ldr.w	ip, [pc, #412]	; 8006818 <__ieee754_atan2+0x1b0>
 800667c:	ec51 0b10 	vmov	r0, r1, d0
 8006680:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8006684:	4563      	cmp	r3, ip
 8006686:	ee11 8a10 	vmov	r8, s2
 800668a:	ee10 9a10 	vmov	r9, s0
 800668e:	468e      	mov	lr, r1
 8006690:	d807      	bhi.n	80066a2 <__ieee754_atan2+0x3a>
 8006692:	4244      	negs	r4, r0
 8006694:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006698:	4304      	orrs	r4, r0
 800669a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800669e:	4564      	cmp	r4, ip
 80066a0:	d907      	bls.n	80066b2 <__ieee754_atan2+0x4a>
 80066a2:	4632      	mov	r2, r6
 80066a4:	463b      	mov	r3, r7
 80066a6:	f7f9 fd95 	bl	80001d4 <__adddf3>
 80066aa:	ec41 0b10 	vmov	d0, r0, r1
 80066ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066b2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80066b6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80066ba:	4334      	orrs	r4, r6
 80066bc:	d103      	bne.n	80066c6 <__ieee754_atan2+0x5e>
 80066be:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066c2:	f000 b95d 	b.w	8006980 <atan>
 80066c6:	17bc      	asrs	r4, r7, #30
 80066c8:	f004 0402 	and.w	r4, r4, #2
 80066cc:	ea59 0903 	orrs.w	r9, r9, r3
 80066d0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80066d4:	d107      	bne.n	80066e6 <__ieee754_atan2+0x7e>
 80066d6:	2c02      	cmp	r4, #2
 80066d8:	d030      	beq.n	800673c <__ieee754_atan2+0xd4>
 80066da:	2c03      	cmp	r4, #3
 80066dc:	d1e5      	bne.n	80066aa <__ieee754_atan2+0x42>
 80066de:	a13c      	add	r1, pc, #240	; (adr r1, 80067d0 <__ieee754_atan2+0x168>)
 80066e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80066e4:	e7e1      	b.n	80066aa <__ieee754_atan2+0x42>
 80066e6:	ea58 0802 	orrs.w	r8, r8, r2
 80066ea:	d106      	bne.n	80066fa <__ieee754_atan2+0x92>
 80066ec:	f1be 0f00 	cmp.w	lr, #0
 80066f0:	da6a      	bge.n	80067c8 <__ieee754_atan2+0x160>
 80066f2:	a139      	add	r1, pc, #228	; (adr r1, 80067d8 <__ieee754_atan2+0x170>)
 80066f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80066f8:	e7d7      	b.n	80066aa <__ieee754_atan2+0x42>
 80066fa:	4562      	cmp	r2, ip
 80066fc:	d122      	bne.n	8006744 <__ieee754_atan2+0xdc>
 80066fe:	4293      	cmp	r3, r2
 8006700:	d111      	bne.n	8006726 <__ieee754_atan2+0xbe>
 8006702:	2c02      	cmp	r4, #2
 8006704:	d007      	beq.n	8006716 <__ieee754_atan2+0xae>
 8006706:	2c03      	cmp	r4, #3
 8006708:	d009      	beq.n	800671e <__ieee754_atan2+0xb6>
 800670a:	2c01      	cmp	r4, #1
 800670c:	d156      	bne.n	80067bc <__ieee754_atan2+0x154>
 800670e:	a134      	add	r1, pc, #208	; (adr r1, 80067e0 <__ieee754_atan2+0x178>)
 8006710:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006714:	e7c9      	b.n	80066aa <__ieee754_atan2+0x42>
 8006716:	a134      	add	r1, pc, #208	; (adr r1, 80067e8 <__ieee754_atan2+0x180>)
 8006718:	e9d1 0100 	ldrd	r0, r1, [r1]
 800671c:	e7c5      	b.n	80066aa <__ieee754_atan2+0x42>
 800671e:	a134      	add	r1, pc, #208	; (adr r1, 80067f0 <__ieee754_atan2+0x188>)
 8006720:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006724:	e7c1      	b.n	80066aa <__ieee754_atan2+0x42>
 8006726:	2c02      	cmp	r4, #2
 8006728:	d008      	beq.n	800673c <__ieee754_atan2+0xd4>
 800672a:	2c03      	cmp	r4, #3
 800672c:	d0d7      	beq.n	80066de <__ieee754_atan2+0x76>
 800672e:	2c01      	cmp	r4, #1
 8006730:	f04f 0000 	mov.w	r0, #0
 8006734:	d146      	bne.n	80067c4 <__ieee754_atan2+0x15c>
 8006736:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800673a:	e7b6      	b.n	80066aa <__ieee754_atan2+0x42>
 800673c:	a12e      	add	r1, pc, #184	; (adr r1, 80067f8 <__ieee754_atan2+0x190>)
 800673e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006742:	e7b2      	b.n	80066aa <__ieee754_atan2+0x42>
 8006744:	4563      	cmp	r3, ip
 8006746:	d0d1      	beq.n	80066ec <__ieee754_atan2+0x84>
 8006748:	1a9b      	subs	r3, r3, r2
 800674a:	151b      	asrs	r3, r3, #20
 800674c:	2b3c      	cmp	r3, #60	; 0x3c
 800674e:	dc1e      	bgt.n	800678e <__ieee754_atan2+0x126>
 8006750:	2f00      	cmp	r7, #0
 8006752:	da01      	bge.n	8006758 <__ieee754_atan2+0xf0>
 8006754:	333c      	adds	r3, #60	; 0x3c
 8006756:	db1e      	blt.n	8006796 <__ieee754_atan2+0x12e>
 8006758:	4632      	mov	r2, r6
 800675a:	463b      	mov	r3, r7
 800675c:	f7fa f816 	bl	800078c <__aeabi_ddiv>
 8006760:	ec41 0b10 	vmov	d0, r0, r1
 8006764:	f000 fab4 	bl	8006cd0 <fabs>
 8006768:	f000 f90a 	bl	8006980 <atan>
 800676c:	ec51 0b10 	vmov	r0, r1, d0
 8006770:	2c01      	cmp	r4, #1
 8006772:	d013      	beq.n	800679c <__ieee754_atan2+0x134>
 8006774:	2c02      	cmp	r4, #2
 8006776:	d014      	beq.n	80067a2 <__ieee754_atan2+0x13a>
 8006778:	2c00      	cmp	r4, #0
 800677a:	d096      	beq.n	80066aa <__ieee754_atan2+0x42>
 800677c:	a320      	add	r3, pc, #128	; (adr r3, 8006800 <__ieee754_atan2+0x198>)
 800677e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006782:	f7f9 fd25 	bl	80001d0 <__aeabi_dsub>
 8006786:	a31c      	add	r3, pc, #112	; (adr r3, 80067f8 <__ieee754_atan2+0x190>)
 8006788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800678c:	e013      	b.n	80067b6 <__ieee754_atan2+0x14e>
 800678e:	a11e      	add	r1, pc, #120	; (adr r1, 8006808 <__ieee754_atan2+0x1a0>)
 8006790:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006794:	e7ec      	b.n	8006770 <__ieee754_atan2+0x108>
 8006796:	2000      	movs	r0, #0
 8006798:	2100      	movs	r1, #0
 800679a:	e7e9      	b.n	8006770 <__ieee754_atan2+0x108>
 800679c:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80067a0:	e783      	b.n	80066aa <__ieee754_atan2+0x42>
 80067a2:	a317      	add	r3, pc, #92	; (adr r3, 8006800 <__ieee754_atan2+0x198>)
 80067a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a8:	f7f9 fd12 	bl	80001d0 <__aeabi_dsub>
 80067ac:	4602      	mov	r2, r0
 80067ae:	460b      	mov	r3, r1
 80067b0:	a111      	add	r1, pc, #68	; (adr r1, 80067f8 <__ieee754_atan2+0x190>)
 80067b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80067b6:	f7f9 fd0b 	bl	80001d0 <__aeabi_dsub>
 80067ba:	e776      	b.n	80066aa <__ieee754_atan2+0x42>
 80067bc:	a114      	add	r1, pc, #80	; (adr r1, 8006810 <__ieee754_atan2+0x1a8>)
 80067be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80067c2:	e772      	b.n	80066aa <__ieee754_atan2+0x42>
 80067c4:	2100      	movs	r1, #0
 80067c6:	e770      	b.n	80066aa <__ieee754_atan2+0x42>
 80067c8:	a10f      	add	r1, pc, #60	; (adr r1, 8006808 <__ieee754_atan2+0x1a0>)
 80067ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80067ce:	e76c      	b.n	80066aa <__ieee754_atan2+0x42>
 80067d0:	54442d18 	.word	0x54442d18
 80067d4:	c00921fb 	.word	0xc00921fb
 80067d8:	54442d18 	.word	0x54442d18
 80067dc:	bff921fb 	.word	0xbff921fb
 80067e0:	54442d18 	.word	0x54442d18
 80067e4:	bfe921fb 	.word	0xbfe921fb
 80067e8:	7f3321d2 	.word	0x7f3321d2
 80067ec:	4002d97c 	.word	0x4002d97c
 80067f0:	7f3321d2 	.word	0x7f3321d2
 80067f4:	c002d97c 	.word	0xc002d97c
 80067f8:	54442d18 	.word	0x54442d18
 80067fc:	400921fb 	.word	0x400921fb
 8006800:	33145c07 	.word	0x33145c07
 8006804:	3ca1a626 	.word	0x3ca1a626
 8006808:	54442d18 	.word	0x54442d18
 800680c:	3ff921fb 	.word	0x3ff921fb
 8006810:	54442d18 	.word	0x54442d18
 8006814:	3fe921fb 	.word	0x3fe921fb
 8006818:	7ff00000 	.word	0x7ff00000

0800681c <__ieee754_sqrt>:
 800681c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006820:	ec55 4b10 	vmov	r4, r5, d0
 8006824:	4e54      	ldr	r6, [pc, #336]	; (8006978 <__ieee754_sqrt+0x15c>)
 8006826:	43ae      	bics	r6, r5
 8006828:	ee10 0a10 	vmov	r0, s0
 800682c:	462b      	mov	r3, r5
 800682e:	462a      	mov	r2, r5
 8006830:	4621      	mov	r1, r4
 8006832:	d113      	bne.n	800685c <__ieee754_sqrt+0x40>
 8006834:	ee10 2a10 	vmov	r2, s0
 8006838:	462b      	mov	r3, r5
 800683a:	ee10 0a10 	vmov	r0, s0
 800683e:	4629      	mov	r1, r5
 8006840:	f7f9 fe7a 	bl	8000538 <__aeabi_dmul>
 8006844:	4602      	mov	r2, r0
 8006846:	460b      	mov	r3, r1
 8006848:	4620      	mov	r0, r4
 800684a:	4629      	mov	r1, r5
 800684c:	f7f9 fcc2 	bl	80001d4 <__adddf3>
 8006850:	4604      	mov	r4, r0
 8006852:	460d      	mov	r5, r1
 8006854:	ec45 4b10 	vmov	d0, r4, r5
 8006858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800685c:	2d00      	cmp	r5, #0
 800685e:	dc10      	bgt.n	8006882 <__ieee754_sqrt+0x66>
 8006860:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006864:	4330      	orrs	r0, r6
 8006866:	d0f5      	beq.n	8006854 <__ieee754_sqrt+0x38>
 8006868:	b15d      	cbz	r5, 8006882 <__ieee754_sqrt+0x66>
 800686a:	ee10 2a10 	vmov	r2, s0
 800686e:	462b      	mov	r3, r5
 8006870:	4620      	mov	r0, r4
 8006872:	4629      	mov	r1, r5
 8006874:	f7f9 fcac 	bl	80001d0 <__aeabi_dsub>
 8006878:	4602      	mov	r2, r0
 800687a:	460b      	mov	r3, r1
 800687c:	f7f9 ff86 	bl	800078c <__aeabi_ddiv>
 8006880:	e7e6      	b.n	8006850 <__ieee754_sqrt+0x34>
 8006882:	151b      	asrs	r3, r3, #20
 8006884:	d10c      	bne.n	80068a0 <__ieee754_sqrt+0x84>
 8006886:	2a00      	cmp	r2, #0
 8006888:	d06d      	beq.n	8006966 <__ieee754_sqrt+0x14a>
 800688a:	2000      	movs	r0, #0
 800688c:	02d6      	lsls	r6, r2, #11
 800688e:	d56e      	bpl.n	800696e <__ieee754_sqrt+0x152>
 8006890:	1e44      	subs	r4, r0, #1
 8006892:	1b1b      	subs	r3, r3, r4
 8006894:	f1c0 0420 	rsb	r4, r0, #32
 8006898:	fa21 f404 	lsr.w	r4, r1, r4
 800689c:	4322      	orrs	r2, r4
 800689e:	4081      	lsls	r1, r0
 80068a0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80068a4:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80068a8:	07dd      	lsls	r5, r3, #31
 80068aa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80068ae:	bf42      	ittt	mi
 80068b0:	0052      	lslmi	r2, r2, #1
 80068b2:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 80068b6:	0049      	lslmi	r1, r1, #1
 80068b8:	1058      	asrs	r0, r3, #1
 80068ba:	2500      	movs	r5, #0
 80068bc:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 80068c0:	441a      	add	r2, r3
 80068c2:	0049      	lsls	r1, r1, #1
 80068c4:	2316      	movs	r3, #22
 80068c6:	462c      	mov	r4, r5
 80068c8:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80068cc:	19a7      	adds	r7, r4, r6
 80068ce:	4297      	cmp	r7, r2
 80068d0:	bfde      	ittt	le
 80068d2:	1bd2      	suble	r2, r2, r7
 80068d4:	19bc      	addle	r4, r7, r6
 80068d6:	19ad      	addle	r5, r5, r6
 80068d8:	0052      	lsls	r2, r2, #1
 80068da:	3b01      	subs	r3, #1
 80068dc:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80068e0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80068e4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80068e8:	d1f0      	bne.n	80068cc <__ieee754_sqrt+0xb0>
 80068ea:	f04f 0e20 	mov.w	lr, #32
 80068ee:	469c      	mov	ip, r3
 80068f0:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80068f4:	42a2      	cmp	r2, r4
 80068f6:	eb06 070c 	add.w	r7, r6, ip
 80068fa:	dc02      	bgt.n	8006902 <__ieee754_sqrt+0xe6>
 80068fc:	d112      	bne.n	8006924 <__ieee754_sqrt+0x108>
 80068fe:	428f      	cmp	r7, r1
 8006900:	d810      	bhi.n	8006924 <__ieee754_sqrt+0x108>
 8006902:	2f00      	cmp	r7, #0
 8006904:	eb07 0c06 	add.w	ip, r7, r6
 8006908:	da34      	bge.n	8006974 <__ieee754_sqrt+0x158>
 800690a:	f1bc 0f00 	cmp.w	ip, #0
 800690e:	db31      	blt.n	8006974 <__ieee754_sqrt+0x158>
 8006910:	f104 0801 	add.w	r8, r4, #1
 8006914:	1b12      	subs	r2, r2, r4
 8006916:	428f      	cmp	r7, r1
 8006918:	bf88      	it	hi
 800691a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800691e:	1bc9      	subs	r1, r1, r7
 8006920:	4433      	add	r3, r6
 8006922:	4644      	mov	r4, r8
 8006924:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 8006928:	f1be 0e01 	subs.w	lr, lr, #1
 800692c:	443a      	add	r2, r7
 800692e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006932:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006936:	d1dd      	bne.n	80068f4 <__ieee754_sqrt+0xd8>
 8006938:	430a      	orrs	r2, r1
 800693a:	d006      	beq.n	800694a <__ieee754_sqrt+0x12e>
 800693c:	1c5c      	adds	r4, r3, #1
 800693e:	bf13      	iteet	ne
 8006940:	3301      	addne	r3, #1
 8006942:	3501      	addeq	r5, #1
 8006944:	4673      	moveq	r3, lr
 8006946:	f023 0301 	bicne.w	r3, r3, #1
 800694a:	106a      	asrs	r2, r5, #1
 800694c:	085b      	lsrs	r3, r3, #1
 800694e:	07e9      	lsls	r1, r5, #31
 8006950:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8006954:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8006958:	bf48      	it	mi
 800695a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800695e:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8006962:	461c      	mov	r4, r3
 8006964:	e776      	b.n	8006854 <__ieee754_sqrt+0x38>
 8006966:	0aca      	lsrs	r2, r1, #11
 8006968:	3b15      	subs	r3, #21
 800696a:	0549      	lsls	r1, r1, #21
 800696c:	e78b      	b.n	8006886 <__ieee754_sqrt+0x6a>
 800696e:	0052      	lsls	r2, r2, #1
 8006970:	3001      	adds	r0, #1
 8006972:	e78b      	b.n	800688c <__ieee754_sqrt+0x70>
 8006974:	46a0      	mov	r8, r4
 8006976:	e7cd      	b.n	8006914 <__ieee754_sqrt+0xf8>
 8006978:	7ff00000 	.word	0x7ff00000
 800697c:	00000000 	.word	0x00000000

08006980 <atan>:
 8006980:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006984:	ec55 4b10 	vmov	r4, r5, d0
 8006988:	4bc7      	ldr	r3, [pc, #796]	; (8006ca8 <atan+0x328>)
 800698a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800698e:	429e      	cmp	r6, r3
 8006990:	46ab      	mov	fp, r5
 8006992:	dd18      	ble.n	80069c6 <atan+0x46>
 8006994:	4ac5      	ldr	r2, [pc, #788]	; (8006cac <atan+0x32c>)
 8006996:	4296      	cmp	r6, r2
 8006998:	dc01      	bgt.n	800699e <atan+0x1e>
 800699a:	d109      	bne.n	80069b0 <atan+0x30>
 800699c:	b144      	cbz	r4, 80069b0 <atan+0x30>
 800699e:	4622      	mov	r2, r4
 80069a0:	462b      	mov	r3, r5
 80069a2:	4620      	mov	r0, r4
 80069a4:	4629      	mov	r1, r5
 80069a6:	f7f9 fc15 	bl	80001d4 <__adddf3>
 80069aa:	4604      	mov	r4, r0
 80069ac:	460d      	mov	r5, r1
 80069ae:	e006      	b.n	80069be <atan+0x3e>
 80069b0:	f1bb 0f00 	cmp.w	fp, #0
 80069b4:	f300 813a 	bgt.w	8006c2c <atan+0x2ac>
 80069b8:	a59f      	add	r5, pc, #636	; (adr r5, 8006c38 <atan+0x2b8>)
 80069ba:	e9d5 4500 	ldrd	r4, r5, [r5]
 80069be:	ec45 4b10 	vmov	d0, r4, r5
 80069c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069c6:	4bba      	ldr	r3, [pc, #744]	; (8006cb0 <atan+0x330>)
 80069c8:	429e      	cmp	r6, r3
 80069ca:	dc14      	bgt.n	80069f6 <atan+0x76>
 80069cc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80069d0:	429e      	cmp	r6, r3
 80069d2:	dc0d      	bgt.n	80069f0 <atan+0x70>
 80069d4:	a39a      	add	r3, pc, #616	; (adr r3, 8006c40 <atan+0x2c0>)
 80069d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069da:	ee10 0a10 	vmov	r0, s0
 80069de:	4629      	mov	r1, r5
 80069e0:	f7f9 fbf8 	bl	80001d4 <__adddf3>
 80069e4:	2200      	movs	r2, #0
 80069e6:	4bb3      	ldr	r3, [pc, #716]	; (8006cb4 <atan+0x334>)
 80069e8:	f7fa f836 	bl	8000a58 <__aeabi_dcmpgt>
 80069ec:	2800      	cmp	r0, #0
 80069ee:	d1e6      	bne.n	80069be <atan+0x3e>
 80069f0:	f04f 3aff 	mov.w	sl, #4294967295
 80069f4:	e02b      	b.n	8006a4e <atan+0xce>
 80069f6:	f000 f96b 	bl	8006cd0 <fabs>
 80069fa:	4baf      	ldr	r3, [pc, #700]	; (8006cb8 <atan+0x338>)
 80069fc:	429e      	cmp	r6, r3
 80069fe:	ec55 4b10 	vmov	r4, r5, d0
 8006a02:	f300 80bf 	bgt.w	8006b84 <atan+0x204>
 8006a06:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8006a0a:	429e      	cmp	r6, r3
 8006a0c:	f300 80a0 	bgt.w	8006b50 <atan+0x1d0>
 8006a10:	ee10 2a10 	vmov	r2, s0
 8006a14:	ee10 0a10 	vmov	r0, s0
 8006a18:	462b      	mov	r3, r5
 8006a1a:	4629      	mov	r1, r5
 8006a1c:	f7f9 fbda 	bl	80001d4 <__adddf3>
 8006a20:	2200      	movs	r2, #0
 8006a22:	4ba4      	ldr	r3, [pc, #656]	; (8006cb4 <atan+0x334>)
 8006a24:	f7f9 fbd4 	bl	80001d0 <__aeabi_dsub>
 8006a28:	2200      	movs	r2, #0
 8006a2a:	4606      	mov	r6, r0
 8006a2c:	460f      	mov	r7, r1
 8006a2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006a32:	4620      	mov	r0, r4
 8006a34:	4629      	mov	r1, r5
 8006a36:	f7f9 fbcd 	bl	80001d4 <__adddf3>
 8006a3a:	4602      	mov	r2, r0
 8006a3c:	460b      	mov	r3, r1
 8006a3e:	4630      	mov	r0, r6
 8006a40:	4639      	mov	r1, r7
 8006a42:	f7f9 fea3 	bl	800078c <__aeabi_ddiv>
 8006a46:	f04f 0a00 	mov.w	sl, #0
 8006a4a:	4604      	mov	r4, r0
 8006a4c:	460d      	mov	r5, r1
 8006a4e:	4622      	mov	r2, r4
 8006a50:	462b      	mov	r3, r5
 8006a52:	4620      	mov	r0, r4
 8006a54:	4629      	mov	r1, r5
 8006a56:	f7f9 fd6f 	bl	8000538 <__aeabi_dmul>
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	460b      	mov	r3, r1
 8006a5e:	4680      	mov	r8, r0
 8006a60:	4689      	mov	r9, r1
 8006a62:	f7f9 fd69 	bl	8000538 <__aeabi_dmul>
 8006a66:	a378      	add	r3, pc, #480	; (adr r3, 8006c48 <atan+0x2c8>)
 8006a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a6c:	4606      	mov	r6, r0
 8006a6e:	460f      	mov	r7, r1
 8006a70:	f7f9 fd62 	bl	8000538 <__aeabi_dmul>
 8006a74:	a376      	add	r3, pc, #472	; (adr r3, 8006c50 <atan+0x2d0>)
 8006a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a7a:	f7f9 fbab 	bl	80001d4 <__adddf3>
 8006a7e:	4632      	mov	r2, r6
 8006a80:	463b      	mov	r3, r7
 8006a82:	f7f9 fd59 	bl	8000538 <__aeabi_dmul>
 8006a86:	a374      	add	r3, pc, #464	; (adr r3, 8006c58 <atan+0x2d8>)
 8006a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a8c:	f7f9 fba2 	bl	80001d4 <__adddf3>
 8006a90:	4632      	mov	r2, r6
 8006a92:	463b      	mov	r3, r7
 8006a94:	f7f9 fd50 	bl	8000538 <__aeabi_dmul>
 8006a98:	a371      	add	r3, pc, #452	; (adr r3, 8006c60 <atan+0x2e0>)
 8006a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a9e:	f7f9 fb99 	bl	80001d4 <__adddf3>
 8006aa2:	4632      	mov	r2, r6
 8006aa4:	463b      	mov	r3, r7
 8006aa6:	f7f9 fd47 	bl	8000538 <__aeabi_dmul>
 8006aaa:	a36f      	add	r3, pc, #444	; (adr r3, 8006c68 <atan+0x2e8>)
 8006aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab0:	f7f9 fb90 	bl	80001d4 <__adddf3>
 8006ab4:	4632      	mov	r2, r6
 8006ab6:	463b      	mov	r3, r7
 8006ab8:	f7f9 fd3e 	bl	8000538 <__aeabi_dmul>
 8006abc:	a36c      	add	r3, pc, #432	; (adr r3, 8006c70 <atan+0x2f0>)
 8006abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac2:	f7f9 fb87 	bl	80001d4 <__adddf3>
 8006ac6:	4642      	mov	r2, r8
 8006ac8:	464b      	mov	r3, r9
 8006aca:	f7f9 fd35 	bl	8000538 <__aeabi_dmul>
 8006ace:	a36a      	add	r3, pc, #424	; (adr r3, 8006c78 <atan+0x2f8>)
 8006ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad4:	4680      	mov	r8, r0
 8006ad6:	4689      	mov	r9, r1
 8006ad8:	4630      	mov	r0, r6
 8006ada:	4639      	mov	r1, r7
 8006adc:	f7f9 fd2c 	bl	8000538 <__aeabi_dmul>
 8006ae0:	a367      	add	r3, pc, #412	; (adr r3, 8006c80 <atan+0x300>)
 8006ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae6:	f7f9 fb73 	bl	80001d0 <__aeabi_dsub>
 8006aea:	4632      	mov	r2, r6
 8006aec:	463b      	mov	r3, r7
 8006aee:	f7f9 fd23 	bl	8000538 <__aeabi_dmul>
 8006af2:	a365      	add	r3, pc, #404	; (adr r3, 8006c88 <atan+0x308>)
 8006af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af8:	f7f9 fb6a 	bl	80001d0 <__aeabi_dsub>
 8006afc:	4632      	mov	r2, r6
 8006afe:	463b      	mov	r3, r7
 8006b00:	f7f9 fd1a 	bl	8000538 <__aeabi_dmul>
 8006b04:	a362      	add	r3, pc, #392	; (adr r3, 8006c90 <atan+0x310>)
 8006b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b0a:	f7f9 fb61 	bl	80001d0 <__aeabi_dsub>
 8006b0e:	4632      	mov	r2, r6
 8006b10:	463b      	mov	r3, r7
 8006b12:	f7f9 fd11 	bl	8000538 <__aeabi_dmul>
 8006b16:	a360      	add	r3, pc, #384	; (adr r3, 8006c98 <atan+0x318>)
 8006b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b1c:	f7f9 fb58 	bl	80001d0 <__aeabi_dsub>
 8006b20:	4632      	mov	r2, r6
 8006b22:	463b      	mov	r3, r7
 8006b24:	f7f9 fd08 	bl	8000538 <__aeabi_dmul>
 8006b28:	f1ba 3fff 	cmp.w	sl, #4294967295
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	460b      	mov	r3, r1
 8006b30:	d155      	bne.n	8006bde <atan+0x25e>
 8006b32:	4640      	mov	r0, r8
 8006b34:	4649      	mov	r1, r9
 8006b36:	f7f9 fb4d 	bl	80001d4 <__adddf3>
 8006b3a:	4622      	mov	r2, r4
 8006b3c:	462b      	mov	r3, r5
 8006b3e:	f7f9 fcfb 	bl	8000538 <__aeabi_dmul>
 8006b42:	4602      	mov	r2, r0
 8006b44:	460b      	mov	r3, r1
 8006b46:	4620      	mov	r0, r4
 8006b48:	4629      	mov	r1, r5
 8006b4a:	f7f9 fb41 	bl	80001d0 <__aeabi_dsub>
 8006b4e:	e72c      	b.n	80069aa <atan+0x2a>
 8006b50:	ee10 0a10 	vmov	r0, s0
 8006b54:	2200      	movs	r2, #0
 8006b56:	4b57      	ldr	r3, [pc, #348]	; (8006cb4 <atan+0x334>)
 8006b58:	4629      	mov	r1, r5
 8006b5a:	f7f9 fb39 	bl	80001d0 <__aeabi_dsub>
 8006b5e:	2200      	movs	r2, #0
 8006b60:	4606      	mov	r6, r0
 8006b62:	460f      	mov	r7, r1
 8006b64:	4b53      	ldr	r3, [pc, #332]	; (8006cb4 <atan+0x334>)
 8006b66:	4620      	mov	r0, r4
 8006b68:	4629      	mov	r1, r5
 8006b6a:	f7f9 fb33 	bl	80001d4 <__adddf3>
 8006b6e:	4602      	mov	r2, r0
 8006b70:	460b      	mov	r3, r1
 8006b72:	4630      	mov	r0, r6
 8006b74:	4639      	mov	r1, r7
 8006b76:	f7f9 fe09 	bl	800078c <__aeabi_ddiv>
 8006b7a:	f04f 0a01 	mov.w	sl, #1
 8006b7e:	4604      	mov	r4, r0
 8006b80:	460d      	mov	r5, r1
 8006b82:	e764      	b.n	8006a4e <atan+0xce>
 8006b84:	4b4d      	ldr	r3, [pc, #308]	; (8006cbc <atan+0x33c>)
 8006b86:	429e      	cmp	r6, r3
 8006b88:	dc1d      	bgt.n	8006bc6 <atan+0x246>
 8006b8a:	ee10 0a10 	vmov	r0, s0
 8006b8e:	2200      	movs	r2, #0
 8006b90:	4b4b      	ldr	r3, [pc, #300]	; (8006cc0 <atan+0x340>)
 8006b92:	4629      	mov	r1, r5
 8006b94:	f7f9 fb1c 	bl	80001d0 <__aeabi_dsub>
 8006b98:	2200      	movs	r2, #0
 8006b9a:	4606      	mov	r6, r0
 8006b9c:	460f      	mov	r7, r1
 8006b9e:	4b48      	ldr	r3, [pc, #288]	; (8006cc0 <atan+0x340>)
 8006ba0:	4620      	mov	r0, r4
 8006ba2:	4629      	mov	r1, r5
 8006ba4:	f7f9 fcc8 	bl	8000538 <__aeabi_dmul>
 8006ba8:	2200      	movs	r2, #0
 8006baa:	4b42      	ldr	r3, [pc, #264]	; (8006cb4 <atan+0x334>)
 8006bac:	f7f9 fb12 	bl	80001d4 <__adddf3>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	460b      	mov	r3, r1
 8006bb4:	4630      	mov	r0, r6
 8006bb6:	4639      	mov	r1, r7
 8006bb8:	f7f9 fde8 	bl	800078c <__aeabi_ddiv>
 8006bbc:	f04f 0a02 	mov.w	sl, #2
 8006bc0:	4604      	mov	r4, r0
 8006bc2:	460d      	mov	r5, r1
 8006bc4:	e743      	b.n	8006a4e <atan+0xce>
 8006bc6:	462b      	mov	r3, r5
 8006bc8:	ee10 2a10 	vmov	r2, s0
 8006bcc:	2000      	movs	r0, #0
 8006bce:	493d      	ldr	r1, [pc, #244]	; (8006cc4 <atan+0x344>)
 8006bd0:	f7f9 fddc 	bl	800078c <__aeabi_ddiv>
 8006bd4:	f04f 0a03 	mov.w	sl, #3
 8006bd8:	4604      	mov	r4, r0
 8006bda:	460d      	mov	r5, r1
 8006bdc:	e737      	b.n	8006a4e <atan+0xce>
 8006bde:	4640      	mov	r0, r8
 8006be0:	4649      	mov	r1, r9
 8006be2:	f7f9 faf7 	bl	80001d4 <__adddf3>
 8006be6:	4622      	mov	r2, r4
 8006be8:	462b      	mov	r3, r5
 8006bea:	f7f9 fca5 	bl	8000538 <__aeabi_dmul>
 8006bee:	4e36      	ldr	r6, [pc, #216]	; (8006cc8 <atan+0x348>)
 8006bf0:	4b36      	ldr	r3, [pc, #216]	; (8006ccc <atan+0x34c>)
 8006bf2:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8006bf6:	4456      	add	r6, sl
 8006bf8:	449a      	add	sl, r3
 8006bfa:	e9da 2300 	ldrd	r2, r3, [sl]
 8006bfe:	f7f9 fae7 	bl	80001d0 <__aeabi_dsub>
 8006c02:	4622      	mov	r2, r4
 8006c04:	462b      	mov	r3, r5
 8006c06:	f7f9 fae3 	bl	80001d0 <__aeabi_dsub>
 8006c0a:	4602      	mov	r2, r0
 8006c0c:	460b      	mov	r3, r1
 8006c0e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8006c12:	f7f9 fadd 	bl	80001d0 <__aeabi_dsub>
 8006c16:	f1bb 0f00 	cmp.w	fp, #0
 8006c1a:	4604      	mov	r4, r0
 8006c1c:	460d      	mov	r5, r1
 8006c1e:	f6bf aece 	bge.w	80069be <atan+0x3e>
 8006c22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006c26:	4604      	mov	r4, r0
 8006c28:	461d      	mov	r5, r3
 8006c2a:	e6c8      	b.n	80069be <atan+0x3e>
 8006c2c:	a51c      	add	r5, pc, #112	; (adr r5, 8006ca0 <atan+0x320>)
 8006c2e:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006c32:	e6c4      	b.n	80069be <atan+0x3e>
 8006c34:	f3af 8000 	nop.w
 8006c38:	54442d18 	.word	0x54442d18
 8006c3c:	bff921fb 	.word	0xbff921fb
 8006c40:	8800759c 	.word	0x8800759c
 8006c44:	7e37e43c 	.word	0x7e37e43c
 8006c48:	e322da11 	.word	0xe322da11
 8006c4c:	3f90ad3a 	.word	0x3f90ad3a
 8006c50:	24760deb 	.word	0x24760deb
 8006c54:	3fa97b4b 	.word	0x3fa97b4b
 8006c58:	a0d03d51 	.word	0xa0d03d51
 8006c5c:	3fb10d66 	.word	0x3fb10d66
 8006c60:	c54c206e 	.word	0xc54c206e
 8006c64:	3fb745cd 	.word	0x3fb745cd
 8006c68:	920083ff 	.word	0x920083ff
 8006c6c:	3fc24924 	.word	0x3fc24924
 8006c70:	5555550d 	.word	0x5555550d
 8006c74:	3fd55555 	.word	0x3fd55555
 8006c78:	2c6a6c2f 	.word	0x2c6a6c2f
 8006c7c:	bfa2b444 	.word	0xbfa2b444
 8006c80:	52defd9a 	.word	0x52defd9a
 8006c84:	3fadde2d 	.word	0x3fadde2d
 8006c88:	af749a6d 	.word	0xaf749a6d
 8006c8c:	3fb3b0f2 	.word	0x3fb3b0f2
 8006c90:	fe231671 	.word	0xfe231671
 8006c94:	3fbc71c6 	.word	0x3fbc71c6
 8006c98:	9998ebc4 	.word	0x9998ebc4
 8006c9c:	3fc99999 	.word	0x3fc99999
 8006ca0:	54442d18 	.word	0x54442d18
 8006ca4:	3ff921fb 	.word	0x3ff921fb
 8006ca8:	440fffff 	.word	0x440fffff
 8006cac:	7ff00000 	.word	0x7ff00000
 8006cb0:	3fdbffff 	.word	0x3fdbffff
 8006cb4:	3ff00000 	.word	0x3ff00000
 8006cb8:	3ff2ffff 	.word	0x3ff2ffff
 8006cbc:	40037fff 	.word	0x40037fff
 8006cc0:	3ff80000 	.word	0x3ff80000
 8006cc4:	bff00000 	.word	0xbff00000
 8006cc8:	08006d80 	.word	0x08006d80
 8006ccc:	08006da0 	.word	0x08006da0

08006cd0 <fabs>:
 8006cd0:	ec53 2b10 	vmov	r2, r3, d0
 8006cd4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006cd8:	ec43 2b10 	vmov	d0, r2, r3
 8006cdc:	4770      	bx	lr

08006cde <matherr>:
 8006cde:	2000      	movs	r0, #0
 8006ce0:	4770      	bx	lr
 8006ce2:	0000      	movs	r0, r0
 8006ce4:	0000      	movs	r0, r0
	...

08006ce8 <nan>:
 8006ce8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8006cf0 <nan+0x8>
 8006cec:	4770      	bx	lr
 8006cee:	bf00      	nop
 8006cf0:	00000000 	.word	0x00000000
 8006cf4:	7ff80000 	.word	0x7ff80000

08006cf8 <__errno>:
 8006cf8:	4b01      	ldr	r3, [pc, #4]	; (8006d00 <__errno+0x8>)
 8006cfa:	6818      	ldr	r0, [r3, #0]
 8006cfc:	4770      	bx	lr
 8006cfe:	bf00      	nop
 8006d00:	20000020 	.word	0x20000020

08006d04 <_init>:
 8006d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d06:	bf00      	nop
 8006d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d0a:	bc08      	pop	{r3}
 8006d0c:	469e      	mov	lr, r3
 8006d0e:	4770      	bx	lr

08006d10 <_fini>:
 8006d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d12:	bf00      	nop
 8006d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d16:	bc08      	pop	{r3}
 8006d18:	469e      	mov	lr, r3
 8006d1a:	4770      	bx	lr
