
final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005510  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  08005698  08005698  00015698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800585c  0800585c  0001585c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005864  08005864  00015864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005868  08005868  00015868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000020  20000000  0800586c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020020  2**0
                  CONTENTS
  8 .bss          000004bc  20000020  20000020  00020020  2**3
                  ALLOC
  9 ._user_heap_stack 00000600  200004dc  200004dc  00020020  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002439e  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00004404  00000000  00000000  000443ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000bb58  00000000  00000000  000487f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000da0  00000000  00000000  00054350  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001170  00000000  00000000  000550f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000093f6  00000000  00000000  00056260  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00005033  00000000  00000000  0005f656  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00064689  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002b78  00000000  00000000  00064708  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000020 	.word	0x20000020
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005680 	.word	0x08005680

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000024 	.word	0x20000024
 80001c4:	08005680 	.word	0x08005680

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__aeabi_d2f>:
 800095c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000960:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000964:	bf24      	itt	cs
 8000966:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800096a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800096e:	d90d      	bls.n	800098c <__aeabi_d2f+0x30>
 8000970:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000974:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000978:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800097c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000980:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000984:	bf08      	it	eq
 8000986:	f020 0001 	biceq.w	r0, r0, #1
 800098a:	4770      	bx	lr
 800098c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000990:	d121      	bne.n	80009d6 <__aeabi_d2f+0x7a>
 8000992:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000996:	bfbc      	itt	lt
 8000998:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800099c:	4770      	bxlt	lr
 800099e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009a6:	f1c2 0218 	rsb	r2, r2, #24
 80009aa:	f1c2 0c20 	rsb	ip, r2, #32
 80009ae:	fa10 f30c 	lsls.w	r3, r0, ip
 80009b2:	fa20 f002 	lsr.w	r0, r0, r2
 80009b6:	bf18      	it	ne
 80009b8:	f040 0001 	orrne.w	r0, r0, #1
 80009bc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009c4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009c8:	ea40 000c 	orr.w	r0, r0, ip
 80009cc:	fa23 f302 	lsr.w	r3, r3, r2
 80009d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009d4:	e7cc      	b.n	8000970 <__aeabi_d2f+0x14>
 80009d6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009da:	d107      	bne.n	80009ec <__aeabi_d2f+0x90>
 80009dc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e0:	bf1e      	ittt	ne
 80009e2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009e6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009ea:	4770      	bxne	lr
 80009ec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop

080009fc <__aeabi_uldivmod>:
 80009fc:	b953      	cbnz	r3, 8000a14 <__aeabi_uldivmod+0x18>
 80009fe:	b94a      	cbnz	r2, 8000a14 <__aeabi_uldivmod+0x18>
 8000a00:	2900      	cmp	r1, #0
 8000a02:	bf08      	it	eq
 8000a04:	2800      	cmpeq	r0, #0
 8000a06:	bf1c      	itt	ne
 8000a08:	f04f 31ff 	movne.w	r1, #4294967295
 8000a0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a10:	f000 b97a 	b.w	8000d08 <__aeabi_idiv0>
 8000a14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a1c:	f000 f806 	bl	8000a2c <__udivmoddi4>
 8000a20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a28:	b004      	add	sp, #16
 8000a2a:	4770      	bx	lr

08000a2c <__udivmoddi4>:
 8000a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a30:	468c      	mov	ip, r1
 8000a32:	460d      	mov	r5, r1
 8000a34:	4604      	mov	r4, r0
 8000a36:	9e08      	ldr	r6, [sp, #32]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d151      	bne.n	8000ae0 <__udivmoddi4+0xb4>
 8000a3c:	428a      	cmp	r2, r1
 8000a3e:	4617      	mov	r7, r2
 8000a40:	d96d      	bls.n	8000b1e <__udivmoddi4+0xf2>
 8000a42:	fab2 fe82 	clz	lr, r2
 8000a46:	f1be 0f00 	cmp.w	lr, #0
 8000a4a:	d00b      	beq.n	8000a64 <__udivmoddi4+0x38>
 8000a4c:	f1ce 0c20 	rsb	ip, lr, #32
 8000a50:	fa01 f50e 	lsl.w	r5, r1, lr
 8000a54:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000a58:	fa02 f70e 	lsl.w	r7, r2, lr
 8000a5c:	ea4c 0c05 	orr.w	ip, ip, r5
 8000a60:	fa00 f40e 	lsl.w	r4, r0, lr
 8000a64:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000a68:	0c25      	lsrs	r5, r4, #16
 8000a6a:	fbbc f8fa 	udiv	r8, ip, sl
 8000a6e:	fa1f f987 	uxth.w	r9, r7
 8000a72:	fb0a cc18 	mls	ip, sl, r8, ip
 8000a76:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000a7a:	fb08 f309 	mul.w	r3, r8, r9
 8000a7e:	42ab      	cmp	r3, r5
 8000a80:	d90a      	bls.n	8000a98 <__udivmoddi4+0x6c>
 8000a82:	19ed      	adds	r5, r5, r7
 8000a84:	f108 32ff 	add.w	r2, r8, #4294967295
 8000a88:	f080 8123 	bcs.w	8000cd2 <__udivmoddi4+0x2a6>
 8000a8c:	42ab      	cmp	r3, r5
 8000a8e:	f240 8120 	bls.w	8000cd2 <__udivmoddi4+0x2a6>
 8000a92:	f1a8 0802 	sub.w	r8, r8, #2
 8000a96:	443d      	add	r5, r7
 8000a98:	1aed      	subs	r5, r5, r3
 8000a9a:	b2a4      	uxth	r4, r4
 8000a9c:	fbb5 f0fa 	udiv	r0, r5, sl
 8000aa0:	fb0a 5510 	mls	r5, sl, r0, r5
 8000aa4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000aa8:	fb00 f909 	mul.w	r9, r0, r9
 8000aac:	45a1      	cmp	r9, r4
 8000aae:	d909      	bls.n	8000ac4 <__udivmoddi4+0x98>
 8000ab0:	19e4      	adds	r4, r4, r7
 8000ab2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ab6:	f080 810a 	bcs.w	8000cce <__udivmoddi4+0x2a2>
 8000aba:	45a1      	cmp	r9, r4
 8000abc:	f240 8107 	bls.w	8000cce <__udivmoddi4+0x2a2>
 8000ac0:	3802      	subs	r0, #2
 8000ac2:	443c      	add	r4, r7
 8000ac4:	eba4 0409 	sub.w	r4, r4, r9
 8000ac8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000acc:	2100      	movs	r1, #0
 8000ace:	2e00      	cmp	r6, #0
 8000ad0:	d061      	beq.n	8000b96 <__udivmoddi4+0x16a>
 8000ad2:	fa24 f40e 	lsr.w	r4, r4, lr
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	6034      	str	r4, [r6, #0]
 8000ada:	6073      	str	r3, [r6, #4]
 8000adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae0:	428b      	cmp	r3, r1
 8000ae2:	d907      	bls.n	8000af4 <__udivmoddi4+0xc8>
 8000ae4:	2e00      	cmp	r6, #0
 8000ae6:	d054      	beq.n	8000b92 <__udivmoddi4+0x166>
 8000ae8:	2100      	movs	r1, #0
 8000aea:	e886 0021 	stmia.w	r6, {r0, r5}
 8000aee:	4608      	mov	r0, r1
 8000af0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af4:	fab3 f183 	clz	r1, r3
 8000af8:	2900      	cmp	r1, #0
 8000afa:	f040 808e 	bne.w	8000c1a <__udivmoddi4+0x1ee>
 8000afe:	42ab      	cmp	r3, r5
 8000b00:	d302      	bcc.n	8000b08 <__udivmoddi4+0xdc>
 8000b02:	4282      	cmp	r2, r0
 8000b04:	f200 80fa 	bhi.w	8000cfc <__udivmoddi4+0x2d0>
 8000b08:	1a84      	subs	r4, r0, r2
 8000b0a:	eb65 0503 	sbc.w	r5, r5, r3
 8000b0e:	2001      	movs	r0, #1
 8000b10:	46ac      	mov	ip, r5
 8000b12:	2e00      	cmp	r6, #0
 8000b14:	d03f      	beq.n	8000b96 <__udivmoddi4+0x16a>
 8000b16:	e886 1010 	stmia.w	r6, {r4, ip}
 8000b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b1e:	b912      	cbnz	r2, 8000b26 <__udivmoddi4+0xfa>
 8000b20:	2701      	movs	r7, #1
 8000b22:	fbb7 f7f2 	udiv	r7, r7, r2
 8000b26:	fab7 fe87 	clz	lr, r7
 8000b2a:	f1be 0f00 	cmp.w	lr, #0
 8000b2e:	d134      	bne.n	8000b9a <__udivmoddi4+0x16e>
 8000b30:	1beb      	subs	r3, r5, r7
 8000b32:	0c3a      	lsrs	r2, r7, #16
 8000b34:	fa1f fc87 	uxth.w	ip, r7
 8000b38:	2101      	movs	r1, #1
 8000b3a:	fbb3 f8f2 	udiv	r8, r3, r2
 8000b3e:	0c25      	lsrs	r5, r4, #16
 8000b40:	fb02 3318 	mls	r3, r2, r8, r3
 8000b44:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000b48:	fb0c f308 	mul.w	r3, ip, r8
 8000b4c:	42ab      	cmp	r3, r5
 8000b4e:	d907      	bls.n	8000b60 <__udivmoddi4+0x134>
 8000b50:	19ed      	adds	r5, r5, r7
 8000b52:	f108 30ff 	add.w	r0, r8, #4294967295
 8000b56:	d202      	bcs.n	8000b5e <__udivmoddi4+0x132>
 8000b58:	42ab      	cmp	r3, r5
 8000b5a:	f200 80d1 	bhi.w	8000d00 <__udivmoddi4+0x2d4>
 8000b5e:	4680      	mov	r8, r0
 8000b60:	1aed      	subs	r5, r5, r3
 8000b62:	b2a3      	uxth	r3, r4
 8000b64:	fbb5 f0f2 	udiv	r0, r5, r2
 8000b68:	fb02 5510 	mls	r5, r2, r0, r5
 8000b6c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000b70:	fb0c fc00 	mul.w	ip, ip, r0
 8000b74:	45a4      	cmp	ip, r4
 8000b76:	d907      	bls.n	8000b88 <__udivmoddi4+0x15c>
 8000b78:	19e4      	adds	r4, r4, r7
 8000b7a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b7e:	d202      	bcs.n	8000b86 <__udivmoddi4+0x15a>
 8000b80:	45a4      	cmp	ip, r4
 8000b82:	f200 80b8 	bhi.w	8000cf6 <__udivmoddi4+0x2ca>
 8000b86:	4618      	mov	r0, r3
 8000b88:	eba4 040c 	sub.w	r4, r4, ip
 8000b8c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b90:	e79d      	b.n	8000ace <__udivmoddi4+0xa2>
 8000b92:	4631      	mov	r1, r6
 8000b94:	4630      	mov	r0, r6
 8000b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9a:	f1ce 0420 	rsb	r4, lr, #32
 8000b9e:	fa05 f30e 	lsl.w	r3, r5, lr
 8000ba2:	fa07 f70e 	lsl.w	r7, r7, lr
 8000ba6:	fa20 f804 	lsr.w	r8, r0, r4
 8000baa:	0c3a      	lsrs	r2, r7, #16
 8000bac:	fa25 f404 	lsr.w	r4, r5, r4
 8000bb0:	ea48 0803 	orr.w	r8, r8, r3
 8000bb4:	fbb4 f1f2 	udiv	r1, r4, r2
 8000bb8:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000bbc:	fb02 4411 	mls	r4, r2, r1, r4
 8000bc0:	fa1f fc87 	uxth.w	ip, r7
 8000bc4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000bc8:	fb01 f30c 	mul.w	r3, r1, ip
 8000bcc:	42ab      	cmp	r3, r5
 8000bce:	fa00 f40e 	lsl.w	r4, r0, lr
 8000bd2:	d909      	bls.n	8000be8 <__udivmoddi4+0x1bc>
 8000bd4:	19ed      	adds	r5, r5, r7
 8000bd6:	f101 30ff 	add.w	r0, r1, #4294967295
 8000bda:	f080 808a 	bcs.w	8000cf2 <__udivmoddi4+0x2c6>
 8000bde:	42ab      	cmp	r3, r5
 8000be0:	f240 8087 	bls.w	8000cf2 <__udivmoddi4+0x2c6>
 8000be4:	3902      	subs	r1, #2
 8000be6:	443d      	add	r5, r7
 8000be8:	1aeb      	subs	r3, r5, r3
 8000bea:	fa1f f588 	uxth.w	r5, r8
 8000bee:	fbb3 f0f2 	udiv	r0, r3, r2
 8000bf2:	fb02 3310 	mls	r3, r2, r0, r3
 8000bf6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000bfa:	fb00 f30c 	mul.w	r3, r0, ip
 8000bfe:	42ab      	cmp	r3, r5
 8000c00:	d907      	bls.n	8000c12 <__udivmoddi4+0x1e6>
 8000c02:	19ed      	adds	r5, r5, r7
 8000c04:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c08:	d26f      	bcs.n	8000cea <__udivmoddi4+0x2be>
 8000c0a:	42ab      	cmp	r3, r5
 8000c0c:	d96d      	bls.n	8000cea <__udivmoddi4+0x2be>
 8000c0e:	3802      	subs	r0, #2
 8000c10:	443d      	add	r5, r7
 8000c12:	1aeb      	subs	r3, r5, r3
 8000c14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c18:	e78f      	b.n	8000b3a <__udivmoddi4+0x10e>
 8000c1a:	f1c1 0720 	rsb	r7, r1, #32
 8000c1e:	fa22 f807 	lsr.w	r8, r2, r7
 8000c22:	408b      	lsls	r3, r1
 8000c24:	fa05 f401 	lsl.w	r4, r5, r1
 8000c28:	ea48 0303 	orr.w	r3, r8, r3
 8000c2c:	fa20 fe07 	lsr.w	lr, r0, r7
 8000c30:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000c34:	40fd      	lsrs	r5, r7
 8000c36:	ea4e 0e04 	orr.w	lr, lr, r4
 8000c3a:	fbb5 f9fc 	udiv	r9, r5, ip
 8000c3e:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000c42:	fb0c 5519 	mls	r5, ip, r9, r5
 8000c46:	fa1f f883 	uxth.w	r8, r3
 8000c4a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000c4e:	fb09 f408 	mul.w	r4, r9, r8
 8000c52:	42ac      	cmp	r4, r5
 8000c54:	fa02 f201 	lsl.w	r2, r2, r1
 8000c58:	fa00 fa01 	lsl.w	sl, r0, r1
 8000c5c:	d908      	bls.n	8000c70 <__udivmoddi4+0x244>
 8000c5e:	18ed      	adds	r5, r5, r3
 8000c60:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c64:	d243      	bcs.n	8000cee <__udivmoddi4+0x2c2>
 8000c66:	42ac      	cmp	r4, r5
 8000c68:	d941      	bls.n	8000cee <__udivmoddi4+0x2c2>
 8000c6a:	f1a9 0902 	sub.w	r9, r9, #2
 8000c6e:	441d      	add	r5, r3
 8000c70:	1b2d      	subs	r5, r5, r4
 8000c72:	fa1f fe8e 	uxth.w	lr, lr
 8000c76:	fbb5 f0fc 	udiv	r0, r5, ip
 8000c7a:	fb0c 5510 	mls	r5, ip, r0, r5
 8000c7e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000c82:	fb00 f808 	mul.w	r8, r0, r8
 8000c86:	45a0      	cmp	r8, r4
 8000c88:	d907      	bls.n	8000c9a <__udivmoddi4+0x26e>
 8000c8a:	18e4      	adds	r4, r4, r3
 8000c8c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000c90:	d229      	bcs.n	8000ce6 <__udivmoddi4+0x2ba>
 8000c92:	45a0      	cmp	r8, r4
 8000c94:	d927      	bls.n	8000ce6 <__udivmoddi4+0x2ba>
 8000c96:	3802      	subs	r0, #2
 8000c98:	441c      	add	r4, r3
 8000c9a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c9e:	eba4 0408 	sub.w	r4, r4, r8
 8000ca2:	fba0 8902 	umull	r8, r9, r0, r2
 8000ca6:	454c      	cmp	r4, r9
 8000ca8:	46c6      	mov	lr, r8
 8000caa:	464d      	mov	r5, r9
 8000cac:	d315      	bcc.n	8000cda <__udivmoddi4+0x2ae>
 8000cae:	d012      	beq.n	8000cd6 <__udivmoddi4+0x2aa>
 8000cb0:	b156      	cbz	r6, 8000cc8 <__udivmoddi4+0x29c>
 8000cb2:	ebba 030e 	subs.w	r3, sl, lr
 8000cb6:	eb64 0405 	sbc.w	r4, r4, r5
 8000cba:	fa04 f707 	lsl.w	r7, r4, r7
 8000cbe:	40cb      	lsrs	r3, r1
 8000cc0:	431f      	orrs	r7, r3
 8000cc2:	40cc      	lsrs	r4, r1
 8000cc4:	6037      	str	r7, [r6, #0]
 8000cc6:	6074      	str	r4, [r6, #4]
 8000cc8:	2100      	movs	r1, #0
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	e6f8      	b.n	8000ac4 <__udivmoddi4+0x98>
 8000cd2:	4690      	mov	r8, r2
 8000cd4:	e6e0      	b.n	8000a98 <__udivmoddi4+0x6c>
 8000cd6:	45c2      	cmp	sl, r8
 8000cd8:	d2ea      	bcs.n	8000cb0 <__udivmoddi4+0x284>
 8000cda:	ebb8 0e02 	subs.w	lr, r8, r2
 8000cde:	eb69 0503 	sbc.w	r5, r9, r3
 8000ce2:	3801      	subs	r0, #1
 8000ce4:	e7e4      	b.n	8000cb0 <__udivmoddi4+0x284>
 8000ce6:	4628      	mov	r0, r5
 8000ce8:	e7d7      	b.n	8000c9a <__udivmoddi4+0x26e>
 8000cea:	4640      	mov	r0, r8
 8000cec:	e791      	b.n	8000c12 <__udivmoddi4+0x1e6>
 8000cee:	4681      	mov	r9, r0
 8000cf0:	e7be      	b.n	8000c70 <__udivmoddi4+0x244>
 8000cf2:	4601      	mov	r1, r0
 8000cf4:	e778      	b.n	8000be8 <__udivmoddi4+0x1bc>
 8000cf6:	3802      	subs	r0, #2
 8000cf8:	443c      	add	r4, r7
 8000cfa:	e745      	b.n	8000b88 <__udivmoddi4+0x15c>
 8000cfc:	4608      	mov	r0, r1
 8000cfe:	e708      	b.n	8000b12 <__udivmoddi4+0xe6>
 8000d00:	f1a8 0802 	sub.w	r8, r8, #2
 8000d04:	443d      	add	r5, r7
 8000d06:	e72b      	b.n	8000b60 <__udivmoddi4+0x134>

08000d08 <__aeabi_idiv0>:
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop

08000d0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d0c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d0e:	4a0e      	ldr	r2, [pc, #56]	; (8000d48 <HAL_InitTick+0x3c>)
 8000d10:	4b0e      	ldr	r3, [pc, #56]	; (8000d4c <HAL_InitTick+0x40>)
{
 8000d12:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d14:	7818      	ldrb	r0, [r3, #0]
 8000d16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d1a:	fbb3 f3f0 	udiv	r3, r3, r0
 8000d1e:	6810      	ldr	r0, [r2, #0]
 8000d20:	fbb0 f0f3 	udiv	r0, r0, r3
 8000d24:	f000 fa7c 	bl	8001220 <HAL_SYSTICK_Config>
 8000d28:	4604      	mov	r4, r0
 8000d2a:	b958      	cbnz	r0, 8000d44 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d2c:	2d0f      	cmp	r5, #15
 8000d2e:	d809      	bhi.n	8000d44 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d30:	4602      	mov	r2, r0
 8000d32:	4629      	mov	r1, r5
 8000d34:	f04f 30ff 	mov.w	r0, #4294967295
 8000d38:	f000 fa32 	bl	80011a0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d3c:	4b04      	ldr	r3, [pc, #16]	; (8000d50 <HAL_InitTick+0x44>)
 8000d3e:	4620      	mov	r0, r4
 8000d40:	601d      	str	r5, [r3, #0]
 8000d42:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000d44:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000d46:	bd38      	pop	{r3, r4, r5, pc}
 8000d48:	2000001c 	.word	0x2000001c
 8000d4c:	20000000 	.word	0x20000000
 8000d50:	20000004 	.word	0x20000004

08000d54 <HAL_Init>:
{
 8000d54:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d56:	4b0b      	ldr	r3, [pc, #44]	; (8000d84 <HAL_Init+0x30>)
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000d5e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000d66:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000d6e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d70:	2003      	movs	r0, #3
 8000d72:	f000 fa03 	bl	800117c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d76:	2000      	movs	r0, #0
 8000d78:	f7ff ffc8 	bl	8000d0c <HAL_InitTick>
  HAL_MspInit();
 8000d7c:	f004 f902 	bl	8004f84 <HAL_MspInit>
}
 8000d80:	2000      	movs	r0, #0
 8000d82:	bd08      	pop	{r3, pc}
 8000d84:	40023c00 	.word	0x40023c00

08000d88 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000d88:	4a03      	ldr	r2, [pc, #12]	; (8000d98 <HAL_IncTick+0x10>)
 8000d8a:	4b04      	ldr	r3, [pc, #16]	; (8000d9c <HAL_IncTick+0x14>)
 8000d8c:	6811      	ldr	r1, [r2, #0]
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	440b      	add	r3, r1
 8000d92:	6013      	str	r3, [r2, #0]
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	2000006c 	.word	0x2000006c
 8000d9c:	20000000 	.word	0x20000000

08000da0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000da0:	4b01      	ldr	r3, [pc, #4]	; (8000da8 <HAL_GetTick+0x8>)
 8000da2:	6818      	ldr	r0, [r3, #0]
}
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	2000006c 	.word	0x2000006c

08000dac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dac:	b538      	push	{r3, r4, r5, lr}
 8000dae:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000db0:	f7ff fff6 	bl	8000da0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000db4:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000db6:	bf1c      	itt	ne
 8000db8:	4b05      	ldrne	r3, [pc, #20]	; (8000dd0 <HAL_Delay+0x24>)
 8000dba:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000dbc:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000dbe:	bf18      	it	ne
 8000dc0:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dc2:	f7ff ffed 	bl	8000da0 <HAL_GetTick>
 8000dc6:	1b40      	subs	r0, r0, r5
 8000dc8:	4284      	cmp	r4, r0
 8000dca:	d8fa      	bhi.n	8000dc2 <HAL_Delay+0x16>
  {
  }
}
 8000dcc:	bd38      	pop	{r3, r4, r5, pc}
 8000dce:	bf00      	nop
 8000dd0:	20000000 	.word	0x20000000

08000dd4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000dd4:	b510      	push	{r4, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000dd6:	4604      	mov	r4, r0
 8000dd8:	2800      	cmp	r0, #0
 8000dda:	f000 8099 	beq.w	8000f10 <HAL_ADC_Init+0x13c>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000dde:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000de0:	b923      	cbnz	r3, 8000dec <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000de2:	6443      	str	r3, [r0, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000de4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000de8:	f003 fd7c 	bl	80048e4 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000dec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000dee:	06db      	lsls	r3, r3, #27
 8000df0:	f100 808c 	bmi.w	8000f0c <HAL_ADC_Init+0x138>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000df4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000df6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000dfa:	f023 0302 	bic.w	r3, r3, #2
 8000dfe:	f043 0302 	orr.w	r3, r3, #2
 8000e02:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000e04:	4b43      	ldr	r3, [pc, #268]	; (8000f14 <HAL_ADC_Init+0x140>)
 8000e06:	685a      	ldr	r2, [r3, #4]
 8000e08:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000e0c:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000e0e:	685a      	ldr	r2, [r3, #4]
 8000e10:	6861      	ldr	r1, [r4, #4]
 8000e12:	430a      	orrs	r2, r1
 8000e14:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000e16:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000e18:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000e1a:	685a      	ldr	r2, [r3, #4]
 8000e1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000e20:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000e22:	685a      	ldr	r2, [r3, #4]
 8000e24:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000e28:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000e2a:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000e2c:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000e2e:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000e32:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000e34:	685a      	ldr	r2, [r3, #4]
 8000e36:	430a      	orrs	r2, r1
 8000e38:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000e3a:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000e3c:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000e3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000e42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000e44:	689a      	ldr	r2, [r3, #8]
 8000e46:	430a      	orrs	r2, r1
 8000e48:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e4a:	4933      	ldr	r1, [pc, #204]	; (8000f18 <HAL_ADC_Init+0x144>)
 8000e4c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000e4e:	428a      	cmp	r2, r1
 8000e50:	d050      	beq.n	8000ef4 <HAL_ADC_Init+0x120>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000e52:	6899      	ldr	r1, [r3, #8]
 8000e54:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8000e58:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000e5a:	6899      	ldr	r1, [r3, #8]
 8000e5c:	430a      	orrs	r2, r1
 8000e5e:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000e60:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000e62:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000e64:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000e68:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000e6a:	689a      	ldr	r2, [r3, #8]
 8000e6c:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000e6e:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000e70:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000e72:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000e74:	f022 0202 	bic.w	r2, r2, #2
 8000e78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000e7a:	689a      	ldr	r2, [r3, #8]
 8000e7c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8000e80:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000e82:	6a22      	ldr	r2, [r4, #32]
 8000e84:	2a00      	cmp	r2, #0
 8000e86:	d03d      	beq.n	8000f04 <HAL_ADC_Init+0x130>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000e88:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000e8a:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000e8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000e90:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000e92:	685a      	ldr	r2, [r3, #4]
 8000e94:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000e98:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000e9a:	685a      	ldr	r2, [r3, #4]
 8000e9c:	3901      	subs	r1, #1
 8000e9e:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000ea2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000ea6:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000ea8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000eac:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000eb0:	3901      	subs	r1, #1
 8000eb2:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8000eb6:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000eb8:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000eba:	6b21      	ldr	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000ebc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000ec0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000ec2:	689a      	ldr	r2, [r3, #8]
 8000ec4:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8000ec8:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000eca:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000ecc:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000ece:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000ed2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000ed4:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8000ed6:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000ed8:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8000edc:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8000ede:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8000ee0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000ee2:	f023 0303 	bic.w	r3, r3, #3
 8000ee6:	f043 0301 	orr.w	r3, r3, #1
 8000eea:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8000eec:	2300      	movs	r3, #0
 8000eee:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 8000ef2:	bd10      	pop	{r4, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000ef4:	689a      	ldr	r2, [r3, #8]
 8000ef6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000efa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000efc:	689a      	ldr	r2, [r3, #8]
 8000efe:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000f02:	e7b4      	b.n	8000e6e <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000f04:	685a      	ldr	r2, [r3, #4]
 8000f06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f0a:	e7ca      	b.n	8000ea2 <HAL_ADC_Init+0xce>
    tmp_hal_status = HAL_ERROR;
 8000f0c:	2001      	movs	r0, #1
 8000f0e:	e7ed      	b.n	8000eec <HAL_ADC_Init+0x118>
    return HAL_ERROR;
 8000f10:	2001      	movs	r0, #1
}
 8000f12:	bd10      	pop	{r4, pc}
 8000f14:	40012300 	.word	0x40012300
 8000f18:	0f000001 	.word	0x0f000001

08000f1c <HAL_ADC_ConvCpltCallback>:
 8000f1c:	4770      	bx	lr

08000f1e <HAL_ADC_LevelOutOfWindowCallback>:
 8000f1e:	4770      	bx	lr

08000f20 <HAL_ADC_ErrorCallback>:
{
 8000f20:	4770      	bx	lr

08000f22 <HAL_ADC_IRQHandler>:
{
 8000f22:	b538      	push	{r3, r4, r5, lr}
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8000f24:	6803      	ldr	r3, [r0, #0]
 8000f26:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8000f28:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 8000f2a:	078d      	lsls	r5, r1, #30
{
 8000f2c:	4604      	mov	r4, r0
  if(tmp1 && tmp2)
 8000f2e:	d52b      	bpl.n	8000f88 <HAL_ADC_IRQHandler+0x66>
 8000f30:	0690      	lsls	r0, r2, #26
 8000f32:	d529      	bpl.n	8000f88 <HAL_ADC_IRQHandler+0x66>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f34:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000f36:	06d1      	lsls	r1, r2, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000f38:	bf5e      	ittt	pl
 8000f3a:	6c22      	ldrpl	r2, [r4, #64]	; 0x40
 8000f3c:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 8000f40:	6422      	strpl	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000f42:	689a      	ldr	r2, [r3, #8]
 8000f44:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8000f48:	d117      	bne.n	8000f7a <HAL_ADC_IRQHandler+0x58>
 8000f4a:	69a2      	ldr	r2, [r4, #24]
 8000f4c:	b9aa      	cbnz	r2, 8000f7a <HAL_ADC_IRQHandler+0x58>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000f50:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8000f54:	d002      	beq.n	8000f5c <HAL_ADC_IRQHandler+0x3a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000f56:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000f58:	0552      	lsls	r2, r2, #21
 8000f5a:	d40e      	bmi.n	8000f7a <HAL_ADC_IRQHandler+0x58>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000f5c:	685a      	ldr	r2, [r3, #4]
 8000f5e:	f022 0220 	bic.w	r2, r2, #32
 8000f62:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000f64:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000f66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f6a:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f6c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000f6e:	04db      	lsls	r3, r3, #19
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f70:	bf5e      	ittt	pl
 8000f72:	6c23      	ldrpl	r3, [r4, #64]	; 0x40
 8000f74:	f043 0301 	orrpl.w	r3, r3, #1
 8000f78:	6423      	strpl	r3, [r4, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8000f7a:	4620      	mov	r0, r4
 8000f7c:	f7ff ffce 	bl	8000f1c <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000f80:	6823      	ldr	r3, [r4, #0]
 8000f82:	f06f 0212 	mvn.w	r2, #18
 8000f86:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8000f88:	6823      	ldr	r3, [r4, #0]
 8000f8a:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8000f8c:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 8000f8e:	074d      	lsls	r5, r1, #29
 8000f90:	d532      	bpl.n	8000ff8 <HAL_ADC_IRQHandler+0xd6>
 8000f92:	0610      	lsls	r0, r2, #24
 8000f94:	d530      	bpl.n	8000ff8 <HAL_ADC_IRQHandler+0xd6>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f96:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000f98:	06d1      	lsls	r1, r2, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000f9a:	bf5e      	ittt	pl
 8000f9c:	6c22      	ldrpl	r2, [r4, #64]	; 0x40
 8000f9e:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 8000fa2:	6422      	strpl	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000fa4:	689a      	ldr	r2, [r3, #8]
 8000fa6:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8000faa:	d11e      	bne.n	8000fea <HAL_ADC_IRQHandler+0xc8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000fac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000fae:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8000fb2:	d002      	beq.n	8000fba <HAL_ADC_IRQHandler+0x98>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8000fb4:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000fb6:	0552      	lsls	r2, r2, #21
 8000fb8:	d417      	bmi.n	8000fea <HAL_ADC_IRQHandler+0xc8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000fba:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8000fbc:	0555      	lsls	r5, r2, #21
 8000fbe:	d414      	bmi.n	8000fea <HAL_ADC_IRQHandler+0xc8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000fc0:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000fc2:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8000fc6:	d110      	bne.n	8000fea <HAL_ADC_IRQHandler+0xc8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000fc8:	69a2      	ldr	r2, [r4, #24]
 8000fca:	b972      	cbnz	r2, 8000fea <HAL_ADC_IRQHandler+0xc8>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000fcc:	685a      	ldr	r2, [r3, #4]
 8000fce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000fd2:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000fd4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000fd6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000fda:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000fdc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000fde:	05d8      	lsls	r0, r3, #23
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000fe0:	bf5e      	ittt	pl
 8000fe2:	6c23      	ldrpl	r3, [r4, #64]	; 0x40
 8000fe4:	f043 0301 	orrpl.w	r3, r3, #1
 8000fe8:	6423      	strpl	r3, [r4, #64]	; 0x40
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000fea:	4620      	mov	r0, r4
 8000fec:	f000 f8c4 	bl	8001178 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000ff0:	6823      	ldr	r3, [r4, #0]
 8000ff2:	f06f 020c 	mvn.w	r2, #12
 8000ff6:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8000ff8:	6823      	ldr	r3, [r4, #0]
 8000ffa:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8000ffc:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 8000ffe:	07c9      	lsls	r1, r1, #31
 8001000:	d50f      	bpl.n	8001022 <HAL_ADC_IRQHandler+0x100>
 8001002:	0655      	lsls	r5, r2, #25
 8001004:	d50d      	bpl.n	8001022 <HAL_ADC_IRQHandler+0x100>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	07d8      	lsls	r0, r3, #31
 800100a:	d50a      	bpl.n	8001022 <HAL_ADC_IRQHandler+0x100>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800100c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800100e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001012:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001014:	4620      	mov	r0, r4
 8001016:	f7ff ff82 	bl	8000f1e <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800101a:	6823      	ldr	r3, [r4, #0]
 800101c:	f06f 0201 	mvn.w	r2, #1
 8001020:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001022:	6823      	ldr	r3, [r4, #0]
 8001024:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8001026:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 8001028:	0689      	lsls	r1, r1, #26
 800102a:	d50d      	bpl.n	8001048 <HAL_ADC_IRQHandler+0x126>
 800102c:	0152      	lsls	r2, r2, #5
 800102e:	d50b      	bpl.n	8001048 <HAL_ADC_IRQHandler+0x126>
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001030:	6c62      	ldr	r2, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001032:	f06f 0520 	mvn.w	r5, #32
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001036:	f042 0202 	orr.w	r2, r2, #2
 800103a:	6462      	str	r2, [r4, #68]	; 0x44
    HAL_ADC_ErrorCallback(hadc);
 800103c:	4620      	mov	r0, r4
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800103e:	601d      	str	r5, [r3, #0]
    HAL_ADC_ErrorCallback(hadc);
 8001040:	f7ff ff6e 	bl	8000f20 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001044:	6823      	ldr	r3, [r4, #0]
 8001046:	601d      	str	r5, [r3, #0]
 8001048:	bd38      	pop	{r3, r4, r5, pc}
	...

0800104c <HAL_ADC_ConfigChannel>:
{
 800104c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 800104e:	2300      	movs	r3, #0
 8001050:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001052:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001056:	2b01      	cmp	r3, #1
 8001058:	f000 8083 	beq.w	8001162 <HAL_ADC_ConfigChannel+0x116>
  if (sConfig->Channel > ADC_CHANNEL_9)
 800105c:	680d      	ldr	r5, [r1, #0]
 800105e:	6804      	ldr	r4, [r0, #0]
 8001060:	688a      	ldr	r2, [r1, #8]
  __HAL_LOCK(hadc);
 8001062:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001064:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 8001066:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 800106a:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 800106c:	d92a      	bls.n	80010c4 <HAL_ADC_ConfigChannel+0x78>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800106e:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8001072:	68e7      	ldr	r7, [r4, #12]
 8001074:	3b1e      	subs	r3, #30
 8001076:	f04f 0e07 	mov.w	lr, #7
 800107a:	fa0e fe03 	lsl.w	lr, lr, r3
 800107e:	ea27 070e 	bic.w	r7, r7, lr
 8001082:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001084:	68e7      	ldr	r7, [r4, #12]
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	433b      	orrs	r3, r7
 800108c:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 800108e:	684a      	ldr	r2, [r1, #4]
 8001090:	2a06      	cmp	r2, #6
 8001092:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8001096:	d825      	bhi.n	80010e4 <HAL_ADC_ConfigChannel+0x98>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001098:	4413      	add	r3, r2
 800109a:	6b67      	ldr	r7, [r4, #52]	; 0x34
 800109c:	1f59      	subs	r1, r3, #5
 800109e:	231f      	movs	r3, #31
 80010a0:	408b      	lsls	r3, r1
 80010a2:	ea27 0303 	bic.w	r3, r7, r3
 80010a6:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80010a8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80010aa:	fa06 f101 	lsl.w	r1, r6, r1
 80010ae:	4311      	orrs	r1, r2
 80010b0:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80010b2:	4b2d      	ldr	r3, [pc, #180]	; (8001168 <HAL_ADC_ConfigChannel+0x11c>)
 80010b4:	429c      	cmp	r4, r3
 80010b6:	d034      	beq.n	8001122 <HAL_ADC_ConfigChannel+0xd6>
  __HAL_UNLOCK(hadc);
 80010b8:	2300      	movs	r3, #0
 80010ba:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80010be:	4618      	mov	r0, r3
}
 80010c0:	b003      	add	sp, #12
 80010c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80010c4:	6927      	ldr	r7, [r4, #16]
 80010c6:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80010ca:	f04f 0e07 	mov.w	lr, #7
 80010ce:	fa0e fe03 	lsl.w	lr, lr, r3
 80010d2:	ea27 070e 	bic.w	r7, r7, lr
 80010d6:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80010d8:	6927      	ldr	r7, [r4, #16]
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	433b      	orrs	r3, r7
 80010e0:	6123      	str	r3, [r4, #16]
 80010e2:	e7d4      	b.n	800108e <HAL_ADC_ConfigChannel+0x42>
  else if (sConfig->Rank < 13U)
 80010e4:	2a0c      	cmp	r2, #12
 80010e6:	d80e      	bhi.n	8001106 <HAL_ADC_ConfigChannel+0xba>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80010e8:	4413      	add	r3, r2
 80010ea:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80010ec:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 80010f0:	231f      	movs	r3, #31
 80010f2:	4093      	lsls	r3, r2
 80010f4:	ea21 0303 	bic.w	r3, r1, r3
 80010f8:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80010fa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80010fc:	fa06 f202 	lsl.w	r2, r6, r2
 8001100:	431a      	orrs	r2, r3
 8001102:	6322      	str	r2, [r4, #48]	; 0x30
 8001104:	e7d5      	b.n	80010b2 <HAL_ADC_ConfigChannel+0x66>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001106:	4413      	add	r3, r2
 8001108:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800110a:	3b41      	subs	r3, #65	; 0x41
 800110c:	221f      	movs	r2, #31
 800110e:	409a      	lsls	r2, r3
 8001110:	ea21 0202 	bic.w	r2, r1, r2
 8001114:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001116:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001118:	fa06 f103 	lsl.w	r1, r6, r3
 800111c:	4311      	orrs	r1, r2
 800111e:	62e1      	str	r1, [r4, #44]	; 0x2c
 8001120:	e7c7      	b.n	80010b2 <HAL_ADC_ConfigChannel+0x66>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001122:	2d12      	cmp	r5, #18
 8001124:	d104      	bne.n	8001130 <HAL_ADC_ConfigChannel+0xe4>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001126:	4a11      	ldr	r2, [pc, #68]	; (800116c <HAL_ADC_ConfigChannel+0x120>)
 8001128:	6853      	ldr	r3, [r2, #4]
 800112a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800112e:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001130:	f1a5 0310 	sub.w	r3, r5, #16
 8001134:	2b01      	cmp	r3, #1
 8001136:	d8bf      	bhi.n	80010b8 <HAL_ADC_ConfigChannel+0x6c>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001138:	4a0c      	ldr	r2, [pc, #48]	; (800116c <HAL_ADC_ConfigChannel+0x120>)
 800113a:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800113c:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800113e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001142:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001144:	d1b8      	bne.n	80010b8 <HAL_ADC_ConfigChannel+0x6c>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001146:	4b0a      	ldr	r3, [pc, #40]	; (8001170 <HAL_ADC_ConfigChannel+0x124>)
 8001148:	4a0a      	ldr	r2, [pc, #40]	; (8001174 <HAL_ADC_ConfigChannel+0x128>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	fbb3 f2f2 	udiv	r2, r3, r2
 8001150:	230a      	movs	r3, #10
 8001152:	4353      	muls	r3, r2
        counter--;
 8001154:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8001156:	9b01      	ldr	r3, [sp, #4]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d0ad      	beq.n	80010b8 <HAL_ADC_ConfigChannel+0x6c>
        counter--;
 800115c:	9b01      	ldr	r3, [sp, #4]
 800115e:	3b01      	subs	r3, #1
 8001160:	e7f8      	b.n	8001154 <HAL_ADC_ConfigChannel+0x108>
  __HAL_LOCK(hadc);
 8001162:	2002      	movs	r0, #2
 8001164:	e7ac      	b.n	80010c0 <HAL_ADC_ConfigChannel+0x74>
 8001166:	bf00      	nop
 8001168:	40012000 	.word	0x40012000
 800116c:	40012300 	.word	0x40012300
 8001170:	2000001c 	.word	0x2000001c
 8001174:	000f4240 	.word	0x000f4240

08001178 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001178:	4770      	bx	lr
	...

0800117c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800117c:	4a07      	ldr	r2, [pc, #28]	; (800119c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800117e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001180:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001184:	041b      	lsls	r3, r3, #16
 8001186:	0c1b      	lsrs	r3, r3, #16
 8001188:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800118c:	0200      	lsls	r0, r0, #8
 800118e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001192:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8001196:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001198:	60d3      	str	r3, [r2, #12]
 800119a:	4770      	bx	lr
 800119c:	e000ed00 	.word	0xe000ed00

080011a0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011a0:	4b17      	ldr	r3, [pc, #92]	; (8001200 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011a2:	b530      	push	{r4, r5, lr}
 80011a4:	68dc      	ldr	r4, [r3, #12]
 80011a6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011aa:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ae:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011b0:	2b04      	cmp	r3, #4
 80011b2:	bf28      	it	cs
 80011b4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011b6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b8:	f04f 0501 	mov.w	r5, #1
 80011bc:	fa05 f303 	lsl.w	r3, r5, r3
 80011c0:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011c4:	bf8c      	ite	hi
 80011c6:	3c03      	subhi	r4, #3
 80011c8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011ca:	4019      	ands	r1, r3
 80011cc:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011ce:	fa05 f404 	lsl.w	r4, r5, r4
 80011d2:	3c01      	subs	r4, #1
 80011d4:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80011d6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d8:	ea42 0201 	orr.w	r2, r2, r1
 80011dc:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e0:	bfaf      	iteee	ge
 80011e2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e6:	f000 000f 	andlt.w	r0, r0, #15
 80011ea:	4b06      	ldrlt	r3, [pc, #24]	; (8001204 <HAL_NVIC_SetPriority+0x64>)
 80011ec:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ee:	bfa5      	ittet	ge
 80011f0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80011f4:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f6:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f8:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80011fc:	bd30      	pop	{r4, r5, pc}
 80011fe:	bf00      	nop
 8001200:	e000ed00 	.word	0xe000ed00
 8001204:	e000ed14 	.word	0xe000ed14

08001208 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001208:	0942      	lsrs	r2, r0, #5
 800120a:	2301      	movs	r3, #1
 800120c:	f000 001f 	and.w	r0, r0, #31
 8001210:	fa03 f000 	lsl.w	r0, r3, r0
 8001214:	4b01      	ldr	r3, [pc, #4]	; (800121c <HAL_NVIC_EnableIRQ+0x14>)
 8001216:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800121a:	4770      	bx	lr
 800121c:	e000e100 	.word	0xe000e100

08001220 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001220:	3801      	subs	r0, #1
 8001222:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001226:	d20a      	bcs.n	800123e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001228:	4b06      	ldr	r3, [pc, #24]	; (8001244 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800122a:	4a07      	ldr	r2, [pc, #28]	; (8001248 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800122c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800122e:	21f0      	movs	r1, #240	; 0xf0
 8001230:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001234:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001236:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001238:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800123e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	e000e010 	.word	0xe000e010
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800124c:	4b04      	ldr	r3, [pc, #16]	; (8001260 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800124e:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001250:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001252:	bf0c      	ite	eq
 8001254:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001258:	f022 0204 	bicne.w	r2, r2, #4
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	4770      	bx	lr
 8001260:	e000e010 	.word	0xe000e010

08001264 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001264:	4770      	bx	lr

08001266 <HAL_SYSTICK_IRQHandler>:
{
 8001266:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8001268:	f7ff fffc 	bl	8001264 <HAL_SYSTICK_Callback>
 800126c:	bd08      	pop	{r3, pc}
	...

08001270 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001270:	6803      	ldr	r3, [r0, #0]
 8001272:	b2da      	uxtb	r2, r3
 8001274:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001278:	f023 0303 	bic.w	r3, r3, #3
 800127c:	2118      	movs	r1, #24
 800127e:	3a10      	subs	r2, #16
 8001280:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001284:	4904      	ldr	r1, [pc, #16]	; (8001298 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8001286:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001288:	bf88      	it	hi
 800128a:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800128c:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800128e:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001290:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 8001292:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	08005698 	.word	0x08005698

0800129c <HAL_DMA_Init>:
{
 800129c:	b570      	push	{r4, r5, r6, lr}
 800129e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80012a0:	f7ff fd7e 	bl	8000da0 <HAL_GetTick>
 80012a4:	4605      	mov	r5, r0
  if(hdma == NULL)
 80012a6:	2c00      	cmp	r4, #0
 80012a8:	d071      	beq.n	800138e <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 80012aa:	2300      	movs	r3, #0
 80012ac:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 80012b0:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 80012b2:	2302      	movs	r3, #2
 80012b4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80012b8:	6813      	ldr	r3, [r2, #0]
 80012ba:	f023 0301 	bic.w	r3, r3, #1
 80012be:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012c0:	6821      	ldr	r1, [r4, #0]
 80012c2:	680b      	ldr	r3, [r1, #0]
 80012c4:	07d8      	lsls	r0, r3, #31
 80012c6:	d43c      	bmi.n	8001342 <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 80012c8:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80012ca:	4d32      	ldr	r5, [pc, #200]	; (8001394 <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012cc:	6862      	ldr	r2, [r4, #4]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012ce:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80012d0:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012d2:	68a3      	ldr	r3, [r4, #8]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	68e2      	ldr	r2, [r4, #12]
 80012d8:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012da:	6922      	ldr	r2, [r4, #16]
 80012dc:	4313      	orrs	r3, r2
 80012de:	6962      	ldr	r2, [r4, #20]
 80012e0:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012e2:	69e2      	ldr	r2, [r4, #28]
 80012e4:	4303      	orrs	r3, r0
 80012e6:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 80012e8:	6a22      	ldr	r2, [r4, #32]
 80012ea:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012ec:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80012ee:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012f0:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80012f4:	bf01      	itttt	eq
 80012f6:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 80012f8:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 80012fa:	4335      	orreq	r5, r6
 80012fc:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 80012fe:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8001300:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001302:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001304:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8001308:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800130c:	d10b      	bne.n	8001326 <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 800130e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001310:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8001312:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001314:	b13d      	cbz	r5, 8001326 <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001316:	b9f8      	cbnz	r0, 8001358 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 8001318:	2a01      	cmp	r2, #1
 800131a:	d02d      	beq.n	8001378 <HAL_DMA_Init+0xdc>
 800131c:	d301      	bcc.n	8001322 <HAL_DMA_Init+0x86>
 800131e:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001320:	d101      	bne.n	8001326 <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001322:	01ea      	lsls	r2, r5, #7
 8001324:	d42b      	bmi.n	800137e <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 8001326:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001328:	4620      	mov	r0, r4
 800132a:	f7ff ffa1 	bl	8001270 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800132e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001330:	233f      	movs	r3, #63	; 0x3f
 8001332:	4093      	lsls	r3, r2
 8001334:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001336:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001338:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800133a:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800133c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001340:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001342:	f7ff fd2d 	bl	8000da0 <HAL_GetTick>
 8001346:	1b40      	subs	r0, r0, r5
 8001348:	2805      	cmp	r0, #5
 800134a:	d9b9      	bls.n	80012c0 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800134c:	2320      	movs	r3, #32
 800134e:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001350:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 8001352:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8001356:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001358:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800135c:	d113      	bne.n	8001386 <HAL_DMA_Init+0xea>
    switch (tmp)
 800135e:	2a03      	cmp	r2, #3
 8001360:	d8e1      	bhi.n	8001326 <HAL_DMA_Init+0x8a>
 8001362:	a001      	add	r0, pc, #4	; (adr r0, 8001368 <HAL_DMA_Init+0xcc>)
 8001364:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8001368:	0800137f 	.word	0x0800137f
 800136c:	08001323 	.word	0x08001323
 8001370:	0800137f 	.word	0x0800137f
 8001374:	08001379 	.word	0x08001379
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001378:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 800137c:	d1d3      	bne.n	8001326 <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800137e:	2340      	movs	r3, #64	; 0x40
 8001380:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001382:	2001      	movs	r0, #1
 8001384:	e7e5      	b.n	8001352 <HAL_DMA_Init+0xb6>
    switch (tmp)
 8001386:	2a02      	cmp	r2, #2
 8001388:	d9f9      	bls.n	800137e <HAL_DMA_Init+0xe2>
 800138a:	2a03      	cmp	r2, #3
 800138c:	e7c8      	b.n	8001320 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 800138e:	2001      	movs	r0, #1
 8001390:	bd70      	pop	{r4, r5, r6, pc}
 8001392:	bf00      	nop
 8001394:	f010803f 	.word	0xf010803f

08001398 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001398:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800139c:	2b02      	cmp	r3, #2
 800139e:	d003      	beq.n	80013a8 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013a0:	2380      	movs	r3, #128	; 0x80
 80013a2:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80013a4:	2001      	movs	r0, #1
 80013a6:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 80013a8:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80013aa:	2305      	movs	r3, #5
 80013ac:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80013b0:	6813      	ldr	r3, [r2, #0]
 80013b2:	f023 0301 	bic.w	r3, r3, #1
 80013b6:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80013b8:	2000      	movs	r0, #0
}
 80013ba:	4770      	bx	lr

080013bc <HAL_DMA_IRQHandler>:
{
 80013bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 80013be:	2300      	movs	r3, #0
 80013c0:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 80013c2:	4b5a      	ldr	r3, [pc, #360]	; (800152c <HAL_DMA_IRQHandler+0x170>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013c4:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 80013c6:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80013c8:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 80013ca:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80013cc:	2208      	movs	r2, #8
 80013ce:	409a      	lsls	r2, r3
 80013d0:	4216      	tst	r6, r2
{
 80013d2:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80013d4:	d00c      	beq.n	80013f0 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80013d6:	6801      	ldr	r1, [r0, #0]
 80013d8:	6808      	ldr	r0, [r1, #0]
 80013da:	0740      	lsls	r0, r0, #29
 80013dc:	d508      	bpl.n	80013f0 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80013de:	6808      	ldr	r0, [r1, #0]
 80013e0:	f020 0004 	bic.w	r0, r0, #4
 80013e4:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80013e6:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80013e8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80013ea:	f042 0201 	orr.w	r2, r2, #1
 80013ee:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80013f0:	2201      	movs	r2, #1
 80013f2:	409a      	lsls	r2, r3
 80013f4:	4216      	tst	r6, r2
 80013f6:	d008      	beq.n	800140a <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80013f8:	6821      	ldr	r1, [r4, #0]
 80013fa:	6949      	ldr	r1, [r1, #20]
 80013fc:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80013fe:	bf41      	itttt	mi
 8001400:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001402:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8001404:	f042 0202 	orrmi.w	r2, r2, #2
 8001408:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800140a:	2204      	movs	r2, #4
 800140c:	409a      	lsls	r2, r3
 800140e:	4216      	tst	r6, r2
 8001410:	d008      	beq.n	8001424 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001412:	6821      	ldr	r1, [r4, #0]
 8001414:	6809      	ldr	r1, [r1, #0]
 8001416:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001418:	bf41      	itttt	mi
 800141a:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800141c:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 800141e:	f042 0204 	orrmi.w	r2, r2, #4
 8001422:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001424:	2210      	movs	r2, #16
 8001426:	409a      	lsls	r2, r3
 8001428:	4216      	tst	r6, r2
 800142a:	d010      	beq.n	800144e <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800142c:	6823      	ldr	r3, [r4, #0]
 800142e:	6819      	ldr	r1, [r3, #0]
 8001430:	0709      	lsls	r1, r1, #28
 8001432:	d50c      	bpl.n	800144e <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001434:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	0350      	lsls	r0, r2, #13
 800143a:	d535      	bpl.n	80014a8 <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	0319      	lsls	r1, r3, #12
 8001440:	d401      	bmi.n	8001446 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8001442:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001444:	e000      	b.n	8001448 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001446:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8001448:	b10b      	cbz	r3, 800144e <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 800144a:	4620      	mov	r0, r4
 800144c:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800144e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8001450:	2220      	movs	r2, #32
 8001452:	408a      	lsls	r2, r1
 8001454:	4216      	tst	r6, r2
 8001456:	d038      	beq.n	80014ca <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001458:	6823      	ldr	r3, [r4, #0]
 800145a:	6818      	ldr	r0, [r3, #0]
 800145c:	06c6      	lsls	r6, r0, #27
 800145e:	d534      	bpl.n	80014ca <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001460:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001462:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8001466:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001468:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800146a:	d125      	bne.n	80014b8 <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800146c:	f022 0216 	bic.w	r2, r2, #22
 8001470:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001472:	695a      	ldr	r2, [r3, #20]
 8001474:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001478:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800147a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800147c:	b90a      	cbnz	r2, 8001482 <HAL_DMA_IRQHandler+0xc6>
 800147e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001480:	b11a      	cbz	r2, 800148a <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	f022 0208 	bic.w	r2, r2, #8
 8001488:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800148a:	233f      	movs	r3, #63	; 0x3f
 800148c:	408b      	lsls	r3, r1
 800148e:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8001490:	2300      	movs	r3, #0
 8001492:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8001496:	2301      	movs	r3, #1
 8001498:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 800149c:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 800149e:	b10b      	cbz	r3, 80014a4 <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 80014a0:	4620      	mov	r0, r4
 80014a2:	4798      	blx	r3
}
 80014a4:	b003      	add	sp, #12
 80014a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014ac:	bf5e      	ittt	pl
 80014ae:	681a      	ldrpl	r2, [r3, #0]
 80014b0:	f022 0208 	bicpl.w	r2, r2, #8
 80014b4:	601a      	strpl	r2, [r3, #0]
 80014b6:	e7c4      	b.n	8001442 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80014b8:	0350      	lsls	r0, r2, #13
 80014ba:	d528      	bpl.n	800150e <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	0319      	lsls	r1, r3, #12
 80014c0:	d432      	bmi.n	8001528 <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 80014c2:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 80014c4:	b10b      	cbz	r3, 80014ca <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 80014c6:	4620      	mov	r0, r4
 80014c8:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80014ca:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d0e9      	beq.n	80014a4 <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80014d0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80014d2:	07da      	lsls	r2, r3, #31
 80014d4:	d519      	bpl.n	800150a <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 80014d6:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 80014d8:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 80014da:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80014de:	6813      	ldr	r3, [r2, #0]
 80014e0:	f023 0301 	bic.w	r3, r3, #1
 80014e4:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80014e6:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80014ea:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 80014ee:	9b01      	ldr	r3, [sp, #4]
 80014f0:	3301      	adds	r3, #1
 80014f2:	429f      	cmp	r7, r3
 80014f4:	9301      	str	r3, [sp, #4]
 80014f6:	d302      	bcc.n	80014fe <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80014f8:	6813      	ldr	r3, [r2, #0]
 80014fa:	07db      	lsls	r3, r3, #31
 80014fc:	d4f7      	bmi.n	80014ee <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 80014fe:	2300      	movs	r3, #0
 8001500:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8001504:	2301      	movs	r3, #1
 8001506:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 800150a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800150c:	e7c7      	b.n	800149e <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8001514:	d108      	bne.n	8001528 <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001516:	6819      	ldr	r1, [r3, #0]
 8001518:	f021 0110 	bic.w	r1, r1, #16
 800151c:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800151e:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8001520:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8001524:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8001528:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800152a:	e7cb      	b.n	80014c4 <HAL_DMA_IRQHandler+0x108>
 800152c:	2000001c 	.word	0x2000001c

08001530 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001534:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001536:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001538:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80016e8 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800153c:	4a68      	ldr	r2, [pc, #416]	; (80016e0 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800153e:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 80016ec <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001542:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001544:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8001546:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800154a:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 800154c:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001550:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8001554:	45b6      	cmp	lr, r6
 8001556:	f040 80ae 	bne.w	80016b6 <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800155a:	684c      	ldr	r4, [r1, #4]
 800155c:	f024 0710 	bic.w	r7, r4, #16
 8001560:	2f02      	cmp	r7, #2
 8001562:	d116      	bne.n	8001592 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8001564:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001568:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800156c:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001570:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001574:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001578:	f04f 0c0f 	mov.w	ip, #15
 800157c:	fa0c fc0b 	lsl.w	ip, ip, fp
 8001580:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001584:	690d      	ldr	r5, [r1, #16]
 8001586:	fa05 f50b 	lsl.w	r5, r5, fp
 800158a:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 800158e:	f8ca 5020 	str.w	r5, [sl, #32]
 8001592:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001596:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8001598:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800159c:	fa05 f50a 	lsl.w	r5, r5, sl
 80015a0:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015a2:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015a6:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015aa:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015ae:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015b0:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015b4:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80015b6:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015ba:	d811      	bhi.n	80015e0 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 80015bc:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015be:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015c2:	68cf      	ldr	r7, [r1, #12]
 80015c4:	fa07 fc0a 	lsl.w	ip, r7, sl
 80015c8:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80015cc:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80015ce:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015d0:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80015d4:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80015d8:	409f      	lsls	r7, r3
 80015da:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80015de:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80015e0:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015e2:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015e4:	688f      	ldr	r7, [r1, #8]
 80015e6:	fa07 f70a 	lsl.w	r7, r7, sl
 80015ea:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80015ec:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015ee:	00e5      	lsls	r5, r4, #3
 80015f0:	d561      	bpl.n	80016b6 <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015f2:	f04f 0b00 	mov.w	fp, #0
 80015f6:	f8cd b00c 	str.w	fp, [sp, #12]
 80015fa:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015fe:	4d39      	ldr	r5, [pc, #228]	; (80016e4 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001600:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8001604:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8001608:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 800160c:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8001610:	9703      	str	r7, [sp, #12]
 8001612:	9f03      	ldr	r7, [sp, #12]
 8001614:	f023 0703 	bic.w	r7, r3, #3
 8001618:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800161c:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001620:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001624:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001628:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800162c:	f04f 0e0f 	mov.w	lr, #15
 8001630:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001634:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001636:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800163a:	d043      	beq.n	80016c4 <HAL_GPIO_Init+0x194>
 800163c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001640:	42a8      	cmp	r0, r5
 8001642:	d041      	beq.n	80016c8 <HAL_GPIO_Init+0x198>
 8001644:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001648:	42a8      	cmp	r0, r5
 800164a:	d03f      	beq.n	80016cc <HAL_GPIO_Init+0x19c>
 800164c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001650:	42a8      	cmp	r0, r5
 8001652:	d03d      	beq.n	80016d0 <HAL_GPIO_Init+0x1a0>
 8001654:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001658:	42a8      	cmp	r0, r5
 800165a:	d03b      	beq.n	80016d4 <HAL_GPIO_Init+0x1a4>
 800165c:	4548      	cmp	r0, r9
 800165e:	d03b      	beq.n	80016d8 <HAL_GPIO_Init+0x1a8>
 8001660:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001664:	42a8      	cmp	r0, r5
 8001666:	d039      	beq.n	80016dc <HAL_GPIO_Init+0x1ac>
 8001668:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800166c:	42a8      	cmp	r0, r5
 800166e:	bf14      	ite	ne
 8001670:	2508      	movne	r5, #8
 8001672:	2507      	moveq	r5, #7
 8001674:	fa05 f50c 	lsl.w	r5, r5, ip
 8001678:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 800167c:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 800167e:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001680:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001682:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001686:	bf0c      	ite	eq
 8001688:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800168a:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 800168c:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 800168e:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001690:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001694:	bf0c      	ite	eq
 8001696:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001698:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 800169a:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800169c:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800169e:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80016a2:	bf0c      	ite	eq
 80016a4:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80016a6:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 80016a8:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 80016aa:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016ac:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80016ae:	bf54      	ite	pl
 80016b0:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80016b2:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80016b4:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016b6:	3301      	adds	r3, #1
 80016b8:	2b10      	cmp	r3, #16
 80016ba:	f47f af44 	bne.w	8001546 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80016be:	b005      	add	sp, #20
 80016c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016c4:	465d      	mov	r5, fp
 80016c6:	e7d5      	b.n	8001674 <HAL_GPIO_Init+0x144>
 80016c8:	2501      	movs	r5, #1
 80016ca:	e7d3      	b.n	8001674 <HAL_GPIO_Init+0x144>
 80016cc:	2502      	movs	r5, #2
 80016ce:	e7d1      	b.n	8001674 <HAL_GPIO_Init+0x144>
 80016d0:	2503      	movs	r5, #3
 80016d2:	e7cf      	b.n	8001674 <HAL_GPIO_Init+0x144>
 80016d4:	2504      	movs	r5, #4
 80016d6:	e7cd      	b.n	8001674 <HAL_GPIO_Init+0x144>
 80016d8:	2505      	movs	r5, #5
 80016da:	e7cb      	b.n	8001674 <HAL_GPIO_Init+0x144>
 80016dc:	2506      	movs	r5, #6
 80016de:	e7c9      	b.n	8001674 <HAL_GPIO_Init+0x144>
 80016e0:	40013c00 	.word	0x40013c00
 80016e4:	40020000 	.word	0x40020000
 80016e8:	40023800 	.word	0x40023800
 80016ec:	40021400 	.word	0x40021400

080016f0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016f0:	b10a      	cbz	r2, 80016f6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016f2:	6181      	str	r1, [r0, #24]
 80016f4:	4770      	bx	lr
 80016f6:	0409      	lsls	r1, r1, #16
 80016f8:	e7fb      	b.n	80016f2 <HAL_GPIO_WritePin+0x2>

080016fa <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80016fa:	6802      	ldr	r2, [r0, #0]
 80016fc:	6953      	ldr	r3, [r2, #20]
 80016fe:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8001702:	d00d      	beq.n	8001720 <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001704:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001708:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800170a:	2304      	movs	r3, #4
 800170c:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 800170e:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 8001710:	2300      	movs	r3, #0
 8001712:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001714:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 8001718:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_ERROR;
 800171c:	2001      	movs	r0, #1
 800171e:	4770      	bx	lr
  }
  return HAL_OK;
 8001720:	4618      	mov	r0, r3
}
 8001722:	4770      	bx	lr

08001724 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8001724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001728:	4604      	mov	r4, r0
 800172a:	4617      	mov	r7, r2
 800172c:	4699      	mov	r9, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800172e:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8001732:	b28e      	uxth	r6, r1
 8001734:	6825      	ldr	r5, [r4, #0]
 8001736:	f1b8 0f01 	cmp.w	r8, #1
 800173a:	bf0c      	ite	eq
 800173c:	696b      	ldreq	r3, [r5, #20]
 800173e:	69ab      	ldrne	r3, [r5, #24]
 8001740:	ea36 0303 	bics.w	r3, r6, r3
 8001744:	bf14      	ite	ne
 8001746:	2001      	movne	r0, #1
 8001748:	2000      	moveq	r0, #0
 800174a:	b908      	cbnz	r0, 8001750 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 800174c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001750:	696b      	ldr	r3, [r5, #20]
 8001752:	055a      	lsls	r2, r3, #21
 8001754:	d512      	bpl.n	800177c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001756:	682b      	ldr	r3, [r5, #0]
 8001758:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800175c:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800175e:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001762:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001764:	2304      	movs	r3, #4
 8001766:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8001768:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 800176a:	2300      	movs	r3, #0
 800176c:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 800176e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 8001772:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8001776:	2001      	movs	r0, #1
 8001778:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 800177c:	1c7b      	adds	r3, r7, #1
 800177e:	d0d9      	beq.n	8001734 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001780:	b94f      	cbnz	r7, 8001796 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState = I2C_STATE_NONE;
 8001782:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8001784:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001786:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001788:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 800178c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 8001790:	2003      	movs	r0, #3
 8001792:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001796:	f7ff fb03 	bl	8000da0 <HAL_GetTick>
 800179a:	eba0 0009 	sub.w	r0, r0, r9
 800179e:	4287      	cmp	r7, r0
 80017a0:	d2c8      	bcs.n	8001734 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 80017a2:	e7ee      	b.n	8001782 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

080017a4 <I2C_WaitOnFlagUntilTimeout>:
{
 80017a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80017a8:	9e08      	ldr	r6, [sp, #32]
 80017aa:	4604      	mov	r4, r0
 80017ac:	4690      	mov	r8, r2
 80017ae:	461f      	mov	r7, r3
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80017b0:	f3c1 4907 	ubfx	r9, r1, #16, #8
 80017b4:	b28d      	uxth	r5, r1
 80017b6:	6823      	ldr	r3, [r4, #0]
 80017b8:	f1b9 0f01 	cmp.w	r9, #1
 80017bc:	bf0c      	ite	eq
 80017be:	695b      	ldreq	r3, [r3, #20]
 80017c0:	699b      	ldrne	r3, [r3, #24]
 80017c2:	ea35 0303 	bics.w	r3, r5, r3
 80017c6:	bf0c      	ite	eq
 80017c8:	2301      	moveq	r3, #1
 80017ca:	2300      	movne	r3, #0
 80017cc:	4543      	cmp	r3, r8
 80017ce:	d002      	beq.n	80017d6 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 80017d0:	2000      	movs	r0, #0
}
 80017d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 80017d6:	1c7b      	adds	r3, r7, #1
 80017d8:	d0ed      	beq.n	80017b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80017da:	b95f      	cbnz	r7, 80017f4 <I2C_WaitOnFlagUntilTimeout+0x50>
        hi2c->PreviousState = I2C_STATE_NONE;
 80017dc:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 80017de:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80017e0:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80017e2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80017e6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 80017ea:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80017ec:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80017f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80017f4:	f7ff fad4 	bl	8000da0 <HAL_GetTick>
 80017f8:	1b80      	subs	r0, r0, r6
 80017fa:	4287      	cmp	r7, r0
 80017fc:	d2db      	bcs.n	80017b6 <I2C_WaitOnFlagUntilTimeout+0x12>
 80017fe:	e7ed      	b.n	80017dc <I2C_WaitOnFlagUntilTimeout+0x38>

08001800 <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 8001800:	b570      	push	{r4, r5, r6, lr}
 8001802:	4604      	mov	r4, r0
 8001804:	460d      	mov	r5, r1
 8001806:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001808:	6823      	ldr	r3, [r4, #0]
 800180a:	695b      	ldr	r3, [r3, #20]
 800180c:	061b      	lsls	r3, r3, #24
 800180e:	d501      	bpl.n	8001814 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 8001810:	2000      	movs	r0, #0
 8001812:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001814:	4620      	mov	r0, r4
 8001816:	f7ff ff70 	bl	80016fa <I2C_IsAcknowledgeFailed>
 800181a:	b9a8      	cbnz	r0, 8001848 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 800181c:	1c6a      	adds	r2, r5, #1
 800181e:	d0f3      	beq.n	8001808 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001820:	b965      	cbnz	r5, 800183c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001822:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001824:	f043 0320 	orr.w	r3, r3, #32
 8001828:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 800182a:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 800182c:	2300      	movs	r3, #0
 800182e:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001830:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001834:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8001838:	2003      	movs	r0, #3
 800183a:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800183c:	f7ff fab0 	bl	8000da0 <HAL_GetTick>
 8001840:	1b80      	subs	r0, r0, r6
 8001842:	4285      	cmp	r5, r0
 8001844:	d2e0      	bcs.n	8001808 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 8001846:	e7ec      	b.n	8001822 <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8001848:	2001      	movs	r0, #1
}
 800184a:	bd70      	pop	{r4, r5, r6, pc}

0800184c <I2C_RequestMemoryWrite>:
{
 800184c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001850:	4615      	mov	r5, r2
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8001852:	6802      	ldr	r2, [r0, #0]
{
 8001854:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8001856:	4698      	mov	r8, r3
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8001858:	6813      	ldr	r3, [r2, #0]
 800185a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800185e:	6013      	str	r3, [r2, #0]
{
 8001860:	460f      	mov	r7, r1
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001862:	9600      	str	r6, [sp, #0]
 8001864:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001866:	2200      	movs	r2, #0
 8001868:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 800186c:	4604      	mov	r4, r0
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800186e:	f7ff ff99 	bl	80017a4 <I2C_WaitOnFlagUntilTimeout>
 8001872:	b968      	cbnz	r0, 8001890 <I2C_RequestMemoryWrite+0x44>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001874:	6823      	ldr	r3, [r4, #0]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001876:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001878:	491c      	ldr	r1, [pc, #112]	; (80018ec <I2C_RequestMemoryWrite+0xa0>)
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800187a:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 800187e:	611f      	str	r7, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001880:	4620      	mov	r0, r4
 8001882:	4633      	mov	r3, r6
 8001884:	f7ff ff4e 	bl	8001724 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001888:	b130      	cbz	r0, 8001898 <I2C_RequestMemoryWrite+0x4c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800188a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800188c:	2b04      	cmp	r3, #4
 800188e:	d018      	beq.n	80018c2 <I2C_RequestMemoryWrite+0x76>
      return HAL_TIMEOUT;
 8001890:	2003      	movs	r0, #3
}
 8001892:	b004      	add	sp, #16
 8001894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001898:	6823      	ldr	r3, [r4, #0]
 800189a:	9003      	str	r0, [sp, #12]
 800189c:	695a      	ldr	r2, [r3, #20]
 800189e:	9203      	str	r2, [sp, #12]
 80018a0:	699b      	ldr	r3, [r3, #24]
 80018a2:	9303      	str	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80018a4:	4632      	mov	r2, r6
 80018a6:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018a8:	9b03      	ldr	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80018aa:	4620      	mov	r0, r4
 80018ac:	f7ff ffa8 	bl	8001800 <I2C_WaitOnTXEFlagUntilTimeout>
 80018b0:	b148      	cbz	r0, 80018c6 <I2C_RequestMemoryWrite+0x7a>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80018b4:	2b04      	cmp	r3, #4
 80018b6:	d1eb      	bne.n	8001890 <I2C_RequestMemoryWrite+0x44>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80018b8:	6822      	ldr	r2, [r4, #0]
 80018ba:	6813      	ldr	r3, [r2, #0]
 80018bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018c0:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 80018c2:	2001      	movs	r0, #1
 80018c4:	e7e5      	b.n	8001892 <I2C_RequestMemoryWrite+0x46>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80018c6:	f1b8 0f01 	cmp.w	r8, #1
 80018ca:	6823      	ldr	r3, [r4, #0]
 80018cc:	d102      	bne.n	80018d4 <I2C_RequestMemoryWrite+0x88>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80018ce:	b2ed      	uxtb	r5, r5
 80018d0:	611d      	str	r5, [r3, #16]
 80018d2:	e7de      	b.n	8001892 <I2C_RequestMemoryWrite+0x46>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80018d4:	0a2a      	lsrs	r2, r5, #8
 80018d6:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80018d8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80018da:	4632      	mov	r2, r6
 80018dc:	4620      	mov	r0, r4
 80018de:	f7ff ff8f 	bl	8001800 <I2C_WaitOnTXEFlagUntilTimeout>
 80018e2:	2800      	cmp	r0, #0
 80018e4:	d1e5      	bne.n	80018b2 <I2C_RequestMemoryWrite+0x66>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80018e6:	6823      	ldr	r3, [r4, #0]
 80018e8:	e7f1      	b.n	80018ce <I2C_RequestMemoryWrite+0x82>
 80018ea:	bf00      	nop
 80018ec:	00010002 	.word	0x00010002

080018f0 <I2C_RequestMemoryRead>:
{
 80018f0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80018f4:	4698      	mov	r8, r3
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80018f6:	6803      	ldr	r3, [r0, #0]
{
 80018f8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80018fa:	4616      	mov	r6, r2
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001902:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800190a:	601a      	str	r2, [r3, #0]
{
 800190c:	460f      	mov	r7, r1
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800190e:	9500      	str	r5, [sp, #0]
 8001910:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001912:	2200      	movs	r2, #0
 8001914:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8001918:	4604      	mov	r4, r0
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800191a:	f7ff ff43 	bl	80017a4 <I2C_WaitOnFlagUntilTimeout>
 800191e:	b980      	cbnz	r0, 8001942 <I2C_RequestMemoryRead+0x52>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001920:	6823      	ldr	r3, [r4, #0]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001922:	492f      	ldr	r1, [pc, #188]	; (80019e0 <I2C_RequestMemoryRead+0xf0>)
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001924:	b2ff      	uxtb	r7, r7
 8001926:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
 800192a:	611a      	str	r2, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800192c:	4620      	mov	r0, r4
 800192e:	462b      	mov	r3, r5
 8001930:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001932:	f7ff fef7 	bl	8001724 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001936:	b140      	cbz	r0, 800194a <I2C_RequestMemoryRead+0x5a>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001938:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800193a:	2b04      	cmp	r3, #4
 800193c:	d101      	bne.n	8001942 <I2C_RequestMemoryRead+0x52>
      return HAL_ERROR;
 800193e:	2001      	movs	r0, #1
 8001940:	e000      	b.n	8001944 <I2C_RequestMemoryRead+0x54>
      return HAL_TIMEOUT;
 8001942:	2003      	movs	r0, #3
}
 8001944:	b004      	add	sp, #16
 8001946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800194a:	6823      	ldr	r3, [r4, #0]
 800194c:	9003      	str	r0, [sp, #12]
 800194e:	695a      	ldr	r2, [r3, #20]
 8001950:	9203      	str	r2, [sp, #12]
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	9303      	str	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001956:	462a      	mov	r2, r5
 8001958:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800195a:	9b03      	ldr	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800195c:	4620      	mov	r0, r4
 800195e:	f7ff ff4f 	bl	8001800 <I2C_WaitOnTXEFlagUntilTimeout>
 8001962:	b140      	cbz	r0, 8001976 <I2C_RequestMemoryRead+0x86>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001964:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001966:	2b04      	cmp	r3, #4
 8001968:	d1eb      	bne.n	8001942 <I2C_RequestMemoryRead+0x52>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800196a:	6822      	ldr	r2, [r4, #0]
 800196c:	6813      	ldr	r3, [r2, #0]
 800196e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001972:	6013      	str	r3, [r2, #0]
 8001974:	e7e3      	b.n	800193e <I2C_RequestMemoryRead+0x4e>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001976:	f1b8 0f01 	cmp.w	r8, #1
 800197a:	6823      	ldr	r3, [r4, #0]
 800197c:	d124      	bne.n	80019c8 <I2C_RequestMemoryRead+0xd8>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800197e:	b2f6      	uxtb	r6, r6
 8001980:	611e      	str	r6, [r3, #16]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001982:	462a      	mov	r2, r5
 8001984:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001986:	4620      	mov	r0, r4
 8001988:	f7ff ff3a 	bl	8001800 <I2C_WaitOnTXEFlagUntilTimeout>
 800198c:	4602      	mov	r2, r0
 800198e:	2800      	cmp	r0, #0
 8001990:	d1e8      	bne.n	8001964 <I2C_RequestMemoryRead+0x74>
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8001992:	6821      	ldr	r1, [r4, #0]
 8001994:	680b      	ldr	r3, [r1, #0]
 8001996:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800199a:	600b      	str	r3, [r1, #0]
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800199c:	4620      	mov	r0, r4
 800199e:	9500      	str	r5, [sp, #0]
 80019a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80019a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80019a6:	f7ff fefd 	bl	80017a4 <I2C_WaitOnFlagUntilTimeout>
 80019aa:	2800      	cmp	r0, #0
 80019ac:	d1c9      	bne.n	8001942 <I2C_RequestMemoryRead+0x52>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80019ae:	6823      	ldr	r3, [r4, #0]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80019b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80019b2:	490b      	ldr	r1, [pc, #44]	; (80019e0 <I2C_RequestMemoryRead+0xf0>)
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80019b4:	f047 0701 	orr.w	r7, r7, #1
 80019b8:	611f      	str	r7, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80019ba:	4620      	mov	r0, r4
 80019bc:	462b      	mov	r3, r5
 80019be:	f7ff feb1 	bl	8001724 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019c2:	2800      	cmp	r0, #0
 80019c4:	d1b8      	bne.n	8001938 <I2C_RequestMemoryRead+0x48>
 80019c6:	e7bd      	b.n	8001944 <I2C_RequestMemoryRead+0x54>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80019c8:	0a32      	lsrs	r2, r6, #8
 80019ca:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80019cc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80019ce:	462a      	mov	r2, r5
 80019d0:	4620      	mov	r0, r4
 80019d2:	f7ff ff15 	bl	8001800 <I2C_WaitOnTXEFlagUntilTimeout>
 80019d6:	2800      	cmp	r0, #0
 80019d8:	d1c4      	bne.n	8001964 <I2C_RequestMemoryRead+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80019da:	6823      	ldr	r3, [r4, #0]
 80019dc:	e7cf      	b.n	800197e <I2C_RequestMemoryRead+0x8e>
 80019de:	bf00      	nop
 80019e0:	00010002 	.word	0x00010002

080019e4 <I2C_WaitOnRXNEFlagUntilTimeout>:
{  
 80019e4:	b570      	push	{r4, r5, r6, lr}
 80019e6:	4604      	mov	r4, r0
 80019e8:	460d      	mov	r5, r1
 80019ea:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80019ec:	6820      	ldr	r0, [r4, #0]
 80019ee:	6943      	ldr	r3, [r0, #20]
 80019f0:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 80019f4:	d001      	beq.n	80019fa <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 80019f6:	2000      	movs	r0, #0
}
 80019f8:	bd70      	pop	{r4, r5, r6, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80019fa:	6942      	ldr	r2, [r0, #20]
 80019fc:	06d2      	lsls	r2, r2, #27
 80019fe:	d50b      	bpl.n	8001a18 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a00:	f06f 0210 	mvn.w	r2, #16
 8001a04:	6142      	str	r2, [r0, #20]
      hi2c->State= HAL_I2C_STATE_READY;
 8001a06:	2220      	movs	r2, #32
      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a08:	6423      	str	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001a0a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->PreviousState = I2C_STATE_NONE;
 8001a0e:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8001a10:	2001      	movs	r0, #1
      hi2c->State= HAL_I2C_STATE_READY;
 8001a12:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8001a16:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001a18:	b95d      	cbnz	r5, 8001a32 <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a1c:	f043 0320 	orr.w	r3, r3, #32
 8001a20:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8001a22:	2320      	movs	r3, #32
 8001a24:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      __HAL_UNLOCK(hi2c);
 8001a28:	2300      	movs	r3, #0
 8001a2a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8001a2e:	2003      	movs	r0, #3
 8001a30:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001a32:	f7ff f9b5 	bl	8000da0 <HAL_GetTick>
 8001a36:	1b80      	subs	r0, r0, r6
 8001a38:	4285      	cmp	r5, r0
 8001a3a:	d2d7      	bcs.n	80019ec <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 8001a3c:	e7ed      	b.n	8001a1a <I2C_WaitOnRXNEFlagUntilTimeout+0x36>

08001a3e <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 8001a3e:	b570      	push	{r4, r5, r6, lr}
 8001a40:	4604      	mov	r4, r0
 8001a42:	460d      	mov	r5, r1
 8001a44:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001a46:	6823      	ldr	r3, [r4, #0]
 8001a48:	695b      	ldr	r3, [r3, #20]
 8001a4a:	075b      	lsls	r3, r3, #29
 8001a4c:	d501      	bpl.n	8001a52 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8001a4e:	2000      	movs	r0, #0
 8001a50:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001a52:	4620      	mov	r0, r4
 8001a54:	f7ff fe51 	bl	80016fa <I2C_IsAcknowledgeFailed>
 8001a58:	b9a8      	cbnz	r0, 8001a86 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8001a5a:	1c6a      	adds	r2, r5, #1
 8001a5c:	d0f3      	beq.n	8001a46 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001a5e:	b965      	cbnz	r5, 8001a7a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a60:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a62:	f043 0320 	orr.w	r3, r3, #32
 8001a66:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8001a68:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001a6e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001a72:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8001a76:	2003      	movs	r0, #3
 8001a78:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001a7a:	f7ff f991 	bl	8000da0 <HAL_GetTick>
 8001a7e:	1b80      	subs	r0, r0, r6
 8001a80:	4285      	cmp	r5, r0
 8001a82:	d2e0      	bcs.n	8001a46 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 8001a84:	e7ec      	b.n	8001a60 <I2C_WaitOnBTFFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8001a86:	2001      	movs	r0, #1
}
 8001a88:	bd70      	pop	{r4, r5, r6, pc}
	...

08001a8c <HAL_I2C_Init>:
{
 8001a8c:	b570      	push	{r4, r5, r6, lr}
  if(hi2c == NULL)
 8001a8e:	4604      	mov	r4, r0
 8001a90:	2800      	cmp	r0, #0
 8001a92:	d062      	beq.n	8001b5a <HAL_I2C_Init+0xce>
  if(hi2c->State == HAL_I2C_STATE_RESET)
 8001a94:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001a98:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001a9c:	b91b      	cbnz	r3, 8001aa6 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8001a9e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001aa2:	f003 f871 	bl	8004b88 <HAL_I2C_MspInit>
  __HAL_I2C_DISABLE(hi2c);
 8001aa6:	6822      	ldr	r2, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001aa8:	4e2d      	ldr	r6, [pc, #180]	; (8001b60 <HAL_I2C_Init+0xd4>)
  freqrange = I2C_FREQRANGE(pclk1);
 8001aaa:	4d2e      	ldr	r5, [pc, #184]	; (8001b64 <HAL_I2C_Init+0xd8>)
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001aac:	2324      	movs	r3, #36	; 0x24
 8001aae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001ab2:	6813      	ldr	r3, [r2, #0]
 8001ab4:	f023 0301 	bic.w	r3, r3, #1
 8001ab8:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001aba:	f001 f9c1 	bl	8002e40 <HAL_RCC_GetPCLK1Freq>
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001abe:	6863      	ldr	r3, [r4, #4]
  hi2c->Instance->CR2 = freqrange;
 8001ac0:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001ac2:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001ac6:	42b3      	cmp	r3, r6
 8001ac8:	bf84      	itt	hi
 8001aca:	f44f 7196 	movhi.w	r1, #300	; 0x12c
 8001ace:	4369      	mulhi	r1, r5
  hi2c->Instance->CR2 = freqrange;
 8001ad0:	6055      	str	r5, [r2, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001ad2:	bf91      	iteee	ls
 8001ad4:	1c69      	addls	r1, r5, #1
 8001ad6:	f44f 757a 	movhi.w	r5, #1000	; 0x3e8
 8001ada:	fbb1 f1f5 	udivhi	r1, r1, r5
 8001ade:	3101      	addhi	r1, #1
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001ae0:	42b3      	cmp	r3, r6
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001ae2:	6211      	str	r1, [r2, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001ae4:	d821      	bhi.n	8001b2a <HAL_I2C_Init+0x9e>
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	fbb0 f0f3 	udiv	r0, r0, r3
 8001aec:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001af0:	2b03      	cmp	r3, #3
 8001af2:	bf98      	it	ls
 8001af4:	2004      	movls	r0, #4
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001af6:	6a21      	ldr	r1, [r4, #32]
 8001af8:	69e3      	ldr	r3, [r4, #28]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001afa:	61d0      	str	r0, [r2, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001afc:	430b      	orrs	r3, r1
 8001afe:	6013      	str	r3, [r2, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8001b00:	68e1      	ldr	r1, [r4, #12]
 8001b02:	6923      	ldr	r3, [r4, #16]
 8001b04:	430b      	orrs	r3, r1
 8001b06:	6093      	str	r3, [r2, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8001b08:	69a1      	ldr	r1, [r4, #24]
 8001b0a:	6963      	ldr	r3, [r4, #20]
 8001b0c:	430b      	orrs	r3, r1
 8001b0e:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8001b10:	6813      	ldr	r3, [r2, #0]
 8001b12:	f043 0301 	orr.w	r3, r3, #1
 8001b16:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b18:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8001b1a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b1c:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b1e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b22:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b24:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8001b28:	bd70      	pop	{r4, r5, r6, pc}
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001b2a:	68a1      	ldr	r1, [r4, #8]
 8001b2c:	b949      	cbnz	r1, 8001b42 <HAL_I2C_Init+0xb6>
 8001b2e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001b32:	fbb0 f0f3 	udiv	r0, r0, r3
 8001b36:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001b3a:	b163      	cbz	r3, 8001b56 <HAL_I2C_Init+0xca>
 8001b3c:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8001b40:	e7d9      	b.n	8001af6 <HAL_I2C_Init+0x6a>
 8001b42:	2119      	movs	r1, #25
 8001b44:	434b      	muls	r3, r1
 8001b46:	fbb0 f0f3 	udiv	r0, r0, r3
 8001b4a:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001b4e:	b113      	cbz	r3, 8001b56 <HAL_I2C_Init+0xca>
 8001b50:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8001b54:	e7cf      	b.n	8001af6 <HAL_I2C_Init+0x6a>
 8001b56:	2001      	movs	r0, #1
 8001b58:	e7cd      	b.n	8001af6 <HAL_I2C_Init+0x6a>
    return HAL_ERROR;
 8001b5a:	2001      	movs	r0, #1
}
 8001b5c:	bd70      	pop	{r4, r5, r6, pc}
 8001b5e:	bf00      	nop
 8001b60:	000186a0 	.word	0x000186a0
 8001b64:	000f4240 	.word	0x000f4240

08001b68 <HAL_I2C_Mem_Write>:
{
 8001b68:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8001b6c:	4604      	mov	r4, r0
 8001b6e:	469a      	mov	sl, r3
 8001b70:	4688      	mov	r8, r1
 8001b72:	4691      	mov	r9, r2
 8001b74:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  tickstart = HAL_GetTick();
 8001b76:	f7ff f913 	bl	8000da0 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001b7a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001b7e:	2b20      	cmp	r3, #32
  tickstart = HAL_GetTick();
 8001b80:	4605      	mov	r5, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001b82:	d003      	beq.n	8001b8c <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 8001b84:	2002      	movs	r0, #2
}
 8001b86:	b002      	add	sp, #8
 8001b88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b8c:	9000      	str	r0, [sp, #0]
 8001b8e:	2319      	movs	r3, #25
 8001b90:	2201      	movs	r2, #1
 8001b92:	493e      	ldr	r1, [pc, #248]	; (8001c8c <HAL_I2C_Mem_Write+0x124>)
 8001b94:	4620      	mov	r0, r4
 8001b96:	f7ff fe05 	bl	80017a4 <I2C_WaitOnFlagUntilTimeout>
 8001b9a:	2800      	cmp	r0, #0
 8001b9c:	d1f2      	bne.n	8001b84 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 8001b9e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d0ee      	beq.n	8001b84 <HAL_I2C_Mem_Write+0x1c>
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001bac:	6823      	ldr	r3, [r4, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001bb2:	bf5e      	ittt	pl
 8001bb4:	681a      	ldrpl	r2, [r3, #0]
 8001bb6:	f042 0201 	orrpl.w	r2, r2, #1
 8001bba:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bc2:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001bc4:	2321      	movs	r3, #33	; 0x21
 8001bc6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001bca:	2340      	movs	r3, #64	; 0x40
 8001bcc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->pBuffPtr    = pData;
 8001bd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001bd2:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bd4:	2700      	movs	r7, #0
    hi2c->XferCount   = Size;
 8001bd6:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bda:	6427      	str	r7, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8001bdc:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001bde:	4b2c      	ldr	r3, [pc, #176]	; (8001c90 <HAL_I2C_Mem_Write+0x128>)
 8001be0:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001be2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001be4:	8523      	strh	r3, [r4, #40]	; 0x28
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001be6:	9501      	str	r5, [sp, #4]
 8001be8:	9600      	str	r6, [sp, #0]
 8001bea:	4653      	mov	r3, sl
 8001bec:	464a      	mov	r2, r9
 8001bee:	4641      	mov	r1, r8
 8001bf0:	4620      	mov	r0, r4
 8001bf2:	f7ff fe2b 	bl	800184c <I2C_RequestMemoryWrite>
 8001bf6:	2800      	cmp	r0, #0
 8001bf8:	d02a      	beq.n	8001c50 <HAL_I2C_Mem_Write+0xe8>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bfa:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001bfc:	f884 703c 	strb.w	r7, [r4, #60]	; 0x3c
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c00:	2b04      	cmp	r3, #4
 8001c02:	d107      	bne.n	8001c14 <HAL_I2C_Mem_Write+0xac>
        return HAL_ERROR;
 8001c04:	2001      	movs	r0, #1
 8001c06:	e7be      	b.n	8001b86 <HAL_I2C_Mem_Write+0x1e>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c08:	f7ff fdfa 	bl	8001800 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c0c:	b120      	cbz	r0, 8001c18 <HAL_I2C_Mem_Write+0xb0>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c10:	2b04      	cmp	r3, #4
 8001c12:	d034      	beq.n	8001c7e <HAL_I2C_Mem_Write+0x116>
          return HAL_TIMEOUT;
 8001c14:	2003      	movs	r0, #3
 8001c16:	e7b6      	b.n	8001b86 <HAL_I2C_Mem_Write+0x1e>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001c18:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001c1a:	6827      	ldr	r7, [r4, #0]
      hi2c->XferSize--;
 8001c1c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001c1e:	1c4b      	adds	r3, r1, #1
 8001c20:	6263      	str	r3, [r4, #36]	; 0x24
 8001c22:	780b      	ldrb	r3, [r1, #0]
 8001c24:	613b      	str	r3, [r7, #16]
      hi2c->XferCount--;
 8001c26:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001c28:	3b01      	subs	r3, #1
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001c2e:	697b      	ldr	r3, [r7, #20]
      hi2c->XferSize--;
 8001c30:	1e50      	subs	r0, r2, #1
 8001c32:	b280      	uxth	r0, r0
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001c34:	075b      	lsls	r3, r3, #29
      hi2c->XferSize--;
 8001c36:	8520      	strh	r0, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001c38:	d50a      	bpl.n	8001c50 <HAL_I2C_Mem_Write+0xe8>
 8001c3a:	b148      	cbz	r0, 8001c50 <HAL_I2C_Mem_Write+0xe8>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001c3c:	1c8b      	adds	r3, r1, #2
 8001c3e:	6263      	str	r3, [r4, #36]	; 0x24
 8001c40:	784b      	ldrb	r3, [r1, #1]
 8001c42:	613b      	str	r3, [r7, #16]
        hi2c->XferCount--;
 8001c44:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001c46:	3b01      	subs	r3, #1
        hi2c->XferSize--;
 8001c48:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 8001c4a:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8001c4c:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001c4e:	8563      	strh	r3, [r4, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 8001c50:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c52:	462a      	mov	r2, r5
 8001c54:	4631      	mov	r1, r6
 8001c56:	4620      	mov	r0, r4
    while(hi2c->XferSize > 0U)
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d1d5      	bne.n	8001c08 <HAL_I2C_Mem_Write+0xa0>
    if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c5c:	f7ff feef 	bl	8001a3e <I2C_WaitOnBTFFlagUntilTimeout>
 8001c60:	2800      	cmp	r0, #0
 8001c62:	d1d4      	bne.n	8001c0e <HAL_I2C_Mem_Write+0xa6>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001c64:	6822      	ldr	r2, [r4, #0]
 8001c66:	6813      	ldr	r3, [r2, #0]
 8001c68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c6c:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001c6e:	2320      	movs	r3, #32
 8001c70:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8001c74:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c78:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 8001c7c:	e783      	b.n	8001b86 <HAL_I2C_Mem_Write+0x1e>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001c7e:	6822      	ldr	r2, [r4, #0]
 8001c80:	6813      	ldr	r3, [r2, #0]
 8001c82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c86:	6013      	str	r3, [r2, #0]
 8001c88:	e7bc      	b.n	8001c04 <HAL_I2C_Mem_Write+0x9c>
 8001c8a:	bf00      	nop
 8001c8c:	00100002 	.word	0x00100002
 8001c90:	ffff0000 	.word	0xffff0000

08001c94 <HAL_I2C_Mem_Read>:
{
 8001c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001c98:	4604      	mov	r4, r0
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	469a      	mov	sl, r3
 8001c9e:	460d      	mov	r5, r1
 8001ca0:	4691      	mov	r9, r2
 8001ca2:	9f10      	ldr	r7, [sp, #64]	; 0x40
  tickstart = HAL_GetTick();
 8001ca4:	f7ff f87c 	bl	8000da0 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001ca8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001cac:	2b20      	cmp	r3, #32
  tickstart = HAL_GetTick();
 8001cae:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001cb0:	d004      	beq.n	8001cbc <HAL_I2C_Mem_Read+0x28>
    return HAL_BUSY;
 8001cb2:	2502      	movs	r5, #2
}
 8001cb4:	4628      	mov	r0, r5
 8001cb6:	b006      	add	sp, #24
 8001cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001cbc:	9000      	str	r0, [sp, #0]
 8001cbe:	2319      	movs	r3, #25
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	4979      	ldr	r1, [pc, #484]	; (8001ea8 <HAL_I2C_Mem_Read+0x214>)
 8001cc4:	4620      	mov	r0, r4
 8001cc6:	f7ff fd6d 	bl	80017a4 <I2C_WaitOnFlagUntilTimeout>
 8001cca:	2800      	cmp	r0, #0
 8001ccc:	d1f1      	bne.n	8001cb2 <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 8001cce:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d0ed      	beq.n	8001cb2 <HAL_I2C_Mem_Read+0x1e>
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001cdc:	6823      	ldr	r3, [r4, #0]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001ce2:	bf5e      	ittt	pl
 8001ce4:	681a      	ldrpl	r2, [r3, #0]
 8001ce6:	f042 0201 	orrpl.w	r2, r2, #1
 8001cea:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cf2:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001cf4:	2322      	movs	r3, #34	; 0x22
 8001cf6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001cfa:	2340      	movs	r3, #64	; 0x40
 8001cfc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->pBuffPtr    = pData;
 8001d00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001d02:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d04:	f04f 0800 	mov.w	r8, #0
    hi2c->XferCount   = Size;
 8001d08:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d0c:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8001d10:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d12:	4b66      	ldr	r3, [pc, #408]	; (8001eac <HAL_I2C_Mem_Read+0x218>)
 8001d14:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001d16:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001d18:	8523      	strh	r3, [r4, #40]	; 0x28
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001d1a:	4629      	mov	r1, r5
 8001d1c:	9601      	str	r6, [sp, #4]
 8001d1e:	9700      	str	r7, [sp, #0]
 8001d20:	4653      	mov	r3, sl
 8001d22:	464a      	mov	r2, r9
 8001d24:	4620      	mov	r0, r4
 8001d26:	f7ff fde3 	bl	80018f0 <I2C_RequestMemoryRead>
 8001d2a:	4605      	mov	r5, r0
 8001d2c:	b130      	cbz	r0, 8001d3c <HAL_I2C_Mem_Read+0xa8>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001d30:	f884 803c 	strb.w	r8, [r4, #60]	; 0x3c
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d34:	2b04      	cmp	r3, #4
 8001d36:	d13a      	bne.n	8001dae <HAL_I2C_Mem_Read+0x11a>
              return HAL_ERROR;
 8001d38:	2501      	movs	r5, #1
 8001d3a:	e7bb      	b.n	8001cb4 <HAL_I2C_Mem_Read+0x20>
    if(hi2c->XferSize == 0U)
 8001d3c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001d3e:	6823      	ldr	r3, [r4, #0]
 8001d40:	b992      	cbnz	r2, 8001d68 <HAL_I2C_Mem_Read+0xd4>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d42:	9002      	str	r0, [sp, #8]
 8001d44:	695a      	ldr	r2, [r3, #20]
 8001d46:	9202      	str	r2, [sp, #8]
 8001d48:	699a      	ldr	r2, [r3, #24]
 8001d4a:	9202      	str	r2, [sp, #8]
 8001d4c:	9a02      	ldr	r2, [sp, #8]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d54:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001d56:	2320      	movs	r3, #32
 8001d58:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8001d62:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8001d66:	e7a5      	b.n	8001cb4 <HAL_I2C_Mem_Read+0x20>
    else if(hi2c->XferSize == 1U)
 8001d68:	2a01      	cmp	r2, #1
 8001d6a:	d122      	bne.n	8001db2 <HAL_I2C_Mem_Read+0x11e>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d72:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d74:	9003      	str	r0, [sp, #12]
 8001d76:	695a      	ldr	r2, [r3, #20]
 8001d78:	9203      	str	r2, [sp, #12]
 8001d7a:	699a      	ldr	r2, [r3, #24]
 8001d7c:	9203      	str	r2, [sp, #12]
 8001d7e:	9a03      	ldr	r2, [sp, #12]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d86:	601a      	str	r2, [r3, #0]
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d88:	f8df 8124 	ldr.w	r8, [pc, #292]	; 8001eb0 <HAL_I2C_Mem_Read+0x21c>
    while(hi2c->XferSize > 0U)
 8001d8c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d0e1      	beq.n	8001d56 <HAL_I2C_Mem_Read+0xc2>
      if(hi2c->XferSize <= 3U)
 8001d92:	2b03      	cmp	r3, #3
 8001d94:	d86b      	bhi.n	8001e6e <HAL_I2C_Mem_Read+0x1da>
        if(hi2c->XferSize== 1U)
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d123      	bne.n	8001de2 <HAL_I2C_Mem_Read+0x14e>
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8001d9a:	4632      	mov	r2, r6
 8001d9c:	4639      	mov	r1, r7
 8001d9e:	4620      	mov	r0, r4
 8001da0:	f7ff fe20 	bl	80019e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001da4:	2800      	cmp	r0, #0
 8001da6:	d039      	beq.n	8001e1c <HAL_I2C_Mem_Read+0x188>
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8001da8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001daa:	2b20      	cmp	r3, #32
 8001dac:	d1c4      	bne.n	8001d38 <HAL_I2C_Mem_Read+0xa4>
              return HAL_TIMEOUT;
 8001dae:	2503      	movs	r5, #3
 8001db0:	e780      	b.n	8001cb4 <HAL_I2C_Mem_Read+0x20>
    else if(hi2c->XferSize == 2U)
 8001db2:	2a02      	cmp	r2, #2
 8001db4:	d10e      	bne.n	8001dd4 <HAL_I2C_Mem_Read+0x140>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dbc:	601a      	str	r2, [r3, #0]
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001dc4:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dc6:	9004      	str	r0, [sp, #16]
 8001dc8:	695a      	ldr	r2, [r3, #20]
 8001dca:	9204      	str	r2, [sp, #16]
 8001dcc:	699b      	ldr	r3, [r3, #24]
 8001dce:	9304      	str	r3, [sp, #16]
 8001dd0:	9b04      	ldr	r3, [sp, #16]
 8001dd2:	e7d9      	b.n	8001d88 <HAL_I2C_Mem_Read+0xf4>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dd4:	9005      	str	r0, [sp, #20]
 8001dd6:	695a      	ldr	r2, [r3, #20]
 8001dd8:	9205      	str	r2, [sp, #20]
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	9305      	str	r3, [sp, #20]
 8001dde:	9b05      	ldr	r3, [sp, #20]
 8001de0:	e7d2      	b.n	8001d88 <HAL_I2C_Mem_Read+0xf4>
        else if(hi2c->XferSize == 2U)
 8001de2:	2b02      	cmp	r3, #2
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001de4:	9600      	str	r6, [sp, #0]
 8001de6:	463b      	mov	r3, r7
 8001de8:	f04f 0200 	mov.w	r2, #0
 8001dec:	4641      	mov	r1, r8
 8001dee:	4620      	mov	r0, r4
        else if(hi2c->XferSize == 2U)
 8001df0:	d122      	bne.n	8001e38 <HAL_I2C_Mem_Read+0x1a4>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001df2:	f7ff fcd7 	bl	80017a4 <I2C_WaitOnFlagUntilTimeout>
 8001df6:	2800      	cmp	r0, #0
 8001df8:	d1d9      	bne.n	8001dae <HAL_I2C_Mem_Read+0x11a>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001dfa:	6823      	ldr	r3, [r4, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e02:	601a      	str	r2, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001e04:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001e06:	691b      	ldr	r3, [r3, #16]
 8001e08:	1c51      	adds	r1, r2, #1
 8001e0a:	6261      	str	r1, [r4, #36]	; 0x24
 8001e0c:	7013      	strb	r3, [r2, #0]
          hi2c->XferSize--;
 8001e0e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001e10:	3b01      	subs	r3, #1
 8001e12:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001e14:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001e16:	3b01      	subs	r3, #1
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	8563      	strh	r3, [r4, #42]	; 0x2a
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001e1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001e1e:	1c5a      	adds	r2, r3, #1
 8001e20:	6262      	str	r2, [r4, #36]	; 0x24
 8001e22:	6822      	ldr	r2, [r4, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001e24:	6912      	ldr	r2, [r2, #16]
 8001e26:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001e28:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001e2e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001e30:	3b01      	subs	r3, #1
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001e36:	e7a9      	b.n	8001d8c <HAL_I2C_Mem_Read+0xf8>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e38:	f7ff fcb4 	bl	80017a4 <I2C_WaitOnFlagUntilTimeout>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	2800      	cmp	r0, #0
 8001e40:	d1b5      	bne.n	8001dae <HAL_I2C_Mem_Read+0x11a>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001e42:	6823      	ldr	r3, [r4, #0]
 8001e44:	6819      	ldr	r1, [r3, #0]
 8001e46:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8001e4a:	6019      	str	r1, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001e4c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001e4e:	691b      	ldr	r3, [r3, #16]
 8001e50:	1c48      	adds	r0, r1, #1
 8001e52:	6260      	str	r0, [r4, #36]	; 0x24
 8001e54:	700b      	strb	r3, [r1, #0]
          hi2c->XferSize--;
 8001e56:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e58:	9600      	str	r6, [sp, #0]
          hi2c->XferSize--;
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001e5e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001e60:	3b01      	subs	r3, #1
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	8563      	strh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e66:	4641      	mov	r1, r8
 8001e68:	463b      	mov	r3, r7
 8001e6a:	4620      	mov	r0, r4
 8001e6c:	e7c1      	b.n	8001df2 <HAL_I2C_Mem_Read+0x15e>
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e6e:	4632      	mov	r2, r6
 8001e70:	4639      	mov	r1, r7
 8001e72:	4620      	mov	r0, r4
 8001e74:	f7ff fdb6 	bl	80019e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e78:	2800      	cmp	r0, #0
 8001e7a:	d195      	bne.n	8001da8 <HAL_I2C_Mem_Read+0x114>
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001e7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001e7e:	1c5a      	adds	r2, r3, #1
 8001e80:	6262      	str	r2, [r4, #36]	; 0x24
 8001e82:	6822      	ldr	r2, [r4, #0]
 8001e84:	6912      	ldr	r2, [r2, #16]
 8001e86:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8001e88:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001e8a:	6822      	ldr	r2, [r4, #0]
        hi2c->XferSize--;
 8001e8c:	3b01      	subs	r3, #1
 8001e8e:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001e90:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001e92:	3b01      	subs	r3, #1
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	8563      	strh	r3, [r4, #42]	; 0x2a
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001e98:	6953      	ldr	r3, [r2, #20]
 8001e9a:	075b      	lsls	r3, r3, #29
 8001e9c:	f57f af76 	bpl.w	8001d8c <HAL_I2C_Mem_Read+0xf8>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001ea0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001ea2:	1c59      	adds	r1, r3, #1
 8001ea4:	6261      	str	r1, [r4, #36]	; 0x24
 8001ea6:	e7bd      	b.n	8001e24 <HAL_I2C_Mem_Read+0x190>
 8001ea8:	00100002 	.word	0x00100002
 8001eac:	ffff0000 	.word	0xffff0000
 8001eb0:	00010004 	.word	0x00010004

08001eb4 <HAL_I2C_IsDeviceReady>:
{
 8001eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001eb8:	4604      	mov	r4, r0
 8001eba:	b085      	sub	sp, #20
 8001ebc:	4698      	mov	r8, r3
 8001ebe:	4689      	mov	r9, r1
 8001ec0:	4692      	mov	sl, r2
  tickstart = HAL_GetTick();
 8001ec2:	f7fe ff6d 	bl	8000da0 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001ec6:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001eca:	2b20      	cmp	r3, #32
  tickstart = HAL_GetTick();
 8001ecc:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001ece:	d003      	beq.n	8001ed8 <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 8001ed0:	2002      	movs	r0, #2
}
 8001ed2:	b005      	add	sp, #20
 8001ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ed8:	9000      	str	r0, [sp, #0]
 8001eda:	2319      	movs	r3, #25
 8001edc:	2201      	movs	r2, #1
 8001ede:	494a      	ldr	r1, [pc, #296]	; (8002008 <HAL_I2C_IsDeviceReady+0x154>)
 8001ee0:	4620      	mov	r0, r4
 8001ee2:	f7ff fc5f 	bl	80017a4 <I2C_WaitOnFlagUntilTimeout>
 8001ee6:	2800      	cmp	r0, #0
 8001ee8:	d1f2      	bne.n	8001ed0 <HAL_I2C_IsDeviceReady+0x1c>
    __HAL_LOCK(hi2c);
 8001eea:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d0ee      	beq.n	8001ed0 <HAL_I2C_IsDeviceReady+0x1c>
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ef8:	6823      	ldr	r3, [r4, #0]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001efa:	f8df b10c 	ldr.w	fp, [pc, #268]	; 8002008 <HAL_I2C_IsDeviceReady+0x154>
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001f02:	bf5e      	ittt	pl
 8001f04:	681a      	ldrpl	r2, [r3, #0]
 8001f06:	f042 0201 	orrpl.w	r2, r2, #1
 8001f0a:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f12:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f14:	2324      	movs	r3, #36	; 0x24
 8001f16:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f1a:	2500      	movs	r5, #0
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f1c:	4b3b      	ldr	r3, [pc, #236]	; (800200c <HAL_I2C_IsDeviceReady+0x158>)
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f1e:	6425      	str	r5, [r4, #64]	; 0x40
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f20:	f009 09fe 	and.w	r9, r9, #254	; 0xfe
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f24:	62e3      	str	r3, [r4, #44]	; 0x2c
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001f26:	6822      	ldr	r2, [r4, #0]
 8001f28:	6813      	ldr	r3, [r2, #0]
 8001f2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f2e:	6013      	str	r3, [r2, #0]
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001f30:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001f34:	9600      	str	r6, [sp, #0]
 8001f36:	4643      	mov	r3, r8
 8001f38:	2200      	movs	r2, #0
 8001f3a:	4620      	mov	r0, r4
 8001f3c:	f7ff fc32 	bl	80017a4 <I2C_WaitOnFlagUntilTimeout>
 8001f40:	b108      	cbz	r0, 8001f46 <HAL_I2C_IsDeviceReady+0x92>
        return HAL_TIMEOUT;
 8001f42:	2003      	movs	r0, #3
 8001f44:	e7c5      	b.n	8001ed2 <HAL_I2C_IsDeviceReady+0x1e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f46:	6823      	ldr	r3, [r4, #0]
 8001f48:	f8c3 9010 	str.w	r9, [r3, #16]
      tickstart = HAL_GetTick();
 8001f4c:	f7fe ff28 	bl	8000da0 <HAL_GetTick>
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001f50:	6823      	ldr	r3, [r4, #0]
 8001f52:	6959      	ldr	r1, [r3, #20]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001f54:	695a      	ldr	r2, [r3, #20]
      tmp3 = hi2c->State;
 8001f56:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
      tickstart = HAL_GetTick();
 8001f5a:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001f5c:	f3c1 0140 	ubfx	r1, r1, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001f60:	f3c2 2280 	ubfx	r2, r2, #10, #1
      tmp3 = hi2c->State;
 8001f64:	b2db      	uxtb	r3, r3
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001f66:	27a0      	movs	r7, #160	; 0xa0
      while((tmp1 == RESET) && (tmp2 == RESET) && (tmp3 != HAL_I2C_STATE_TIMEOUT))
 8001f68:	b911      	cbnz	r1, 8001f70 <HAL_I2C_IsDeviceReady+0xbc>
 8001f6a:	b90a      	cbnz	r2, 8001f70 <HAL_I2C_IsDeviceReady+0xbc>
 8001f6c:	2ba0      	cmp	r3, #160	; 0xa0
 8001f6e:	d120      	bne.n	8001fb2 <HAL_I2C_IsDeviceReady+0xfe>
      if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001f70:	6823      	ldr	r3, [r4, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 8001f72:	2720      	movs	r7, #32
 8001f74:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
      if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001f78:	695a      	ldr	r2, [r3, #20]
 8001f7a:	f012 0f02 	tst.w	r2, #2
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f84:	601a      	str	r2, [r3, #0]
      if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001f86:	d02a      	beq.n	8001fde <HAL_I2C_IsDeviceReady+0x12a>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f88:	2200      	movs	r2, #0
 8001f8a:	9203      	str	r2, [sp, #12]
 8001f8c:	695a      	ldr	r2, [r3, #20]
 8001f8e:	9203      	str	r2, [sp, #12]
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	9303      	str	r3, [sp, #12]
 8001f94:	9b03      	ldr	r3, [sp, #12]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f96:	9600      	str	r6, [sp, #0]
 8001f98:	2319      	movs	r3, #25
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	491a      	ldr	r1, [pc, #104]	; (8002008 <HAL_I2C_IsDeviceReady+0x154>)
 8001f9e:	4620      	mov	r0, r4
 8001fa0:	f7ff fc00 	bl	80017a4 <I2C_WaitOnFlagUntilTimeout>
 8001fa4:	2800      	cmp	r0, #0
 8001fa6:	d1cc      	bne.n	8001f42 <HAL_I2C_IsDeviceReady+0x8e>
        hi2c->State = HAL_I2C_STATE_READY;
 8001fa8:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8001fac:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
        return HAL_OK;
 8001fb0:	e78f      	b.n	8001ed2 <HAL_I2C_IsDeviceReady+0x1e>
        if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001fb2:	f1b8 0f00 	cmp.w	r8, #0
 8001fb6:	d10c      	bne.n	8001fd2 <HAL_I2C_IsDeviceReady+0x11e>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001fb8:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001fbc:	6823      	ldr	r3, [r4, #0]
 8001fbe:	6959      	ldr	r1, [r3, #20]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001fc0:	695a      	ldr	r2, [r3, #20]
        tmp3 = hi2c->State;
 8001fc2:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001fc6:	f3c1 0140 	ubfx	r1, r1, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001fca:	f3c2 2280 	ubfx	r2, r2, #10, #1
        tmp3 = hi2c->State;
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	e7ca      	b.n	8001f68 <HAL_I2C_IsDeviceReady+0xb4>
        if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001fd2:	f7fe fee5 	bl	8000da0 <HAL_GetTick>
 8001fd6:	1b80      	subs	r0, r0, r6
 8001fd8:	4580      	cmp	r8, r0
 8001fda:	d3ed      	bcc.n	8001fb8 <HAL_I2C_IsDeviceReady+0x104>
 8001fdc:	e7ee      	b.n	8001fbc <HAL_I2C_IsDeviceReady+0x108>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fde:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001fe2:	615a      	str	r2, [r3, #20]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fe4:	4659      	mov	r1, fp
 8001fe6:	9600      	str	r6, [sp, #0]
 8001fe8:	2319      	movs	r3, #25
 8001fea:	2201      	movs	r2, #1
 8001fec:	4620      	mov	r0, r4
 8001fee:	f7ff fbd9 	bl	80017a4 <I2C_WaitOnFlagUntilTimeout>
 8001ff2:	2800      	cmp	r0, #0
 8001ff4:	d1a5      	bne.n	8001f42 <HAL_I2C_IsDeviceReady+0x8e>
 8001ff6:	3501      	adds	r5, #1
    }while(I2C_Trials++ < Trials);
 8001ff8:	45aa      	cmp	sl, r5
 8001ffa:	d894      	bhi.n	8001f26 <HAL_I2C_IsDeviceReady+0x72>
    __HAL_UNLOCK(hi2c);
 8001ffc:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8002000:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
    return HAL_ERROR;
 8002004:	2001      	movs	r0, #1
 8002006:	e764      	b.n	8001ed2 <HAL_I2C_IsDeviceReady+0x1e>
 8002008:	00100002 	.word	0x00100002
 800200c:	ffff0000 	.word	0xffff0000

08002010 <HAL_I2C_MasterTxCpltCallback>:
 8002010:	4770      	bx	lr

08002012 <HAL_I2C_MasterRxCpltCallback>:
 8002012:	4770      	bx	lr

08002014 <HAL_I2C_SlaveTxCpltCallback>:
 8002014:	4770      	bx	lr

08002016 <HAL_I2C_SlaveRxCpltCallback>:
 8002016:	4770      	bx	lr

08002018 <HAL_I2C_AddrCallback>:
{
 8002018:	4770      	bx	lr

0800201a <HAL_I2C_ListenCpltCallback>:
 800201a:	4770      	bx	lr

0800201c <HAL_I2C_MemTxCpltCallback>:
 800201c:	4770      	bx	lr

0800201e <HAL_I2C_MemRxCpltCallback>:
 800201e:	4770      	bx	lr

08002020 <HAL_I2C_ErrorCallback>:
 8002020:	4770      	bx	lr

08002022 <HAL_I2C_AbortCpltCallback>:
{
 8002022:	4770      	bx	lr

08002024 <I2C_ITError>:
  uint32_t CurrentState = hi2c->State;
 8002024:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
  if((CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002028:	3b29      	subs	r3, #41	; 0x29
 800202a:	2b01      	cmp	r3, #1
{
 800202c:	b510      	push	{r4, lr}
 800202e:	6803      	ldr	r3, [r0, #0]
 8002030:	4604      	mov	r4, r0
  if((CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002032:	d839      	bhi.n	80020a8 <I2C_ITError+0x84>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002034:	2200      	movs	r2, #0
 8002036:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002038:	2228      	movs	r2, #40	; 0x28
 800203a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002044:	601a      	str	r2, [r3, #0]
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002046:	685a      	ldr	r2, [r3, #4]
 8002048:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 800204c:	d054      	beq.n	80020f8 <I2C_ITError+0xd4>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800204e:	685a      	ldr	r2, [r3, #4]
    if(hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002050:	6b60      	ldr	r0, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002052:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002056:	605a      	str	r2, [r3, #4]
    if(hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002058:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800205c:	2b01      	cmp	r3, #1
 800205e:	4b39      	ldr	r3, [pc, #228]	; (8002144 <I2C_ITError+0x120>)
 8002060:	d031      	beq.n	80020c6 <I2C_ITError+0xa2>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002062:	6503      	str	r3, [r0, #80]	; 0x50
      if(HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002064:	f7ff f998 	bl	8001398 <HAL_DMA_Abort_IT>
 8002068:	b150      	cbz	r0, 8002080 <I2C_ITError+0x5c>
        __HAL_I2C_DISABLE(hi2c);
 800206a:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800206c:	6b60      	ldr	r0, [r4, #52]	; 0x34
        __HAL_I2C_DISABLE(hi2c);
 800206e:	6813      	ldr	r3, [r2, #0]
 8002070:	f023 0301 	bic.w	r3, r3, #1
 8002074:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8002076:	2320      	movs	r3, #32
 8002078:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800207c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800207e:	4798      	blx	r3
  if((hi2c->State == HAL_I2C_STATE_LISTEN) && ((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF))
 8002080:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8002084:	2b28      	cmp	r3, #40	; 0x28
 8002086:	d10e      	bne.n	80020a6 <I2C_ITError+0x82>
 8002088:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800208a:	075b      	lsls	r3, r3, #29
 800208c:	d50b      	bpl.n	80020a6 <I2C_ITError+0x82>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800208e:	4b2e      	ldr	r3, [pc, #184]	; (8002148 <I2C_ITError+0x124>)
 8002090:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002092:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 8002094:	2300      	movs	r3, #0
 8002096:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 8002098:	4620      	mov	r0, r4
    hi2c->State = HAL_I2C_STATE_READY;
 800209a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800209e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 80020a2:	f7ff ffba 	bl	800201a <HAL_I2C_ListenCpltCallback>
 80020a6:	bd10      	pop	{r4, pc}
    if((hi2c->State != HAL_I2C_STATE_ABORT) && ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) != I2C_CR2_DMAEN))
 80020a8:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 80020ac:	2a60      	cmp	r2, #96	; 0x60
 80020ae:	d005      	beq.n	80020bc <I2C_ITError+0x98>
 80020b0:	685a      	ldr	r2, [r3, #4]
 80020b2:	0512      	lsls	r2, r2, #20
      hi2c->State = HAL_I2C_STATE_READY;
 80020b4:	bf5c      	itt	pl
 80020b6:	2220      	movpl	r2, #32
 80020b8:	f880 203d 	strbpl.w	r2, [r0, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 80020bc:	2200      	movs	r2, #0
 80020be:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020c0:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
 80020c4:	e7bb      	b.n	800203e <I2C_ITError+0x1a>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80020c6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80020c8:	6503      	str	r3, [r0, #80]	; 0x50
      if(HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80020ca:	f7ff f965 	bl	8001398 <HAL_DMA_Abort_IT>
 80020ce:	2800      	cmp	r0, #0
 80020d0:	d0d6      	beq.n	8002080 <I2C_ITError+0x5c>
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80020d2:	6822      	ldr	r2, [r4, #0]
 80020d4:	6953      	ldr	r3, [r2, #20]
 80020d6:	0658      	lsls	r0, r3, #25
 80020d8:	d504      	bpl.n	80020e4 <I2C_ITError+0xc0>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80020da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80020dc:	6912      	ldr	r2, [r2, #16]
 80020de:	1c59      	adds	r1, r3, #1
 80020e0:	6261      	str	r1, [r4, #36]	; 0x24
 80020e2:	701a      	strb	r2, [r3, #0]
        __HAL_I2C_DISABLE(hi2c);
 80020e4:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80020e6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        __HAL_I2C_DISABLE(hi2c);
 80020e8:	6813      	ldr	r3, [r2, #0]
 80020ea:	f023 0301 	bic.w	r3, r3, #1
 80020ee:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 80020f0:	2320      	movs	r3, #32
 80020f2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 80020f6:	e7c1      	b.n	800207c <I2C_ITError+0x58>
  else if(hi2c->State == HAL_I2C_STATE_ABORT)
 80020f8:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 80020fc:	2960      	cmp	r1, #96	; 0x60
 80020fe:	d114      	bne.n	800212a <I2C_ITError+0x106>
    hi2c->State = HAL_I2C_STATE_READY;
 8002100:	2120      	movs	r1, #32
 8002102:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002106:	6422      	str	r2, [r4, #64]	; 0x40
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002108:	695a      	ldr	r2, [r3, #20]
 800210a:	0651      	lsls	r1, r2, #25
 800210c:	d504      	bpl.n	8002118 <I2C_ITError+0xf4>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800210e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	1c51      	adds	r1, r2, #1
 8002114:	6261      	str	r1, [r4, #36]	; 0x24
 8002116:	7013      	strb	r3, [r2, #0]
    __HAL_I2C_DISABLE(hi2c);
 8002118:	6822      	ldr	r2, [r4, #0]
 800211a:	6813      	ldr	r3, [r2, #0]
 800211c:	f023 0301 	bic.w	r3, r3, #1
 8002120:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8002122:	4620      	mov	r0, r4
 8002124:	f7ff ff7d 	bl	8002022 <HAL_I2C_AbortCpltCallback>
 8002128:	e7aa      	b.n	8002080 <I2C_ITError+0x5c>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800212a:	695a      	ldr	r2, [r3, #20]
 800212c:	0652      	lsls	r2, r2, #25
 800212e:	d504      	bpl.n	800213a <I2C_ITError+0x116>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002130:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002132:	691b      	ldr	r3, [r3, #16]
 8002134:	1c51      	adds	r1, r2, #1
 8002136:	6261      	str	r1, [r4, #36]	; 0x24
 8002138:	7013      	strb	r3, [r2, #0]
    HAL_I2C_ErrorCallback(hi2c);
 800213a:	4620      	mov	r0, r4
 800213c:	f7ff ff70 	bl	8002020 <HAL_I2C_ErrorCallback>
 8002140:	e79e      	b.n	8002080 <I2C_ITError+0x5c>
 8002142:	bf00      	nop
 8002144:	08002955 	.word	0x08002955
 8002148:	ffff0000 	.word	0xffff0000

0800214c <HAL_I2C_EV_IRQHandler>:
  uint32_t sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800214c:	6803      	ldr	r3, [r0, #0]
{
 800214e:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002150:	699d      	ldr	r5, [r3, #24]
  uint32_t sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002152:	6959      	ldr	r1, [r3, #20]
  uint32_t itsources    = READ_REG(hi2c->Instance->CR2);
 8002154:	685a      	ldr	r2, [r3, #4]
  uint32_t CurrentMode  = hi2c->Mode;
 8002156:	f890 403e 	ldrb.w	r4, [r0, #62]	; 0x3e
 800215a:	b2e4      	uxtb	r4, r4
  if((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800215c:	2c10      	cmp	r4, #16
{
 800215e:	b08d      	sub	sp, #52	; 0x34
  if((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002160:	d002      	beq.n	8002168 <HAL_I2C_EV_IRQHandler+0x1c>
 8002162:	2c40      	cmp	r4, #64	; 0x40
 8002164:	f040 8255 	bne.w	8002612 <HAL_I2C_EV_IRQHandler+0x4c6>
    if(((sr1itflags & I2C_FLAG_SB) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8002168:	f011 1f01 	tst.w	r1, #65537	; 0x10001
 800216c:	d066      	beq.n	800223c <HAL_I2C_EV_IRQHandler+0xf0>
 800216e:	0597      	lsls	r7, r2, #22
 8002170:	d564      	bpl.n	800223c <HAL_I2C_EV_IRQHandler+0xf0>
  if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8002172:	f890 403e 	ldrb.w	r4, [r0, #62]	; 0x3e
 8002176:	2c40      	cmp	r4, #64	; 0x40
 8002178:	d143      	bne.n	8002202 <HAL_I2C_EV_IRQHandler+0xb6>
    if(hi2c->EventCount == 0U)
 800217a:	6d04      	ldr	r4, [r0, #80]	; 0x50
 800217c:	2c00      	cmp	r4, #0
 800217e:	d13b      	bne.n	80021f8 <HAL_I2C_EV_IRQHandler+0xac>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002180:	6c44      	ldr	r4, [r0, #68]	; 0x44
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002182:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002186:	611c      	str	r4, [r3, #16]
    if((sr2itflags & I2C_FLAG_TRA) != RESET)
 8002188:	4e98      	ldr	r6, [pc, #608]	; (80023ec <HAL_I2C_EV_IRQHandler+0x2a0>)
 800218a:	4c99      	ldr	r4, [pc, #612]	; (80023f0 <HAL_I2C_EV_IRQHandler+0x2a4>)
 800218c:	402e      	ands	r6, r5
 800218e:	400c      	ands	r4, r1
 8002190:	2e00      	cmp	r6, #0
 8002192:	f000 819f 	beq.w	80024d4 <HAL_I2C_EV_IRQHandler+0x388>
      if(((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 8002196:	4d97      	ldr	r5, [pc, #604]	; (80023f4 <HAL_I2C_EV_IRQHandler+0x2a8>)
 8002198:	400d      	ands	r5, r1
 800219a:	2d00      	cmp	r5, #0
 800219c:	f000 8166 	beq.w	800246c <HAL_I2C_EV_IRQHandler+0x320>
 80021a0:	0555      	lsls	r5, r2, #21
 80021a2:	f140 8163 	bpl.w	800246c <HAL_I2C_EV_IRQHandler+0x320>
 80021a6:	2c00      	cmp	r4, #0
 80021a8:	f040 8160 	bne.w	800246c <HAL_I2C_EV_IRQHandler+0x320>
  uint32_t CurrentState       = hi2c->State;
 80021ac:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  if((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80021b0:	8d05      	ldrh	r5, [r0, #40]	; 0x28
  uint32_t CurrentMode        = hi2c->Mode;
 80021b2:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80021b6:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  uint32_t CurrentState       = hi2c->State;
 80021b8:	b2d2      	uxtb	r2, r2
  uint32_t CurrentMode        = hi2c->Mode;
 80021ba:	b2c9      	uxtb	r1, r1
  if((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80021bc:	2d00      	cmp	r5, #0
 80021be:	f040 8105 	bne.w	80023cc <HAL_I2C_EV_IRQHandler+0x280>
 80021c2:	2a21      	cmp	r2, #33	; 0x21
 80021c4:	f040 8104 	bne.w	80023d0 <HAL_I2C_EV_IRQHandler+0x284>
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80021c8:	2c04      	cmp	r4, #4
 80021ca:	f000 816c 	beq.w	80024a6 <HAL_I2C_EV_IRQHandler+0x35a>
 80021ce:	2c08      	cmp	r4, #8
 80021d0:	f000 8169 	beq.w	80024a6 <HAL_I2C_EV_IRQHandler+0x35a>
 80021d4:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
 80021d8:	f000 8165 	beq.w	80024a6 <HAL_I2C_EV_IRQHandler+0x35a>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80021dc:	685a      	ldr	r2, [r3, #4]
 80021de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80021e2:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80021e4:	2311      	movs	r3, #17
 80021e6:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80021e8:	f880 503e 	strb.w	r5, [r0, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80021ec:	2320      	movs	r3, #32
 80021ee:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80021f2:	f7ff ff0d 	bl	8002010 <HAL_I2C_MasterTxCpltCallback>
 80021f6:	e0f6      	b.n	80023e6 <HAL_I2C_EV_IRQHandler+0x29a>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80021f8:	6c44      	ldr	r4, [r0, #68]	; 0x44
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80021fa:	f044 0401 	orr.w	r4, r4, #1
 80021fe:	b2e4      	uxtb	r4, r4
 8002200:	e7c1      	b.n	8002186 <HAL_I2C_EV_IRQHandler+0x3a>
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002202:	6904      	ldr	r4, [r0, #16]
 8002204:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
 8002208:	d105      	bne.n	8002216 <HAL_I2C_EV_IRQHandler+0xca>
      if(hi2c->State == HAL_I2C_STATE_BUSY_TX) 
 800220a:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 800220e:	2c21      	cmp	r4, #33	; 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002210:	6c44      	ldr	r4, [r0, #68]	; 0x44
      if(hi2c->State == HAL_I2C_STATE_BUSY_TX) 
 8002212:	d1f2      	bne.n	80021fa <HAL_I2C_EV_IRQHandler+0xae>
 8002214:	e7b5      	b.n	8002182 <HAL_I2C_EV_IRQHandler+0x36>
      if(hi2c->EventCount == 0U)
 8002216:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8002218:	b934      	cbnz	r4, 8002228 <HAL_I2C_EV_IRQHandler+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800221a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800221c:	11e4      	asrs	r4, r4, #7
 800221e:	f004 0406 	and.w	r4, r4, #6
 8002222:	f044 04f0 	orr.w	r4, r4, #240	; 0xf0
 8002226:	e7ae      	b.n	8002186 <HAL_I2C_EV_IRQHandler+0x3a>
      else if(hi2c->EventCount == 1U)
 8002228:	6d04      	ldr	r4, [r0, #80]	; 0x50
 800222a:	2c01      	cmp	r4, #1
 800222c:	d1ac      	bne.n	8002188 <HAL_I2C_EV_IRQHandler+0x3c>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800222e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002230:	11e4      	asrs	r4, r4, #7
 8002232:	f004 0406 	and.w	r4, r4, #6
 8002236:	f044 04f1 	orr.w	r4, r4, #241	; 0xf1
 800223a:	e7a4      	b.n	8002186 <HAL_I2C_EV_IRQHandler+0x3a>
    else if(((sr1itflags & I2C_FLAG_ADD10) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 800223c:	4c6e      	ldr	r4, [pc, #440]	; (80023f8 <HAL_I2C_EV_IRQHandler+0x2ac>)
 800223e:	400c      	ands	r4, r1
 8002240:	b11c      	cbz	r4, 800224a <HAL_I2C_EV_IRQHandler+0xfe>
 8002242:	0596      	lsls	r6, r2, #22
 8002244:	d501      	bpl.n	800224a <HAL_I2C_EV_IRQHandler+0xfe>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002246:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002248:	e7d9      	b.n	80021fe <HAL_I2C_EV_IRQHandler+0xb2>
    else if(((sr1itflags & I2C_FLAG_ADDR) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 800224a:	4c6c      	ldr	r4, [pc, #432]	; (80023fc <HAL_I2C_EV_IRQHandler+0x2b0>)
 800224c:	400c      	ands	r4, r1
 800224e:	2c00      	cmp	r4, #0
 8002250:	d09a      	beq.n	8002188 <HAL_I2C_EV_IRQHandler+0x3c>
 8002252:	0594      	lsls	r4, r2, #22
 8002254:	d598      	bpl.n	8002188 <HAL_I2C_EV_IRQHandler+0x3c>
  uint32_t CurrentMode        = hi2c->Mode;
 8002256:	f890 403e 	ldrb.w	r4, [r0, #62]	; 0x3e
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800225a:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  uint32_t Prev_State         = hi2c->PreviousState;
 800225c:	f8d0 e030 	ldr.w	lr, [r0, #48]	; 0x30
  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002260:	f890 703d 	ldrb.w	r7, [r0, #61]	; 0x3d
 8002264:	2f22      	cmp	r7, #34	; 0x22
  uint32_t CurrentMode        = hi2c->Mode;
 8002266:	b2e4      	uxtb	r4, r4
  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002268:	f040 80a8 	bne.w	80023bc <HAL_I2C_EV_IRQHandler+0x270>
    if((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800226c:	6d07      	ldr	r7, [r0, #80]	; 0x50
 800226e:	b947      	cbnz	r7, 8002282 <HAL_I2C_EV_IRQHandler+0x136>
 8002270:	2c40      	cmp	r4, #64	; 0x40
 8002272:	d106      	bne.n	8002282 <HAL_I2C_EV_IRQHandler+0x136>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002274:	9701      	str	r7, [sp, #4]
 8002276:	695c      	ldr	r4, [r3, #20]
 8002278:	9401      	str	r4, [sp, #4]
 800227a:	699c      	ldr	r4, [r3, #24]
 800227c:	9401      	str	r4, [sp, #4]
 800227e:	9c01      	ldr	r4, [sp, #4]
 8002280:	e782      	b.n	8002188 <HAL_I2C_EV_IRQHandler+0x3c>
    else if((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002282:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8002284:	b98c      	cbnz	r4, 80022aa <HAL_I2C_EV_IRQHandler+0x15e>
 8002286:	6907      	ldr	r7, [r0, #16]
 8002288:	f5b7 4f40 	cmp.w	r7, #49152	; 0xc000
 800228c:	d10d      	bne.n	80022aa <HAL_I2C_EV_IRQHandler+0x15e>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800228e:	9402      	str	r4, [sp, #8]
 8002290:	695c      	ldr	r4, [r3, #20]
 8002292:	9402      	str	r4, [sp, #8]
 8002294:	699c      	ldr	r4, [r3, #24]
 8002296:	9402      	str	r4, [sp, #8]
 8002298:	9c02      	ldr	r4, [sp, #8]
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800229a:	681c      	ldr	r4, [r3, #0]
 800229c:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 80022a0:	601c      	str	r4, [r3, #0]
      hi2c->EventCount++;
 80022a2:	6d04      	ldr	r4, [r0, #80]	; 0x50
 80022a4:	3401      	adds	r4, #1
      hi2c->EventCount = 0U;
 80022a6:	6504      	str	r4, [r0, #80]	; 0x50
 80022a8:	e76e      	b.n	8002188 <HAL_I2C_EV_IRQHandler+0x3c>
      if(hi2c->XferCount == 0U)
 80022aa:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 80022ac:	b2a4      	uxth	r4, r4
 80022ae:	b954      	cbnz	r4, 80022c6 <HAL_I2C_EV_IRQHandler+0x17a>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022b0:	9403      	str	r4, [sp, #12]
 80022b2:	695c      	ldr	r4, [r3, #20]
 80022b4:	9403      	str	r4, [sp, #12]
 80022b6:	699c      	ldr	r4, [r3, #24]
 80022b8:	9403      	str	r4, [sp, #12]
 80022ba:	9c03      	ldr	r4, [sp, #12]
            hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80022bc:	681c      	ldr	r4, [r3, #0]
 80022be:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 80022c2:	601c      	str	r4, [r3, #0]
 80022c4:	e019      	b.n	80022fa <HAL_I2C_EV_IRQHandler+0x1ae>
      else if(hi2c->XferCount == 1U)   
 80022c6:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 80022c8:	b2a4      	uxth	r4, r4
 80022ca:	2c01      	cmp	r4, #1
 80022cc:	d142      	bne.n	8002354 <HAL_I2C_EV_IRQHandler+0x208>
        if(CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80022ce:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
 80022d2:	d11b      	bne.n	800230c <HAL_I2C_EV_IRQHandler+0x1c0>
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80022d4:	681c      	ldr	r4, [r3, #0]
 80022d6:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 80022da:	601c      	str	r4, [r3, #0]
          if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80022dc:	685c      	ldr	r4, [r3, #4]
 80022de:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
 80022e2:	d00c      	beq.n	80022fe <HAL_I2C_EV_IRQHandler+0x1b2>
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80022e4:	681c      	ldr	r4, [r3, #0]
 80022e6:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 80022ea:	601c      	str	r4, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022ec:	2400      	movs	r4, #0
 80022ee:	9404      	str	r4, [sp, #16]
 80022f0:	695c      	ldr	r4, [r3, #20]
 80022f2:	9404      	str	r4, [sp, #16]
 80022f4:	699c      	ldr	r4, [r3, #24]
 80022f6:	9404      	str	r4, [sp, #16]
 80022f8:	9c04      	ldr	r4, [sp, #16]
      hi2c->EventCount = 0U;
 80022fa:	2400      	movs	r4, #0
 80022fc:	e7d3      	b.n	80022a6 <HAL_I2C_EV_IRQHandler+0x15a>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022fe:	9405      	str	r4, [sp, #20]
 8002300:	695c      	ldr	r4, [r3, #20]
 8002302:	9405      	str	r4, [sp, #20]
 8002304:	699c      	ldr	r4, [r3, #24]
 8002306:	9405      	str	r4, [sp, #20]
 8002308:	9c05      	ldr	r4, [sp, #20]
 800230a:	e7d7      	b.n	80022bc <HAL_I2C_EV_IRQHandler+0x170>
        else if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800230c:	2e04      	cmp	r6, #4
 800230e:	d015      	beq.n	800233c <HAL_I2C_EV_IRQHandler+0x1f0>
 8002310:	2e08      	cmp	r6, #8
 8002312:	d013      	beq.n	800233c <HAL_I2C_EV_IRQHandler+0x1f0>
          && (Prev_State != I2C_STATE_MASTER_BUSY_RX))
 8002314:	f1be 0f12 	cmp.w	lr, #18
 8002318:	d010      	beq.n	800233c <HAL_I2C_EV_IRQHandler+0x1f0>
          if(hi2c->XferOptions != I2C_NEXT_FRAME)
 800231a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800231c:	2c02      	cmp	r4, #2
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800231e:	681c      	ldr	r4, [r3, #0]
 8002320:	bf14      	ite	ne
 8002322:	f424 6480 	bicne.w	r4, r4, #1024	; 0x400
            hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8002326:	f444 6480 	orreq.w	r4, r4, #1024	; 0x400
 800232a:	601c      	str	r4, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800232c:	2400      	movs	r4, #0
 800232e:	9406      	str	r4, [sp, #24]
 8002330:	695c      	ldr	r4, [r3, #20]
 8002332:	9406      	str	r4, [sp, #24]
 8002334:	699c      	ldr	r4, [r3, #24]
 8002336:	9406      	str	r4, [sp, #24]
 8002338:	9c06      	ldr	r4, [sp, #24]
 800233a:	e7de      	b.n	80022fa <HAL_I2C_EV_IRQHandler+0x1ae>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800233c:	681c      	ldr	r4, [r3, #0]
 800233e:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8002342:	601c      	str	r4, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002344:	2400      	movs	r4, #0
 8002346:	9407      	str	r4, [sp, #28]
 8002348:	695c      	ldr	r4, [r3, #20]
 800234a:	9407      	str	r4, [sp, #28]
 800234c:	699c      	ldr	r4, [r3, #24]
 800234e:	9407      	str	r4, [sp, #28]
 8002350:	9c07      	ldr	r4, [sp, #28]
 8002352:	e7b3      	b.n	80022bc <HAL_I2C_EV_IRQHandler+0x170>
      else if(hi2c->XferCount == 2U)
 8002354:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 8002356:	b2a4      	uxth	r4, r4
 8002358:	2c02      	cmp	r4, #2
 800235a:	d11c      	bne.n	8002396 <HAL_I2C_EV_IRQHandler+0x24a>
        if(hi2c->XferOptions != I2C_NEXT_FRAME)
 800235c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800235e:	2c02      	cmp	r4, #2
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002360:	681c      	ldr	r4, [r3, #0]
 8002362:	bf1d      	ittte	ne
 8002364:	f424 6480 	bicne.w	r4, r4, #1024	; 0x400
 8002368:	601c      	strne	r4, [r3, #0]
          hi2c->Instance->CR1 |= I2C_CR1_POS;
 800236a:	681c      	ldrne	r4, [r3, #0]
          hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800236c:	f444 6480 	orreq.w	r4, r4, #1024	; 0x400
          hi2c->Instance->CR1 |= I2C_CR1_POS;
 8002370:	bf18      	it	ne
 8002372:	f444 6400 	orrne.w	r4, r4, #2048	; 0x800
          hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8002376:	601c      	str	r4, [r3, #0]
        if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002378:	685c      	ldr	r4, [r3, #4]
 800237a:	0527      	lsls	r7, r4, #20
          hi2c->Instance->CR2 |= I2C_CR2_LAST;
 800237c:	bf42      	ittt	mi
 800237e:	685c      	ldrmi	r4, [r3, #4]
 8002380:	f444 5480 	orrmi.w	r4, r4, #4096	; 0x1000
 8002384:	605c      	strmi	r4, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002386:	2400      	movs	r4, #0
 8002388:	9408      	str	r4, [sp, #32]
 800238a:	695c      	ldr	r4, [r3, #20]
 800238c:	9408      	str	r4, [sp, #32]
 800238e:	699c      	ldr	r4, [r3, #24]
 8002390:	9408      	str	r4, [sp, #32]
 8002392:	9c08      	ldr	r4, [sp, #32]
 8002394:	e7b1      	b.n	80022fa <HAL_I2C_EV_IRQHandler+0x1ae>
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8002396:	681c      	ldr	r4, [r3, #0]
 8002398:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 800239c:	601c      	str	r4, [r3, #0]
        if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800239e:	685c      	ldr	r4, [r3, #4]
 80023a0:	0526      	lsls	r6, r4, #20
          hi2c->Instance->CR2 |= I2C_CR2_LAST;
 80023a2:	bf42      	ittt	mi
 80023a4:	685c      	ldrmi	r4, [r3, #4]
 80023a6:	f444 5480 	orrmi.w	r4, r4, #4096	; 0x1000
 80023aa:	605c      	strmi	r4, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023ac:	2400      	movs	r4, #0
 80023ae:	9409      	str	r4, [sp, #36]	; 0x24
 80023b0:	695c      	ldr	r4, [r3, #20]
 80023b2:	9409      	str	r4, [sp, #36]	; 0x24
 80023b4:	699c      	ldr	r4, [r3, #24]
 80023b6:	9409      	str	r4, [sp, #36]	; 0x24
 80023b8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80023ba:	e79e      	b.n	80022fa <HAL_I2C_EV_IRQHandler+0x1ae>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023bc:	2400      	movs	r4, #0
 80023be:	940a      	str	r4, [sp, #40]	; 0x28
 80023c0:	695c      	ldr	r4, [r3, #20]
 80023c2:	940a      	str	r4, [sp, #40]	; 0x28
 80023c4:	699c      	ldr	r4, [r3, #24]
 80023c6:	940a      	str	r4, [sp, #40]	; 0x28
 80023c8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80023ca:	e6dd      	b.n	8002188 <HAL_I2C_EV_IRQHandler+0x3c>
  else if((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80023cc:	2a21      	cmp	r2, #33	; 0x21
 80023ce:	d003      	beq.n	80023d8 <HAL_I2C_EV_IRQHandler+0x28c>
 80023d0:	2940      	cmp	r1, #64	; 0x40
 80023d2:	d108      	bne.n	80023e6 <HAL_I2C_EV_IRQHandler+0x29a>
    ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80023d4:	2a22      	cmp	r2, #34	; 0x22
 80023d6:	d106      	bne.n	80023e6 <HAL_I2C_EV_IRQHandler+0x29a>
    if(hi2c->XferCount == 0U)
 80023d8:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80023da:	b292      	uxth	r2, r2
 80023dc:	b982      	cbnz	r2, 8002400 <HAL_I2C_EV_IRQHandler+0x2b4>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80023de:	685a      	ldr	r2, [r3, #4]
 80023e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023e4:	605a      	str	r2, [r3, #4]
}
 80023e6:	b00d      	add	sp, #52	; 0x34
 80023e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023ea:	bf00      	nop
 80023ec:	00100004 	.word	0x00100004
 80023f0:	00010004 	.word	0x00010004
 80023f4:	00010080 	.word	0x00010080
 80023f8:	00010008 	.word	0x00010008
 80023fc:	00010002 	.word	0x00010002
      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8002400:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8002404:	2a40      	cmp	r2, #64	; 0x40
 8002406:	d127      	bne.n	8002458 <HAL_I2C_EV_IRQHandler+0x30c>
        if(hi2c->EventCount == 0)
 8002408:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800240a:	b97a      	cbnz	r2, 800242c <HAL_I2C_EV_IRQHandler+0x2e0>
          if(hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800240c:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800240e:	2a01      	cmp	r2, #1
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002410:	6c82      	ldr	r2, [r0, #72]	; 0x48
          if(hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002412:	d105      	bne.n	8002420 <HAL_I2C_EV_IRQHandler+0x2d4>
 8002414:	b2d2      	uxtb	r2, r2
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002416:	611a      	str	r2, [r3, #16]
            hi2c->EventCount += 2;
 8002418:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800241a:	3302      	adds	r3, #2
            hi2c->EventCount++;
 800241c:	6503      	str	r3, [r0, #80]	; 0x50
 800241e:	e7e2      	b.n	80023e6 <HAL_I2C_EV_IRQHandler+0x29a>
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002420:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002424:	611a      	str	r2, [r3, #16]
            hi2c->EventCount++;
 8002426:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002428:	3301      	adds	r3, #1
 800242a:	e7f7      	b.n	800241c <HAL_I2C_EV_IRQHandler+0x2d0>
        else if(hi2c->EventCount == 1)
 800242c:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800242e:	2a01      	cmp	r2, #1
 8002430:	d102      	bne.n	8002438 <HAL_I2C_EV_IRQHandler+0x2ec>
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002432:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8002434:	b2d2      	uxtb	r2, r2
 8002436:	e7f5      	b.n	8002424 <HAL_I2C_EV_IRQHandler+0x2d8>
        else if(hi2c->EventCount == 2)
 8002438:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800243a:	2a02      	cmp	r2, #2
 800243c:	d1d3      	bne.n	80023e6 <HAL_I2C_EV_IRQHandler+0x29a>
          if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800243e:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8002442:	2a22      	cmp	r2, #34	; 0x22
 8002444:	d104      	bne.n	8002450 <HAL_I2C_EV_IRQHandler+0x304>
            hi2c->Instance->CR1 |= I2C_CR1_START;
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800244c:	601a      	str	r2, [r3, #0]
 800244e:	e7ca      	b.n	80023e6 <HAL_I2C_EV_IRQHandler+0x29a>
          else if(hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002450:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8002454:	2a21      	cmp	r2, #33	; 0x21
 8002456:	d1c6      	bne.n	80023e6 <HAL_I2C_EV_IRQHandler+0x29a>
    hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8002458:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800245a:	1c51      	adds	r1, r2, #1
 800245c:	6241      	str	r1, [r0, #36]	; 0x24
 800245e:	7812      	ldrb	r2, [r2, #0]
 8002460:	611a      	str	r2, [r3, #16]
    hi2c->XferCount--;
 8002462:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002464:	3b01      	subs	r3, #1
 8002466:	b29b      	uxth	r3, r3
 8002468:	8543      	strh	r3, [r0, #42]	; 0x2a
}
 800246a:	e7bc      	b.n	80023e6 <HAL_I2C_EV_IRQHandler+0x29a>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 800246c:	2c00      	cmp	r4, #0
 800246e:	d0ba      	beq.n	80023e6 <HAL_I2C_EV_IRQHandler+0x29a>
 8002470:	0594      	lsls	r4, r2, #22
 8002472:	d5b8      	bpl.n	80023e6 <HAL_I2C_EV_IRQHandler+0x29a>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002474:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  if(hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002476:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 800247a:	2a21      	cmp	r2, #33	; 0x21
 800247c:	d1b3      	bne.n	80023e6 <HAL_I2C_EV_IRQHandler+0x29a>
    if(hi2c->XferCount != 0U)
 800247e:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8002480:	b292      	uxth	r2, r2
 8002482:	2a00      	cmp	r2, #0
 8002484:	d1e8      	bne.n	8002458 <HAL_I2C_EV_IRQHandler+0x30c>
      if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002486:	2904      	cmp	r1, #4
 8002488:	d00d      	beq.n	80024a6 <HAL_I2C_EV_IRQHandler+0x35a>
 800248a:	2908      	cmp	r1, #8
 800248c:	d00b      	beq.n	80024a6 <HAL_I2C_EV_IRQHandler+0x35a>
 800248e:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8002492:	d008      	beq.n	80024a6 <HAL_I2C_EV_IRQHandler+0x35a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002494:	6859      	ldr	r1, [r3, #4]
 8002496:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 800249a:	6059      	str	r1, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800249c:	2311      	movs	r3, #17
 800249e:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024a0:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
 80024a4:	e6a2      	b.n	80021ec <HAL_I2C_EV_IRQHandler+0xa0>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80024a6:	685a      	ldr	r2, [r3, #4]
 80024a8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80024ac:	605a      	str	r2, [r3, #4]
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024b4:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80024b6:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 80024b8:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80024ba:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80024bc:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
        if(hi2c->Mode == HAL_I2C_MODE_MEM)
 80024c0:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80024c4:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        if(hi2c->Mode == HAL_I2C_MODE_MEM)
 80024c8:	2a40      	cmp	r2, #64	; 0x40
 80024ca:	f47f ae92 	bne.w	80021f2 <HAL_I2C_EV_IRQHandler+0xa6>
          HAL_I2C_MemTxCpltCallback(hi2c);
 80024ce:	f7ff fda5 	bl	800201c <HAL_I2C_MemTxCpltCallback>
 80024d2:	e788      	b.n	80023e6 <HAL_I2C_EV_IRQHandler+0x29a>
      if(((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 80024d4:	4d90      	ldr	r5, [pc, #576]	; (8002718 <HAL_I2C_EV_IRQHandler+0x5cc>)
 80024d6:	400d      	ands	r5, r1
 80024d8:	2d00      	cmp	r5, #0
 80024da:	d041      	beq.n	8002560 <HAL_I2C_EV_IRQHandler+0x414>
 80024dc:	0551      	lsls	r1, r2, #21
 80024de:	d53f      	bpl.n	8002560 <HAL_I2C_EV_IRQHandler+0x414>
 80024e0:	2c00      	cmp	r4, #0
 80024e2:	d13d      	bne.n	8002560 <HAL_I2C_EV_IRQHandler+0x414>
  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80024e4:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 80024e8:	2a22      	cmp	r2, #34	; 0x22
 80024ea:	f47f af7c 	bne.w	80023e6 <HAL_I2C_EV_IRQHandler+0x29a>
    tmp = hi2c->XferCount;
 80024ee:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80024f0:	b292      	uxth	r2, r2
    if(tmp > 3U)
 80024f2:	2a03      	cmp	r2, #3
 80024f4:	d913      	bls.n	800251e <HAL_I2C_EV_IRQHandler+0x3d2>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80024f6:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	1c51      	adds	r1, r2, #1
 80024fc:	6241      	str	r1, [r0, #36]	; 0x24
 80024fe:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 8002500:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002502:	3b01      	subs	r3, #1
 8002504:	b29b      	uxth	r3, r3
 8002506:	8543      	strh	r3, [r0, #42]	; 0x2a
      if(hi2c->XferCount == 3)
 8002508:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800250a:	b29b      	uxth	r3, r3
 800250c:	2b03      	cmp	r3, #3
 800250e:	f47f af6a 	bne.w	80023e6 <HAL_I2C_EV_IRQHandler+0x29a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002512:	6802      	ldr	r2, [r0, #0]
 8002514:	6853      	ldr	r3, [r2, #4]
 8002516:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800251a:	6053      	str	r3, [r2, #4]
 800251c:	e763      	b.n	80023e6 <HAL_I2C_EV_IRQHandler+0x29a>
    else if((tmp == 1U) || (tmp == 0U))
 800251e:	2a01      	cmp	r2, #1
 8002520:	f63f af61 	bhi.w	80023e6 <HAL_I2C_EV_IRQHandler+0x29a>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800252a:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800252c:	685a      	ldr	r2, [r3, #4]
 800252e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002532:	605a      	str	r2, [r3, #4]
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002534:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8002536:	691b      	ldr	r3, [r3, #16]
 8002538:	1c51      	adds	r1, r2, #1
 800253a:	6241      	str	r1, [r0, #36]	; 0x24
 800253c:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 800253e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002540:	3b01      	subs	r3, #1
 8002542:	b29b      	uxth	r3, r3
 8002544:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8002546:	2320      	movs	r3, #32
 8002548:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      hi2c->PreviousState = I2C_STATE_NONE;
 800254c:	6304      	str	r4, [r0, #48]	; 0x30
      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 800254e:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002552:	f880 403e 	strb.w	r4, [r0, #62]	; 0x3e
      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8002556:	2b40      	cmp	r3, #64	; 0x40
    if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8002558:	d158      	bne.n	800260c <HAL_I2C_EV_IRQHandler+0x4c0>
      HAL_I2C_MemRxCpltCallback(hi2c);
 800255a:	f7ff fd60 	bl	800201e <HAL_I2C_MemRxCpltCallback>
 800255e:	e742      	b.n	80023e6 <HAL_I2C_EV_IRQHandler+0x29a>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8002560:	2c00      	cmp	r4, #0
 8002562:	f43f af40 	beq.w	80023e6 <HAL_I2C_EV_IRQHandler+0x29a>
 8002566:	0597      	lsls	r7, r2, #22
 8002568:	f57f af3d 	bpl.w	80023e6 <HAL_I2C_EV_IRQHandler+0x29a>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800256c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  if(hi2c->XferCount == 4U)
 800256e:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8002570:	b292      	uxth	r2, r2
 8002572:	2a04      	cmp	r2, #4
 8002574:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8002576:	d108      	bne.n	800258a <HAL_I2C_EV_IRQHandler+0x43e>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002578:	6859      	ldr	r1, [r3, #4]
 800257a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800257e:	6059      	str	r1, [r3, #4]
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002580:	1c51      	adds	r1, r2, #1
 8002582:	691b      	ldr	r3, [r3, #16]
 8002584:	6241      	str	r1, [r0, #36]	; 0x24
 8002586:	7013      	strb	r3, [r2, #0]
 8002588:	e76b      	b.n	8002462 <HAL_I2C_EV_IRQHandler+0x316>
  else if(hi2c->XferCount == 3U)
 800258a:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 800258c:	b2a4      	uxth	r4, r4
 800258e:	2c03      	cmp	r4, #3
 8002590:	d108      	bne.n	80025a4 <HAL_I2C_EV_IRQHandler+0x458>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002592:	6859      	ldr	r1, [r3, #4]
 8002594:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8002598:	6059      	str	r1, [r3, #4]
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800259a:	6819      	ldr	r1, [r3, #0]
 800259c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80025a0:	6019      	str	r1, [r3, #0]
 80025a2:	e7ed      	b.n	8002580 <HAL_I2C_EV_IRQHandler+0x434>
  else if(hi2c->XferCount == 2U)
 80025a4:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 80025a6:	b2a4      	uxth	r4, r4
 80025a8:	2c02      	cmp	r4, #2
 80025aa:	d1e9      	bne.n	8002580 <HAL_I2C_EV_IRQHandler+0x434>
    if((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME))
 80025ac:	3901      	subs	r1, #1
 80025ae:	2901      	cmp	r1, #1
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80025b0:	6819      	ldr	r1, [r3, #0]
 80025b2:	bf9d      	ittte	ls
 80025b4:	f421 6180 	bicls.w	r1, r1, #1024	; 0x400
 80025b8:	6019      	strls	r1, [r3, #0]
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80025ba:	6819      	ldrls	r1, [r3, #0]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80025bc:	f441 7100 	orrhi.w	r1, r1, #512	; 0x200
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80025c0:	bf98      	it	ls
 80025c2:	f441 7180 	orrls.w	r1, r1, #256	; 0x100
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80025c6:	6019      	str	r1, [r3, #0]
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	1c51      	adds	r1, r2, #1
 80025cc:	6241      	str	r1, [r0, #36]	; 0x24
 80025ce:	7013      	strb	r3, [r2, #0]
    hi2c->XferCount--;
 80025d0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80025d2:	3b01      	subs	r3, #1
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	8543      	strh	r3, [r0, #42]	; 0x2a
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80025d8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80025da:	1c5a      	adds	r2, r3, #1
 80025dc:	6242      	str	r2, [r0, #36]	; 0x24
 80025de:	6802      	ldr	r2, [r0, #0]
 80025e0:	6912      	ldr	r2, [r2, #16]
 80025e2:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 80025e4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80025e6:	6802      	ldr	r2, [r0, #0]
    hi2c->XferCount--;
 80025e8:	3b01      	subs	r3, #1
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	8543      	strh	r3, [r0, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80025ee:	6853      	ldr	r3, [r2, #4]
 80025f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025f4:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80025f6:	2320      	movs	r3, #32
 80025f8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 80025fc:	2300      	movs	r3, #0
 80025fe:	6303      	str	r3, [r0, #48]	; 0x30
    if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8002600:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002604:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8002608:	2a40      	cmp	r2, #64	; 0x40
 800260a:	e7a5      	b.n	8002558 <HAL_I2C_EV_IRQHandler+0x40c>
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800260c:	f7ff fd01 	bl	8002012 <HAL_I2C_MasterRxCpltCallback>
 8002610:	e6e9      	b.n	80023e6 <HAL_I2C_EV_IRQHandler+0x29a>
    if(((sr1itflags & I2C_FLAG_ADDR) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8002612:	4c42      	ldr	r4, [pc, #264]	; (800271c <HAL_I2C_EV_IRQHandler+0x5d0>)
 8002614:	400c      	ands	r4, r1
 8002616:	b174      	cbz	r4, 8002636 <HAL_I2C_EV_IRQHandler+0x4ea>
 8002618:	0596      	lsls	r6, r2, #22
 800261a:	d50c      	bpl.n	8002636 <HAL_I2C_EV_IRQHandler+0x4ea>
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TRA) == RESET)
 800261c:	6999      	ldr	r1, [r3, #24]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_DUALF) == RESET)
 800261e:	699b      	ldr	r3, [r3, #24]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TRA) == RESET)
 8002620:	f081 0104 	eor.w	r1, r1, #4
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_DUALF) == RESET)
 8002624:	061d      	lsls	r5, r3, #24
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002626:	f3c1 0180 	ubfx	r1, r1, #2, #1
    SlaveAddrCode = hi2c->Init.OwnAddress1;
 800262a:	bf54      	ite	pl
 800262c:	8982      	ldrhpl	r2, [r0, #12]
    SlaveAddrCode = hi2c->Init.OwnAddress2;
 800262e:	8b02      	ldrhmi	r2, [r0, #24]
  HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002630:	f7ff fcf2 	bl	8002018 <HAL_I2C_AddrCallback>
 8002634:	e6d7      	b.n	80023e6 <HAL_I2C_EV_IRQHandler+0x29a>
    else if(((sr1itflags & I2C_FLAG_STOPF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8002636:	4c3a      	ldr	r4, [pc, #232]	; (8002720 <HAL_I2C_EV_IRQHandler+0x5d4>)
 8002638:	400c      	ands	r4, r1
 800263a:	2c00      	cmp	r4, #0
 800263c:	d074      	beq.n	8002728 <HAL_I2C_EV_IRQHandler+0x5dc>
 800263e:	0594      	lsls	r4, r2, #22
 8002640:	d572      	bpl.n	8002728 <HAL_I2C_EV_IRQHandler+0x5dc>
  uint32_t CurrentState = hi2c->State;
 8002642:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002646:	6859      	ldr	r1, [r3, #4]
 8002648:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 800264c:	6059      	str	r1, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800264e:	2100      	movs	r1, #0
 8002650:	910b      	str	r1, [sp, #44]	; 0x2c
 8002652:	6959      	ldr	r1, [r3, #20]
 8002654:	910b      	str	r1, [sp, #44]	; 0x2c
 8002656:	6819      	ldr	r1, [r3, #0]
 8002658:	f041 0101 	orr.w	r1, r1, #1
 800265c:	6019      	str	r1, [r3, #0]
 800265e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002660:	6819      	ldr	r1, [r3, #0]
 8002662:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8002666:	6019      	str	r1, [r3, #0]
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002668:	6859      	ldr	r1, [r3, #4]
 800266a:	0509      	lsls	r1, r1, #20
  uint32_t CurrentState = hi2c->State;
 800266c:	b2d2      	uxtb	r2, r2
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800266e:	d50c      	bpl.n	800268a <HAL_I2C_EV_IRQHandler+0x53e>
    if((hi2c->State == HAL_I2C_STATE_BUSY_RX) || (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002670:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 8002674:	2922      	cmp	r1, #34	; 0x22
 8002676:	d003      	beq.n	8002680 <HAL_I2C_EV_IRQHandler+0x534>
 8002678:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 800267c:	292a      	cmp	r1, #42	; 0x2a
 800267e:	d129      	bne.n	80026d4 <HAL_I2C_EV_IRQHandler+0x588>
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8002680:	6b81      	ldr	r1, [r0, #56]	; 0x38
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8002682:	6809      	ldr	r1, [r1, #0]
 8002684:	6849      	ldr	r1, [r1, #4]
 8002686:	b289      	uxth	r1, r1
 8002688:	8541      	strh	r1, [r0, #42]	; 0x2a
  if(hi2c->XferCount != 0U)
 800268a:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 800268c:	b289      	uxth	r1, r1
 800268e:	b1e1      	cbz	r1, 80026ca <HAL_I2C_EV_IRQHandler+0x57e>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002690:	6959      	ldr	r1, [r3, #20]
 8002692:	074f      	lsls	r7, r1, #29
 8002694:	d508      	bpl.n	80026a8 <HAL_I2C_EV_IRQHandler+0x55c>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002696:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	1c4c      	adds	r4, r1, #1
 800269c:	6244      	str	r4, [r0, #36]	; 0x24
 800269e:	700b      	strb	r3, [r1, #0]
      hi2c->XferCount--;
 80026a0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80026a2:	3b01      	subs	r3, #1
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	8543      	strh	r3, [r0, #42]	; 0x2a
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80026a8:	6801      	ldr	r1, [r0, #0]
 80026aa:	694b      	ldr	r3, [r1, #20]
 80026ac:	065e      	lsls	r6, r3, #25
 80026ae:	d508      	bpl.n	80026c2 <HAL_I2C_EV_IRQHandler+0x576>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80026b0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80026b2:	6909      	ldr	r1, [r1, #16]
 80026b4:	1c5c      	adds	r4, r3, #1
 80026b6:	6244      	str	r4, [r0, #36]	; 0x24
 80026b8:	7019      	strb	r1, [r3, #0]
      hi2c->XferCount--;
 80026ba:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80026bc:	3b01      	subs	r3, #1
 80026be:	b29b      	uxth	r3, r3
 80026c0:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80026c2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80026c4:	f043 0304 	orr.w	r3, r3, #4
 80026c8:	6403      	str	r3, [r0, #64]	; 0x40
  if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80026ca:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80026cc:	b123      	cbz	r3, 80026d8 <HAL_I2C_EV_IRQHandler+0x58c>
    I2C_ITError(hi2c);
 80026ce:	f7ff fca9 	bl	8002024 <I2C_ITError>
 80026d2:	e688      	b.n	80023e6 <HAL_I2C_EV_IRQHandler+0x29a>
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80026d4:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80026d6:	e7d4      	b.n	8002682 <HAL_I2C_EV_IRQHandler+0x536>
    if((CurrentState == HAL_I2C_STATE_LISTEN ) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN) || \
 80026d8:	f1a2 0128 	sub.w	r1, r2, #40	; 0x28
 80026dc:	2902      	cmp	r1, #2
 80026de:	d80a      	bhi.n	80026f6 <HAL_I2C_EV_IRQHandler+0x5aa>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026e0:	4a10      	ldr	r2, [pc, #64]	; (8002724 <HAL_I2C_EV_IRQHandler+0x5d8>)
 80026e2:	62c2      	str	r2, [r0, #44]	; 0x2c
      hi2c->State = HAL_I2C_STATE_READY;
 80026e4:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 80026e6:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80026e8:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80026ec:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80026f0:	f7ff fc93 	bl	800201a <HAL_I2C_ListenCpltCallback>
 80026f4:	e677      	b.n	80023e6 <HAL_I2C_EV_IRQHandler+0x29a>
      if((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80026f6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80026f8:	2b22      	cmp	r3, #34	; 0x22
 80026fa:	d002      	beq.n	8002702 <HAL_I2C_EV_IRQHandler+0x5b6>
 80026fc:	2a22      	cmp	r2, #34	; 0x22
 80026fe:	f47f ae72 	bne.w	80023e6 <HAL_I2C_EV_IRQHandler+0x29a>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002702:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8002704:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8002706:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002708:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800270c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002710:	f7ff fc81 	bl	8002016 <HAL_I2C_SlaveRxCpltCallback>
 8002714:	e667      	b.n	80023e6 <HAL_I2C_EV_IRQHandler+0x29a>
 8002716:	bf00      	nop
 8002718:	00010040 	.word	0x00010040
 800271c:	00010002 	.word	0x00010002
 8002720:	00010010 	.word	0x00010010
 8002724:	ffff0000 	.word	0xffff0000
    else if((sr2itflags & I2C_FLAG_TRA) != RESET)
 8002728:	4e39      	ldr	r6, [pc, #228]	; (8002810 <HAL_I2C_EV_IRQHandler+0x6c4>)
 800272a:	4c3a      	ldr	r4, [pc, #232]	; (8002814 <HAL_I2C_EV_IRQHandler+0x6c8>)
 800272c:	402e      	ands	r6, r5
 800272e:	400c      	ands	r4, r1
 8002730:	2e00      	cmp	r6, #0
 8002732:	d036      	beq.n	80027a2 <HAL_I2C_EV_IRQHandler+0x656>
      if(((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 8002734:	4d38      	ldr	r5, [pc, #224]	; (8002818 <HAL_I2C_EV_IRQHandler+0x6cc>)
 8002736:	400d      	ands	r5, r1
 8002738:	b33d      	cbz	r5, 800278a <HAL_I2C_EV_IRQHandler+0x63e>
 800273a:	0555      	lsls	r5, r2, #21
 800273c:	d525      	bpl.n	800278a <HAL_I2C_EV_IRQHandler+0x63e>
 800273e:	bb24      	cbnz	r4, 800278a <HAL_I2C_EV_IRQHandler+0x63e>
  uint32_t CurrentState = hi2c->State;
 8002740:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
  if(hi2c->XferCount != 0U)
 8002744:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8002746:	b292      	uxth	r2, r2
  uint32_t CurrentState = hi2c->State;
 8002748:	b2c9      	uxtb	r1, r1
  if(hi2c->XferCount != 0U)
 800274a:	2a00      	cmp	r2, #0
 800274c:	f43f ae4b 	beq.w	80023e6 <HAL_I2C_EV_IRQHandler+0x29a>
    hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8002750:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8002752:	1c54      	adds	r4, r2, #1
 8002754:	6244      	str	r4, [r0, #36]	; 0x24
 8002756:	7812      	ldrb	r2, [r2, #0]
 8002758:	611a      	str	r2, [r3, #16]
    hi2c->XferCount--;
 800275a:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 800275c:	3a01      	subs	r2, #1
 800275e:	b292      	uxth	r2, r2
 8002760:	8542      	strh	r2, [r0, #42]	; 0x2a
    if((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002762:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8002764:	b292      	uxth	r2, r2
 8002766:	2a00      	cmp	r2, #0
 8002768:	f47f ae3d 	bne.w	80023e6 <HAL_I2C_EV_IRQHandler+0x29a>
 800276c:	2929      	cmp	r1, #41	; 0x29
 800276e:	f47f ae3a 	bne.w	80023e6 <HAL_I2C_EV_IRQHandler+0x29a>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002772:	685a      	ldr	r2, [r3, #4]
 8002774:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002778:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800277a:	2321      	movs	r3, #33	; 0x21
 800277c:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800277e:	2328      	movs	r3, #40	; 0x28
 8002780:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002784:	f7ff fc46 	bl	8002014 <HAL_I2C_SlaveTxCpltCallback>
 8002788:	e62d      	b.n	80023e6 <HAL_I2C_EV_IRQHandler+0x29a>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 800278a:	2c00      	cmp	r4, #0
 800278c:	f43f ae2b 	beq.w	80023e6 <HAL_I2C_EV_IRQHandler+0x29a>
 8002790:	0594      	lsls	r4, r2, #22
 8002792:	f57f ae28 	bpl.w	80023e6 <HAL_I2C_EV_IRQHandler+0x29a>
  if(hi2c->XferCount != 0U)
 8002796:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8002798:	b292      	uxth	r2, r2
 800279a:	2a00      	cmp	r2, #0
 800279c:	f47f ae5c 	bne.w	8002458 <HAL_I2C_EV_IRQHandler+0x30c>
 80027a0:	e621      	b.n	80023e6 <HAL_I2C_EV_IRQHandler+0x29a>
      if(((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 80027a2:	4d1e      	ldr	r5, [pc, #120]	; (800281c <HAL_I2C_EV_IRQHandler+0x6d0>)
 80027a4:	400d      	ands	r5, r1
 80027a6:	b335      	cbz	r5, 80027f6 <HAL_I2C_EV_IRQHandler+0x6aa>
 80027a8:	0551      	lsls	r1, r2, #21
 80027aa:	d524      	bpl.n	80027f6 <HAL_I2C_EV_IRQHandler+0x6aa>
 80027ac:	bb1c      	cbnz	r4, 80027f6 <HAL_I2C_EV_IRQHandler+0x6aa>
  uint32_t CurrentState = hi2c->State;
 80027ae:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  if(hi2c->XferCount != 0U)
 80027b2:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 80027b4:	b289      	uxth	r1, r1
  uint32_t CurrentState = hi2c->State;
 80027b6:	b2d2      	uxtb	r2, r2
  if(hi2c->XferCount != 0U)
 80027b8:	2900      	cmp	r1, #0
 80027ba:	f43f ae14 	beq.w	80023e6 <HAL_I2C_EV_IRQHandler+0x29a>
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80027be:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	1c4c      	adds	r4, r1, #1
 80027c4:	6244      	str	r4, [r0, #36]	; 0x24
 80027c6:	700b      	strb	r3, [r1, #0]
    hi2c->XferCount--;
 80027c8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80027ca:	3b01      	subs	r3, #1
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	8543      	strh	r3, [r0, #42]	; 0x2a
    if((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80027d0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f47f ae06 	bne.w	80023e6 <HAL_I2C_EV_IRQHandler+0x29a>
 80027da:	2a2a      	cmp	r2, #42	; 0x2a
 80027dc:	f47f ae03 	bne.w	80023e6 <HAL_I2C_EV_IRQHandler+0x29a>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80027e0:	6802      	ldr	r2, [r0, #0]
 80027e2:	6853      	ldr	r3, [r2, #4]
 80027e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80027e8:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80027ea:	2322      	movs	r3, #34	; 0x22
 80027ec:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80027ee:	2328      	movs	r3, #40	; 0x28
 80027f0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 80027f4:	e78c      	b.n	8002710 <HAL_I2C_EV_IRQHandler+0x5c4>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80027f6:	2c00      	cmp	r4, #0
 80027f8:	f43f adf5 	beq.w	80023e6 <HAL_I2C_EV_IRQHandler+0x29a>
 80027fc:	0592      	lsls	r2, r2, #22
 80027fe:	f57f adf2 	bpl.w	80023e6 <HAL_I2C_EV_IRQHandler+0x29a>
  if(hi2c->XferCount != 0U)
 8002802:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8002804:	b292      	uxth	r2, r2
 8002806:	2a00      	cmp	r2, #0
 8002808:	f43f aded 	beq.w	80023e6 <HAL_I2C_EV_IRQHandler+0x29a>
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800280c:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800280e:	e6b7      	b.n	8002580 <HAL_I2C_EV_IRQHandler+0x434>
 8002810:	00100004 	.word	0x00100004
 8002814:	00010004 	.word	0x00010004
 8002818:	00010080 	.word	0x00010080
 800281c:	00010040 	.word	0x00010040

08002820 <HAL_I2C_ER_IRQHandler>:
{
 8002820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002822:	6803      	ldr	r3, [r0, #0]
  if(((sr1itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 8002824:	4a49      	ldr	r2, [pc, #292]	; (800294c <HAL_I2C_ER_IRQHandler+0x12c>)
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002826:	695e      	ldr	r6, [r3, #20]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002828:	685d      	ldr	r5, [r3, #4]
  if(((sr1itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 800282a:	4216      	tst	r6, r2
{
 800282c:	4604      	mov	r4, r0
  if(((sr1itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 800282e:	d008      	beq.n	8002842 <HAL_I2C_ER_IRQHandler+0x22>
 8002830:	05e8      	lsls	r0, r5, #23
 8002832:	d506      	bpl.n	8002842 <HAL_I2C_ER_IRQHandler+0x22>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002834:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002836:	f042 0201 	orr.w	r2, r2, #1
 800283a:	6422      	str	r2, [r4, #64]	; 0x40
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800283c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002840:	615a      	str	r2, [r3, #20]
  if(((sr1itflags & I2C_FLAG_ARLO) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 8002842:	f416 3f81 	tst.w	r6, #66048	; 0x10200
 8002846:	d008      	beq.n	800285a <HAL_I2C_ER_IRQHandler+0x3a>
 8002848:	05e9      	lsls	r1, r5, #23
 800284a:	d506      	bpl.n	800285a <HAL_I2C_ER_IRQHandler+0x3a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800284c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800284e:	f042 0202 	orr.w	r2, r2, #2
 8002852:	6422      	str	r2, [r4, #64]	; 0x40
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002854:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002858:	615a      	str	r2, [r3, #20]
  if(((sr1itflags & I2C_FLAG_AF) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 800285a:	f416 3f82 	tst.w	r6, #66560	; 0x10400
 800285e:	d036      	beq.n	80028ce <HAL_I2C_ER_IRQHandler+0xae>
 8002860:	05ea      	lsls	r2, r5, #23
 8002862:	d534      	bpl.n	80028ce <HAL_I2C_ER_IRQHandler+0xae>
    tmp1 = hi2c->Mode;
 8002864:	f894 703e 	ldrb.w	r7, [r4, #62]	; 0x3e
    tmp2 = hi2c->XferCount;
 8002868:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    tmp3 = hi2c->State;
 800286a:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
    tmp4 = hi2c->PreviousState;
 800286e:	6b20      	ldr	r0, [r4, #48]	; 0x30
    if((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002870:	2f20      	cmp	r7, #32
    tmp2 = hi2c->XferCount;
 8002872:	b289      	uxth	r1, r1
    tmp3 = hi2c->State;
 8002874:	b2d2      	uxtb	r2, r2
    if((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002876:	d158      	bne.n	800292a <HAL_I2C_ER_IRQHandler+0x10a>
 8002878:	2900      	cmp	r1, #0
 800287a:	d156      	bne.n	800292a <HAL_I2C_ER_IRQHandler+0x10a>
 800287c:	f002 01f7 	and.w	r1, r2, #247	; 0xf7
 8002880:	2921      	cmp	r1, #33	; 0x21
 8002882:	d003      	beq.n	800288c <HAL_I2C_ER_IRQHandler+0x6c>
      ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002884:	2a28      	cmp	r2, #40	; 0x28
 8002886:	d150      	bne.n	800292a <HAL_I2C_ER_IRQHandler+0x10a>
      ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002888:	2821      	cmp	r0, #33	; 0x21
 800288a:	d14e      	bne.n	800292a <HAL_I2C_ER_IRQHandler+0x10a>
  uint32_t CurrentState       = hi2c->State;
 800288c:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002890:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if(((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002892:	2904      	cmp	r1, #4
  uint32_t CurrentState       = hi2c->State;
 8002894:	b2d2      	uxtb	r2, r2
  if(((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002896:	d001      	beq.n	800289c <HAL_I2C_ER_IRQHandler+0x7c>
 8002898:	2908      	cmp	r1, #8
 800289a:	d12c      	bne.n	80028f6 <HAL_I2C_ER_IRQHandler+0xd6>
 800289c:	2a28      	cmp	r2, #40	; 0x28
 800289e:	d12a      	bne.n	80028f6 <HAL_I2C_ER_IRQHandler+0xd6>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028a0:	4a2b      	ldr	r2, [pc, #172]	; (8002950 <HAL_I2C_ER_IRQHandler+0x130>)
 80028a2:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80028a4:	685a      	ldr	r2, [r3, #4]
 80028a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80028aa:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028ac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80028b0:	615a      	str	r2, [r3, #20]
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028b8:	601a      	str	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 80028ba:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80028bc:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 80028be:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 80028c0:	4620      	mov	r0, r4
    hi2c->State = HAL_I2C_STATE_READY;
 80028c2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028c6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 80028ca:	f7ff fba6 	bl	800201a <HAL_I2C_ListenCpltCallback>
  if(((sr1itflags & I2C_FLAG_OVR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 80028ce:	f416 3f84 	tst.w	r6, #67584	; 0x10800
 80028d2:	d009      	beq.n	80028e8 <HAL_I2C_ER_IRQHandler+0xc8>
 80028d4:	05eb      	lsls	r3, r5, #23
 80028d6:	d507      	bpl.n	80028e8 <HAL_I2C_ER_IRQHandler+0xc8>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80028d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80028da:	f043 0308 	orr.w	r3, r3, #8
 80028de:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80028e0:	6823      	ldr	r3, [r4, #0]
 80028e2:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80028e6:	615a      	str	r2, [r3, #20]
  if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80028e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80028ea:	b373      	cbz	r3, 800294a <HAL_I2C_ER_IRQHandler+0x12a>
    I2C_ITError(hi2c);
 80028ec:	4620      	mov	r0, r4
}
 80028ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    I2C_ITError(hi2c);
 80028f2:	f7ff bb97 	b.w	8002024 <I2C_ITError>
  else if(CurrentState == HAL_I2C_STATE_BUSY_TX)
 80028f6:	2a21      	cmp	r2, #33	; 0x21
 80028f8:	d123      	bne.n	8002942 <HAL_I2C_ER_IRQHandler+0x122>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028fa:	4915      	ldr	r1, [pc, #84]	; (8002950 <HAL_I2C_ER_IRQHandler+0x130>)
 80028fc:	62e1      	str	r1, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80028fe:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 8002900:	2220      	movs	r2, #32
 8002902:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002906:	2200      	movs	r2, #0
 8002908:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800290c:	685a      	ldr	r2, [r3, #4]
 800290e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002912:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002914:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002918:	615a      	str	r2, [r3, #20]
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002920:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002922:	4620      	mov	r0, r4
 8002924:	f7ff fb76 	bl	8002014 <HAL_I2C_SlaveTxCpltCallback>
 8002928:	e7d1      	b.n	80028ce <HAL_I2C_ER_IRQHandler+0xae>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800292a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800292c:	f042 0204 	orr.w	r2, r2, #4
 8002930:	6422      	str	r2, [r4, #64]	; 0x40
      if(hi2c->Mode == HAL_I2C_MODE_MASTER)
 8002932:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8002936:	2a10      	cmp	r2, #16
        SET_BIT(hi2c->Instance->CR1,I2C_CR1_STOP);
 8002938:	bf02      	ittt	eq
 800293a:	681a      	ldreq	r2, [r3, #0]
 800293c:	f442 7200 	orreq.w	r2, r2, #512	; 0x200
 8002940:	601a      	streq	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002942:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002946:	615a      	str	r2, [r3, #20]
 8002948:	e7c1      	b.n	80028ce <HAL_I2C_ER_IRQHandler+0xae>
 800294a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800294c:	00010100 	.word	0x00010100
 8002950:	ffff0000 	.word	0xffff0000

08002954 <I2C_DMAAbort>:
  I2C_HandleTypeDef* hi2c = ( I2C_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002954:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8002956:	b508      	push	{r3, lr}
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002958:	6803      	ldr	r3, [r0, #0]
  hi2c->hdmatx->XferAbortCallback = NULL;
 800295a:	6b41      	ldr	r1, [r0, #52]	; 0x34
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002962:	601a      	str	r2, [r3, #0]
  hi2c->XferCount = 0U;
 8002964:	2200      	movs	r2, #0
 8002966:	8542      	strh	r2, [r0, #42]	; 0x2a
  hi2c->hdmatx->XferAbortCallback = NULL;
 8002968:	650a      	str	r2, [r1, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 800296a:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800296c:	650a      	str	r2, [r1, #80]	; 0x50
  if(hi2c->State == HAL_I2C_STATE_ABORT)
 800296e:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 8002972:	2960      	cmp	r1, #96	; 0x60
 8002974:	f04f 0120 	mov.w	r1, #32
    hi2c->State = HAL_I2C_STATE_READY;
 8002978:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800297c:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  if(hi2c->State == HAL_I2C_STATE_ABORT)
 8002980:	d107      	bne.n	8002992 <I2C_DMAAbort+0x3e>
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002982:	6402      	str	r2, [r0, #64]	; 0x40
    __HAL_I2C_DISABLE(hi2c);
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	f022 0201 	bic.w	r2, r2, #1
 800298a:	601a      	str	r2, [r3, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 800298c:	f7ff fb49 	bl	8002022 <HAL_I2C_AbortCpltCallback>
 8002990:	bd08      	pop	{r3, pc}
    __HAL_I2C_DISABLE(hi2c);
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	f022 0201 	bic.w	r2, r2, #1
 8002998:	601a      	str	r2, [r3, #0]
    HAL_I2C_ErrorCallback(hi2c);
 800299a:	f7ff fb41 	bl	8002020 <HAL_I2C_ErrorCallback>
 800299e:	bd08      	pop	{r3, pc}

080029a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029a4:	4604      	mov	r4, r0
 80029a6:	b918      	cbnz	r0, 80029b0 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80029a8:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80029aa:	b002      	add	sp, #8
 80029ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029b0:	6803      	ldr	r3, [r0, #0]
 80029b2:	07dd      	lsls	r5, r3, #31
 80029b4:	d410      	bmi.n	80029d8 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029b6:	6823      	ldr	r3, [r4, #0]
 80029b8:	0798      	lsls	r0, r3, #30
 80029ba:	d458      	bmi.n	8002a6e <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029bc:	6823      	ldr	r3, [r4, #0]
 80029be:	071a      	lsls	r2, r3, #28
 80029c0:	f100 809a 	bmi.w	8002af8 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029c4:	6823      	ldr	r3, [r4, #0]
 80029c6:	075b      	lsls	r3, r3, #29
 80029c8:	f100 80b8 	bmi.w	8002b3c <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029cc:	69a2      	ldr	r2, [r4, #24]
 80029ce:	2a00      	cmp	r2, #0
 80029d0:	f040 8119 	bne.w	8002c06 <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 80029d4:	2000      	movs	r0, #0
 80029d6:	e7e8      	b.n	80029aa <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029d8:	4ba6      	ldr	r3, [pc, #664]	; (8002c74 <HAL_RCC_OscConfig+0x2d4>)
 80029da:	689a      	ldr	r2, [r3, #8]
 80029dc:	f002 020c 	and.w	r2, r2, #12
 80029e0:	2a04      	cmp	r2, #4
 80029e2:	d007      	beq.n	80029f4 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029e4:	689a      	ldr	r2, [r3, #8]
 80029e6:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029ea:	2a08      	cmp	r2, #8
 80029ec:	d10a      	bne.n	8002a04 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	0259      	lsls	r1, r3, #9
 80029f2:	d507      	bpl.n	8002a04 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029f4:	4b9f      	ldr	r3, [pc, #636]	; (8002c74 <HAL_RCC_OscConfig+0x2d4>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	039a      	lsls	r2, r3, #14
 80029fa:	d5dc      	bpl.n	80029b6 <HAL_RCC_OscConfig+0x16>
 80029fc:	6863      	ldr	r3, [r4, #4]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1d9      	bne.n	80029b6 <HAL_RCC_OscConfig+0x16>
 8002a02:	e7d1      	b.n	80029a8 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a04:	6863      	ldr	r3, [r4, #4]
 8002a06:	4d9b      	ldr	r5, [pc, #620]	; (8002c74 <HAL_RCC_OscConfig+0x2d4>)
 8002a08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a0c:	d111      	bne.n	8002a32 <HAL_RCC_OscConfig+0x92>
 8002a0e:	682b      	ldr	r3, [r5, #0]
 8002a10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a14:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002a16:	f7fe f9c3 	bl	8000da0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a1a:	4d96      	ldr	r5, [pc, #600]	; (8002c74 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8002a1c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a1e:	682b      	ldr	r3, [r5, #0]
 8002a20:	039b      	lsls	r3, r3, #14
 8002a22:	d4c8      	bmi.n	80029b6 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a24:	f7fe f9bc 	bl	8000da0 <HAL_GetTick>
 8002a28:	1b80      	subs	r0, r0, r6
 8002a2a:	2864      	cmp	r0, #100	; 0x64
 8002a2c:	d9f7      	bls.n	8002a1e <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8002a2e:	2003      	movs	r0, #3
 8002a30:	e7bb      	b.n	80029aa <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a32:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a36:	d104      	bne.n	8002a42 <HAL_RCC_OscConfig+0xa2>
 8002a38:	682b      	ldr	r3, [r5, #0]
 8002a3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a3e:	602b      	str	r3, [r5, #0]
 8002a40:	e7e5      	b.n	8002a0e <HAL_RCC_OscConfig+0x6e>
 8002a42:	682a      	ldr	r2, [r5, #0]
 8002a44:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002a48:	602a      	str	r2, [r5, #0]
 8002a4a:	682a      	ldr	r2, [r5, #0]
 8002a4c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a50:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1df      	bne.n	8002a16 <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 8002a56:	f7fe f9a3 	bl	8000da0 <HAL_GetTick>
 8002a5a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a5c:	682b      	ldr	r3, [r5, #0]
 8002a5e:	039f      	lsls	r7, r3, #14
 8002a60:	d5a9      	bpl.n	80029b6 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a62:	f7fe f99d 	bl	8000da0 <HAL_GetTick>
 8002a66:	1b80      	subs	r0, r0, r6
 8002a68:	2864      	cmp	r0, #100	; 0x64
 8002a6a:	d9f7      	bls.n	8002a5c <HAL_RCC_OscConfig+0xbc>
 8002a6c:	e7df      	b.n	8002a2e <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a6e:	4b81      	ldr	r3, [pc, #516]	; (8002c74 <HAL_RCC_OscConfig+0x2d4>)
 8002a70:	689a      	ldr	r2, [r3, #8]
 8002a72:	f012 0f0c 	tst.w	r2, #12
 8002a76:	d007      	beq.n	8002a88 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a78:	689a      	ldr	r2, [r3, #8]
 8002a7a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a7e:	2a08      	cmp	r2, #8
 8002a80:	d111      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	025e      	lsls	r6, r3, #9
 8002a86:	d40e      	bmi.n	8002aa6 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a88:	4b7a      	ldr	r3, [pc, #488]	; (8002c74 <HAL_RCC_OscConfig+0x2d4>)
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	0795      	lsls	r5, r2, #30
 8002a8e:	d502      	bpl.n	8002a96 <HAL_RCC_OscConfig+0xf6>
 8002a90:	68e2      	ldr	r2, [r4, #12]
 8002a92:	2a01      	cmp	r2, #1
 8002a94:	d188      	bne.n	80029a8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	6921      	ldr	r1, [r4, #16]
 8002a9a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002a9e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8002aa2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aa4:	e78a      	b.n	80029bc <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002aa6:	68e2      	ldr	r2, [r4, #12]
 8002aa8:	4b73      	ldr	r3, [pc, #460]	; (8002c78 <HAL_RCC_OscConfig+0x2d8>)
 8002aaa:	b1b2      	cbz	r2, 8002ada <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8002aac:	2201      	movs	r2, #1
 8002aae:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002ab0:	f7fe f976 	bl	8000da0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ab4:	4d6f      	ldr	r5, [pc, #444]	; (8002c74 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8002ab6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ab8:	682b      	ldr	r3, [r5, #0]
 8002aba:	0798      	lsls	r0, r3, #30
 8002abc:	d507      	bpl.n	8002ace <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002abe:	682b      	ldr	r3, [r5, #0]
 8002ac0:	6922      	ldr	r2, [r4, #16]
 8002ac2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002ac6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002aca:	602b      	str	r3, [r5, #0]
 8002acc:	e776      	b.n	80029bc <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ace:	f7fe f967 	bl	8000da0 <HAL_GetTick>
 8002ad2:	1b80      	subs	r0, r0, r6
 8002ad4:	2802      	cmp	r0, #2
 8002ad6:	d9ef      	bls.n	8002ab8 <HAL_RCC_OscConfig+0x118>
 8002ad8:	e7a9      	b.n	8002a2e <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8002ada:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002adc:	f7fe f960 	bl	8000da0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ae0:	4d64      	ldr	r5, [pc, #400]	; (8002c74 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8002ae2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ae4:	682b      	ldr	r3, [r5, #0]
 8002ae6:	0799      	lsls	r1, r3, #30
 8002ae8:	f57f af68 	bpl.w	80029bc <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002aec:	f7fe f958 	bl	8000da0 <HAL_GetTick>
 8002af0:	1b80      	subs	r0, r0, r6
 8002af2:	2802      	cmp	r0, #2
 8002af4:	d9f6      	bls.n	8002ae4 <HAL_RCC_OscConfig+0x144>
 8002af6:	e79a      	b.n	8002a2e <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002af8:	6962      	ldr	r2, [r4, #20]
 8002afa:	4b60      	ldr	r3, [pc, #384]	; (8002c7c <HAL_RCC_OscConfig+0x2dc>)
 8002afc:	b17a      	cbz	r2, 8002b1e <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8002afe:	2201      	movs	r2, #1
 8002b00:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002b02:	f7fe f94d 	bl	8000da0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b06:	4d5b      	ldr	r5, [pc, #364]	; (8002c74 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8002b08:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b0a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002b0c:	079f      	lsls	r7, r3, #30
 8002b0e:	f53f af59 	bmi.w	80029c4 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b12:	f7fe f945 	bl	8000da0 <HAL_GetTick>
 8002b16:	1b80      	subs	r0, r0, r6
 8002b18:	2802      	cmp	r0, #2
 8002b1a:	d9f6      	bls.n	8002b0a <HAL_RCC_OscConfig+0x16a>
 8002b1c:	e787      	b.n	8002a2e <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8002b1e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002b20:	f7fe f93e 	bl	8000da0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b24:	4d53      	ldr	r5, [pc, #332]	; (8002c74 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8002b26:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b28:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002b2a:	0798      	lsls	r0, r3, #30
 8002b2c:	f57f af4a 	bpl.w	80029c4 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b30:	f7fe f936 	bl	8000da0 <HAL_GetTick>
 8002b34:	1b80      	subs	r0, r0, r6
 8002b36:	2802      	cmp	r0, #2
 8002b38:	d9f6      	bls.n	8002b28 <HAL_RCC_OscConfig+0x188>
 8002b3a:	e778      	b.n	8002a2e <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b3c:	4b4d      	ldr	r3, [pc, #308]	; (8002c74 <HAL_RCC_OscConfig+0x2d4>)
 8002b3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b40:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8002b44:	d128      	bne.n	8002b98 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b46:	9201      	str	r2, [sp, #4]
 8002b48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b4a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002b4e:	641a      	str	r2, [r3, #64]	; 0x40
 8002b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b56:	9301      	str	r3, [sp, #4]
 8002b58:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002b5a:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b5c:	4d48      	ldr	r5, [pc, #288]	; (8002c80 <HAL_RCC_OscConfig+0x2e0>)
 8002b5e:	682b      	ldr	r3, [r5, #0]
 8002b60:	05d9      	lsls	r1, r3, #23
 8002b62:	d51b      	bpl.n	8002b9c <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b64:	68a3      	ldr	r3, [r4, #8]
 8002b66:	4d43      	ldr	r5, [pc, #268]	; (8002c74 <HAL_RCC_OscConfig+0x2d4>)
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d127      	bne.n	8002bbc <HAL_RCC_OscConfig+0x21c>
 8002b6c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002b6e:	f043 0301 	orr.w	r3, r3, #1
 8002b72:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002b74:	f7fe f914 	bl	8000da0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b78:	4d3e      	ldr	r5, [pc, #248]	; (8002c74 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8002b7a:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b7c:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b80:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002b82:	079b      	lsls	r3, r3, #30
 8002b84:	d539      	bpl.n	8002bfa <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8002b86:	2e00      	cmp	r6, #0
 8002b88:	f43f af20 	beq.w	80029cc <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b8c:	4a39      	ldr	r2, [pc, #228]	; (8002c74 <HAL_RCC_OscConfig+0x2d4>)
 8002b8e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002b90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b94:	6413      	str	r3, [r2, #64]	; 0x40
 8002b96:	e719      	b.n	80029cc <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8002b98:	2600      	movs	r6, #0
 8002b9a:	e7df      	b.n	8002b5c <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b9c:	682b      	ldr	r3, [r5, #0]
 8002b9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ba2:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002ba4:	f7fe f8fc 	bl	8000da0 <HAL_GetTick>
 8002ba8:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002baa:	682b      	ldr	r3, [r5, #0]
 8002bac:	05da      	lsls	r2, r3, #23
 8002bae:	d4d9      	bmi.n	8002b64 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bb0:	f7fe f8f6 	bl	8000da0 <HAL_GetTick>
 8002bb4:	1bc0      	subs	r0, r0, r7
 8002bb6:	2802      	cmp	r0, #2
 8002bb8:	d9f7      	bls.n	8002baa <HAL_RCC_OscConfig+0x20a>
 8002bba:	e738      	b.n	8002a2e <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bbc:	2b05      	cmp	r3, #5
 8002bbe:	d104      	bne.n	8002bca <HAL_RCC_OscConfig+0x22a>
 8002bc0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002bc2:	f043 0304 	orr.w	r3, r3, #4
 8002bc6:	672b      	str	r3, [r5, #112]	; 0x70
 8002bc8:	e7d0      	b.n	8002b6c <HAL_RCC_OscConfig+0x1cc>
 8002bca:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002bcc:	f022 0201 	bic.w	r2, r2, #1
 8002bd0:	672a      	str	r2, [r5, #112]	; 0x70
 8002bd2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002bd4:	f022 0204 	bic.w	r2, r2, #4
 8002bd8:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1ca      	bne.n	8002b74 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8002bde:	f7fe f8df 	bl	8000da0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002be2:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002be6:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002be8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002bea:	0798      	lsls	r0, r3, #30
 8002bec:	d5cb      	bpl.n	8002b86 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bee:	f7fe f8d7 	bl	8000da0 <HAL_GetTick>
 8002bf2:	1bc0      	subs	r0, r0, r7
 8002bf4:	4540      	cmp	r0, r8
 8002bf6:	d9f7      	bls.n	8002be8 <HAL_RCC_OscConfig+0x248>
 8002bf8:	e719      	b.n	8002a2e <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bfa:	f7fe f8d1 	bl	8000da0 <HAL_GetTick>
 8002bfe:	1bc0      	subs	r0, r0, r7
 8002c00:	4540      	cmp	r0, r8
 8002c02:	d9bd      	bls.n	8002b80 <HAL_RCC_OscConfig+0x1e0>
 8002c04:	e713      	b.n	8002a2e <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c06:	4d1b      	ldr	r5, [pc, #108]	; (8002c74 <HAL_RCC_OscConfig+0x2d4>)
 8002c08:	68ab      	ldr	r3, [r5, #8]
 8002c0a:	f003 030c 	and.w	r3, r3, #12
 8002c0e:	2b08      	cmp	r3, #8
 8002c10:	f43f aeca 	beq.w	80029a8 <HAL_RCC_OscConfig+0x8>
 8002c14:	4e1b      	ldr	r6, [pc, #108]	; (8002c84 <HAL_RCC_OscConfig+0x2e4>)
 8002c16:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c18:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8002c1a:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c1c:	d134      	bne.n	8002c88 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8002c1e:	f7fe f8bf 	bl	8000da0 <HAL_GetTick>
 8002c22:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c24:	682b      	ldr	r3, [r5, #0]
 8002c26:	0199      	lsls	r1, r3, #6
 8002c28:	d41e      	bmi.n	8002c68 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c2a:	6a22      	ldr	r2, [r4, #32]
 8002c2c:	69e3      	ldr	r3, [r4, #28]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002c32:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002c36:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002c38:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002c3c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c3e:	4c0d      	ldr	r4, [pc, #52]	; (8002c74 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c40:	0852      	lsrs	r2, r2, #1
 8002c42:	3a01      	subs	r2, #1
 8002c44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002c48:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002c4e:	f7fe f8a7 	bl	8000da0 <HAL_GetTick>
 8002c52:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c54:	6823      	ldr	r3, [r4, #0]
 8002c56:	019a      	lsls	r2, r3, #6
 8002c58:	f53f aebc 	bmi.w	80029d4 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c5c:	f7fe f8a0 	bl	8000da0 <HAL_GetTick>
 8002c60:	1b40      	subs	r0, r0, r5
 8002c62:	2802      	cmp	r0, #2
 8002c64:	d9f6      	bls.n	8002c54 <HAL_RCC_OscConfig+0x2b4>
 8002c66:	e6e2      	b.n	8002a2e <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c68:	f7fe f89a 	bl	8000da0 <HAL_GetTick>
 8002c6c:	1bc0      	subs	r0, r0, r7
 8002c6e:	2802      	cmp	r0, #2
 8002c70:	d9d8      	bls.n	8002c24 <HAL_RCC_OscConfig+0x284>
 8002c72:	e6dc      	b.n	8002a2e <HAL_RCC_OscConfig+0x8e>
 8002c74:	40023800 	.word	0x40023800
 8002c78:	42470000 	.word	0x42470000
 8002c7c:	42470e80 	.word	0x42470e80
 8002c80:	40007000 	.word	0x40007000
 8002c84:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8002c88:	f7fe f88a 	bl	8000da0 <HAL_GetTick>
 8002c8c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c8e:	682b      	ldr	r3, [r5, #0]
 8002c90:	019b      	lsls	r3, r3, #6
 8002c92:	f57f ae9f 	bpl.w	80029d4 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c96:	f7fe f883 	bl	8000da0 <HAL_GetTick>
 8002c9a:	1b00      	subs	r0, r0, r4
 8002c9c:	2802      	cmp	r0, #2
 8002c9e:	d9f6      	bls.n	8002c8e <HAL_RCC_OscConfig+0x2ee>
 8002ca0:	e6c5      	b.n	8002a2e <HAL_RCC_OscConfig+0x8e>
 8002ca2:	bf00      	nop

08002ca4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ca4:	4913      	ldr	r1, [pc, #76]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8002ca6:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ca8:	688b      	ldr	r3, [r1, #8]
 8002caa:	f003 030c 	and.w	r3, r3, #12
 8002cae:	2b04      	cmp	r3, #4
 8002cb0:	d003      	beq.n	8002cba <HAL_RCC_GetSysClockFreq+0x16>
 8002cb2:	2b08      	cmp	r3, #8
 8002cb4:	d003      	beq.n	8002cbe <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cb6:	4810      	ldr	r0, [pc, #64]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002cb8:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8002cba:	4810      	ldr	r0, [pc, #64]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x58>)
 8002cbc:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cbe:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cc0:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cc2:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cc4:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cc8:	bf14      	ite	ne
 8002cca:	480c      	ldrne	r0, [pc, #48]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ccc:	480a      	ldreq	r0, [pc, #40]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cce:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002cd2:	bf18      	it	ne
 8002cd4:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cd6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cda:	fba1 0100 	umull	r0, r1, r1, r0
 8002cde:	f7fd fe8d 	bl	80009fc <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ce2:	4b04      	ldr	r3, [pc, #16]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0x50>)
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002cea:	3301      	adds	r3, #1
 8002cec:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8002cee:	fbb0 f0f3 	udiv	r0, r0, r3
 8002cf2:	bd08      	pop	{r3, pc}
 8002cf4:	40023800 	.word	0x40023800
 8002cf8:	00f42400 	.word	0x00f42400
 8002cfc:	007a1200 	.word	0x007a1200

08002d00 <HAL_RCC_ClockConfig>:
{
 8002d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d04:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8002d06:	4604      	mov	r4, r0
 8002d08:	b910      	cbnz	r0, 8002d10 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002d0a:	2001      	movs	r0, #1
 8002d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d10:	4b44      	ldr	r3, [pc, #272]	; (8002e24 <HAL_RCC_ClockConfig+0x124>)
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	f002 020f 	and.w	r2, r2, #15
 8002d18:	428a      	cmp	r2, r1
 8002d1a:	d328      	bcc.n	8002d6e <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d1c:	6821      	ldr	r1, [r4, #0]
 8002d1e:	078f      	lsls	r7, r1, #30
 8002d20:	d42d      	bmi.n	8002d7e <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d22:	07c8      	lsls	r0, r1, #31
 8002d24:	d440      	bmi.n	8002da8 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d26:	4b3f      	ldr	r3, [pc, #252]	; (8002e24 <HAL_RCC_ClockConfig+0x124>)
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	f002 020f 	and.w	r2, r2, #15
 8002d2e:	4295      	cmp	r5, r2
 8002d30:	d366      	bcc.n	8002e00 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d32:	6822      	ldr	r2, [r4, #0]
 8002d34:	0751      	lsls	r1, r2, #29
 8002d36:	d46c      	bmi.n	8002e12 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d38:	0713      	lsls	r3, r2, #28
 8002d3a:	d507      	bpl.n	8002d4c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d3c:	4a3a      	ldr	r2, [pc, #232]	; (8002e28 <HAL_RCC_ClockConfig+0x128>)
 8002d3e:	6921      	ldr	r1, [r4, #16]
 8002d40:	6893      	ldr	r3, [r2, #8]
 8002d42:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002d46:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002d4a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d4c:	f7ff ffaa 	bl	8002ca4 <HAL_RCC_GetSysClockFreq>
 8002d50:	4b35      	ldr	r3, [pc, #212]	; (8002e28 <HAL_RCC_ClockConfig+0x128>)
 8002d52:	4a36      	ldr	r2, [pc, #216]	; (8002e2c <HAL_RCC_ClockConfig+0x12c>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002d5a:	5cd3      	ldrb	r3, [r2, r3]
 8002d5c:	40d8      	lsrs	r0, r3
 8002d5e:	4b34      	ldr	r3, [pc, #208]	; (8002e30 <HAL_RCC_ClockConfig+0x130>)
 8002d60:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002d62:	2000      	movs	r0, #0
 8002d64:	f7fd ffd2 	bl	8000d0c <HAL_InitTick>
  return HAL_OK;
 8002d68:	2000      	movs	r0, #0
 8002d6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d6e:	b2ca      	uxtb	r2, r1
 8002d70:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 030f 	and.w	r3, r3, #15
 8002d78:	4299      	cmp	r1, r3
 8002d7a:	d1c6      	bne.n	8002d0a <HAL_RCC_ClockConfig+0xa>
 8002d7c:	e7ce      	b.n	8002d1c <HAL_RCC_ClockConfig+0x1c>
 8002d7e:	4b2a      	ldr	r3, [pc, #168]	; (8002e28 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d80:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d84:	bf1e      	ittt	ne
 8002d86:	689a      	ldrne	r2, [r3, #8]
 8002d88:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8002d8c:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d8e:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d90:	bf42      	ittt	mi
 8002d92:	689a      	ldrmi	r2, [r3, #8]
 8002d94:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8002d98:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d9a:	689a      	ldr	r2, [r3, #8]
 8002d9c:	68a0      	ldr	r0, [r4, #8]
 8002d9e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002da2:	4302      	orrs	r2, r0
 8002da4:	609a      	str	r2, [r3, #8]
 8002da6:	e7bc      	b.n	8002d22 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002da8:	6862      	ldr	r2, [r4, #4]
 8002daa:	4b1f      	ldr	r3, [pc, #124]	; (8002e28 <HAL_RCC_ClockConfig+0x128>)
 8002dac:	2a01      	cmp	r2, #1
 8002dae:	d11d      	bne.n	8002dec <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002db6:	d0a8      	beq.n	8002d0a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002db8:	4e1b      	ldr	r6, [pc, #108]	; (8002e28 <HAL_RCC_ClockConfig+0x128>)
 8002dba:	68b3      	ldr	r3, [r6, #8]
 8002dbc:	f023 0303 	bic.w	r3, r3, #3
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002dc4:	f7fd ffec 	bl	8000da0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dc8:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002dcc:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dce:	68b3      	ldr	r3, [r6, #8]
 8002dd0:	6862      	ldr	r2, [r4, #4]
 8002dd2:	f003 030c 	and.w	r3, r3, #12
 8002dd6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002dda:	d0a4      	beq.n	8002d26 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ddc:	f7fd ffe0 	bl	8000da0 <HAL_GetTick>
 8002de0:	1bc0      	subs	r0, r0, r7
 8002de2:	4540      	cmp	r0, r8
 8002de4:	d9f3      	bls.n	8002dce <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8002de6:	2003      	movs	r0, #3
}
 8002de8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dec:	1e91      	subs	r1, r2, #2
 8002dee:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002df0:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002df2:	d802      	bhi.n	8002dfa <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002df4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002df8:	e7dd      	b.n	8002db6 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dfa:	f013 0f02 	tst.w	r3, #2
 8002dfe:	e7da      	b.n	8002db6 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e00:	b2ea      	uxtb	r2, r5
 8002e02:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 030f 	and.w	r3, r3, #15
 8002e0a:	429d      	cmp	r5, r3
 8002e0c:	f47f af7d 	bne.w	8002d0a <HAL_RCC_ClockConfig+0xa>
 8002e10:	e78f      	b.n	8002d32 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e12:	4905      	ldr	r1, [pc, #20]	; (8002e28 <HAL_RCC_ClockConfig+0x128>)
 8002e14:	68e0      	ldr	r0, [r4, #12]
 8002e16:	688b      	ldr	r3, [r1, #8]
 8002e18:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002e1c:	4303      	orrs	r3, r0
 8002e1e:	608b      	str	r3, [r1, #8]
 8002e20:	e78a      	b.n	8002d38 <HAL_RCC_ClockConfig+0x38>
 8002e22:	bf00      	nop
 8002e24:	40023c00 	.word	0x40023c00
 8002e28:	40023800 	.word	0x40023800
 8002e2c:	08005826 	.word	0x08005826
 8002e30:	2000001c 	.word	0x2000001c

08002e34 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002e34:	4b01      	ldr	r3, [pc, #4]	; (8002e3c <HAL_RCC_GetHCLKFreq+0x8>)
 8002e36:	6818      	ldr	r0, [r3, #0]
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	2000001c 	.word	0x2000001c

08002e40 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e40:	4b04      	ldr	r3, [pc, #16]	; (8002e54 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002e42:	4a05      	ldr	r2, [pc, #20]	; (8002e58 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002e4a:	5cd3      	ldrb	r3, [r2, r3]
 8002e4c:	4a03      	ldr	r2, [pc, #12]	; (8002e5c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002e4e:	6810      	ldr	r0, [r2, #0]
}
 8002e50:	40d8      	lsrs	r0, r3
 8002e52:	4770      	bx	lr
 8002e54:	40023800 	.word	0x40023800
 8002e58:	08005836 	.word	0x08005836
 8002e5c:	2000001c 	.word	0x2000001c

08002e60 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e60:	4b04      	ldr	r3, [pc, #16]	; (8002e74 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002e62:	4a05      	ldr	r2, [pc, #20]	; (8002e78 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002e6a:	5cd3      	ldrb	r3, [r2, r3]
 8002e6c:	4a03      	ldr	r2, [pc, #12]	; (8002e7c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002e6e:	6810      	ldr	r0, [r2, #0]
}
 8002e70:	40d8      	lsrs	r0, r3
 8002e72:	4770      	bx	lr
 8002e74:	40023800 	.word	0x40023800
 8002e78:	08005836 	.word	0x08005836
 8002e7c:	2000001c 	.word	0x2000001c

08002e80 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e80:	6a03      	ldr	r3, [r0, #32]
 8002e82:	f023 0301 	bic.w	r3, r3, #1
 8002e86:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e88:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002e8a:	6842      	ldr	r2, [r0, #4]
{
 8002e8c:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e8e:	6984      	ldr	r4, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e90:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e92:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002e96:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002e98:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8002e9a:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8002e9e:	4323      	orrs	r3, r4

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002ea0:	4c0c      	ldr	r4, [pc, #48]	; (8002ed4 <TIM_OC1_SetConfig+0x54>)
 8002ea2:	42a0      	cmp	r0, r4
 8002ea4:	d009      	beq.n	8002eba <TIM_OC1_SetConfig+0x3a>
 8002ea6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002eaa:	42a0      	cmp	r0, r4
 8002eac:	d005      	beq.n	8002eba <TIM_OC1_SetConfig+0x3a>
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002eae:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002eb0:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002eb2:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8002eb4:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002eb6:	6203      	str	r3, [r0, #32]
} 
 8002eb8:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= OC_Config->OCNPolarity;
 8002eba:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ebc:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ebe:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8002ec2:	4323      	orrs	r3, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ec4:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002ec6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8002eca:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8002ecc:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ed0:	4322      	orrs	r2, r4
 8002ed2:	e7ec      	b.n	8002eae <TIM_OC1_SetConfig+0x2e>
 8002ed4:	40010000 	.word	0x40010000

08002ed8 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ed8:	6a03      	ldr	r3, [r0, #32]
 8002eda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ede:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ee0:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002ee2:	6842      	ldr	r2, [r0, #4]
{
 8002ee4:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ee6:	69c4      	ldr	r4, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ee8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8002eea:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002eee:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002ef0:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8002ef2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002ef6:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002efa:	4c0e      	ldr	r4, [pc, #56]	; (8002f34 <TIM_OC3_SetConfig+0x5c>)
 8002efc:	42a0      	cmp	r0, r4
 8002efe:	d009      	beq.n	8002f14 <TIM_OC3_SetConfig+0x3c>
 8002f00:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002f04:	42a0      	cmp	r0, r4
 8002f06:	d005      	beq.n	8002f14 <TIM_OC3_SetConfig+0x3c>
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f08:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002f0a:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002f0c:	61c5      	str	r5, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8002f0e:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f10:	6203      	str	r3, [r0, #32]
}
 8002f12:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002f14:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002f16:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 8002f18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002f1c:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002f20:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002f22:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002f26:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8002f28:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002f2c:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 8002f30:	e7ea      	b.n	8002f08 <TIM_OC3_SetConfig+0x30>
 8002f32:	bf00      	nop
 8002f34:	40010000 	.word	0x40010000

08002f38 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f38:	6a03      	ldr	r3, [r0, #32]
 8002f3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f3e:	6203      	str	r3, [r0, #32]
{
 8002f40:	b530      	push	{r4, r5, lr}
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f42:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002f44:	6843      	ldr	r3, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f46:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f48:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002f4a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f4e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002f52:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8002f54:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002f58:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002f5c:	4d09      	ldr	r5, [pc, #36]	; (8002f84 <TIM_OC4_SetConfig+0x4c>)
 8002f5e:	42a8      	cmp	r0, r5
 8002f60:	d009      	beq.n	8002f76 <TIM_OC4_SetConfig+0x3e>
 8002f62:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002f66:	42a8      	cmp	r0, r5
 8002f68:	d005      	beq.n	8002f76 <TIM_OC4_SetConfig+0x3e>
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f6a:	6043      	str	r3, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002f6c:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002f6e:	61c2      	str	r2, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8002f70:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f72:	6204      	str	r4, [r0, #32]
}
 8002f74:	bd30      	pop	{r4, r5, pc}
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002f76:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002f78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002f7c:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8002f80:	e7f3      	b.n	8002f6a <TIM_OC4_SetConfig+0x32>
 8002f82:	bf00      	nop
 8002f84:	40010000 	.word	0x40010000

08002f88 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f88:	6803      	ldr	r3, [r0, #0]
 8002f8a:	68da      	ldr	r2, [r3, #12]
 8002f8c:	f042 0201 	orr.w	r2, r2, #1
 8002f90:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	f042 0201 	orr.w	r2, r2, #1
 8002f98:	601a      	str	r2, [r3, #0]
}
 8002f9a:	2000      	movs	r0, #0
 8002f9c:	4770      	bx	lr

08002f9e <HAL_TIM_PWM_MspInit>:
 8002f9e:	4770      	bx	lr

08002fa0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002fa0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002fa4:	2b01      	cmp	r3, #1
{
 8002fa6:	b570      	push	{r4, r5, r6, lr}
 8002fa8:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8002fac:	d01c      	beq.n	8002fe8 <HAL_TIM_ConfigClockSource+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 8002fae:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  tmpsmcr = htim->Instance->SMCR;
 8002fb2:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  tmpsmcr = htim->Instance->SMCR;
 8002fba:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fbc:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002fc0:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002fc4:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8002fc6:	680a      	ldr	r2, [r1, #0]
 8002fc8:	2a40      	cmp	r2, #64	; 0x40
 8002fca:	d079      	beq.n	80030c0 <HAL_TIM_ConfigClockSource+0x120>
 8002fcc:	d819      	bhi.n	8003002 <HAL_TIM_ConfigClockSource+0x62>
 8002fce:	2a10      	cmp	r2, #16
 8002fd0:	f000 8093 	beq.w	80030fa <HAL_TIM_ConfigClockSource+0x15a>
 8002fd4:	d80a      	bhi.n	8002fec <HAL_TIM_ConfigClockSource+0x4c>
 8002fd6:	2a00      	cmp	r2, #0
 8002fd8:	f000 8089 	beq.w	80030ee <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8002fe8:	4618      	mov	r0, r3
}
 8002fea:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8002fec:	2a20      	cmp	r2, #32
 8002fee:	f000 808a 	beq.w	8003106 <HAL_TIM_ConfigClockSource+0x166>
 8002ff2:	2a30      	cmp	r2, #48	; 0x30
 8002ff4:	d1f2      	bne.n	8002fdc <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8002ff6:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002ff8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002ffc:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8003000:	e036      	b.n	8003070 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8003002:	2a70      	cmp	r2, #112	; 0x70
 8003004:	d036      	beq.n	8003074 <HAL_TIM_ConfigClockSource+0xd4>
 8003006:	d81b      	bhi.n	8003040 <HAL_TIM_ConfigClockSource+0xa0>
 8003008:	2a50      	cmp	r2, #80	; 0x50
 800300a:	d042      	beq.n	8003092 <HAL_TIM_ConfigClockSource+0xf2>
 800300c:	2a60      	cmp	r2, #96	; 0x60
 800300e:	d1e5      	bne.n	8002fdc <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003010:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8003012:	684d      	ldr	r5, [r1, #4]
 8003014:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003016:	f024 0410 	bic.w	r4, r4, #16
 800301a:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800301c:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800301e:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003020:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003024:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003028:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800302c:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8003030:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8003032:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8003034:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8003036:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800303a:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 800303e:	e017      	b.n	8003070 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8003040:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8003044:	d011      	beq.n	800306a <HAL_TIM_ConfigClockSource+0xca>
 8003046:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800304a:	d1c7      	bne.n	8002fdc <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800304c:	688a      	ldr	r2, [r1, #8]
 800304e:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8003050:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8003052:	68c9      	ldr	r1, [r1, #12]
 8003054:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003056:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800305a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800305e:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003060:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003062:	689a      	ldr	r2, [r3, #8]
 8003064:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003068:	e002      	b.n	8003070 <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800306a:	689a      	ldr	r2, [r3, #8]
 800306c:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8003070:	609a      	str	r2, [r3, #8]
 8003072:	e7b3      	b.n	8002fdc <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8003074:	688a      	ldr	r2, [r1, #8]
 8003076:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8003078:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800307a:	68c9      	ldr	r1, [r1, #12]
 800307c:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800307e:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8003082:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003086:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8003088:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 800308a:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800308c:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8003090:	e7ee      	b.n	8003070 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8003092:	684c      	ldr	r4, [r1, #4]
 8003094:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8003096:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003098:	6a1d      	ldr	r5, [r3, #32]
 800309a:	f025 0501 	bic.w	r5, r5, #1
 800309e:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 80030a0:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030a2:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030a6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030aa:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80030ae:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 80030b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030b2:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80030b4:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80030b6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80030ba:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 80030be:	e7d7      	b.n	8003070 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80030c0:	684c      	ldr	r4, [r1, #4]
 80030c2:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80030c4:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030c6:	6a1d      	ldr	r5, [r3, #32]
 80030c8:	f025 0501 	bic.w	r5, r5, #1
 80030cc:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 80030ce:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030d0:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030d4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030d8:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80030dc:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 80030de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030e0:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80030e2:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80030e4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80030e8:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 80030ec:	e7c0      	b.n	8003070 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80030ee:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80030f0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80030f4:	f042 0207 	orr.w	r2, r2, #7
 80030f8:	e7ba      	b.n	8003070 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80030fa:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80030fc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8003100:	f042 0217 	orr.w	r2, r2, #23
 8003104:	e7b4      	b.n	8003070 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8003106:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8003108:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800310c:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8003110:	e7ae      	b.n	8003070 <HAL_TIM_ConfigClockSource+0xd0>

08003112 <HAL_TIM_OC_DelayElapsedCallback>:
 8003112:	4770      	bx	lr

08003114 <HAL_TIM_IC_CaptureCallback>:
 8003114:	4770      	bx	lr

08003116 <HAL_TIM_PWM_PulseFinishedCallback>:
 8003116:	4770      	bx	lr

08003118 <HAL_TIM_TriggerCallback>:
 8003118:	4770      	bx	lr

0800311a <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800311a:	6803      	ldr	r3, [r0, #0]
 800311c:	691a      	ldr	r2, [r3, #16]
 800311e:	0791      	lsls	r1, r2, #30
{
 8003120:	b510      	push	{r4, lr}
 8003122:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003124:	d50e      	bpl.n	8003144 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8003126:	68da      	ldr	r2, [r3, #12]
 8003128:	0792      	lsls	r2, r2, #30
 800312a:	d50b      	bpl.n	8003144 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800312c:	f06f 0202 	mvn.w	r2, #2
 8003130:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003132:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003134:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003136:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003138:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800313a:	d077      	beq.n	800322c <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 800313c:	f7ff ffea 	bl	8003114 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003140:	2300      	movs	r3, #0
 8003142:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003144:	6823      	ldr	r3, [r4, #0]
 8003146:	691a      	ldr	r2, [r3, #16]
 8003148:	0750      	lsls	r0, r2, #29
 800314a:	d510      	bpl.n	800316e <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800314c:	68da      	ldr	r2, [r3, #12]
 800314e:	0751      	lsls	r1, r2, #29
 8003150:	d50d      	bpl.n	800316e <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003152:	f06f 0204 	mvn.w	r2, #4
 8003156:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003158:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800315a:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800315c:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003160:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8003162:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003164:	d068      	beq.n	8003238 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8003166:	f7ff ffd5 	bl	8003114 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800316a:	2300      	movs	r3, #0
 800316c:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800316e:	6823      	ldr	r3, [r4, #0]
 8003170:	691a      	ldr	r2, [r3, #16]
 8003172:	0712      	lsls	r2, r2, #28
 8003174:	d50f      	bpl.n	8003196 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8003176:	68da      	ldr	r2, [r3, #12]
 8003178:	0710      	lsls	r0, r2, #28
 800317a:	d50c      	bpl.n	8003196 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800317c:	f06f 0208 	mvn.w	r2, #8
 8003180:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003182:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003184:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003186:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003188:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 800318a:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800318c:	d05a      	beq.n	8003244 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800318e:	f7ff ffc1 	bl	8003114 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003192:	2300      	movs	r3, #0
 8003194:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003196:	6823      	ldr	r3, [r4, #0]
 8003198:	691a      	ldr	r2, [r3, #16]
 800319a:	06d2      	lsls	r2, r2, #27
 800319c:	d510      	bpl.n	80031c0 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800319e:	68da      	ldr	r2, [r3, #12]
 80031a0:	06d0      	lsls	r0, r2, #27
 80031a2:	d50d      	bpl.n	80031c0 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80031a4:	f06f 0210 	mvn.w	r2, #16
 80031a8:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031aa:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031ac:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031ae:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031b2:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 80031b4:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031b6:	d04b      	beq.n	8003250 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80031b8:	f7ff ffac 	bl	8003114 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031bc:	2300      	movs	r3, #0
 80031be:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80031c0:	6823      	ldr	r3, [r4, #0]
 80031c2:	691a      	ldr	r2, [r3, #16]
 80031c4:	07d1      	lsls	r1, r2, #31
 80031c6:	d508      	bpl.n	80031da <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80031c8:	68da      	ldr	r2, [r3, #12]
 80031ca:	07d2      	lsls	r2, r2, #31
 80031cc:	d505      	bpl.n	80031da <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80031ce:	f06f 0201 	mvn.w	r2, #1
 80031d2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80031d4:	4620      	mov	r0, r4
 80031d6:	f001 fdbf 	bl	8004d58 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80031da:	6823      	ldr	r3, [r4, #0]
 80031dc:	691a      	ldr	r2, [r3, #16]
 80031de:	0610      	lsls	r0, r2, #24
 80031e0:	d508      	bpl.n	80031f4 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80031e2:	68da      	ldr	r2, [r3, #12]
 80031e4:	0611      	lsls	r1, r2, #24
 80031e6:	d505      	bpl.n	80031f4 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80031e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80031ec:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80031ee:	4620      	mov	r0, r4
 80031f0:	f000 f9cf 	bl	8003592 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80031f4:	6823      	ldr	r3, [r4, #0]
 80031f6:	691a      	ldr	r2, [r3, #16]
 80031f8:	0652      	lsls	r2, r2, #25
 80031fa:	d508      	bpl.n	800320e <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80031fc:	68da      	ldr	r2, [r3, #12]
 80031fe:	0650      	lsls	r0, r2, #25
 8003200:	d505      	bpl.n	800320e <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003202:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003206:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003208:	4620      	mov	r0, r4
 800320a:	f7ff ff85 	bl	8003118 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800320e:	6823      	ldr	r3, [r4, #0]
 8003210:	691a      	ldr	r2, [r3, #16]
 8003212:	0691      	lsls	r1, r2, #26
 8003214:	d522      	bpl.n	800325c <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8003216:	68da      	ldr	r2, [r3, #12]
 8003218:	0692      	lsls	r2, r2, #26
 800321a:	d51f      	bpl.n	800325c <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800321c:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8003220:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003222:	611a      	str	r2, [r3, #16]
}
 8003224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8003228:	f000 b9b2 	b.w	8003590 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800322c:	f7ff ff71 	bl	8003112 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003230:	4620      	mov	r0, r4
 8003232:	f7ff ff70 	bl	8003116 <HAL_TIM_PWM_PulseFinishedCallback>
 8003236:	e783      	b.n	8003140 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003238:	f7ff ff6b 	bl	8003112 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800323c:	4620      	mov	r0, r4
 800323e:	f7ff ff6a 	bl	8003116 <HAL_TIM_PWM_PulseFinishedCallback>
 8003242:	e792      	b.n	800316a <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003244:	f7ff ff65 	bl	8003112 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8003248:	4620      	mov	r0, r4
 800324a:	f7ff ff64 	bl	8003116 <HAL_TIM_PWM_PulseFinishedCallback>
 800324e:	e7a0      	b.n	8003192 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003250:	f7ff ff5f 	bl	8003112 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003254:	4620      	mov	r0, r4
 8003256:	f7ff ff5e 	bl	8003116 <HAL_TIM_PWM_PulseFinishedCallback>
 800325a:	e7af      	b.n	80031bc <HAL_TIM_IRQHandler+0xa2>
 800325c:	bd10      	pop	{r4, pc}
	...

08003260 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8003260:	4a2e      	ldr	r2, [pc, #184]	; (800331c <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 8003262:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8003264:	4290      	cmp	r0, r2
 8003266:	d012      	beq.n	800328e <TIM_Base_SetConfig+0x2e>
 8003268:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800326c:	d00f      	beq.n	800328e <TIM_Base_SetConfig+0x2e>
 800326e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003272:	4290      	cmp	r0, r2
 8003274:	d00b      	beq.n	800328e <TIM_Base_SetConfig+0x2e>
 8003276:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800327a:	4290      	cmp	r0, r2
 800327c:	d007      	beq.n	800328e <TIM_Base_SetConfig+0x2e>
 800327e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003282:	4290      	cmp	r0, r2
 8003284:	d003      	beq.n	800328e <TIM_Base_SetConfig+0x2e>
 8003286:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800328a:	4290      	cmp	r0, r2
 800328c:	d11d      	bne.n	80032ca <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 800328e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003290:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003294:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8003296:	4a21      	ldr	r2, [pc, #132]	; (800331c <TIM_Base_SetConfig+0xbc>)
 8003298:	4290      	cmp	r0, r2
 800329a:	d104      	bne.n	80032a6 <TIM_Base_SetConfig+0x46>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800329c:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800329e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032a2:	4313      	orrs	r3, r2
 80032a4:	e028      	b.n	80032f8 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80032a6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80032aa:	d0f7      	beq.n	800329c <TIM_Base_SetConfig+0x3c>
 80032ac:	4a1c      	ldr	r2, [pc, #112]	; (8003320 <TIM_Base_SetConfig+0xc0>)
 80032ae:	4290      	cmp	r0, r2
 80032b0:	d0f4      	beq.n	800329c <TIM_Base_SetConfig+0x3c>
 80032b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80032b6:	4290      	cmp	r0, r2
 80032b8:	d0f0      	beq.n	800329c <TIM_Base_SetConfig+0x3c>
 80032ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80032be:	4290      	cmp	r0, r2
 80032c0:	d0ec      	beq.n	800329c <TIM_Base_SetConfig+0x3c>
 80032c2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80032c6:	4290      	cmp	r0, r2
 80032c8:	d0e8      	beq.n	800329c <TIM_Base_SetConfig+0x3c>
 80032ca:	4a16      	ldr	r2, [pc, #88]	; (8003324 <TIM_Base_SetConfig+0xc4>)
 80032cc:	4290      	cmp	r0, r2
 80032ce:	d0e5      	beq.n	800329c <TIM_Base_SetConfig+0x3c>
 80032d0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80032d4:	4290      	cmp	r0, r2
 80032d6:	d0e1      	beq.n	800329c <TIM_Base_SetConfig+0x3c>
 80032d8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80032dc:	4290      	cmp	r0, r2
 80032de:	d0dd      	beq.n	800329c <TIM_Base_SetConfig+0x3c>
 80032e0:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80032e4:	4290      	cmp	r0, r2
 80032e6:	d0d9      	beq.n	800329c <TIM_Base_SetConfig+0x3c>
 80032e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80032ec:	4290      	cmp	r0, r2
 80032ee:	d0d5      	beq.n	800329c <TIM_Base_SetConfig+0x3c>
 80032f0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80032f4:	4290      	cmp	r0, r2
 80032f6:	d0d1      	beq.n	800329c <TIM_Base_SetConfig+0x3c>
  TIMx->CR1 = tmpcr1;
 80032f8:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032fa:	688b      	ldr	r3, [r1, #8]
 80032fc:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80032fe:	680b      	ldr	r3, [r1, #0]
 8003300:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8003302:	4b06      	ldr	r3, [pc, #24]	; (800331c <TIM_Base_SetConfig+0xbc>)
 8003304:	4298      	cmp	r0, r3
 8003306:	d006      	beq.n	8003316 <TIM_Base_SetConfig+0xb6>
 8003308:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800330c:	4298      	cmp	r0, r3
 800330e:	d002      	beq.n	8003316 <TIM_Base_SetConfig+0xb6>
  TIMx->EGR = TIM_EGR_UG;
 8003310:	2301      	movs	r3, #1
 8003312:	6143      	str	r3, [r0, #20]
}
 8003314:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8003316:	690b      	ldr	r3, [r1, #16]
 8003318:	6303      	str	r3, [r0, #48]	; 0x30
 800331a:	e7f9      	b.n	8003310 <TIM_Base_SetConfig+0xb0>
 800331c:	40010000 	.word	0x40010000
 8003320:	40000400 	.word	0x40000400
 8003324:	40014000 	.word	0x40014000

08003328 <HAL_TIM_Base_Init>:
{ 
 8003328:	b510      	push	{r4, lr}
  if(htim == NULL)
 800332a:	4604      	mov	r4, r0
 800332c:	b1a0      	cbz	r0, 8003358 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800332e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003332:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003336:	b91b      	cbnz	r3, 8003340 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003338:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 800333c:	f001 ff0e 	bl	800515c <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8003340:	2302      	movs	r3, #2
 8003342:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8003346:	6820      	ldr	r0, [r4, #0]
 8003348:	1d21      	adds	r1, r4, #4
 800334a:	f7ff ff89 	bl	8003260 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800334e:	2301      	movs	r3, #1
 8003350:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8003354:	2000      	movs	r0, #0
 8003356:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003358:	2001      	movs	r0, #1
}
 800335a:	bd10      	pop	{r4, pc}

0800335c <HAL_TIM_PWM_Init>:
{
 800335c:	b510      	push	{r4, lr}
  if(htim == NULL)
 800335e:	4604      	mov	r4, r0
 8003360:	b1a0      	cbz	r0, 800338c <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8003362:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003366:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800336a:	b91b      	cbnz	r3, 8003374 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800336c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 8003370:	f7ff fe15 	bl	8002f9e <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;  
 8003374:	2302      	movs	r3, #2
 8003376:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800337a:	6820      	ldr	r0, [r4, #0]
 800337c:	1d21      	adds	r1, r4, #4
 800337e:	f7ff ff6f 	bl	8003260 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8003382:	2301      	movs	r3, #1
 8003384:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8003388:	2000      	movs	r0, #0
 800338a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800338c:	2001      	movs	r0, #1
}  
 800338e:	bd10      	pop	{r4, pc}

08003390 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003390:	6a03      	ldr	r3, [r0, #32]
 8003392:	f023 0310 	bic.w	r3, r3, #16
 8003396:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8003398:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 800339a:	6842      	ldr	r2, [r0, #4]
{
 800339c:	b570      	push	{r4, r5, r6, lr}
  tmpccmrx = TIMx->CCMR1;
 800339e:	6984      	ldr	r4, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033a0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80033a2:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033a6:	ea44 2505 	orr.w	r5, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033aa:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80033ac:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033b0:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80033b4:	4c0d      	ldr	r4, [pc, #52]	; (80033ec <TIM_OC2_SetConfig+0x5c>)
 80033b6:	42a0      	cmp	r0, r4
 80033b8:	d009      	beq.n	80033ce <TIM_OC2_SetConfig+0x3e>
 80033ba:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80033be:	42a0      	cmp	r0, r4
 80033c0:	d005      	beq.n	80033ce <TIM_OC2_SetConfig+0x3e>
  TIMx->CR2 = tmpcr2;
 80033c2:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 80033c4:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 80033c6:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80033c8:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80033ca:	6203      	str	r3, [r0, #32]
}
 80033cc:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80033ce:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80033d0:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 80033d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80033d6:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80033da:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80033dc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80033e0:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 80033e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80033e6:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
 80033ea:	e7ea      	b.n	80033c2 <TIM_OC2_SetConfig+0x32>
 80033ec:	40010000 	.word	0x40010000

080033f0 <HAL_TIM_PWM_ConfigChannel>:
{
 80033f0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80033f2:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80033f6:	2b01      	cmp	r3, #1
{
 80033f8:	4604      	mov	r4, r0
 80033fa:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80033fe:	d025      	beq.n	800344c <HAL_TIM_PWM_ConfigChannel+0x5c>
 8003400:	2301      	movs	r3, #1
 8003402:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 8003406:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  switch (Channel)
 800340a:	2a0c      	cmp	r2, #12
 800340c:	d818      	bhi.n	8003440 <HAL_TIM_PWM_ConfigChannel+0x50>
 800340e:	e8df f002 	tbb	[pc, r2]
 8003412:	1707      	.short	0x1707
 8003414:	171e1717 	.word	0x171e1717
 8003418:	172f1717 	.word	0x172f1717
 800341c:	1717      	.short	0x1717
 800341e:	40          	.byte	0x40
 800341f:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003420:	6820      	ldr	r0, [r4, #0]
 8003422:	f7ff fd2d 	bl	8002e80 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003426:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003428:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800342a:	699a      	ldr	r2, [r3, #24]
 800342c:	f042 0208 	orr.w	r2, r2, #8
 8003430:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003432:	699a      	ldr	r2, [r3, #24]
 8003434:	f022 0204 	bic.w	r2, r2, #4
 8003438:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800343a:	699a      	ldr	r2, [r3, #24]
 800343c:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800343e:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8003440:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8003442:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003444:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8003448:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 800344c:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800344e:	6820      	ldr	r0, [r4, #0]
 8003450:	f7ff ff9e 	bl	8003390 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003454:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003456:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003458:	699a      	ldr	r2, [r3, #24]
 800345a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800345e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003460:	699a      	ldr	r2, [r3, #24]
 8003462:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003466:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003468:	699a      	ldr	r2, [r3, #24]
 800346a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800346e:	e7e6      	b.n	800343e <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003470:	6820      	ldr	r0, [r4, #0]
 8003472:	f7ff fd31 	bl	8002ed8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003476:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8003478:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800347a:	69da      	ldr	r2, [r3, #28]
 800347c:	f042 0208 	orr.w	r2, r2, #8
 8003480:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003482:	69da      	ldr	r2, [r3, #28]
 8003484:	f022 0204 	bic.w	r2, r2, #4
 8003488:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 800348a:	69da      	ldr	r2, [r3, #28]
 800348c:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 800348e:	61da      	str	r2, [r3, #28]
    break;
 8003490:	e7d6      	b.n	8003440 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003492:	6820      	ldr	r0, [r4, #0]
 8003494:	f7ff fd50 	bl	8002f38 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003498:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 800349a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800349c:	69da      	ldr	r2, [r3, #28]
 800349e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034a2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80034a4:	69da      	ldr	r2, [r3, #28]
 80034a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034aa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 80034ac:	69da      	ldr	r2, [r3, #28]
 80034ae:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80034b2:	e7ec      	b.n	800348e <HAL_TIM_PWM_ConfigChannel+0x9e>

080034b4 <TIM_CCxChannelCmd>:
  TIMx->CCER &= ~tmp;
 80034b4:	6a03      	ldr	r3, [r0, #32]
{
 80034b6:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << Channel;
 80034b8:	2401      	movs	r4, #1
 80034ba:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80034bc:	ea23 0304 	bic.w	r3, r3, r4
 80034c0:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80034c2:	6a03      	ldr	r3, [r0, #32]
 80034c4:	408a      	lsls	r2, r1
 80034c6:	431a      	orrs	r2, r3
 80034c8:	6202      	str	r2, [r0, #32]
 80034ca:	bd10      	pop	{r4, pc}

080034cc <HAL_TIM_PWM_Start>:
{
 80034cc:	b510      	push	{r4, lr}
 80034ce:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80034d0:	2201      	movs	r2, #1
 80034d2:	6800      	ldr	r0, [r0, #0]
 80034d4:	f7ff ffee 	bl	80034b4 <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 80034d8:	6823      	ldr	r3, [r4, #0]
 80034da:	4a08      	ldr	r2, [pc, #32]	; (80034fc <HAL_TIM_PWM_Start+0x30>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d003      	beq.n	80034e8 <HAL_TIM_PWM_Start+0x1c>
 80034e0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d103      	bne.n	80034f0 <HAL_TIM_PWM_Start+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 80034e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034ee:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	f042 0201 	orr.w	r2, r2, #1
 80034f6:	601a      	str	r2, [r3, #0]
} 
 80034f8:	2000      	movs	r0, #0
 80034fa:	bd10      	pop	{r4, pc}
 80034fc:	40010000 	.word	0x40010000

08003500 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8003500:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003504:	2b01      	cmp	r3, #1
{
 8003506:	b510      	push	{r4, lr}
 8003508:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 800350c:	d018      	beq.n	8003540 <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 800350e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8003512:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8003514:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8003516:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8003518:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800351a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800351e:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8003520:	685a      	ldr	r2, [r3, #4]
 8003522:	4322      	orrs	r2, r4
 8003524:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8003526:	689a      	ldr	r2, [r3, #8]
 8003528:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800352c:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800352e:	689a      	ldr	r2, [r3, #8]
 8003530:	430a      	orrs	r2, r1
 8003532:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8003534:	2301      	movs	r3, #1
 8003536:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 800353a:	2300      	movs	r3, #0
 800353c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8003540:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 8003542:	bd10      	pop	{r4, pc}

08003544 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8003544:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003548:	2b01      	cmp	r3, #1
 800354a:	d01f      	beq.n	800358c <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800354c:	68cb      	ldr	r3, [r1, #12]
 800354e:	688a      	ldr	r2, [r1, #8]
 8003550:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003554:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003556:	684a      	ldr	r2, [r1, #4]
 8003558:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800355c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800355e:	680a      	ldr	r2, [r1, #0]
 8003560:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003564:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003566:	690a      	ldr	r2, [r1, #16]
 8003568:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800356c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800356e:	694a      	ldr	r2, [r1, #20]
 8003570:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003574:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003576:	698a      	ldr	r2, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003578:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800357c:	4313      	orrs	r3, r2
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800357e:	6802      	ldr	r2, [r0, #0]
 8003580:	6453      	str	r3, [r2, #68]	; 0x44
  
  __HAL_UNLOCK(htim);
 8003582:	2300      	movs	r3, #0
 8003584:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  return HAL_OK;
 8003588:	4618      	mov	r0, r3
 800358a:	4770      	bx	lr
  __HAL_LOCK(htim);
 800358c:	2002      	movs	r0, #2
}
 800358e:	4770      	bx	lr

08003590 <HAL_TIMEx_CommutationCallback>:
 8003590:	4770      	bx	lr

08003592 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003592:	4770      	bx	lr

08003594 <USART_EndRxTransfer>:
  * @retval None
  */
static void USART_EndRxTransfer(USART_HandleTypeDef *husart)
{
  /* Disable RXNE, PE and ERR interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003594:	6803      	ldr	r3, [r0, #0]
 8003596:	68da      	ldr	r2, [r3, #12]
 8003598:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800359c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 800359e:	695a      	ldr	r2, [r3, #20]
 80035a0:	f022 0201 	bic.w	r2, r2, #1
 80035a4:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 80035a6:	2301      	movs	r3, #1
 80035a8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 80035ac:	4770      	bx	lr
	...

080035b0 <HAL_USART_Init>:
{
 80035b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(husart == NULL)
 80035b4:	4605      	mov	r5, r0
 80035b6:	2800      	cmp	r0, #0
 80035b8:	f000 808c 	beq.w	80036d4 <HAL_USART_Init+0x124>
  if(husart->State == HAL_USART_STATE_RESET)
 80035bc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80035c0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80035c4:	b91b      	cbnz	r3, 80035ce <HAL_USART_Init+0x1e>
    husart->Lock = HAL_UNLOCKED;
 80035c6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_USART_MspInit(husart);
 80035ca:	f001 ffcf 	bl	800556c <HAL_USART_MspInit>
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 80035ce:	682e      	ldr	r6, [r5, #0]
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE| husart->Init.CLKPolarity |
 80035d0:	69e9      	ldr	r1, [r5, #28]
  husart->State = HAL_USART_STATE_BUSY;
 80035d2:	2302      	movs	r3, #2
 80035d4:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 80035d8:	68f3      	ldr	r3, [r6, #12]
 80035da:	f023 030c 	bic.w	r3, r3, #12
 80035de:	60f3      	str	r3, [r6, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE| husart->Init.CLKPolarity |
 80035e0:	69ab      	ldr	r3, [r5, #24]
  tmpreg = husart->Instance->CR2;
 80035e2:	6932      	ldr	r2, [r6, #16]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE| husart->Init.CLKPolarity |
 80035e4:	430b      	orrs	r3, r1
 80035e6:	6a29      	ldr	r1, [r5, #32]
 80035e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80035ec:	430b      	orrs	r3, r1
 80035ee:	68e9      	ldr	r1, [r5, #12]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 80035f0:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE| husart->Init.CLKPolarity |
 80035f4:	430b      	orrs	r3, r1
 80035f6:	4313      	orrs	r3, r2
                       husart->Init.CLKPhase| husart->Init.CLKLastBit | husart->Init.StopBits);
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 80035f8:	6133      	str	r3, [r6, #16]
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
     Force OVER8 bit to 1 in order to reach the max USART frequencies */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 80035fa:	6929      	ldr	r1, [r5, #16]
 80035fc:	68ab      	ldr	r3, [r5, #8]
  tmpreg = husart->Instance->CR1;
 80035fe:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8003600:	430b      	orrs	r3, r1
 8003602:	6969      	ldr	r1, [r5, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8003604:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8003608:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800360c:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8003610:	430b      	orrs	r3, r1
 8003612:	4313      	orrs	r3, r2

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 8003614:	60f3      	str	r3, [r6, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 8003616:	6973      	ldr	r3, [r6, #20]
 8003618:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800361c:	6173      	str	r3, [r6, #20]

  /*-------------------------- USART BRR Configuration -----------------------*/
#if defined(USART6) 
  if((husart->Instance == USART1) || (husart->Instance == USART6))
 800361e:	4b2f      	ldr	r3, [pc, #188]	; (80036dc <HAL_USART_Init+0x12c>)
 8003620:	429e      	cmp	r6, r3
 8003622:	d003      	beq.n	800362c <HAL_USART_Init+0x7c>
 8003624:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003628:	429e      	cmp	r6, r3
 800362a:	d13b      	bne.n	80036a4 <HAL_USART_Init+0xf4>
  {
    husart->Instance->BRR = USART_BRR(HAL_RCC_GetPCLK2Freq(), husart->Init.BaudRate);
 800362c:	f7ff fc18 	bl	8002e60 <HAL_RCC_GetPCLK2Freq>
 8003630:	686f      	ldr	r7, [r5, #4]
 8003632:	2419      	movs	r4, #25
 8003634:	fb04 f300 	mul.w	r3, r4, r0
 8003638:	007f      	lsls	r7, r7, #1
 800363a:	f04f 0864 	mov.w	r8, #100	; 0x64
 800363e:	fbb3 f3f7 	udiv	r3, r3, r7
 8003642:	fbb3 f3f8 	udiv	r3, r3, r8
 8003646:	011f      	lsls	r7, r3, #4
 8003648:	f7ff fc0a 	bl	8002e60 <HAL_RCC_GetPCLK2Freq>
 800364c:	686b      	ldr	r3, [r5, #4]
 800364e:	4360      	muls	r0, r4
 8003650:	005b      	lsls	r3, r3, #1
 8003652:	fbb0 f9f3 	udiv	r9, r0, r3
 8003656:	f7ff fc03 	bl	8002e60 <HAL_RCC_GetPCLK2Freq>
    husart->Instance->BRR = USART_BRR(HAL_RCC_GetPCLK2Freq(), husart->Init.BaudRate);
  }	
#endif /* USART6 */	
  else
  {
    husart->Instance->BRR = USART_BRR(HAL_RCC_GetPCLK1Freq(), husart->Init.BaudRate);
 800365a:	686b      	ldr	r3, [r5, #4]
 800365c:	4360      	muls	r0, r4
 800365e:	005b      	lsls	r3, r3, #1
 8003660:	fbb0 f3f3 	udiv	r3, r0, r3
 8003664:	fbb3 f3f8 	udiv	r3, r3, r8
 8003668:	fb08 9313 	mls	r3, r8, r3, r9
 800366c:	011b      	lsls	r3, r3, #4
 800366e:	3332      	adds	r3, #50	; 0x32
 8003670:	fbb3 f3f8 	udiv	r3, r3, r8
 8003674:	f003 030f 	and.w	r3, r3, #15
 8003678:	433b      	orrs	r3, r7
 800367a:	60b3      	str	r3, [r6, #8]
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 800367c:	682b      	ldr	r3, [r5, #0]
 800367e:	691a      	ldr	r2, [r3, #16]
 8003680:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003684:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003686:	695a      	ldr	r2, [r3, #20]
 8003688:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800368c:	615a      	str	r2, [r3, #20]
  __HAL_USART_ENABLE(husart);
 800368e:	68da      	ldr	r2, [r3, #12]
 8003690:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003694:	60da      	str	r2, [r3, #12]
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8003696:	2000      	movs	r0, #0
  husart->State= HAL_USART_STATE_READY;
 8003698:	2301      	movs	r3, #1
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800369a:	6428      	str	r0, [r5, #64]	; 0x40
  husart->State= HAL_USART_STATE_READY;
 800369c:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  return HAL_OK;
 80036a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    husart->Instance->BRR = USART_BRR(HAL_RCC_GetPCLK1Freq(), husart->Init.BaudRate);
 80036a4:	f7ff fbcc 	bl	8002e40 <HAL_RCC_GetPCLK1Freq>
 80036a8:	686f      	ldr	r7, [r5, #4]
 80036aa:	2419      	movs	r4, #25
 80036ac:	fb04 f300 	mul.w	r3, r4, r0
 80036b0:	007f      	lsls	r7, r7, #1
 80036b2:	f04f 0864 	mov.w	r8, #100	; 0x64
 80036b6:	fbb3 f3f7 	udiv	r3, r3, r7
 80036ba:	fbb3 f3f8 	udiv	r3, r3, r8
 80036be:	011f      	lsls	r7, r3, #4
 80036c0:	f7ff fbbe 	bl	8002e40 <HAL_RCC_GetPCLK1Freq>
 80036c4:	686b      	ldr	r3, [r5, #4]
 80036c6:	4360      	muls	r0, r4
 80036c8:	005b      	lsls	r3, r3, #1
 80036ca:	fbb0 f9f3 	udiv	r9, r0, r3
 80036ce:	f7ff fbb7 	bl	8002e40 <HAL_RCC_GetPCLK1Freq>
 80036d2:	e7c2      	b.n	800365a <HAL_USART_Init+0xaa>
    return HAL_ERROR;
 80036d4:	2001      	movs	r0, #1
}
 80036d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80036da:	bf00      	nop
 80036dc:	40011000 	.word	0x40011000

080036e0 <HAL_USART_TxCpltCallback>:
 80036e0:	4770      	bx	lr

080036e2 <HAL_USART_RxCpltCallback>:
 80036e2:	4770      	bx	lr

080036e4 <USART_Receive_IT>:
  if(husart->State == HAL_USART_STATE_BUSY_RX)
 80036e4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80036e8:	2b22      	cmp	r3, #34	; 0x22
{
 80036ea:	b510      	push	{r4, lr}
  if(husart->State == HAL_USART_STATE_BUSY_RX)
 80036ec:	d146      	bne.n	800377c <USART_Receive_IT+0x98>
    if(husart->Init.WordLength == USART_WORDLENGTH_9B)
 80036ee:	6883      	ldr	r3, [r0, #8]
 80036f0:	6901      	ldr	r1, [r0, #16]
 80036f2:	6802      	ldr	r2, [r0, #0]
 80036f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036f8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80036fa:	d12a      	bne.n	8003752 <USART_Receive_IT+0x6e>
      if(husart->Init.Parity == USART_PARITY_NONE)
 80036fc:	bb21      	cbnz	r1, 8003748 <USART_Receive_IT+0x64>
        *tmp = (uint16_t)(husart->Instance->DR & (uint16_t)0x01FF);
 80036fe:	6851      	ldr	r1, [r2, #4]
 8003700:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8003704:	f823 1b02 	strh.w	r1, [r3], #2
        husart->pRxBuffPtr += 1U;
 8003708:	62c3      	str	r3, [r0, #44]	; 0x2c
      if(--husart->RxXferCount != 0x00U)
 800370a:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 800370c:	3b01      	subs	r3, #1
 800370e:	b29b      	uxth	r3, r3
 8003710:	8643      	strh	r3, [r0, #50]	; 0x32
 8003712:	b113      	cbz	r3, 800371a <USART_Receive_IT+0x36>
        husart->Instance->DR = (DUMMY_DATA & (uint16_t)0x01FF);
 8003714:	f240 13ff 	movw	r3, #511	; 0x1ff
 8003718:	6053      	str	r3, [r2, #4]
    if(husart->RxXferCount == 0U)
 800371a:	8e44      	ldrh	r4, [r0, #50]	; 0x32
 800371c:	b2a4      	uxth	r4, r4
 800371e:	b98c      	cbnz	r4, 8003744 <USART_Receive_IT+0x60>
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 8003720:	6803      	ldr	r3, [r0, #0]
 8003722:	68da      	ldr	r2, [r3, #12]
 8003724:	f022 0220 	bic.w	r2, r2, #32
 8003728:	60da      	str	r2, [r3, #12]
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 800372a:	68da      	ldr	r2, [r3, #12]
 800372c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003730:	60da      	str	r2, [r3, #12]
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8003732:	695a      	ldr	r2, [r3, #20]
 8003734:	f022 0201 	bic.w	r2, r2, #1
 8003738:	615a      	str	r2, [r3, #20]
      husart->State = HAL_USART_STATE_READY;
 800373a:	2301      	movs	r3, #1
 800373c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_USART_RxCpltCallback(husart);
 8003740:	f7ff ffcf 	bl	80036e2 <HAL_USART_RxCpltCallback>
    if(husart->RxXferCount == 0U)
 8003744:	2000      	movs	r0, #0
}
 8003746:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(husart->Instance->DR & (uint16_t)0x00FF);
 8003748:	6851      	ldr	r1, [r2, #4]
 800374a:	b2c9      	uxtb	r1, r1
 800374c:	f823 1b01 	strh.w	r1, [r3], #1
 8003750:	e7da      	b.n	8003708 <USART_Receive_IT+0x24>
      if(husart->Init.Parity == USART_PARITY_NONE)
 8003752:	b969      	cbnz	r1, 8003770 <USART_Receive_IT+0x8c>
        *husart->pRxBuffPtr++ = (uint8_t)(husart->Instance->DR & (uint8_t)0x00FF);
 8003754:	1c59      	adds	r1, r3, #1
 8003756:	6852      	ldr	r2, [r2, #4]
 8003758:	62c1      	str	r1, [r0, #44]	; 0x2c
        *husart->pRxBuffPtr++ = (uint8_t)(husart->Instance->DR & (uint8_t)0x007F);
 800375a:	701a      	strb	r2, [r3, #0]
      if(--husart->RxXferCount != 0x00U)
 800375c:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 800375e:	3b01      	subs	r3, #1
 8003760:	b29b      	uxth	r3, r3
 8003762:	8643      	strh	r3, [r0, #50]	; 0x32
 8003764:	2b00      	cmp	r3, #0
 8003766:	d0d8      	beq.n	800371a <USART_Receive_IT+0x36>
        husart->Instance->DR = (DUMMY_DATA & (uint16_t)0x00FF);
 8003768:	6803      	ldr	r3, [r0, #0]
 800376a:	22ff      	movs	r2, #255	; 0xff
 800376c:	605a      	str	r2, [r3, #4]
 800376e:	e7d4      	b.n	800371a <USART_Receive_IT+0x36>
        *husart->pRxBuffPtr++ = (uint8_t)(husart->Instance->DR & (uint8_t)0x007F);
 8003770:	6852      	ldr	r2, [r2, #4]
 8003772:	1c59      	adds	r1, r3, #1
 8003774:	62c1      	str	r1, [r0, #44]	; 0x2c
 8003776:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800377a:	e7ee      	b.n	800375a <USART_Receive_IT+0x76>
    return HAL_BUSY;
 800377c:	2002      	movs	r0, #2
 800377e:	bd10      	pop	{r4, pc}

08003780 <HAL_USART_TxRxCpltCallback>:
 8003780:	4770      	bx	lr

08003782 <USART_TransmitReceive_IT>:
  if(husart->State == HAL_USART_STATE_BUSY_TX_RX)
 8003782:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003786:	2b32      	cmp	r3, #50	; 0x32
{
 8003788:	b510      	push	{r4, lr}
  if(husart->State == HAL_USART_STATE_BUSY_TX_RX)
 800378a:	d165      	bne.n	8003858 <USART_TransmitReceive_IT+0xd6>
    if(husart->TxXferCount != 0x00U)
 800378c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800378e:	b29b      	uxth	r3, r3
 8003790:	b1e3      	cbz	r3, 80037cc <USART_TransmitReceive_IT+0x4a>
      if(__HAL_USART_GET_FLAG(husart, USART_FLAG_TXE) != RESET)
 8003792:	6802      	ldr	r2, [r0, #0]
 8003794:	6813      	ldr	r3, [r2, #0]
 8003796:	0619      	lsls	r1, r3, #24
 8003798:	d518      	bpl.n	80037cc <USART_TransmitReceive_IT+0x4a>
        if(husart->Init.WordLength == USART_WORDLENGTH_9B)
 800379a:	6883      	ldr	r3, [r0, #8]
 800379c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037a0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80037a2:	d144      	bne.n	800382e <USART_TransmitReceive_IT+0xac>
          husart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80037a4:	8819      	ldrh	r1, [r3, #0]
 80037a6:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80037aa:	6051      	str	r1, [r2, #4]
          if(husart->Init.Parity == USART_PARITY_NONE)
 80037ac:	6901      	ldr	r1, [r0, #16]
 80037ae:	2900      	cmp	r1, #0
 80037b0:	d13b      	bne.n	800382a <USART_TransmitReceive_IT+0xa8>
            husart->pTxBuffPtr += 2U;
 80037b2:	3302      	adds	r3, #2
            husart->pTxBuffPtr += 1U;
 80037b4:	6243      	str	r3, [r0, #36]	; 0x24
        husart->TxXferCount--;
 80037b6:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80037b8:	3b01      	subs	r3, #1
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	8543      	strh	r3, [r0, #42]	; 0x2a
        if(husart->TxXferCount == 0U)
 80037be:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	b91b      	cbnz	r3, 80037cc <USART_TransmitReceive_IT+0x4a>
          CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 80037c4:	68d3      	ldr	r3, [r2, #12]
 80037c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037ca:	60d3      	str	r3, [r2, #12]
    if(husart->RxXferCount != 0x00U)
 80037cc:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	b1a3      	cbz	r3, 80037fc <USART_TransmitReceive_IT+0x7a>
      if(__HAL_USART_GET_FLAG(husart, USART_FLAG_RXNE) != RESET)
 80037d2:	6802      	ldr	r2, [r0, #0]
 80037d4:	6813      	ldr	r3, [r2, #0]
 80037d6:	069b      	lsls	r3, r3, #26
 80037d8:	d510      	bpl.n	80037fc <USART_TransmitReceive_IT+0x7a>
        if(husart->Init.WordLength == USART_WORDLENGTH_9B)
 80037da:	6883      	ldr	r3, [r0, #8]
 80037dc:	6901      	ldr	r1, [r0, #16]
 80037de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037e2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80037e4:	d12c      	bne.n	8003840 <USART_TransmitReceive_IT+0xbe>
            *tmp = (uint16_t)(husart->Instance->DR & (uint16_t)0x01FF);
 80037e6:	6852      	ldr	r2, [r2, #4]
          if(husart->Init.Parity == USART_PARITY_NONE)
 80037e8:	bb31      	cbnz	r1, 8003838 <USART_TransmitReceive_IT+0xb6>
            *tmp = (uint16_t)(husart->Instance->DR & (uint16_t)0x01FF);
 80037ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037ee:	f823 2b02 	strh.w	r2, [r3], #2
            husart->pRxBuffPtr += 1U;
 80037f2:	62c3      	str	r3, [r0, #44]	; 0x2c
        husart->RxXferCount--;
 80037f4:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80037f6:	3b01      	subs	r3, #1
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	8643      	strh	r3, [r0, #50]	; 0x32
    if(husart->RxXferCount == 0U)
 80037fc:	8e44      	ldrh	r4, [r0, #50]	; 0x32
 80037fe:	b2a4      	uxth	r4, r4
 8003800:	b98c      	cbnz	r4, 8003826 <USART_TransmitReceive_IT+0xa4>
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 8003802:	6803      	ldr	r3, [r0, #0]
 8003804:	68da      	ldr	r2, [r3, #12]
 8003806:	f022 0220 	bic.w	r2, r2, #32
 800380a:	60da      	str	r2, [r3, #12]
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 800380c:	68da      	ldr	r2, [r3, #12]
 800380e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003812:	60da      	str	r2, [r3, #12]
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8003814:	695a      	ldr	r2, [r3, #20]
 8003816:	f022 0201 	bic.w	r2, r2, #1
 800381a:	615a      	str	r2, [r3, #20]
      husart->State = HAL_USART_STATE_READY;
 800381c:	2301      	movs	r3, #1
 800381e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_USART_TxRxCpltCallback(husart);
 8003822:	f7ff ffad 	bl	8003780 <HAL_USART_TxRxCpltCallback>
    if(husart->RxXferCount == 0U)
 8003826:	2000      	movs	r0, #0
}
 8003828:	bd10      	pop	{r4, pc}
            husart->pTxBuffPtr += 1U;
 800382a:	3301      	adds	r3, #1
 800382c:	e7c2      	b.n	80037b4 <USART_TransmitReceive_IT+0x32>
          husart->Instance->DR = (uint8_t)(*husart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800382e:	1c59      	adds	r1, r3, #1
 8003830:	6241      	str	r1, [r0, #36]	; 0x24
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	6053      	str	r3, [r2, #4]
 8003836:	e7be      	b.n	80037b6 <USART_TransmitReceive_IT+0x34>
            *tmp = (uint16_t)(husart->Instance->DR & (uint16_t)0x00FF);
 8003838:	b2d2      	uxtb	r2, r2
 800383a:	f823 2b01 	strh.w	r2, [r3], #1
 800383e:	e7d8      	b.n	80037f2 <USART_TransmitReceive_IT+0x70>
          if(husart->Init.Parity == USART_PARITY_NONE)
 8003840:	b921      	cbnz	r1, 800384c <USART_TransmitReceive_IT+0xca>
            *husart->pRxBuffPtr++ = (uint8_t)(husart->Instance->DR & (uint8_t)0x00FF);
 8003842:	1c59      	adds	r1, r3, #1
 8003844:	6852      	ldr	r2, [r2, #4]
 8003846:	62c1      	str	r1, [r0, #44]	; 0x2c
            *husart->pRxBuffPtr++ = (uint8_t)(husart->Instance->DR & (uint8_t)0x007F);
 8003848:	701a      	strb	r2, [r3, #0]
 800384a:	e7d3      	b.n	80037f4 <USART_TransmitReceive_IT+0x72>
 800384c:	6852      	ldr	r2, [r2, #4]
 800384e:	1c59      	adds	r1, r3, #1
 8003850:	62c1      	str	r1, [r0, #44]	; 0x2c
 8003852:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003856:	e7f7      	b.n	8003848 <USART_TransmitReceive_IT+0xc6>
    return HAL_BUSY;
 8003858:	2002      	movs	r0, #2
 800385a:	bd10      	pop	{r4, pc}

0800385c <HAL_USART_ErrorCallback>:
 800385c:	4770      	bx	lr
	...

08003860 <HAL_USART_IRQHandler>:
  uint32_t isrflags = READ_REG(husart->Instance->SR);
 8003860:	6803      	ldr	r3, [r0, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its   = READ_REG(husart->Instance->CR1);
 8003864:	68d9      	ldr	r1, [r3, #12]
{
 8003866:	b570      	push	{r4, r5, r6, lr}
  if(errorflags == RESET)
 8003868:	0716      	lsls	r6, r2, #28
{
 800386a:	4604      	mov	r4, r0
  uint32_t cr3its   = READ_REG(husart->Instance->CR3);
 800386c:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 800386e:	d110      	bne.n	8003892 <HAL_USART_IRQHandler+0x32>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003870:	0696      	lsls	r6, r2, #26
 8003872:	d56a      	bpl.n	800394a <HAL_USART_IRQHandler+0xea>
 8003874:	068d      	lsls	r5, r1, #26
 8003876:	d568      	bpl.n	800394a <HAL_USART_IRQHandler+0xea>
      if(husart->State == HAL_USART_STATE_BUSY_RX)
 8003878:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800387c:	2b22      	cmp	r3, #34	; 0x22
 800387e:	d103      	bne.n	8003888 <HAL_USART_IRQHandler+0x28>
}
 8003880:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        USART_Receive_IT(husart);
 8003884:	f7ff bf2e 	b.w	80036e4 <USART_Receive_IT>
        USART_TransmitReceive_IT(husart);
 8003888:	4620      	mov	r0, r4
}
 800388a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        USART_TransmitReceive_IT(husart);
 800388e:	f7ff bf78 	b.w	8003782 <USART_TransmitReceive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003892:	f015 0501 	ands.w	r5, r5, #1
 8003896:	d102      	bne.n	800389e <HAL_USART_IRQHandler+0x3e>
 8003898:	f411 7f90 	tst.w	r1, #288	; 0x120
 800389c:	d055      	beq.n	800394a <HAL_USART_IRQHandler+0xea>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800389e:	07d3      	lsls	r3, r2, #31
 80038a0:	d505      	bpl.n	80038ae <HAL_USART_IRQHandler+0x4e>
 80038a2:	05ce      	lsls	r6, r1, #23
      husart->ErrorCode |= HAL_USART_ERROR_PE;
 80038a4:	bf42      	ittt	mi
 80038a6:	6c23      	ldrmi	r3, [r4, #64]	; 0x40
 80038a8:	f043 0301 	orrmi.w	r3, r3, #1
 80038ac:	6423      	strmi	r3, [r4, #64]	; 0x40
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038ae:	0750      	lsls	r0, r2, #29
 80038b0:	d504      	bpl.n	80038bc <HAL_USART_IRQHandler+0x5c>
 80038b2:	b11d      	cbz	r5, 80038bc <HAL_USART_IRQHandler+0x5c>
      husart->ErrorCode |= HAL_USART_ERROR_NE;
 80038b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80038b6:	f043 0302 	orr.w	r3, r3, #2
 80038ba:	6423      	str	r3, [r4, #64]	; 0x40
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038bc:	0793      	lsls	r3, r2, #30
 80038be:	d504      	bpl.n	80038ca <HAL_USART_IRQHandler+0x6a>
 80038c0:	b11d      	cbz	r5, 80038ca <HAL_USART_IRQHandler+0x6a>
      husart->ErrorCode |= HAL_USART_ERROR_FE;
 80038c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80038c4:	f043 0304 	orr.w	r3, r3, #4
 80038c8:	6423      	str	r3, [r4, #64]	; 0x40
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038ca:	0716      	lsls	r6, r2, #28
 80038cc:	d504      	bpl.n	80038d8 <HAL_USART_IRQHandler+0x78>
 80038ce:	b11d      	cbz	r5, 80038d8 <HAL_USART_IRQHandler+0x78>
      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 80038d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80038d2:	f043 0308 	orr.w	r3, r3, #8
 80038d6:	6423      	str	r3, [r4, #64]	; 0x40
    if(husart->ErrorCode != HAL_USART_ERROR_NONE)
 80038d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d075      	beq.n	80039ca <HAL_USART_IRQHandler+0x16a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038de:	0695      	lsls	r5, r2, #26
 80038e0:	d508      	bpl.n	80038f4 <HAL_USART_IRQHandler+0x94>
 80038e2:	0688      	lsls	r0, r1, #26
 80038e4:	d506      	bpl.n	80038f4 <HAL_USART_IRQHandler+0x94>
        if(husart->State == HAL_USART_STATE_BUSY_RX)
 80038e6:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80038ea:	2b22      	cmp	r3, #34	; 0x22
          USART_Receive_IT(husart);
 80038ec:	4620      	mov	r0, r4
        if(husart->State == HAL_USART_STATE_BUSY_RX)
 80038ee:	d121      	bne.n	8003934 <HAL_USART_IRQHandler+0xd4>
          USART_Receive_IT(husart);
 80038f0:	f7ff fef8 	bl	80036e4 <USART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR);
 80038f4:	6823      	ldr	r3, [r4, #0]
 80038f6:	695d      	ldr	r5, [r3, #20]
      if(((husart->ErrorCode & HAL_USART_ERROR_ORE) != RESET) || dmarequest)
 80038f8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80038fa:	0711      	lsls	r1, r2, #28
        USART_EndRxTransfer(husart);
 80038fc:	4620      	mov	r0, r4
      if(((husart->ErrorCode & HAL_USART_ERROR_ORE) != RESET) || dmarequest)
 80038fe:	d402      	bmi.n	8003906 <HAL_USART_IRQHandler+0xa6>
 8003900:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8003904:	d01d      	beq.n	8003942 <HAL_USART_IRQHandler+0xe2>
        USART_EndRxTransfer(husart);
 8003906:	f7ff fe45 	bl	8003594 <USART_EndRxTransfer>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800390a:	6823      	ldr	r3, [r4, #0]
 800390c:	695a      	ldr	r2, [r3, #20]
 800390e:	0652      	lsls	r2, r2, #25
 8003910:	d513      	bpl.n	800393a <HAL_USART_IRQHandler+0xda>
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR);
 8003912:	695a      	ldr	r2, [r3, #20]
          if(husart->hdmarx != NULL)
 8003914:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR);
 8003916:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800391a:	615a      	str	r2, [r3, #20]
          if(husart->hdmarx != NULL)
 800391c:	b168      	cbz	r0, 800393a <HAL_USART_IRQHandler+0xda>
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 800391e:	4b2b      	ldr	r3, [pc, #172]	; (80039cc <HAL_USART_IRQHandler+0x16c>)
 8003920:	6503      	str	r3, [r0, #80]	; 0x50
            if(HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 8003922:	f7fd fd39 	bl	8001398 <HAL_DMA_Abort_IT>
 8003926:	2800      	cmp	r0, #0
 8003928:	d04f      	beq.n	80039ca <HAL_USART_IRQHandler+0x16a>
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 800392a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
}
 800392c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 8003930:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003932:	4718      	bx	r3
          USART_TransmitReceive_IT(husart);
 8003934:	f7ff ff25 	bl	8003782 <USART_TransmitReceive_IT>
 8003938:	e7dc      	b.n	80038f4 <HAL_USART_IRQHandler+0x94>
            HAL_USART_ErrorCallback(husart);
 800393a:	4620      	mov	r0, r4
 800393c:	f7ff ff8e 	bl	800385c <HAL_USART_ErrorCallback>
 8003940:	bd70      	pop	{r4, r5, r6, pc}
        HAL_USART_ErrorCallback(husart);
 8003942:	f7ff ff8b 	bl	800385c <HAL_USART_ErrorCallback>
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 8003946:	6425      	str	r5, [r4, #64]	; 0x40
 8003948:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800394a:	0616      	lsls	r6, r2, #24
 800394c:	d52b      	bpl.n	80039a6 <HAL_USART_IRQHandler+0x146>
 800394e:	060d      	lsls	r5, r1, #24
 8003950:	d529      	bpl.n	80039a6 <HAL_USART_IRQHandler+0x146>
    if(husart->State == HAL_USART_STATE_BUSY_TX)
 8003952:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8003956:	2a12      	cmp	r2, #18
 8003958:	d196      	bne.n	8003888 <HAL_USART_IRQHandler+0x28>
  if(husart->State == HAL_USART_STATE_BUSY_TX)
 800395a:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 800395e:	2a12      	cmp	r2, #18
 8003960:	d133      	bne.n	80039ca <HAL_USART_IRQHandler+0x16a>
    if(husart->Init.WordLength == USART_WORDLENGTH_9B)
 8003962:	68a2      	ldr	r2, [r4, #8]
 8003964:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8003968:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800396a:	d117      	bne.n	800399c <HAL_USART_IRQHandler+0x13c>
      husart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800396c:	8811      	ldrh	r1, [r2, #0]
 800396e:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8003972:	6059      	str	r1, [r3, #4]
      if(husart->Init.Parity == USART_PARITY_NONE)
 8003974:	6921      	ldr	r1, [r4, #16]
 8003976:	b979      	cbnz	r1, 8003998 <HAL_USART_IRQHandler+0x138>
        husart->pTxBuffPtr += 2U;
 8003978:	3202      	adds	r2, #2
        husart->pTxBuffPtr += 1U;
 800397a:	6262      	str	r2, [r4, #36]	; 0x24
    if(--husart->TxXferCount == 0U)
 800397c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800397e:	3a01      	subs	r2, #1
 8003980:	b292      	uxth	r2, r2
 8003982:	8562      	strh	r2, [r4, #42]	; 0x2a
 8003984:	bb0a      	cbnz	r2, 80039ca <HAL_USART_IRQHandler+0x16a>
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 8003986:	68da      	ldr	r2, [r3, #12]
 8003988:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800398c:	60da      	str	r2, [r3, #12]
      SET_BIT(husart->Instance->CR1, USART_CR1_TCIE);
 800398e:	68da      	ldr	r2, [r3, #12]
 8003990:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003994:	60da      	str	r2, [r3, #12]
 8003996:	bd70      	pop	{r4, r5, r6, pc}
        husart->pTxBuffPtr += 1U;
 8003998:	3201      	adds	r2, #1
 800399a:	e7ee      	b.n	800397a <HAL_USART_IRQHandler+0x11a>
      husart->Instance->DR = (uint8_t)(*husart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800399c:	1c51      	adds	r1, r2, #1
 800399e:	6261      	str	r1, [r4, #36]	; 0x24
 80039a0:	7812      	ldrb	r2, [r2, #0]
 80039a2:	605a      	str	r2, [r3, #4]
 80039a4:	e7ea      	b.n	800397c <HAL_USART_IRQHandler+0x11c>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80039a6:	0650      	lsls	r0, r2, #25
 80039a8:	d50f      	bpl.n	80039ca <HAL_USART_IRQHandler+0x16a>
 80039aa:	064a      	lsls	r2, r1, #25
 80039ac:	d50d      	bpl.n	80039ca <HAL_USART_IRQHandler+0x16a>
  CLEAR_BIT(husart->Instance->CR1, USART_CR1_TCIE);
 80039ae:	68da      	ldr	r2, [r3, #12]
 80039b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039b4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 80039b6:	695a      	ldr	r2, [r3, #20]
 80039b8:	f022 0201 	bic.w	r2, r2, #1
 80039bc:	615a      	str	r2, [r3, #20]
  husart->State = HAL_USART_STATE_READY;
 80039be:	2301      	movs	r3, #1
 80039c0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  HAL_USART_TxCpltCallback(husart);
 80039c4:	4620      	mov	r0, r4
 80039c6:	f7ff fe8b 	bl	80036e0 <HAL_USART_TxCpltCallback>
 80039ca:	bd70      	pop	{r4, r5, r6, pc}
 80039cc:	080039d1 	.word	0x080039d1

080039d0 <USART_DMAAbortOnError>:
{
 80039d0:	b508      	push	{r3, lr}
  USART_HandleTypeDef* husart = ( USART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80039d2:	6b80      	ldr	r0, [r0, #56]	; 0x38
  husart->RxXferCount = 0x00U;
 80039d4:	2300      	movs	r3, #0
 80039d6:	8643      	strh	r3, [r0, #50]	; 0x32
  husart->TxXferCount = 0x00U;
 80039d8:	8543      	strh	r3, [r0, #42]	; 0x2a
  HAL_USART_ErrorCallback(husart);
 80039da:	f7ff ff3f 	bl	800385c <HAL_USART_ErrorCallback>
 80039de:	bd08      	pop	{r3, pc}

080039e0 <bldc_init>:
    return (out);
}
/**/
void bldc_init(volatile BLDC *bldc0, float dphi0 , float phi0 ,float Vdc0 , float Voffset0, float K0)
{
    bldc0->Voffset = Voffset0;
 80039e0:	edc0 1a02 	vstr	s3, [r0, #8]
    bldc0->Kf = K0;
 80039e4:	ed80 2a00 	vstr	s4, [r0]
    bldc0->Vdc = Vdc0;
 80039e8:	ed80 1a01 	vstr	s2, [r0, #4]
    bldc0->dphi = dphi0;
 80039ec:	ed80 0a06 	vstr	s0, [r0, #24]
    bldc0->angle = phi0;
 80039f0:	edc0 0a05 	vstr	s1, [r0, #20]
 80039f4:	4770      	bx	lr
	...

080039f8 <invSqrt>:
float invSqrt(float x) {
	float halfx = 0.5f * x;
	float y = x;
	long i = *(long*)&y;
	i = 0x5f3759df - (i>>1);
	y = *(float*)&i;
 80039f8:	ee10 2a10 	vmov	r2, s0
 80039fc:	4b08      	ldr	r3, [pc, #32]	; (8003a20 <invSqrt+0x28>)
	float halfx = 0.5f * x;
 80039fe:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	y = *(float*)&i;
 8003a02:	eba3 0362 	sub.w	r3, r3, r2, asr #1
 8003a06:	ee07 3a10 	vmov	s14, r3
	float halfx = 0.5f * x;
 8003a0a:	ee60 7a27 	vmul.f32	s15, s0, s15
	y = y * (1.5f - (halfx * y * y));
 8003a0e:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 8003a12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a16:	eea7 0a67 	vfms.f32	s0, s14, s15
	return y;
}
 8003a1a:	ee20 0a07 	vmul.f32	s0, s0, s14
 8003a1e:	4770      	bx	lr
 8003a20:	5f3759df 	.word	0x5f3759df

08003a24 <MadgwickAHRSupdateIMU>:
void MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az) {
 8003a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a28:	ed2d 8b10 	vpush	{d8-d15}
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8003a2c:	ee10 0a10 	vmov	r0, s0
void MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az) {
 8003a30:	b08b      	sub	sp, #44	; 0x2c
 8003a32:	eef0 8a61 	vmov.f32	s17, s3
 8003a36:	eeb0 8a42 	vmov.f32	s16, s4
 8003a3a:	eeb0 9a62 	vmov.f32	s18, s5
 8003a3e:	ed8d 1a04 	vstr	s2, [sp, #16]
 8003a42:	edcd 0a02 	vstr	s1, [sp, #8]
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8003a46:	f7fc fd23 	bl	8000490 <__aeabi_f2d>
 8003a4a:	eddd 0a02 	vldr	s1, [sp, #8]
 8003a4e:	f8df a364 	ldr.w	sl, [pc, #868]	; 8003db4 <MadgwickAHRSupdateIMU+0x390>
 8003a52:	f8df b364 	ldr.w	fp, [pc, #868]	; 8003db8 <MadgwickAHRSupdateIMU+0x394>
 8003a56:	e9cd 0100 	strd	r0, r1, [sp]
 8003a5a:	ee10 0a90 	vmov	r0, s1
 8003a5e:	f7fc fd17 	bl	8000490 <__aeabi_f2d>
 8003a62:	ed9d 1a04 	vldr	s2, [sp, #16]
 8003a66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003a6a:	ee11 0a10 	vmov	r0, s2
 8003a6e:	f7fc fd0f 	bl	8000490 <__aeabi_f2d>
 8003a72:	e9da 4500 	ldrd	r4, r5, [sl]
 8003a76:	4bca      	ldr	r3, [pc, #808]	; (8003da0 <MadgwickAHRSupdateIMU+0x37c>)
 8003a78:	e9db 6700 	ldrd	r6, r7, [fp]
 8003a7c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003a80:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003a84:	4620      	mov	r0, r4
 8003a86:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003a8a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8003a8e:	f7fc fd53 	bl	8000538 <__aeabi_dmul>
 8003a92:	4632      	mov	r2, r6
 8003a94:	4604      	mov	r4, r0
 8003a96:	460d      	mov	r5, r1
 8003a98:	463b      	mov	r3, r7
 8003a9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003a9e:	f7fc fd4b 	bl	8000538 <__aeabi_dmul>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	4620      	mov	r0, r4
 8003aa8:	4629      	mov	r1, r5
 8003aaa:	f7fc fb91 	bl	80001d0 <__aeabi_dsub>
 8003aae:	4642      	mov	r2, r8
 8003ab0:	4604      	mov	r4, r0
 8003ab2:	460d      	mov	r5, r1
 8003ab4:	464b      	mov	r3, r9
 8003ab6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003aba:	f7fc fd3d 	bl	8000538 <__aeabi_dmul>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	4620      	mov	r0, r4
 8003ac4:	4629      	mov	r1, r5
 8003ac6:	f7fc fb83 	bl	80001d0 <__aeabi_dsub>
 8003aca:	2200      	movs	r2, #0
 8003acc:	4bb5      	ldr	r3, [pc, #724]	; (8003da4 <MadgwickAHRSupdateIMU+0x380>)
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8003ace:	4cb6      	ldr	r4, [pc, #728]	; (8003da8 <MadgwickAHRSupdateIMU+0x384>)
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8003ad0:	f7fc fd32 	bl	8000538 <__aeabi_dmul>
 8003ad4:	f7fc ff42 	bl	800095c <__aeabi_d2f>
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8003ad8:	49b1      	ldr	r1, [pc, #708]	; (8003da0 <MadgwickAHRSupdateIMU+0x37c>)
 8003ada:	e9d4 2300 	ldrd	r2, r3, [r4]
 8003ade:	e9db 8900 	ldrd	r8, r9, [fp]
 8003ae2:	ed91 7b00 	vldr	d7, [r1]
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8003ae6:	ee0c 0a10 	vmov	s24, r0
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8003aea:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003aee:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003af2:	f7fc fd21 	bl	8000538 <__aeabi_dmul>
 8003af6:	4642      	mov	r2, r8
 8003af8:	4606      	mov	r6, r0
 8003afa:	460f      	mov	r7, r1
 8003afc:	464b      	mov	r3, r9
 8003afe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003b02:	f7fc fd19 	bl	8000538 <__aeabi_dmul>
 8003b06:	4602      	mov	r2, r0
 8003b08:	460b      	mov	r3, r1
 8003b0a:	4630      	mov	r0, r6
 8003b0c:	4639      	mov	r1, r7
 8003b0e:	f7fc fb61 	bl	80001d4 <__adddf3>
 8003b12:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003b16:	4606      	mov	r6, r0
 8003b18:	460f      	mov	r7, r1
 8003b1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003b1e:	f7fc fd0b 	bl	8000538 <__aeabi_dmul>
 8003b22:	4602      	mov	r2, r0
 8003b24:	460b      	mov	r3, r1
 8003b26:	4630      	mov	r0, r6
 8003b28:	4639      	mov	r1, r7
 8003b2a:	f7fc fb51 	bl	80001d0 <__aeabi_dsub>
 8003b2e:	2200      	movs	r2, #0
 8003b30:	4b9c      	ldr	r3, [pc, #624]	; (8003da4 <MadgwickAHRSupdateIMU+0x380>)
 8003b32:	f7fc fd01 	bl	8000538 <__aeabi_dmul>
 8003b36:	f7fc ff11 	bl	800095c <__aeabi_d2f>
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8003b3a:	4999      	ldr	r1, [pc, #612]	; (8003da0 <MadgwickAHRSupdateIMU+0x37c>)
 8003b3c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8003b40:	e9da 8900 	ldrd	r8, r9, [sl]
 8003b44:	ed91 7b00 	vldr	d7, [r1]
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8003b48:	ee0b 0a90 	vmov	s23, r0
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8003b4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003b50:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003b54:	f7fc fcf0 	bl	8000538 <__aeabi_dmul>
 8003b58:	4642      	mov	r2, r8
 8003b5a:	4606      	mov	r6, r0
 8003b5c:	460f      	mov	r7, r1
 8003b5e:	464b      	mov	r3, r9
 8003b60:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003b64:	f7fc fce8 	bl	8000538 <__aeabi_dmul>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	460b      	mov	r3, r1
 8003b6c:	4630      	mov	r0, r6
 8003b6e:	4639      	mov	r1, r7
 8003b70:	f7fc fb2e 	bl	80001d0 <__aeabi_dsub>
 8003b74:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003b78:	4606      	mov	r6, r0
 8003b7a:	460f      	mov	r7, r1
 8003b7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003b80:	f7fc fcda 	bl	8000538 <__aeabi_dmul>
 8003b84:	4602      	mov	r2, r0
 8003b86:	460b      	mov	r3, r1
 8003b88:	4630      	mov	r0, r6
 8003b8a:	4639      	mov	r1, r7
 8003b8c:	f7fc fb22 	bl	80001d4 <__adddf3>
 8003b90:	2200      	movs	r2, #0
 8003b92:	4b84      	ldr	r3, [pc, #528]	; (8003da4 <MadgwickAHRSupdateIMU+0x380>)
 8003b94:	f7fc fcd0 	bl	8000538 <__aeabi_dmul>
 8003b98:	f7fc fee0 	bl	800095c <__aeabi_d2f>
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8003b9c:	e9d4 2300 	ldrd	r2, r3, [r4]
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8003ba0:	ee0b 0a10 	vmov	s22, r0
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8003ba4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003ba8:	f7fc fcc6 	bl	8000538 <__aeabi_dmul>
 8003bac:	e9da 8900 	ldrd	r8, r9, [sl]
 8003bb0:	4606      	mov	r6, r0
 8003bb2:	460f      	mov	r7, r1
 8003bb4:	4642      	mov	r2, r8
 8003bb6:	464b      	mov	r3, r9
 8003bb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003bbc:	f7fc fcbc 	bl	8000538 <__aeabi_dmul>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	460b      	mov	r3, r1
 8003bc4:	4630      	mov	r0, r6
 8003bc6:	4639      	mov	r1, r7
 8003bc8:	f7fc fb04 	bl	80001d4 <__adddf3>
 8003bcc:	e9db 4500 	ldrd	r4, r5, [fp]
 8003bd0:	4606      	mov	r6, r0
 8003bd2:	4622      	mov	r2, r4
 8003bd4:	462b      	mov	r3, r5
 8003bd6:	460f      	mov	r7, r1
 8003bd8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003bdc:	f7fc fcac 	bl	8000538 <__aeabi_dmul>
 8003be0:	4602      	mov	r2, r0
 8003be2:	460b      	mov	r3, r1
 8003be4:	4630      	mov	r0, r6
 8003be6:	4639      	mov	r1, r7
 8003be8:	f7fc faf2 	bl	80001d0 <__aeabi_dsub>
 8003bec:	2200      	movs	r2, #0
 8003bee:	4b6d      	ldr	r3, [pc, #436]	; (8003da4 <MadgwickAHRSupdateIMU+0x380>)
 8003bf0:	4d6b      	ldr	r5, [pc, #428]	; (8003da0 <MadgwickAHRSupdateIMU+0x37c>)
 8003bf2:	f7fc fca1 	bl	8000538 <__aeabi_dmul>
 8003bf6:	f7fc feb1 	bl	800095c <__aeabi_d2f>
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8003bfa:	eef5 8a40 	vcmp.f32	s17, #0.0
 8003bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8003c02:	ee0a 0a90 	vmov	s21, r0
 8003c06:	46d0      	mov	r8, sl
 8003c08:	465c      	mov	r4, fp
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8003c0a:	d10a      	bne.n	8003c22 <MadgwickAHRSupdateIMU+0x1fe>
 8003c0c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8003c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c14:	d105      	bne.n	8003c22 <MadgwickAHRSupdateIMU+0x1fe>
 8003c16:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8003c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c1e:	f000 81f2 	beq.w	8004006 <MadgwickAHRSupdateIMU+0x5e2>
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8003c22:	ee28 0a08 	vmul.f32	s0, s16, s16
		_2q0 = 2.0f * q0;
 8003c26:	4e60      	ldr	r6, [pc, #384]	; (8003da8 <MadgwickAHRSupdateIMU+0x384>)
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8003c28:	eea8 0aa8 	vfma.f32	s0, s17, s17
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8003c2c:	eeb1 ea00 	vmov.f32	s28, #16	; 0x40800000  4.0
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8003c30:	eea9 0a09 	vfma.f32	s0, s18, s18
 8003c34:	f7ff fee0 	bl	80039f8 <invSqrt>
		_2q0 = 2.0f * q0;
 8003c38:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003c3c:	4610      	mov	r0, r2
 8003c3e:	4619      	mov	r1, r3
		ax *= recipNorm;
 8003c40:	ee68 8a80 	vmul.f32	s17, s17, s0
		ay *= recipNorm;
 8003c44:	ee28 8a00 	vmul.f32	s16, s16, s0
		az *= recipNorm;   
 8003c48:	ee29 9a00 	vmul.f32	s18, s18, s0
		_2q0 = 2.0f * q0;
 8003c4c:	f7fc fac2 	bl	80001d4 <__adddf3>
 8003c50:	f7fc fe84 	bl	800095c <__aeabi_d2f>
		_2q1 = 2.0f * q1;
 8003c54:	e9d8 2300 	ldrd	r2, r3, [r8]
		_2q0 = 2.0f * q0;
 8003c58:	ee0f 0a10 	vmov	s30, r0
		_2q1 = 2.0f * q1;
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	4610      	mov	r0, r2
 8003c60:	f7fc fab8 	bl	80001d4 <__adddf3>
 8003c64:	f7fc fe7a 	bl	800095c <__aeabi_d2f>
		_2q2 = 2.0f * q2;
 8003c68:	e9d4 2300 	ldrd	r2, r3, [r4]
		_2q1 = 2.0f * q1;
 8003c6c:	9000      	str	r0, [sp, #0]
		_2q2 = 2.0f * q2;
 8003c6e:	4619      	mov	r1, r3
 8003c70:	4610      	mov	r0, r2
 8003c72:	f7fc faaf 	bl	80001d4 <__adddf3>
 8003c76:	f7fc fe71 	bl	800095c <__aeabi_d2f>
		_2q3 = 2.0f * q3;
 8003c7a:	e9d5 2300 	ldrd	r2, r3, [r5]
		_2q2 = 2.0f * q2;
 8003c7e:	9002      	str	r0, [sp, #8]
		_2q3 = 2.0f * q3;
 8003c80:	4619      	mov	r1, r3
 8003c82:	4610      	mov	r0, r2
 8003c84:	f7fc faa6 	bl	80001d4 <__adddf3>
 8003c88:	f7fc fe68 	bl	800095c <__aeabi_d2f>
		_4q0 = 4.0f * q0;
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	4b47      	ldr	r3, [pc, #284]	; (8003dac <MadgwickAHRSupdateIMU+0x388>)
		_2q3 = 2.0f * q3;
 8003c90:	9004      	str	r0, [sp, #16]
		_4q0 = 4.0f * q0;
 8003c92:	e9d6 0100 	ldrd	r0, r1, [r6]
 8003c96:	f7fc fc4f 	bl	8000538 <__aeabi_dmul>
 8003c9a:	f7fc fe5f 	bl	800095c <__aeabi_d2f>
		_4q1 = 4.0f * q1;
 8003c9e:	2200      	movs	r2, #0
		_4q0 = 4.0f * q0;
 8003ca0:	ee0d 0a90 	vmov	s27, r0
		_4q1 = 4.0f * q1;
 8003ca4:	4b41      	ldr	r3, [pc, #260]	; (8003dac <MadgwickAHRSupdateIMU+0x388>)
 8003ca6:	e9d8 0100 	ldrd	r0, r1, [r8]
 8003caa:	f7fc fc45 	bl	8000538 <__aeabi_dmul>
 8003cae:	f7fc fe55 	bl	800095c <__aeabi_d2f>
		_4q2 = 4.0f * q2;
 8003cb2:	2200      	movs	r2, #0
		_4q1 = 4.0f * q1;
 8003cb4:	ee0d 0a10 	vmov	s26, r0
		_4q2 = 4.0f * q2;
 8003cb8:	4b3c      	ldr	r3, [pc, #240]	; (8003dac <MadgwickAHRSupdateIMU+0x388>)
 8003cba:	e9d4 0100 	ldrd	r0, r1, [r4]
 8003cbe:	f7fc fc3b 	bl	8000538 <__aeabi_dmul>
 8003cc2:	f7fc fe4b 	bl	800095c <__aeabi_d2f>
		_8q1 = 8.0f * q1;
 8003cc6:	2200      	movs	r2, #0
		_4q2 = 4.0f * q2;
 8003cc8:	ee0c 0a90 	vmov	s25, r0
		_8q1 = 8.0f * q1;
 8003ccc:	4b38      	ldr	r3, [pc, #224]	; (8003db0 <MadgwickAHRSupdateIMU+0x38c>)
 8003cce:	e9d8 0100 	ldrd	r0, r1, [r8]
 8003cd2:	f7fc fc31 	bl	8000538 <__aeabi_dmul>
 8003cd6:	f7fc fe41 	bl	800095c <__aeabi_d2f>
		_8q2 = 8.0f * q2;
 8003cda:	2200      	movs	r2, #0
		_8q1 = 8.0f * q1;
 8003cdc:	ee0f 0a90 	vmov	s31, r0
		_8q2 = 8.0f * q2;
 8003ce0:	4b33      	ldr	r3, [pc, #204]	; (8003db0 <MadgwickAHRSupdateIMU+0x38c>)
 8003ce2:	e9d4 0100 	ldrd	r0, r1, [r4]
 8003ce6:	f7fc fc27 	bl	8000538 <__aeabi_dmul>
 8003cea:	f7fc fe37 	bl	800095c <__aeabi_d2f>
		q0q0 = q0 * q0;
 8003cee:	e9d6 ab00 	ldrd	sl, fp, [r6]
		_8q2 = 8.0f * q2;
 8003cf2:	9006      	str	r0, [sp, #24]
		q0q0 = q0 * q0;
 8003cf4:	e9d6 6700 	ldrd	r6, r7, [r6]
		q1q1 = q1 * q1;
 8003cf8:	e9d8 0100 	ldrd	r0, r1, [r8]
 8003cfc:	e9d8 2300 	ldrd	r2, r3, [r8]
 8003d00:	f7fc fc1a 	bl	8000538 <__aeabi_dmul>
 8003d04:	f7fc fe2a 	bl	800095c <__aeabi_d2f>
 8003d08:	ee0a 0a10 	vmov	s20, r0
		q2q2 = q2 * q2;
 8003d0c:	e9d4 0100 	ldrd	r0, r1, [r4]
 8003d10:	e9d4 2300 	ldrd	r2, r3, [r4]
 8003d14:	f7fc fc10 	bl	8000538 <__aeabi_dmul>
 8003d18:	f7fc fe20 	bl	800095c <__aeabi_d2f>
 8003d1c:	ee09 0a90 	vmov	s19, r0
		q3q3 = q3 * q3;
 8003d20:	e9d5 0100 	ldrd	r0, r1, [r5]
 8003d24:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003d28:	f7fc fc06 	bl	8000538 <__aeabi_dmul>
 8003d2c:	f7fc fe16 	bl	800095c <__aeabi_d2f>
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8003d30:	eddd 7a02 	vldr	s15, [sp, #8]
 8003d34:	ed9d 7a00 	vldr	s14, [sp]
 8003d38:	ee68 7aa7 	vmul.f32	s15, s17, s15
		q0q0 = q0 * q0;
 8003d3c:	4632      	mov	r2, r6
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8003d3e:	eeed 7aa9 	vfma.f32	s15, s27, s19
		q0q0 = q0 * q0;
 8003d42:	463b      	mov	r3, r7
 8003d44:	4659      	mov	r1, fp
		q3q3 = q3 * q3;
 8003d46:	ee0e 0a90 	vmov	s29, r0
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8003d4a:	eeed 7a8a 	vfma.f32	s15, s27, s20
		q0q0 = q0 * q0;
 8003d4e:	4650      	mov	r0, sl
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8003d50:	eee8 7a47 	vfms.f32	s15, s16, s14
 8003d54:	eef0 da67 	vmov.f32	s27, s15
		q0q0 = q0 * q0;
 8003d58:	f7fc fbee 	bl	8000538 <__aeabi_dmul>
 8003d5c:	f7fc fdfe 	bl	800095c <__aeabi_d2f>
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8003d60:	ee07 0a90 	vmov	s15, r0
 8003d64:	ee67 7a8e 	vmul.f32	s15, s15, s28
 8003d68:	ee17 0a90 	vmov	r0, s15
 8003d6c:	f7fc fb90 	bl	8000490 <__aeabi_f2d>
 8003d70:	eddd 7a04 	vldr	s15, [sp, #16]
 8003d74:	ee67 6ae8 	vnmul.f32	s13, s15, s17
 8003d78:	4606      	mov	r6, r0
 8003d7a:	eeed 6a2e 	vfma.f32	s13, s26, s29
 8003d7e:	460f      	mov	r7, r1
 8003d80:	e9d8 ab00 	ldrd	sl, fp, [r8]
 8003d84:	ee16 0a90 	vmov	r0, s13
 8003d88:	f7fc fb82 	bl	8000490 <__aeabi_f2d>
 8003d8c:	4652      	mov	r2, sl
 8003d8e:	4680      	mov	r8, r0
 8003d90:	4689      	mov	r9, r1
 8003d92:	465b      	mov	r3, fp
 8003d94:	4630      	mov	r0, r6
 8003d96:	4639      	mov	r1, r7
 8003d98:	f7fc fbce 	bl	8000538 <__aeabi_dmul>
 8003d9c:	e00e      	b.n	8003dbc <MadgwickAHRSupdateIMU+0x398>
 8003d9e:	bf00      	nop
 8003da0:	20000050 	.word	0x20000050
 8003da4:	3fe00000 	.word	0x3fe00000
 8003da8:	20000010 	.word	0x20000010
 8003dac:	40100000 	.word	0x40100000
 8003db0:	40200000 	.word	0x40200000
 8003db4:	20000040 	.word	0x20000040
 8003db8:	20000048 	.word	0x20000048
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	460b      	mov	r3, r1
 8003dc0:	4640      	mov	r0, r8
 8003dc2:	4649      	mov	r1, r9
 8003dc4:	f7fc fa06 	bl	80001d4 <__adddf3>
 8003dc8:	ee68 7a0f 	vmul.f32	s15, s16, s30
 8003dcc:	4680      	mov	r8, r0
 8003dce:	ee17 0a90 	vmov	r0, s15
 8003dd2:	4689      	mov	r9, r1
 8003dd4:	f7fc fb5c 	bl	8000490 <__aeabi_f2d>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	460b      	mov	r3, r1
 8003ddc:	4640      	mov	r0, r8
 8003dde:	4649      	mov	r1, r9
 8003de0:	f7fc f9f6 	bl	80001d0 <__aeabi_dsub>
 8003de4:	4680      	mov	r8, r0
 8003de6:	ee1d 0a10 	vmov	r0, s26
 8003dea:	4689      	mov	r9, r1
 8003dec:	f7fc fb50 	bl	8000490 <__aeabi_f2d>
 8003df0:	4602      	mov	r2, r0
 8003df2:	460b      	mov	r3, r1
 8003df4:	4640      	mov	r0, r8
 8003df6:	4649      	mov	r1, r9
 8003df8:	f7fc f9ea 	bl	80001d0 <__aeabi_dsub>
 8003dfc:	ee6f 7a8a 	vmul.f32	s15, s31, s20
 8003e00:	4680      	mov	r8, r0
 8003e02:	ee17 0a90 	vmov	r0, s15
 8003e06:	4689      	mov	r9, r1
 8003e08:	f7fc fb42 	bl	8000490 <__aeabi_f2d>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	460b      	mov	r3, r1
 8003e10:	4640      	mov	r0, r8
 8003e12:	4649      	mov	r1, r9
 8003e14:	f7fc f9de 	bl	80001d4 <__adddf3>
 8003e18:	ee6f 7aa9 	vmul.f32	s15, s31, s19
 8003e1c:	4680      	mov	r8, r0
 8003e1e:	ee17 0a90 	vmov	r0, s15
 8003e22:	4689      	mov	r9, r1
 8003e24:	f7fc fb34 	bl	8000490 <__aeabi_f2d>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	460b      	mov	r3, r1
 8003e2c:	4640      	mov	r0, r8
 8003e2e:	4649      	mov	r1, r9
 8003e30:	f7fc f9d0 	bl	80001d4 <__adddf3>
 8003e34:	ee69 7a0d 	vmul.f32	s15, s18, s26
 8003e38:	4680      	mov	r8, r0
 8003e3a:	ee17 0a90 	vmov	r0, s15
 8003e3e:	4689      	mov	r9, r1
 8003e40:	f7fc fb26 	bl	8000490 <__aeabi_f2d>
 8003e44:	4602      	mov	r2, r0
 8003e46:	460b      	mov	r3, r1
 8003e48:	4640      	mov	r0, r8
 8003e4a:	4649      	mov	r1, r9
 8003e4c:	f7fc f9c2 	bl	80001d4 <__adddf3>
 8003e50:	f7fc fd84 	bl	800095c <__aeabi_d2f>
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8003e54:	e9d4 2300 	ldrd	r2, r3, [r4]
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8003e58:	ee0d 0a10 	vmov	s26, r0
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8003e5c:	4639      	mov	r1, r7
 8003e5e:	4630      	mov	r0, r6
 8003e60:	f7fc fb6a 	bl	8000538 <__aeabi_dmul>
 8003e64:	ee68 7a8f 	vmul.f32	s15, s17, s30
 8003e68:	4606      	mov	r6, r0
 8003e6a:	ee17 0a90 	vmov	r0, s15
 8003e6e:	460f      	mov	r7, r1
 8003e70:	f7fc fb0e 	bl	8000490 <__aeabi_f2d>
 8003e74:	4602      	mov	r2, r0
 8003e76:	460b      	mov	r3, r1
 8003e78:	4630      	mov	r0, r6
 8003e7a:	4639      	mov	r1, r7
 8003e7c:	f7fc f9aa 	bl	80001d4 <__adddf3>
 8003e80:	ee6c 7aae 	vmul.f32	s15, s25, s29
 8003e84:	4606      	mov	r6, r0
 8003e86:	ee17 0a90 	vmov	r0, s15
 8003e8a:	460f      	mov	r7, r1
 8003e8c:	f7fc fb00 	bl	8000490 <__aeabi_f2d>
 8003e90:	4602      	mov	r2, r0
 8003e92:	460b      	mov	r3, r1
 8003e94:	4630      	mov	r0, r6
 8003e96:	4639      	mov	r1, r7
 8003e98:	f7fc f99c 	bl	80001d4 <__adddf3>
 8003e9c:	eddd 7a04 	vldr	s15, [sp, #16]
 8003ea0:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003ea4:	4606      	mov	r6, r0
 8003ea6:	ee17 0a90 	vmov	r0, s15
 8003eaa:	460f      	mov	r7, r1
 8003eac:	f7fc faf0 	bl	8000490 <__aeabi_f2d>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	460b      	mov	r3, r1
 8003eb4:	4630      	mov	r0, r6
 8003eb6:	4639      	mov	r1, r7
 8003eb8:	f7fc f98a 	bl	80001d0 <__aeabi_dsub>
 8003ebc:	4606      	mov	r6, r0
 8003ebe:	ee1c 0a90 	vmov	r0, s25
 8003ec2:	460f      	mov	r7, r1
 8003ec4:	f7fc fae4 	bl	8000490 <__aeabi_f2d>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	460b      	mov	r3, r1
 8003ecc:	4630      	mov	r0, r6
 8003ece:	4639      	mov	r1, r7
 8003ed0:	f7fc f97e 	bl	80001d0 <__aeabi_dsub>
 8003ed4:	eddd 7a06 	vldr	s15, [sp, #24]
 8003ed8:	ee67 7a8a 	vmul.f32	s15, s15, s20
 8003edc:	4606      	mov	r6, r0
 8003ede:	ee17 0a90 	vmov	r0, s15
 8003ee2:	460f      	mov	r7, r1
 8003ee4:	f7fc fad4 	bl	8000490 <__aeabi_f2d>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	460b      	mov	r3, r1
 8003eec:	4630      	mov	r0, r6
 8003eee:	4639      	mov	r1, r7
 8003ef0:	f7fc f970 	bl	80001d4 <__adddf3>
 8003ef4:	eddd 7a06 	vldr	s15, [sp, #24]
 8003ef8:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8003efc:	4606      	mov	r6, r0
 8003efe:	ee17 0a90 	vmov	r0, s15
 8003f02:	460f      	mov	r7, r1
 8003f04:	f7fc fac4 	bl	8000490 <__aeabi_f2d>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	4630      	mov	r0, r6
 8003f0e:	4639      	mov	r1, r7
 8003f10:	f7fc f960 	bl	80001d4 <__adddf3>
 8003f14:	ee69 7a2c 	vmul.f32	s15, s18, s25
 8003f18:	4606      	mov	r6, r0
 8003f1a:	ee17 0a90 	vmov	r0, s15
 8003f1e:	460f      	mov	r7, r1
 8003f20:	f7fc fab6 	bl	8000490 <__aeabi_f2d>
 8003f24:	4602      	mov	r2, r0
 8003f26:	460b      	mov	r3, r1
 8003f28:	4630      	mov	r0, r6
 8003f2a:	4639      	mov	r1, r7
 8003f2c:	f7fc f952 	bl	80001d4 <__adddf3>
 8003f30:	f7fc fd14 	bl	800095c <__aeabi_d2f>
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 8003f34:	e9d5 8900 	ldrd	r8, r9, [r5]
 8003f38:	ee6a 7a0e 	vmul.f32	s15, s20, s28
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8003f3c:	ee09 0a10 	vmov	s18, r0
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 8003f40:	ee17 0a90 	vmov	r0, s15
 8003f44:	f7fc faa4 	bl	8000490 <__aeabi_f2d>
 8003f48:	4642      	mov	r2, r8
 8003f4a:	464b      	mov	r3, r9
 8003f4c:	f7fc faf4 	bl	8000538 <__aeabi_dmul>
 8003f50:	eddd 7a00 	vldr	s15, [sp]
 8003f54:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8003f58:	4604      	mov	r4, r0
 8003f5a:	ee17 0a90 	vmov	r0, s15
 8003f5e:	e9d5 6700 	ldrd	r6, r7, [r5]
 8003f62:	460d      	mov	r5, r1
 8003f64:	f7fc fa94 	bl	8000490 <__aeabi_f2d>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	460b      	mov	r3, r1
 8003f6c:	4620      	mov	r0, r4
 8003f6e:	4629      	mov	r1, r5
 8003f70:	f7fc f92e 	bl	80001d0 <__aeabi_dsub>
 8003f74:	ee69 7a8e 	vmul.f32	s15, s19, s28
 8003f78:	4604      	mov	r4, r0
 8003f7a:	ee17 0a90 	vmov	r0, s15
 8003f7e:	460d      	mov	r5, r1
 8003f80:	f7fc fa86 	bl	8000490 <__aeabi_f2d>
 8003f84:	4632      	mov	r2, r6
 8003f86:	463b      	mov	r3, r7
 8003f88:	f7fc fad6 	bl	8000538 <__aeabi_dmul>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	460b      	mov	r3, r1
 8003f90:	4620      	mov	r0, r4
 8003f92:	4629      	mov	r1, r5
 8003f94:	f7fc f91e 	bl	80001d4 <__adddf3>
 8003f98:	eddd 7a02 	vldr	s15, [sp, #8]
 8003f9c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003fa0:	4604      	mov	r4, r0
 8003fa2:	ee17 0a90 	vmov	r0, s15
 8003fa6:	460d      	mov	r5, r1
 8003fa8:	f7fc fa72 	bl	8000490 <__aeabi_f2d>
 8003fac:	460b      	mov	r3, r1
 8003fae:	4602      	mov	r2, r0
 8003fb0:	4629      	mov	r1, r5
 8003fb2:	4620      	mov	r0, r4
 8003fb4:	f7fc f90c 	bl	80001d0 <__aeabi_dsub>
 8003fb8:	f7fc fcd0 	bl	800095c <__aeabi_d2f>
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8003fbc:	ee2d 0a0d 	vmul.f32	s0, s26, s26
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 8003fc0:	ee06 0a90 	vmov	s13, r0
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8003fc4:	eead 0aad 	vfma.f32	s0, s27, s27
 8003fc8:	eea9 0a09 	vfma.f32	s0, s18, s18
 8003fcc:	eea6 0aa6 	vfma.f32	s0, s13, s13
 8003fd0:	f7ff fd12 	bl	80039f8 <invSqrt>
		qDot1 -= beta * s0;
 8003fd4:	4b65      	ldr	r3, [pc, #404]	; (800416c <MadgwickAHRSupdateIMU+0x748>)
 8003fd6:	ee60 7a6d 	vnmul.f32	s15, s0, s27
 8003fda:	ed93 7a00 	vldr	s14, [r3]
		qDot2 -= beta * s1;
 8003fde:	ee20 da4d 	vnmul.f32	s26, s0, s26
		qDot1 -= beta * s0;
 8003fe2:	eea7 ca87 	vfma.f32	s24, s15, s14
		qDot2 -= beta * s1;
 8003fe6:	edd3 7a00 	vldr	s15, [r3]
		qDot3 -= beta * s2;
 8003fea:	ee20 9a49 	vnmul.f32	s18, s0, s18
		qDot2 -= beta * s1;
 8003fee:	eeed ba27 	vfma.f32	s23, s26, s15
		qDot3 -= beta * s2;
 8003ff2:	edd3 7a00 	vldr	s15, [r3]
		qDot4 -= beta * s3;
 8003ff6:	ee20 0a66 	vnmul.f32	s0, s0, s13
		qDot3 -= beta * s2;
 8003ffa:	eea9 ba27 	vfma.f32	s22, s18, s15
		qDot4 -= beta * s3;
 8003ffe:	edd3 7a00 	vldr	s15, [r3]
 8004002:	eee0 aa27 	vfma.f32	s21, s0, s15
	q0 += qDot1 * (1.0f / sampleFreq);
 8004006:	4e5a      	ldr	r6, [pc, #360]	; (8004170 <MadgwickAHRSupdateIMU+0x74c>)
	q3 += qDot4 * (1.0f / sampleFreq);
 8004008:	4f5a      	ldr	r7, [pc, #360]	; (8004174 <MadgwickAHRSupdateIMU+0x750>)
	q0 += qDot1 * (1.0f / sampleFreq);
 800400a:	ed9f 8a5b 	vldr	s16, [pc, #364]	; 8004178 <MadgwickAHRSupdateIMU+0x754>
 800400e:	e9d6 4500 	ldrd	r4, r5, [r6]
 8004012:	ee6c 7a08 	vmul.f32	s15, s24, s16
 8004016:	ee17 0a90 	vmov	r0, s15
 800401a:	f7fc fa39 	bl	8000490 <__aeabi_f2d>
 800401e:	4622      	mov	r2, r4
 8004020:	462b      	mov	r3, r5
 8004022:	f7fc f8d7 	bl	80001d4 <__adddf3>
 8004026:	e9c6 0100 	strd	r0, r1, [r6]
	q1 += qDot2 * (1.0f / sampleFreq);
 800402a:	4d54      	ldr	r5, [pc, #336]	; (800417c <MadgwickAHRSupdateIMU+0x758>)
	q2 += qDot3 * (1.0f / sampleFreq);
 800402c:	4c54      	ldr	r4, [pc, #336]	; (8004180 <MadgwickAHRSupdateIMU+0x75c>)
	q1 += qDot2 * (1.0f / sampleFreq);
 800402e:	e9d5 8900 	ldrd	r8, r9, [r5]
 8004032:	ee6b 7a88 	vmul.f32	s15, s23, s16
 8004036:	ee17 0a90 	vmov	r0, s15
 800403a:	f7fc fa29 	bl	8000490 <__aeabi_f2d>
 800403e:	4642      	mov	r2, r8
 8004040:	464b      	mov	r3, r9
 8004042:	f7fc f8c7 	bl	80001d4 <__adddf3>
 8004046:	e9c5 0100 	strd	r0, r1, [r5]
	q2 += qDot3 * (1.0f / sampleFreq);
 800404a:	ee6b 7a08 	vmul.f32	s15, s22, s16
 800404e:	e9d4 8900 	ldrd	r8, r9, [r4]
 8004052:	ee17 0a90 	vmov	r0, s15
 8004056:	f7fc fa1b 	bl	8000490 <__aeabi_f2d>
 800405a:	4642      	mov	r2, r8
 800405c:	464b      	mov	r3, r9
 800405e:	f7fc f8b9 	bl	80001d4 <__adddf3>
 8004062:	e9c4 0100 	strd	r0, r1, [r4]
	q3 += qDot4 * (1.0f / sampleFreq);
 8004066:	e9d7 8900 	ldrd	r8, r9, [r7]
 800406a:	ee6a 7a88 	vmul.f32	s15, s21, s16
 800406e:	ee17 0a90 	vmov	r0, s15
 8004072:	f7fc fa0d 	bl	8000490 <__aeabi_f2d>
 8004076:	4642      	mov	r2, r8
 8004078:	464b      	mov	r3, r9
 800407a:	f7fc f8ab 	bl	80001d4 <__adddf3>
 800407e:	e9c7 0100 	strd	r0, r1, [r7]
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8004082:	e9d6 0100 	ldrd	r0, r1, [r6]
 8004086:	e9d6 2300 	ldrd	r2, r3, [r6]
 800408a:	ed95 7b00 	vldr	d7, [r5]
 800408e:	e9d5 ab00 	ldrd	sl, fp, [r5]
 8004092:	ed8d 7b00 	vstr	d7, [sp]
 8004096:	ed94 7b00 	vldr	d7, [r4]
 800409a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800409e:	ed94 7b00 	vldr	d7, [r4]
 80040a2:	ed8d 7b04 	vstr	d7, [sp, #16]
 80040a6:	ed97 7b00 	vldr	d7, [r7]
 80040aa:	ed8d 7b06 	vstr	d7, [sp, #24]
 80040ae:	ed97 7b00 	vldr	d7, [r7]
 80040b2:	ed8d 7b08 	vstr	d7, [sp, #32]
 80040b6:	f7fc fa3f 	bl	8000538 <__aeabi_dmul>
 80040ba:	4652      	mov	r2, sl
 80040bc:	4680      	mov	r8, r0
 80040be:	4689      	mov	r9, r1
 80040c0:	465b      	mov	r3, fp
 80040c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80040c6:	f7fc fa37 	bl	8000538 <__aeabi_dmul>
 80040ca:	4602      	mov	r2, r0
 80040cc:	460b      	mov	r3, r1
 80040ce:	4640      	mov	r0, r8
 80040d0:	4649      	mov	r1, r9
 80040d2:	f7fc f87f 	bl	80001d4 <__adddf3>
 80040d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80040da:	4680      	mov	r8, r0
 80040dc:	4689      	mov	r9, r1
 80040de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80040e2:	f7fc fa29 	bl	8000538 <__aeabi_dmul>
 80040e6:	4602      	mov	r2, r0
 80040e8:	460b      	mov	r3, r1
 80040ea:	4640      	mov	r0, r8
 80040ec:	4649      	mov	r1, r9
 80040ee:	f7fc f871 	bl	80001d4 <__adddf3>
 80040f2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80040f6:	4680      	mov	r8, r0
 80040f8:	4689      	mov	r9, r1
 80040fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80040fe:	f7fc fa1b 	bl	8000538 <__aeabi_dmul>
 8004102:	4602      	mov	r2, r0
 8004104:	460b      	mov	r3, r1
 8004106:	4640      	mov	r0, r8
 8004108:	4649      	mov	r1, r9
 800410a:	f7fc f863 	bl	80001d4 <__adddf3>
 800410e:	f7fc fc25 	bl	800095c <__aeabi_d2f>
 8004112:	ee00 0a10 	vmov	s0, r0
 8004116:	f7ff fc6f 	bl	80039f8 <invSqrt>
	q0 *= recipNorm;
 800411a:	ee10 0a10 	vmov	r0, s0
 800411e:	f7fc f9b7 	bl	8000490 <__aeabi_f2d>
 8004122:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004126:	4680      	mov	r8, r0
 8004128:	4689      	mov	r9, r1
 800412a:	f7fc fa05 	bl	8000538 <__aeabi_dmul>
 800412e:	e9c6 0100 	strd	r0, r1, [r6]
	q1 *= recipNorm;
 8004132:	4640      	mov	r0, r8
 8004134:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004138:	4649      	mov	r1, r9
 800413a:	f7fc f9fd 	bl	8000538 <__aeabi_dmul>
 800413e:	e9c5 0100 	strd	r0, r1, [r5]
	q2 *= recipNorm;
 8004142:	4640      	mov	r0, r8
 8004144:	e9d4 2300 	ldrd	r2, r3, [r4]
 8004148:	4649      	mov	r1, r9
 800414a:	f7fc f9f5 	bl	8000538 <__aeabi_dmul>
 800414e:	e9c4 0100 	strd	r0, r1, [r4]
	q3 *= recipNorm;
 8004152:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004156:	4640      	mov	r0, r8
 8004158:	4649      	mov	r1, r9
 800415a:	f7fc f9ed 	bl	8000538 <__aeabi_dmul>
 800415e:	e9c7 0100 	strd	r0, r1, [r7]
}
 8004162:	b00b      	add	sp, #44	; 0x2c
 8004164:	ecbd 8b10 	vpop	{d8-d15}
 8004168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800416c:	20000008 	.word	0x20000008
 8004170:	20000010 	.word	0x20000010
 8004174:	20000050 	.word	0x20000050
 8004178:	3b03126f 	.word	0x3b03126f
 800417c:	20000040 	.word	0x20000040
 8004180:	20000048 	.word	0x20000048

08004184 <i2cWrite>:
int flag = 1;
uint8_t buffer[2];// buffer to transfer to i2c
HAL_StatusTypeDef status;// flag to check transaction complete
uint8_t ref[14]; // check data that have been read
void i2cWrite(I2C_HandleTypeDef *hi2c,uint16_t address, uint16_t reg, uint8_t*data, uint8_t data_length)
{
 8004184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004186:	b085      	sub	sp, #20
	status = HAL_OK;
	flag =1;
	status = HAL_I2C_Mem_Write(hi2c,address, reg,I2C_MEMADD_SIZE_8BIT,data,data_length,1000);
 8004188:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
 800418c:	f8cd e008 	str.w	lr, [sp, #8]
 8004190:	f89d e028 	ldrb.w	lr, [sp, #40]	; 0x28
	status = HAL_OK;
 8004194:	4e07      	ldr	r6, [pc, #28]	; (80041b4 <i2cWrite+0x30>)
	flag =1;
 8004196:	4c08      	ldr	r4, [pc, #32]	; (80041b8 <i2cWrite+0x34>)
 8004198:	2701      	movs	r7, #1
	status = HAL_I2C_Mem_Write(hi2c,address, reg,I2C_MEMADD_SIZE_8BIT,data,data_length,1000);
 800419a:	e88d 4008 	stmia.w	sp, {r3, lr}
	status = HAL_OK;
 800419e:	2500      	movs	r5, #0
	status = HAL_I2C_Mem_Write(hi2c,address, reg,I2C_MEMADD_SIZE_8BIT,data,data_length,1000);
 80041a0:	463b      	mov	r3, r7
	status = HAL_OK;
 80041a2:	7035      	strb	r5, [r6, #0]
	flag =1;
 80041a4:	6027      	str	r7, [r4, #0]
	status = HAL_I2C_Mem_Write(hi2c,address, reg,I2C_MEMADD_SIZE_8BIT,data,data_length,1000);
 80041a6:	f7fd fcdf 	bl	8001b68 <HAL_I2C_Mem_Write>
 80041aa:	7030      	strb	r0, [r6, #0]
	if(status != HAL_OK)
 80041ac:	b100      	cbz	r0, 80041b0 <i2cWrite+0x2c>
	{
		flag = 0;
 80041ae:	6025      	str	r5, [r4, #0]
	}
}
 80041b0:	b005      	add	sp, #20
 80041b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041b4:	20000084 	.word	0x20000084
 80041b8:	20000018 	.word	0x20000018

080041bc <i2cRead>:



void i2cRead(I2C_HandleTypeDef*hi2c, uint16_t address, uint16_t reg,uint8_t* data, uint8_t data_length)
{
 80041bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041be:	b085      	sub	sp, #20
  status = HAL_OK;
	flag = 1;
	status = HAL_I2C_Mem_Read(hi2c,address,reg,I2C_MEMADD_SIZE_8BIT,data,data_length,1000);
 80041c0:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
 80041c4:	f8cd e008 	str.w	lr, [sp, #8]
 80041c8:	f89d e028 	ldrb.w	lr, [sp, #40]	; 0x28
  status = HAL_OK;
 80041cc:	4e07      	ldr	r6, [pc, #28]	; (80041ec <i2cRead+0x30>)
	flag = 1;
 80041ce:	4c08      	ldr	r4, [pc, #32]	; (80041f0 <i2cRead+0x34>)
 80041d0:	2701      	movs	r7, #1
	status = HAL_I2C_Mem_Read(hi2c,address,reg,I2C_MEMADD_SIZE_8BIT,data,data_length,1000);
 80041d2:	e88d 4008 	stmia.w	sp, {r3, lr}
  status = HAL_OK;
 80041d6:	2500      	movs	r5, #0
	status = HAL_I2C_Mem_Read(hi2c,address,reg,I2C_MEMADD_SIZE_8BIT,data,data_length,1000);
 80041d8:	463b      	mov	r3, r7
  status = HAL_OK;
 80041da:	7035      	strb	r5, [r6, #0]
	flag = 1;
 80041dc:	6027      	str	r7, [r4, #0]
	status = HAL_I2C_Mem_Read(hi2c,address,reg,I2C_MEMADD_SIZE_8BIT,data,data_length,1000);
 80041de:	f7fd fd59 	bl	8001c94 <HAL_I2C_Mem_Read>
 80041e2:	7030      	strb	r0, [r6, #0]
	if(status!=HAL_OK)
 80041e4:	b100      	cbz	r0, 80041e8 <i2cRead+0x2c>
	{
		flag =0;
 80041e6:	6025      	str	r5, [r4, #0]
	}
}
 80041e8:	b005      	add	sp, #20
 80041ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041ec:	20000084 	.word	0x20000084
 80041f0:	20000018 	.word	0x20000018

080041f4 <MPU6050_Init>:

void MPU6050_Init(I2C_HandleTypeDef *hi2c,MPU6050 *mpu, Acc_Set_Sense AccSensitivity, Gyro_Set_Sense GyroSensitivity)
{
 80041f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041f8:	461f      	mov	r7, r3
	iscalibrated = 0;
 80041fa:	4b42      	ldr	r3, [pc, #264]	; (8004304 <MPU6050_Init+0x110>)
{
 80041fc:	4690      	mov	r8, r2
	iscalibrated = 0;
 80041fe:	2200      	movs	r2, #0
{
 8004200:	4605      	mov	r5, r0
 8004202:	460c      	mov	r4, r1
	iscalibrated = 0;
 8004204:	601a      	str	r2, [r3, #0]
	uint8_t temp;
	while(HAL_I2C_IsDeviceReady(hi2c,MPU6050_ADDRESS,1,100));
 8004206:	2364      	movs	r3, #100	; 0x64
 8004208:	2201      	movs	r2, #1
 800420a:	21d0      	movs	r1, #208	; 0xd0
 800420c:	4628      	mov	r0, r5
 800420e:	f7fd fe51 	bl	8001eb4 <HAL_I2C_IsDeviceReady>
 8004212:	4682      	mov	sl, r0
 8004214:	2800      	cmp	r0, #0
 8004216:	d1f6      	bne.n	8004206 <MPU6050_Init+0x12>
	i2cRead(hi2c,MPU6050_ADDRESS,MPU6050_WHO_AM_I,&temp,1);
 8004218:	2601      	movs	r6, #1
//while(temp==MPU6050_WHO_AM_I);
	buffer[0] = 0x00;
 800421a:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 8004318 <MPU6050_Init+0x124>
	i2cRead(hi2c,MPU6050_ADDRESS,MPU6050_WHO_AM_I,&temp,1);
 800421e:	9600      	str	r6, [sp, #0]
 8004220:	f10d 030f 	add.w	r3, sp, #15
 8004224:	2275      	movs	r2, #117	; 0x75
 8004226:	21d0      	movs	r1, #208	; 0xd0
 8004228:	4628      	mov	r0, r5
 800422a:	f7ff ffc7 	bl	80041bc <i2cRead>
	
	
	i2cWrite(hi2c,MPU6050_ADDRESS,MPU6050_PWR_MGMT_1,buffer,1);
 800422e:	464b      	mov	r3, r9
 8004230:	226b      	movs	r2, #107	; 0x6b
 8004232:	21d0      	movs	r1, #208	; 0xd0
 8004234:	4628      	mov	r0, r5
 8004236:	9600      	str	r6, [sp, #0]
	buffer[0] = 0x00;
 8004238:	f889 a000 	strb.w	sl, [r9]
	i2cWrite(hi2c,MPU6050_ADDRESS,MPU6050_PWR_MGMT_1,buffer,1);
 800423c:	f7ff ffa2 	bl	8004184 <i2cWrite>
	//config samping rate
	buffer[0]=0x01;  //Set the sample rate to 1kHz - 1kHz/(1+0) = 1kHz
	buffer[1]=0x03;  // Disable FSYNC and set Gyro to 41kHz filtering and 1kHz sampling
 8004240:	2303      	movs	r3, #3
 8004242:	f889 3001 	strb.w	r3, [r9, #1]
	i2cWrite(hi2c,MPU6050_ADDRESS,MPU6050_SMPLRT_DIV,buffer,2);
 8004246:	2302      	movs	r3, #2
 8004248:	9300      	str	r3, [sp, #0]
 800424a:	2219      	movs	r2, #25
 800424c:	464b      	mov	r3, r9
 800424e:	21d0      	movs	r1, #208	; 0xd0
 8004250:	4628      	mov	r0, r5
	buffer[0]=0x01;  //Set the sample rate to 1kHz - 1kHz/(1+0) = 1kHz
 8004252:	f889 6000 	strb.w	r6, [r9]
	i2cWrite(hi2c,MPU6050_ADDRESS,MPU6050_SMPLRT_DIV,buffer,2);
 8004256:	f7ff ff95 	bl	8004184 <i2cWrite>
	
	// config accelerometer
	i2cRead(hi2c,MPU6050_ADDRESS,MPU6050_ACCEL_CONFIG,&temp,1);
 800425a:	f10d 030f 	add.w	r3, sp, #15
 800425e:	221c      	movs	r2, #28
 8004260:	21d0      	movs	r1, #208	; 0xd0
 8004262:	4628      	mov	r0, r5
 8004264:	9600      	str	r6, [sp, #0]
 8004266:	f7ff ffa9 	bl	80041bc <i2cRead>
	temp = (temp&0xE7)|(uint8_t)AccSensitivity<<3;
 800426a:	f89d 300f 	ldrb.w	r3, [sp, #15]
	i2cWrite(hi2c,MPU6050_ADDRESS, MPU6050_ACCEL_CONFIG,&temp,1);
 800426e:	9600      	str	r6, [sp, #0]
	temp = (temp&0xE7)|(uint8_t)AccSensitivity<<3;
 8004270:	f023 0318 	bic.w	r3, r3, #24
 8004274:	ea43 03c8 	orr.w	r3, r3, r8, lsl #3
 8004278:	f88d 300f 	strb.w	r3, [sp, #15]
	i2cWrite(hi2c,MPU6050_ADDRESS, MPU6050_ACCEL_CONFIG,&temp,1);
 800427c:	221c      	movs	r2, #28
 800427e:	f10d 030f 	add.w	r3, sp, #15
 8004282:	21d0      	movs	r1, #208	; 0xd0
 8004284:	4628      	mov	r0, r5
 8004286:	f7ff ff7d 	bl	8004184 <i2cWrite>
	
	// config gyroscope
	i2cRead(hi2c,MPU6050_ADDRESS, MPU6050_GYRO_CONFIG,&temp,1);
 800428a:	f10d 030f 	add.w	r3, sp, #15
 800428e:	221b      	movs	r2, #27
 8004290:	21d0      	movs	r1, #208	; 0xd0
 8004292:	4628      	mov	r0, r5
 8004294:	9600      	str	r6, [sp, #0]
 8004296:	f7ff ff91 	bl	80041bc <i2cRead>
	temp = (temp&0xE7)|(uint8_t)GyroSensitivity<<3;
 800429a:	f89d 300f 	ldrb.w	r3, [sp, #15]
	i2cWrite(hi2c,MPU6050_ADDRESS, MPU6050_GYRO_CONFIG,&temp,1);
 800429e:	9600      	str	r6, [sp, #0]
	temp = (temp&0xE7)|(uint8_t)GyroSensitivity<<3;
 80042a0:	f023 0318 	bic.w	r3, r3, #24
 80042a4:	ea43 03c7 	orr.w	r3, r3, r7, lsl #3
 80042a8:	f88d 300f 	strb.w	r3, [sp, #15]
	i2cWrite(hi2c,MPU6050_ADDRESS, MPU6050_GYRO_CONFIG,&temp,1);
 80042ac:	221b      	movs	r2, #27
 80042ae:	f10d 030f 	add.w	r3, sp, #15
 80042b2:	21d0      	movs	r1, #208	; 0xd0
 80042b4:	4628      	mov	r0, r5
 80042b6:	f7ff ff65 	bl	8004184 <i2cWrite>
	switch (AccSensitivity) {
 80042ba:	f1b8 0f03 	cmp.w	r8, #3
 80042be:	d806      	bhi.n	80042ce <MPU6050_Init+0xda>
 80042c0:	e8df f008 	tbb	[pc, r8]
 80042c4:	110e0b02 	.word	0x110e0b02
		case Acc_2G:
			mpu->Acc_factor = (float)1 / MPU6050_ACCE_SENS_2; 
 80042c8:	f04f 5362 	mov.w	r3, #947912704	; 0x38800000
			break;
		case Acc_8G:
			mpu->Acc_factor = (float)1 / MPU6050_ACCE_SENS_8; 
			break;
		case Acc_16G:
			mpu->Acc_factor = (float)1 / MPU6050_ACCE_SENS_16; 
 80042cc:	6063      	str	r3, [r4, #4]
		default:
			break;
	}
	
	switch (GyroSensitivity) {
 80042ce:	2f03      	cmp	r7, #3
 80042d0:	d80e      	bhi.n	80042f0 <MPU6050_Init+0xfc>
 80042d2:	e8df f007 	tbb	[pc, r7]
 80042d6:	100b      	.short	0x100b
 80042d8:	1412      	.short	0x1412
			mpu->Acc_factor = (float)1 / MPU6050_ACCE_SENS_4; 
 80042da:	f04f 5364 	mov.w	r3, #956301312	; 0x39000000
 80042de:	e7f5      	b.n	80042cc <MPU6050_Init+0xd8>
			mpu->Acc_factor = (float)1 / MPU6050_ACCE_SENS_8; 
 80042e0:	f04f 5366 	mov.w	r3, #964689920	; 0x39800000
 80042e4:	e7f2      	b.n	80042cc <MPU6050_Init+0xd8>
			mpu->Acc_factor = (float)1 / MPU6050_ACCE_SENS_16; 
 80042e6:	f04f 5368 	mov.w	r3, #973078528	; 0x3a000000
 80042ea:	e7ef      	b.n	80042cc <MPU6050_Init+0xd8>
		case Gyro_250s:
			mpu->Gyro_factor = (float)1 / MPU6050_GYRO_SENS_250; 
 80042ec:	4b06      	ldr	r3, [pc, #24]	; (8004308 <MPU6050_Init+0x114>)
			break;
		case Gyro_1000s:
			mpu->Gyro_factor = (float)1 / MPU6050_GYRO_SENS_1000; 
			break;
		case Gyro_2000s:
			mpu->Gyro_factor = (float)1 / MPU6050_GYRO_SENS_2000; 
 80042ee:	6023      	str	r3, [r4, #0]
		default:
			break;
	}
}
 80042f0:	b004      	add	sp, #16
 80042f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			mpu->Gyro_factor = (float)1 / MPU6050_GYRO_SENS_500; 
 80042f6:	4b05      	ldr	r3, [pc, #20]	; (800430c <MPU6050_Init+0x118>)
 80042f8:	e7f9      	b.n	80042ee <MPU6050_Init+0xfa>
			mpu->Gyro_factor = (float)1 / MPU6050_GYRO_SENS_1000; 
 80042fa:	4b05      	ldr	r3, [pc, #20]	; (8004310 <MPU6050_Init+0x11c>)
 80042fc:	e7f7      	b.n	80042ee <MPU6050_Init+0xfa>
			mpu->Gyro_factor = (float)1 / MPU6050_GYRO_SENS_2000; 
 80042fe:	4b05      	ldr	r3, [pc, #20]	; (8004314 <MPU6050_Init+0x120>)
 8004300:	e7f5      	b.n	80042ee <MPU6050_Init+0xfa>
 8004302:	bf00      	nop
 8004304:	20000064 	.word	0x20000064
 8004308:	3bf9ffff 	.word	0x3bf9ffff
 800430c:	3c79ffff 	.word	0x3c79ffff
 8004310:	3cf9ffff 	.word	0x3cf9ffff
 8004314:	3d79ffff 	.word	0x3d79ffff
 8004318:	20000082 	.word	0x20000082

0800431c <MPU6050_ReadAll>:
	mpu->GyroY = (int16_t)(data[2] << 8 | data[3]);
	mpu->GyroZ = (int16_t)(data[4] << 8 | data[5]);
}

 void MPU6050_ReadAll(I2C_HandleTypeDef *hi2c,MPU6050 *mpu)
{
 800431c:	b530      	push	{r4, r5, lr}
 800431e:	b087      	sub	sp, #28
	uint8_t data[14];
	int16_t temp;
	
	i2cRead(hi2c,MPU6050_ADDRESS,MPU6050_ACCEL_XOUT_H, data, 14);
 8004320:	230e      	movs	r3, #14
{
 8004322:	460c      	mov	r4, r1
	i2cRead(hi2c,MPU6050_ADDRESS,MPU6050_ACCEL_XOUT_H, data, 14);
 8004324:	9300      	str	r3, [sp, #0]
 8004326:	223b      	movs	r2, #59	; 0x3b
 8004328:	ab02      	add	r3, sp, #8
 800432a:	21d0      	movs	r1, #208	; 0xd0
 800432c:	f7ff ff46 	bl	80041bc <i2cRead>
	mpu->AccX = (float)((int16_t)(data[0] << 8 | data[1])) *mpu->Acc_factor ;	
 8004330:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8004334:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8004338:	edd4 6a01 	vldr	s13, [r4, #4]
	mpu->AccZ =  (float)((int16_t)(data[4] << 8 | data[5])) * mpu->Acc_factor ;
	/* Format temperature */
	temp = (data[6] << 8 | data[7]);
	mpu->temperature = (float)((float)((int16_t)temp) / (float)340.0 + (float)36.53);
	/* Format gyroscope data */
	mpu->GyroX = (float)((int16_t)(data[8] << 8 | data[9])) * mpu->Gyro_factor - Gyro_offset[0] * iscalibrated ;
 800433c:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8004340:	ed94 6a00 	vldr	s12, [r4]
	mpu->AccX = (float)((int16_t)(data[0] << 8 | data[1])) *mpu->Acc_factor ;	
 8004344:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004348:	b21b      	sxth	r3, r3
 800434a:	ee07 3a10 	vmov	s14, r3
	mpu->AccY = (float)((int16_t)(data[2] << 8 | data[3])) * mpu->Acc_factor ;
 800434e:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8004352:	f89d 300b 	ldrb.w	r3, [sp, #11]
	mpu->AccX = (float)((int16_t)(data[0] << 8 | data[1])) *mpu->Acc_factor ;	
 8004356:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	mpu->AccY = (float)((int16_t)(data[2] << 8 | data[3])) * mpu->Acc_factor ;
 800435a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	mpu->AccX = (float)((int16_t)(data[0] << 8 | data[1])) *mpu->Acc_factor ;	
 800435e:	ee27 7a26 	vmul.f32	s14, s14, s13
	mpu->AccY = (float)((int16_t)(data[2] << 8 | data[3])) * mpu->Acc_factor ;
 8004362:	b21b      	sxth	r3, r3
	mpu->AccZ =  (float)((int16_t)(data[4] << 8 | data[5])) * mpu->Acc_factor ;
 8004364:	f89d 200c 	ldrb.w	r2, [sp, #12]
	mpu->AccX = (float)((int16_t)(data[0] << 8 | data[1])) *mpu->Acc_factor ;	
 8004368:	ed84 7a02 	vstr	s14, [r4, #8]
	mpu->AccY = (float)((int16_t)(data[2] << 8 | data[3])) * mpu->Acc_factor ;
 800436c:	ee07 3a10 	vmov	s14, r3
	mpu->AccZ =  (float)((int16_t)(data[4] << 8 | data[5])) * mpu->Acc_factor ;
 8004370:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8004374:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004378:	b21b      	sxth	r3, r3
 800437a:	ee07 3a90 	vmov	s15, r3
	temp = (data[6] << 8 | data[7]);
 800437e:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8004382:	f89d 300f 	ldrb.w	r3, [sp, #15]
	mpu->AccZ =  (float)((int16_t)(data[4] << 8 | data[5])) * mpu->Acc_factor ;
 8004386:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	temp = (data[6] << 8 | data[7]);
 800438a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	mpu->AccZ =  (float)((int16_t)(data[4] << 8 | data[5])) * mpu->Acc_factor ;
 800438e:	ee67 7aa6 	vmul.f32	s15, s15, s13
	mpu->temperature = (float)((float)((int16_t)temp) / (float)340.0 + (float)36.53);
 8004392:	b21b      	sxth	r3, r3
	mpu->AccY = (float)((int16_t)(data[2] << 8 | data[3])) * mpu->Acc_factor ;
 8004394:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	mpu->AccZ =  (float)((int16_t)(data[4] << 8 | data[5])) * mpu->Acc_factor ;
 8004398:	edc4 7a04 	vstr	s15, [r4, #16]
	mpu->temperature = (float)((float)((int16_t)temp) / (float)340.0 + (float)36.53);
 800439c:	ee07 3a90 	vmov	s15, r3
	mpu->AccY = (float)((int16_t)(data[2] << 8 | data[3])) * mpu->Acc_factor ;
 80043a0:	ee27 7a26 	vmul.f32	s14, s14, s13
	mpu->temperature = (float)((float)((int16_t)temp) / (float)340.0 + (float)36.53);
 80043a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043a8:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8004460 <MPU6050_ReadAll+0x144>
	mpu->AccY = (float)((int16_t)(data[2] << 8 | data[3])) * mpu->Acc_factor ;
 80043ac:	ed84 7a03 	vstr	s14, [r4, #12]
	mpu->temperature = (float)((float)((int16_t)temp) / (float)340.0 + (float)36.53);
 80043b0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
	mpu->GyroX = (float)((int16_t)(data[8] << 8 | data[9])) * mpu->Gyro_factor - Gyro_offset[0] * iscalibrated ;
 80043b4:	4b2b      	ldr	r3, [pc, #172]	; (8004464 <MPU6050_ReadAll+0x148>)
 80043b6:	4a2c      	ldr	r2, [pc, #176]	; (8004468 <MPU6050_ReadAll+0x14c>)
	mpu->GyroY = (float)((int16_t)(data[10] << 8 | data[11])) * mpu->Gyro_factor - Gyro_offset[1] * iscalibrated;
	mpu->GyroZ = (float)((int16_t)(data[12] << 8 | data[13])) * mpu->Gyro_factor - Gyro_offset[2] * iscalibrated;
	memcpy(&ref,&data,14);
 80043b8:	ad04      	add	r5, sp, #16
	mpu->temperature = (float)((float)((int16_t)temp) / (float)340.0 + (float)36.53);
 80043ba:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800446c <MPU6050_ReadAll+0x150>
	mpu->GyroX = (float)((int16_t)(data[8] << 8 | data[9])) * mpu->Gyro_factor - Gyro_offset[0] * iscalibrated ;
 80043be:	edd2 6a00 	vldr	s13, [r2]
	mpu->temperature = (float)((float)((int16_t)temp) / (float)340.0 + (float)36.53);
 80043c2:	ee77 7a27 	vadd.f32	s15, s14, s15
	mpu->GyroX = (float)((int16_t)(data[8] << 8 | data[9])) * mpu->Gyro_factor - Gyro_offset[0] * iscalibrated ;
 80043c6:	ed93 7a00 	vldr	s14, [r3]
 80043ca:	f89d 3011 	ldrb.w	r3, [sp, #17]
	mpu->temperature = (float)((float)((int16_t)temp) / (float)340.0 + (float)36.53);
 80043ce:	edc4 7a08 	vstr	s15, [r4, #32]
	mpu->GyroX = (float)((int16_t)(data[8] << 8 | data[9])) * mpu->Gyro_factor - Gyro_offset[0] * iscalibrated ;
 80043d2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80043d6:	b21b      	sxth	r3, r3
 80043d8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80043dc:	ee07 3a90 	vmov	s15, r3
 80043e0:	ee67 6a66 	vnmul.f32	s13, s14, s13
 80043e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	mpu->GyroY = (float)((int16_t)(data[10] << 8 | data[11])) * mpu->Gyro_factor - Gyro_offset[1] * iscalibrated;
 80043e8:	f89d 1012 	ldrb.w	r1, [sp, #18]
 80043ec:	f89d 3013 	ldrb.w	r3, [sp, #19]
	mpu->GyroX = (float)((int16_t)(data[8] << 8 | data[9])) * mpu->Gyro_factor - Gyro_offset[0] * iscalibrated ;
 80043f0:	eee7 6a86 	vfma.f32	s13, s15, s12
	mpu->GyroY = (float)((int16_t)(data[10] << 8 | data[11])) * mpu->Gyro_factor - Gyro_offset[1] * iscalibrated;
 80043f4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80043f8:	b21b      	sxth	r3, r3
 80043fa:	edd2 7a01 	vldr	s15, [r2, #4]
	mpu->GyroX = (float)((int16_t)(data[8] << 8 | data[9])) * mpu->Gyro_factor - Gyro_offset[0] * iscalibrated ;
 80043fe:	edc4 6a05 	vstr	s13, [r4, #20]
	mpu->GyroY = (float)((int16_t)(data[10] << 8 | data[11])) * mpu->Gyro_factor - Gyro_offset[1] * iscalibrated;
 8004402:	ee67 6ac7 	vnmul.f32	s13, s15, s14
 8004406:	ee07 3a90 	vmov	s15, r3
 800440a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	mpu->GyroZ = (float)((int16_t)(data[12] << 8 | data[13])) * mpu->Gyro_factor - Gyro_offset[2] * iscalibrated;
 800440e:	f89d 3015 	ldrb.w	r3, [sp, #21]
	mpu->GyroY = (float)((int16_t)(data[10] << 8 | data[11])) * mpu->Gyro_factor - Gyro_offset[1] * iscalibrated;
 8004412:	eee6 6a27 	vfma.f32	s13, s12, s15
	mpu->GyroZ = (float)((int16_t)(data[12] << 8 | data[13])) * mpu->Gyro_factor - Gyro_offset[2] * iscalibrated;
 8004416:	edd2 7a02 	vldr	s15, [r2, #8]
 800441a:	f89d 2014 	ldrb.w	r2, [sp, #20]
	mpu->GyroY = (float)((int16_t)(data[10] << 8 | data[11])) * mpu->Gyro_factor - Gyro_offset[1] * iscalibrated;
 800441e:	edc4 6a06 	vstr	s13, [r4, #24]
	mpu->GyroZ = (float)((int16_t)(data[12] << 8 | data[13])) * mpu->Gyro_factor - Gyro_offset[2] * iscalibrated;
 8004422:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004426:	b21b      	sxth	r3, r3
 8004428:	ee27 7ac7 	vnmul.f32	s14, s15, s14
 800442c:	ee07 3a90 	vmov	s15, r3
 8004430:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	memcpy(&ref,&data,14);
 8004434:	4a0e      	ldr	r2, [pc, #56]	; (8004470 <MPU6050_ReadAll+0x154>)
	mpu->GyroZ = (float)((int16_t)(data[12] << 8 | data[13])) * mpu->Gyro_factor - Gyro_offset[2] * iscalibrated;
 8004436:	eea6 7a27 	vfma.f32	s14, s12, s15
	memcpy(&ref,&data,14);
 800443a:	ab02      	add	r3, sp, #8
	mpu->GyroZ = (float)((int16_t)(data[12] << 8 | data[13])) * mpu->Gyro_factor - Gyro_offset[2] * iscalibrated;
 800443c:	ed84 7a07 	vstr	s14, [r4, #28]
	memcpy(&ref,&data,14);
 8004440:	461c      	mov	r4, r3
 8004442:	cc03      	ldmia	r4!, {r0, r1}
 8004444:	42ac      	cmp	r4, r5
 8004446:	6010      	str	r0, [r2, #0]
 8004448:	6051      	str	r1, [r2, #4]
 800444a:	4623      	mov	r3, r4
 800444c:	f102 0208 	add.w	r2, r2, #8
 8004450:	d1f6      	bne.n	8004440 <MPU6050_ReadAll+0x124>
 8004452:	6820      	ldr	r0, [r4, #0]
 8004454:	6010      	str	r0, [r2, #0]
 8004456:	88a3      	ldrh	r3, [r4, #4]
 8004458:	8093      	strh	r3, [r2, #4]
}
 800445a:	b007      	add	sp, #28
 800445c:	bd30      	pop	{r4, r5, pc}
 800445e:	bf00      	nop
 8004460:	43aa0000 	.word	0x43aa0000
 8004464:	20000064 	.word	0x20000064
 8004468:	20000058 	.word	0x20000058
 800446c:	42121eb8 	.word	0x42121eb8
 8004470:	20000074 	.word	0x20000074

08004474 <bgc_sin>:
/**/

/* Calculate sin's value from sine_table*/
float bgc_sin(int deg)
{
    if(deg<91) return sine_table[deg];
 8004474:	285a      	cmp	r0, #90	; 0x5a
 8004476:	4b0c      	ldr	r3, [pc, #48]	; (80044a8 <bgc_sin+0x34>)
 8004478:	dc04      	bgt.n	8004484 <bgc_sin+0x10>
    else if (deg <181) return sine_table[180-deg];
 800447a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800447e:	ed90 0a00 	vldr	s0, [r0]
 8004482:	4770      	bx	lr
 8004484:	28b4      	cmp	r0, #180	; 0xb4
 8004486:	dc02      	bgt.n	800448e <bgc_sin+0x1a>
 8004488:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 800448c:	e7f5      	b.n	800447a <bgc_sin+0x6>
    else if (deg < 271) return (- sine_table[deg-180]);
 800448e:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 8004492:	bfd4      	ite	le
 8004494:	38b4      	suble	r0, #180	; 0xb4
    else return ( - sine_table[360-deg]) ;
 8004496:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 800449a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800449e:	ed90 0a00 	vldr	s0, [r0]
 80044a2:	eeb1 0a40 	vneg.f32	s0, s0
}
 80044a6:	4770      	bx	lr
 80044a8:	080056a0 	.word	0x080056a0

080044ac <bgc_cos>:

/* Calculate cosin's value from sine_table */
float bgc_cos(int deg)
{
    if (deg < 91) return sine_table[90-deg];
 80044ac:	285a      	cmp	r0, #90	; 0x5a
 80044ae:	4b0e      	ldr	r3, [pc, #56]	; (80044e8 <bgc_cos+0x3c>)
 80044b0:	dc06      	bgt.n	80044c0 <bgc_cos+0x14>
 80044b2:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
    else if (deg < 181) return (- sine_table[deg-90]);
    else if (deg < 271) return (- sine_table[270-deg]);
    else return sine_table[deg-270];
 80044b6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80044ba:	ed90 0a00 	vldr	s0, [r0]
}
 80044be:	4770      	bx	lr
    else if (deg < 181) return (- sine_table[deg-90]);
 80044c0:	28b4      	cmp	r0, #180	; 0xb4
 80044c2:	dc07      	bgt.n	80044d4 <bgc_cos+0x28>
 80044c4:	385a      	subs	r0, #90	; 0x5a
    else if (deg < 271) return (- sine_table[270-deg]);
 80044c6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80044ca:	ed90 0a00 	vldr	s0, [r0]
 80044ce:	eeb1 0a40 	vneg.f32	s0, s0
 80044d2:	4770      	bx	lr
 80044d4:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 80044d8:	dc02      	bgt.n	80044e0 <bgc_cos+0x34>
 80044da:	f5c0 7087 	rsb	r0, r0, #270	; 0x10e
 80044de:	e7f2      	b.n	80044c6 <bgc_cos+0x1a>
    else return sine_table[deg-270];
 80044e0:	f5a0 7087 	sub.w	r0, r0, #270	; 0x10e
 80044e4:	e7e7      	b.n	80044b6 <bgc_cos+0xa>
 80044e6:	bf00      	nop
 80044e8:	080056a0 	.word	0x080056a0

080044ec <bgc_bldchdl>:

/**/
void bgc_bldchdl(volatile BLDC *bldc0, float w0)
{
 80044ec:	b507      	push	{r0, r1, r2, lr}
    bldc0->w = w0;
 80044ee:	ed80 0a04 	vstr	s0, [r0, #16]
    bldc0->Vref = w0*(bldc0->Kf)+ bldc0->Voffset;
 80044f2:	ed90 7a00 	vldr	s14, [r0]
 80044f6:	edd0 7a02 	vldr	s15, [r0, #8]
 80044fa:	eee0 7a07 	vfma.f32	s15, s0, s14
{
 80044fe:	4602      	mov	r2, r0
    float V= (bldc0->Vref)/VDC;
 8004500:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
    bldc0->Vref = w0*(bldc0->Kf)+ bldc0->Voffset;
 8004504:	edc0 7a03 	vstr	s15, [r0, #12]
    float V= (bldc0->Vref)/VDC;
 8004508:	edd0 6a03 	vldr	s13, [r0, #12]
    V=fabs(V);
    /* update BLDC's angle */
    bldc0->angle += (bldc0->w)*( bldc0->dphi);
 800450c:	ed90 6a04 	vldr	s12, [r0, #16]
    float V= (bldc0->Vref)/VDC;
 8004510:	eec6 7a87 	vdiv.f32	s15, s13, s14
    bldc0->angle += (bldc0->w)*( bldc0->dphi);
 8004514:	edd0 6a06 	vldr	s13, [r0, #24]
 8004518:	ed90 7a05 	vldr	s14, [r0, #20]
 800451c:	eea6 7a26 	vfma.f32	s14, s12, s13
    V=fabs(V);
 8004520:	eef0 7ae7 	vabs.f32	s15, s15
    bldc0->angle += (bldc0->w)*( bldc0->dphi);
 8004524:	ed80 7a05 	vstr	s14, [r0, #20]
    /* angle format */
    if(bldc0->angle  >= 360) bldc0->angle  -= 360; 
 8004528:	edd0 6a05 	vldr	s13, [r0, #20]
 800452c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004590 <bgc_bldchdl+0xa4>
 8004530:	eef4 6ac7 	vcmpe.f32	s13, s14
 8004534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004538:	bfa2      	ittt	ge
 800453a:	edd0 6a05 	vldrge	s13, [r0, #20]
 800453e:	ee76 6ac7 	vsubge.f32	s13, s13, s14
 8004542:	edc0 6a05 	vstrge	s13, [r0, #20]
    if(bldc0->angle <0) bldc0->angle  +=360;
 8004546:	edd0 6a05 	vldr	s13, [r0, #20]
 800454a:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800454e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004552:	bf42      	ittt	mi
 8004554:	edd0 6a05 	vldrmi	s13, [r0, #20]
 8004558:	ee36 7a87 	vaddmi.f32	s14, s13, s14
 800455c:	ed80 7a05 	vstrmi	s14, [r0, #20]
    int deg0 = (int)(bldc0->angle) ;
 8004560:	ed90 7a05 	vldr	s14, [r0, #20]
 8004564:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    /* cal Va, Vb*/
    bldc0->Va = V* bgc_cos(deg0);
 8004568:	ee17 0a10 	vmov	r0, s14
    int deg0 = (int)(bldc0->angle) ;
 800456c:	ed8d 7a01 	vstr	s14, [sp, #4]
    bldc0->Va = V* bgc_cos(deg0);
 8004570:	f7ff ff9c 	bl	80044ac <bgc_cos>
 8004574:	ee27 0a80 	vmul.f32	s0, s15, s0
    bldc0->Vb = V* bgc_sin(deg0);
 8004578:	9801      	ldr	r0, [sp, #4]
    bldc0->Va = V* bgc_cos(deg0);
 800457a:	ed82 0a07 	vstr	s0, [r2, #28]
    bldc0->Vb = V* bgc_sin(deg0);
 800457e:	f7ff ff79 	bl	8004474 <bgc_sin>
 8004582:	ee27 0a80 	vmul.f32	s0, s15, s0
 8004586:	ed82 0a08 	vstr	s0, [r2, #32]
}
 800458a:	b003      	add	sp, #12
 800458c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004590:	43b40000 	.word	0x43b40000
 8004594:	00000000 	.word	0x00000000

08004598 <bgc_SVPWM>:

/*  * Generate bldc0 duty cycle 
    * 
*/
void bgc_SVPWM(volatile BLDC *bldc0, int CTR)
{
 8004598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800459c:	ed2d 8b06 	vpush	{d8-d10}
    float Va = bldc0->Va;
 80045a0:	edd0 9a07 	vldr	s19, [r0, #28]
    float Vb = bldc0->Vb;
 80045a4:	ed90 aa08 	vldr	s20, [r0, #32]
    float a = fabs(Va)+0.5774*fabs(Vb);
 80045a8:	eef0 7ae9 	vabs.f32	s15, s19
{
 80045ac:	4682      	mov	sl, r0
    float a = fabs(Va)+0.5774*fabs(Vb);
 80045ae:	ee17 0a90 	vmov	r0, s15
{
 80045b2:	ee08 1a10 	vmov	s16, r1
    float a = fabs(Va)+0.5774*fabs(Vb);
 80045b6:	f7fb ff6b 	bl	8000490 <__aeabi_f2d>
 80045ba:	eef0 7aca 	vabs.f32	s15, s20
 80045be:	4604      	mov	r4, r0
 80045c0:	ee17 0a90 	vmov	r0, s15
 80045c4:	460d      	mov	r5, r1
 80045c6:	f7fb ff63 	bl	8000490 <__aeabi_f2d>
 80045ca:	a391      	add	r3, pc, #580	; (adr r3, 8004810 <bgc_SVPWM+0x278>)
 80045cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d0:	4680      	mov	r8, r0
 80045d2:	4689      	mov	r9, r1
 80045d4:	f7fb ffb0 	bl	8000538 <__aeabi_dmul>
 80045d8:	4602      	mov	r2, r0
 80045da:	460b      	mov	r3, r1
 80045dc:	4606      	mov	r6, r0
 80045de:	460f      	mov	r7, r1
 80045e0:	4620      	mov	r0, r4
 80045e2:	4629      	mov	r1, r5
 80045e4:	f7fb fdf6 	bl	80001d4 <__adddf3>
 80045e8:	f7fc f9b8 	bl	800095c <__aeabi_d2f>
    float b = fabs(Va)-0.5774*fabs(Vb);
 80045ec:	4632      	mov	r2, r6
 80045ee:	463b      	mov	r3, r7
    float a = fabs(Va)+0.5774*fabs(Vb);
 80045f0:	ee08 0a90 	vmov	s17, r0
    float b = fabs(Va)-0.5774*fabs(Vb);
 80045f4:	4629      	mov	r1, r5
 80045f6:	4620      	mov	r0, r4
 80045f8:	f7fb fdea 	bl	80001d0 <__aeabi_dsub>
 80045fc:	f7fc f9ae 	bl	800095c <__aeabi_d2f>
    float c = 1.1547*fabs(Vb);
 8004600:	a385      	add	r3, pc, #532	; (adr r3, 8004818 <bgc_SVPWM+0x280>)
 8004602:	e9d3 2300 	ldrd	r2, r3, [r3]
    float b = fabs(Va)-0.5774*fabs(Vb);
 8004606:	ee09 0a10 	vmov	s18, r0
    float c = 1.1547*fabs(Vb);
 800460a:	4649      	mov	r1, r9
 800460c:	4640      	mov	r0, r8
 800460e:	f7fb ff93 	bl	8000538 <__aeabi_dmul>
 8004612:	f7fc f9a3 	bl	800095c <__aeabi_d2f>
    int buff=0;
 8004616:	eeb5 aac0 	vcmpe.f32	s20, #0.0
 800461a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    
    if(Vb < 0) buff+=100;
    if(Va < 0) buff+=10;
 800461e:	eef5 9ac0 	vcmpe.f32	s19, #0.0
    int buff=0;
 8004622:	bf4c      	ite	mi
 8004624:	2364      	movmi	r3, #100	; 0x64
 8004626:	2300      	movpl	r3, #0
    if(Va < 0) buff+=10;
 8004628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    if(b < 0) buff+=1;
 800462c:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
    if(Va < 0) buff+=10;
 8004630:	bf48      	it	mi
 8004632:	330a      	addmi	r3, #10
    if(b < 0) buff+=1;
 8004634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004638:	bf48      	it	mi
 800463a:	3301      	addmi	r3, #1
    
    switch (buff)
 800463c:	2b0b      	cmp	r3, #11
    float c = 1.1547*fabs(Vb);
 800463e:	ee07 0a90 	vmov	s15, r0
    switch (buff)
 8004642:	f000 808d 	beq.w	8004760 <bgc_SVPWM+0x1c8>
 8004646:	dc1f      	bgt.n	8004688 <bgc_SVPWM+0xf0>
 8004648:	2b01      	cmp	r3, #1
 800464a:	d048      	beq.n	80046de <bgc_SVPWM+0x146>
 800464c:	2b0a      	cmp	r3, #10
 800464e:	d065      	beq.n	800471c <bgc_SVPWM+0x184>
 8004650:	bb03      	cbnz	r3, 8004694 <bgc_SVPWM+0xfc>
    {
        case 0:     /*S1*/
            bldc0->duty1 = CTR*(1+a); 
 8004652:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004656:	ee78 6a87 	vadd.f32	s13, s17, s14
 800465a:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
            bldc0->duty2 = CTR*(1-a+2*c);
 800465e:	ee77 8a68 	vsub.f32	s17, s14, s17
            bldc0->duty1 = CTR*(1+a); 
 8004662:	ee66 6a88 	vmul.f32	s13, s13, s16
            bldc0->duty2 = CTR*(1-a+2*c);
 8004666:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
            bldc0->duty1 = CTR*(1+a); 
 800466a:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800466e:	edca 6a09 	vstr	s13, [sl, #36]	; 0x24
            bldc0->duty2 = CTR*(1-a+2*c);
 8004672:	eef0 6a68 	vmov.f32	s13, s17
 8004676:	eee7 6a87 	vfma.f32	s13, s15, s14
            bldc0->duty2 = CTR*(1-c); 
            bldc0->duty3 = CTR*(1+c);
        break;
        case 110:   /*S4*/
            bldc0->duty1 = CTR*(1-a);
            bldc0->duty2 = CTR*(1+a-2*c); 
 800467a:	ee66 7a88 	vmul.f32	s15, s13, s16
 800467e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004682:	edca 7a0a 	vstr	s15, [sl, #40]	; 0x28
 8004686:	e061      	b.n	800474c <bgc_SVPWM+0x1b4>
    switch (buff)
 8004688:	2b65      	cmp	r3, #101	; 0x65
 800468a:	f000 808d 	beq.w	80047a8 <bgc_SVPWM+0x210>
 800468e:	dc04      	bgt.n	800469a <bgc_SVPWM+0x102>
 8004690:	2b64      	cmp	r3, #100	; 0x64
 8004692:	d070      	beq.n	8004776 <bgc_SVPWM+0x1de>
            bldc0->duty1 = CTR*(1-2*a+c);
            bldc0->duty2 = CTR*(1-c); 
            bldc0->duty3 = CTR*(1+c);
        break;
        default:
            asm("nop");
 8004694:	bf00      	nop
            asm("nop");
 8004696:	bf00      	nop

        break;
        
    }
}
 8004698:	e05e      	b.n	8004758 <bgc_SVPWM+0x1c0>
    switch (buff)
 800469a:	2b6e      	cmp	r3, #110	; 0x6e
 800469c:	f000 80a1 	beq.w	80047e2 <bgc_SVPWM+0x24a>
 80046a0:	2b6f      	cmp	r3, #111	; 0x6f
 80046a2:	d1f7      	bne.n	8004694 <bgc_SVPWM+0xfc>
            bldc0->duty1 = CTR*(1-2*a+c);
 80046a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046a8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80046ac:	eeb0 6a66 	vmov.f32	s12, s13
 80046b0:	eea8 6ac7 	vfms.f32	s12, s17, s14
 80046b4:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 80046b8:	ee36 7a27 	vadd.f32	s14, s12, s15
 80046bc:	ee27 7a08 	vmul.f32	s14, s14, s16
 80046c0:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80046c4:	ed8a 7a09 	vstr	s14, [sl, #36]	; 0x24
            bldc0->duty2 = CTR*(1-c); 
 80046c8:	ee36 7ae7 	vsub.f32	s14, s13, s15
            bldc0->duty3 = CTR*(1+c);
 80046cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
            bldc0->duty2 = CTR*(1-c); 
 80046d0:	ee27 7a08 	vmul.f32	s14, s14, s16
 80046d4:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80046d8:	ed8a 7a0a 	vstr	s14, [sl, #40]	; 0x28
 80046dc:	e01b      	b.n	8004716 <bgc_SVPWM+0x17e>
            bldc0->duty1 = CTR*(1+2*b+c);
 80046de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80046e2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80046e6:	eeb0 6a47 	vmov.f32	s12, s14
 80046ea:	eea9 6a26 	vfma.f32	s12, s18, s13
 80046ee:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
            bldc0->duty1 = CTR*(1-2*a+c);
 80046f2:	ee76 6a27 	vadd.f32	s13, s12, s15
 80046f6:	ee66 6a88 	vmul.f32	s13, s13, s16
 80046fa:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80046fe:	edca 6a09 	vstr	s13, [sl, #36]	; 0x24
            bldc0->duty2 = CTR*(1+c);
 8004702:	ee77 6a87 	vadd.f32	s13, s15, s14
            bldc0->duty3 = CTR*(1-c);
 8004706:	ee77 7a67 	vsub.f32	s15, s14, s15
            bldc0->duty2 = CTR*(1+c);
 800470a:	ee66 6a88 	vmul.f32	s13, s13, s16
 800470e:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8004712:	edca 6a0a 	vstr	s13, [sl, #40]	; 0x28
            bldc0->duty3 = CTR*(1+c);
 8004716:	ee27 8a88 	vmul.f32	s16, s15, s16
 800471a:	e019      	b.n	8004750 <bgc_SVPWM+0x1b8>
            bldc0->duty1 = CTR*(1-a) ;
 800471c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004720:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8004724:	ee36 7ae8 	vsub.f32	s14, s13, s17
            bldc0->duty2 = CTR*(1+a);
 8004728:	ee78 8aa6 	vadd.f32	s17, s17, s13
            bldc0->duty1 = CTR*(1-a) ;
 800472c:	ee27 7a08 	vmul.f32	s14, s14, s16
 8004730:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8004734:	ed8a 7a09 	vstr	s14, [sl, #36]	; 0x24
            bldc0->duty2 = CTR*(1+a);
 8004738:	ee28 7a28 	vmul.f32	s14, s16, s17
 800473c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8004740:	ed8a 7a0a 	vstr	s14, [sl, #40]	; 0x28
            bldc0->duty3 = CTR*(1+a-2*c);
 8004744:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8004748:	eee7 8ac7 	vfms.f32	s17, s15, s14
            bldc0->duty3 = CTR*(1+a);
 800474c:	ee28 8a28 	vmul.f32	s16, s16, s17
            bldc0->duty3 = CTR*(1+c);
 8004750:	eebc 8ac8 	vcvt.u32.f32	s16, s16
 8004754:	ed8a 8a0b 	vstr	s16, [sl, #44]	; 0x2c
}
 8004758:	ecbd 8b06 	vpop	{d8-d10}
 800475c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            bldc0->duty1 = CTR*(1-2*a+c);
 8004760:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004764:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004768:	eeb0 6a47 	vmov.f32	s12, s14
 800476c:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8004770:	eea8 6ae6 	vfms.f32	s12, s17, s13
 8004774:	e7bd      	b.n	80046f2 <bgc_SVPWM+0x15a>
            bldc0->duty1 = CTR*(1+a);
 8004776:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800477a:	ee78 6a87 	vadd.f32	s13, s17, s14
 800477e:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
            bldc0->duty2 = CTR*(1-a); 
 8004782:	ee77 8a68 	vsub.f32	s17, s14, s17
            bldc0->duty1 = CTR*(1+a);
 8004786:	ee66 6a88 	vmul.f32	s13, s13, s16
            bldc0->duty2 = CTR*(1-a); 
 800478a:	ee28 7a28 	vmul.f32	s14, s16, s17
            bldc0->duty1 = CTR*(1+a);
 800478e:	eefc 6ae6 	vcvt.u32.f32	s13, s13
            bldc0->duty2 = CTR*(1-a); 
 8004792:	eebc 7ac7 	vcvt.u32.f32	s14, s14
            bldc0->duty1 = CTR*(1+a);
 8004796:	edca 6a09 	vstr	s13, [sl, #36]	; 0x24
            bldc0->duty2 = CTR*(1-a); 
 800479a:	ed8a 7a0a 	vstr	s14, [sl, #40]	; 0x28
            bldc0->duty3 = CTR*(1-a+2*c);
 800479e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80047a2:	eee7 8a87 	vfma.f32	s17, s15, s14
 80047a6:	e7d1      	b.n	800474c <bgc_SVPWM+0x1b4>
            bldc0->duty1 = CTR*(1+2*b+c);
 80047a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80047ac:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80047b0:	eeb0 6a47 	vmov.f32	s12, s14
 80047b4:	eea9 6a26 	vfma.f32	s12, s18, s13
 80047b8:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 80047bc:	ee76 6a27 	vadd.f32	s13, s12, s15
 80047c0:	ee66 6a88 	vmul.f32	s13, s13, s16
 80047c4:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80047c8:	edca 6a09 	vstr	s13, [sl, #36]	; 0x24
            bldc0->duty2 = CTR*(1-c); 
 80047cc:	ee77 6a67 	vsub.f32	s13, s14, s15
            bldc0->duty3 = CTR*(1+c);
 80047d0:	ee77 7a87 	vadd.f32	s15, s15, s14
            bldc0->duty2 = CTR*(1-c); 
 80047d4:	ee66 6a88 	vmul.f32	s13, s13, s16
 80047d8:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80047dc:	edca 6a0a 	vstr	s13, [sl, #40]	; 0x28
 80047e0:	e799      	b.n	8004716 <bgc_SVPWM+0x17e>
            bldc0->duty1 = CTR*(1-a);
 80047e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047e6:	ee36 7ae8 	vsub.f32	s14, s13, s17
 80047ea:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
            bldc0->duty2 = CTR*(1+a-2*c); 
 80047ee:	ee78 8aa6 	vadd.f32	s17, s17, s13
            bldc0->duty1 = CTR*(1-a);
 80047f2:	ee27 7a08 	vmul.f32	s14, s14, s16
            bldc0->duty2 = CTR*(1+a-2*c); 
 80047f6:	eef0 6a68 	vmov.f32	s13, s17
            bldc0->duty1 = CTR*(1-a);
 80047fa:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80047fe:	ed8a 7a09 	vstr	s14, [sl, #36]	; 0x24
            bldc0->duty2 = CTR*(1+a-2*c); 
 8004802:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8004806:	eee7 6ac7 	vfms.f32	s13, s15, s14
 800480a:	e736      	b.n	800467a <bgc_SVPWM+0xe2>
 800480c:	f3af 8000 	nop.w
 8004810:	9096bb99 	.word	0x9096bb99
 8004814:	3fe27a0f 	.word	0x3fe27a0f
 8004818:	b50b0f28 	.word	0xb50b0f28
 800481c:	3ff279a6 	.word	0x3ff279a6

08004820 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8004820:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
 8004822:	4813      	ldr	r0, [pc, #76]	; (8004870 <MX_ADC1_Init+0x50>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8004824:	4b13      	ldr	r3, [pc, #76]	; (8004874 <MX_ADC1_Init+0x54>)
 8004826:	2400      	movs	r4, #0
 8004828:	e880 0018 	stmia.w	r0, {r3, r4}
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800482c:	4b12      	ldr	r3, [pc, #72]	; (8004878 <MX_ADC1_Init+0x58>)
 800482e:	6283      	str	r3, [r0, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
 8004830:	2301      	movs	r3, #1
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004832:	6084      	str	r4, [r0, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8004834:	6104      	str	r4, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004836:	6184      	str	r4, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004838:	6204      	str	r4, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800483a:	62c4      	str	r4, [r0, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800483c:	60c4      	str	r4, [r0, #12]
  hadc1.Init.NbrOfConversion = 1;
 800483e:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8004840:	6304      	str	r4, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004842:	6143      	str	r3, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004844:	f7fc fac6 	bl	8000dd4 <HAL_ADC_Init>
 8004848:	b118      	cbz	r0, 8004852 <MX_ADC1_Init+0x32>
  {
    _Error_Handler(__FILE__, __LINE__);
 800484a:	2149      	movs	r1, #73	; 0x49
 800484c:	480b      	ldr	r0, [pc, #44]	; (800487c <MX_ADC1_Init+0x5c>)
 800484e:	f000 fb97 	bl	8004f80 <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = 1;
 8004852:	2301      	movs	r3, #1
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004854:	4669      	mov	r1, sp
 8004856:	4806      	ldr	r0, [pc, #24]	; (8004870 <MX_ADC1_Init+0x50>)
  sConfig.Channel = ADC_CHANNEL_0;
 8004858:	9400      	str	r4, [sp, #0]
  sConfig.Rank = 1;
 800485a:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800485c:	9402      	str	r4, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800485e:	f7fc fbf5 	bl	800104c <HAL_ADC_ConfigChannel>
 8004862:	b118      	cbz	r0, 800486c <MX_ADC1_Init+0x4c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004864:	2153      	movs	r1, #83	; 0x53
 8004866:	4805      	ldr	r0, [pc, #20]	; (800487c <MX_ADC1_Init+0x5c>)
 8004868:	f000 fb8a 	bl	8004f80 <_Error_Handler>
  }

}
 800486c:	b004      	add	sp, #16
 800486e:	bd10      	pop	{r4, pc}
 8004870:	200000d0 	.word	0x200000d0
 8004874:	40012000 	.word	0x40012000
 8004878:	0f000001 	.word	0x0f000001
 800487c:	0800580c 	.word	0x0800580c

08004880 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8004880:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc2.Instance = ADC2;
 8004882:	4814      	ldr	r0, [pc, #80]	; (80048d4 <MX_ADC2_Init+0x54>)
 8004884:	4b14      	ldr	r3, [pc, #80]	; (80048d8 <MX_ADC2_Init+0x58>)
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
  hadc2.Init.ScanConvMode = DISABLE;
  hadc2.Init.ContinuousConvMode = DISABLE;
  hadc2.Init.DiscontinuousConvMode = DISABLE;
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004886:	4a15      	ldr	r2, [pc, #84]	; (80048dc <MX_ADC2_Init+0x5c>)
  hadc2.Instance = ADC2;
 8004888:	6003      	str	r3, [r0, #0]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800488a:	6282      	str	r2, [r0, #40]	; 0x28
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800488c:	2300      	movs	r3, #0
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc2.Init.NbrOfConversion = 1;
 800488e:	2201      	movs	r2, #1
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8004890:	6043      	str	r3, [r0, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8004892:	6083      	str	r3, [r0, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8004894:	6103      	str	r3, [r0, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8004896:	6183      	str	r3, [r0, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8004898:	6203      	str	r3, [r0, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800489a:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800489c:	60c3      	str	r3, [r0, #12]
  hadc2.Init.NbrOfConversion = 1;
 800489e:	61c2      	str	r2, [r0, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80048a0:	6303      	str	r3, [r0, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80048a2:	6142      	str	r2, [r0, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80048a4:	f7fc fa96 	bl	8000dd4 <HAL_ADC_Init>
 80048a8:	b118      	cbz	r0, 80048b2 <MX_ADC2_Init+0x32>
  {
    _Error_Handler(__FILE__, __LINE__);
 80048aa:	216c      	movs	r1, #108	; 0x6c
 80048ac:	480c      	ldr	r0, [pc, #48]	; (80048e0 <MX_ADC2_Init+0x60>)
 80048ae:	f000 fb67 	bl	8004f80 <_Error_Handler>

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_2;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80048b2:	2102      	movs	r1, #2
 80048b4:	2201      	movs	r2, #1
 80048b6:	2300      	movs	r3, #0
 80048b8:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80048bc:	4805      	ldr	r0, [pc, #20]	; (80048d4 <MX_ADC2_Init+0x54>)
 80048be:	4669      	mov	r1, sp
 80048c0:	f7fc fbc4 	bl	800104c <HAL_ADC_ConfigChannel>
 80048c4:	b118      	cbz	r0, 80048ce <MX_ADC2_Init+0x4e>
  {
    _Error_Handler(__FILE__, __LINE__);
 80048c6:	2176      	movs	r1, #118	; 0x76
 80048c8:	4805      	ldr	r0, [pc, #20]	; (80048e0 <MX_ADC2_Init+0x60>)
 80048ca:	f000 fb59 	bl	8004f80 <_Error_Handler>
  }

}
 80048ce:	b005      	add	sp, #20
 80048d0:	f85d fb04 	ldr.w	pc, [sp], #4
 80048d4:	20000088 	.word	0x20000088
 80048d8:	40012100 	.word	0x40012100
 80048dc:	0f000001 	.word	0x0f000001
 80048e0:	0800580c 	.word	0x0800580c

080048e4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80048e4:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(adcHandle->Instance==ADC1)
 80048e6:	6803      	ldr	r3, [r0, #0]
 80048e8:	4a19      	ldr	r2, [pc, #100]	; (8004950 <HAL_ADC_MspInit+0x6c>)
 80048ea:	4293      	cmp	r3, r2
{
 80048ec:	b088      	sub	sp, #32
  if(adcHandle->Instance==ADC1)
 80048ee:	d11e      	bne.n	800492e <HAL_ADC_MspInit+0x4a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80048f0:	4b18      	ldr	r3, [pc, #96]	; (8004954 <HAL_ADC_MspInit+0x70>)
 80048f2:	2400      	movs	r4, #0
 80048f4:	9401      	str	r4, [sp, #4]
 80048f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048fc:	645a      	str	r2, [r3, #68]	; 0x44
 80048fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004904:	9301      	str	r3, [sp, #4]
 8004906:	9b01      	ldr	r3, [sp, #4]
  
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0
    PA4     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 8004908:	2311      	movs	r3, #17
    __HAL_RCC_ADC2_CLK_ENABLE();
  
    /**ADC2 GPIO Configuration    
    PA2     ------> ADC2_IN2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800490a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800490c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800490e:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004910:	4811      	ldr	r0, [pc, #68]	; (8004958 <HAL_ADC_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004912:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004914:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004916:	f7fc fe0b 	bl	8001530 <HAL_GPIO_Init>

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800491a:	2012      	movs	r0, #18
 800491c:	4622      	mov	r2, r4
 800491e:	4621      	mov	r1, r4
 8004920:	f7fc fc3e 	bl	80011a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8004924:	2012      	movs	r0, #18
 8004926:	f7fc fc6f 	bl	8001208 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800492a:	b008      	add	sp, #32
 800492c:	bd10      	pop	{r4, pc}
  else if(adcHandle->Instance==ADC2)
 800492e:	4a0b      	ldr	r2, [pc, #44]	; (800495c <HAL_ADC_MspInit+0x78>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d1fa      	bne.n	800492a <HAL_ADC_MspInit+0x46>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8004934:	4b07      	ldr	r3, [pc, #28]	; (8004954 <HAL_ADC_MspInit+0x70>)
 8004936:	2400      	movs	r4, #0
 8004938:	9402      	str	r4, [sp, #8]
 800493a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800493c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004940:	645a      	str	r2, [r3, #68]	; 0x44
 8004942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004944:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004948:	9302      	str	r3, [sp, #8]
 800494a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800494c:	2304      	movs	r3, #4
 800494e:	e7dc      	b.n	800490a <HAL_ADC_MspInit+0x26>
 8004950:	40012000 	.word	0x40012000
 8004954:	40023800 	.word	0x40023800
 8004958:	40020000 	.word	0x40020000
 800495c:	40012100 	.word	0x40012100

08004960 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8004960:	b513      	push	{r0, r1, r4, lr}
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004962:	4b17      	ldr	r3, [pc, #92]	; (80049c0 <MX_DMA_Init+0x60>)
 8004964:	2400      	movs	r4, #0
 8004966:	9401      	str	r4, [sp, #4]
 8004968:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800496a:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800496e:	631a      	str	r2, [r3, #48]	; 0x30
 8004970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004972:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8004976:	4622      	mov	r2, r4
 8004978:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 800497a:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800497c:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 800497e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8004980:	f7fc fc0e 	bl	80011a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8004984:	200b      	movs	r0, #11
 8004986:	f7fc fc3f 	bl	8001208 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800498a:	4622      	mov	r2, r4
 800498c:	4621      	mov	r1, r4
 800498e:	200d      	movs	r0, #13
 8004990:	f7fc fc06 	bl	80011a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8004994:	200d      	movs	r0, #13
 8004996:	f7fc fc37 	bl	8001208 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800499a:	4622      	mov	r2, r4
 800499c:	4621      	mov	r1, r4
 800499e:	2011      	movs	r0, #17
 80049a0:	f7fc fbfe 	bl	80011a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80049a4:	2011      	movs	r0, #17
 80049a6:	f7fc fc2f 	bl	8001208 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80049aa:	4622      	mov	r2, r4
 80049ac:	4621      	mov	r1, r4
 80049ae:	202f      	movs	r0, #47	; 0x2f
 80049b0:	f7fc fbf6 	bl	80011a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80049b4:	202f      	movs	r0, #47	; 0x2f
 80049b6:	f7fc fc27 	bl	8001208 <HAL_NVIC_EnableIRQ>

}
 80049ba:	b002      	add	sp, #8
 80049bc:	bd10      	pop	{r4, pc}
 80049be:	bf00      	nop
 80049c0:	40023800 	.word	0x40023800

080049c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80049c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80049c8:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80049ca:	2400      	movs	r4, #0
 80049cc:	4b45      	ldr	r3, [pc, #276]	; (8004ae4 <MX_GPIO_Init+0x120>)
 80049ce:	9401      	str	r4, [sp, #4]
 80049d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_1, GPIO_PIN_RESET);
 80049d2:	4e45      	ldr	r6, [pc, #276]	; (8004ae8 <MX_GPIO_Init+0x124>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80049d4:	f8df 9118 	ldr.w	r9, [pc, #280]	; 8004af0 <MX_GPIO_Init+0x12c>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN1C_Pin|EN2C_Pin, GPIO_PIN_RESET);
 80049d8:	f8df 8118 	ldr.w	r8, [pc, #280]	; 8004af4 <MX_GPIO_Init+0x130>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, EN1A_Pin|EN1B_Pin|EN2A_Pin|EN2B_Pin 
 80049dc:	4f43      	ldr	r7, [pc, #268]	; (8004aec <MX_GPIO_Init+0x128>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80049de:	f042 0210 	orr.w	r2, r2, #16
 80049e2:	631a      	str	r2, [r3, #48]	; 0x30
 80049e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049e6:	f002 0210 	and.w	r2, r2, #16
 80049ea:	9201      	str	r2, [sp, #4]
 80049ec:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80049ee:	9402      	str	r4, [sp, #8]
 80049f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049f2:	f042 0204 	orr.w	r2, r2, #4
 80049f6:	631a      	str	r2, [r3, #48]	; 0x30
 80049f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049fa:	f002 0204 	and.w	r2, r2, #4
 80049fe:	9202      	str	r2, [sp, #8]
 8004a00:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004a02:	9403      	str	r4, [sp, #12]
 8004a04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a06:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004a0a:	631a      	str	r2, [r3, #48]	; 0x30
 8004a0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a0e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8004a12:	9203      	str	r2, [sp, #12]
 8004a14:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a16:	9404      	str	r4, [sp, #16]
 8004a18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a1a:	f042 0201 	orr.w	r2, r2, #1
 8004a1e:	631a      	str	r2, [r3, #48]	; 0x30
 8004a20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a22:	f002 0201 	and.w	r2, r2, #1
 8004a26:	9204      	str	r2, [sp, #16]
 8004a28:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a2a:	9405      	str	r4, [sp, #20]
 8004a2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a2e:	f042 0202 	orr.w	r2, r2, #2
 8004a32:	631a      	str	r2, [r3, #48]	; 0x30
 8004a34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a36:	f002 0202 	and.w	r2, r2, #2
 8004a3a:	9205      	str	r2, [sp, #20]
 8004a3c:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004a3e:	9406      	str	r4, [sp, #24]
 8004a40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a42:	f042 0208 	orr.w	r2, r2, #8
 8004a46:	631a      	str	r2, [r3, #48]	; 0x30
 8004a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a4a:	f003 0308 	and.w	r3, r3, #8
 8004a4e:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_1, GPIO_PIN_RESET);
 8004a50:	4622      	mov	r2, r4
 8004a52:	4630      	mov	r0, r6
 8004a54:	212a      	movs	r1, #42	; 0x2a
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004a56:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_1, GPIO_PIN_RESET);
 8004a58:	f7fc fe4a 	bl	80016f0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8004a5c:	4622      	mov	r2, r4
 8004a5e:	4648      	mov	r0, r9
 8004a60:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004a64:	f7fc fe44 	bl	80016f0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, EN1C_Pin|EN2C_Pin, GPIO_PIN_RESET);
 8004a68:	4622      	mov	r2, r4
 8004a6a:	4640      	mov	r0, r8
 8004a6c:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8004a70:	f7fc fe3e 	bl	80016f0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, EN1A_Pin|EN1B_Pin|EN2A_Pin|EN2B_Pin 
 8004a74:	4622      	mov	r2, r4
 8004a76:	4638      	mov	r0, r7
 8004a78:	213f      	movs	r1, #63	; 0x3f
 8004a7a:	f7fc fe39 	bl	80016f0 <HAL_GPIO_WritePin>
                          |EN3A_Pin|EN3B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE4 PE6 PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_0;
 8004a7e:	2355      	movs	r3, #85	; 0x55
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004a80:	a907      	add	r1, sp, #28
 8004a82:	4630      	mov	r0, r6

  /*Configure GPIO pins : PE3 PE5 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a84:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_0;
 8004a86:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004a88:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a8a:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004a8c:	f7fc fd50 	bl	8001530 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_1;
 8004a90:	232a      	movs	r3, #42	; 0x2a
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004a92:	a907      	add	r1, sp, #28
 8004a94:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_1;
 8004a96:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a98:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a9a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a9c:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004a9e:	f7fc fd47 	bl	8001530 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004aa2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004aa6:	a907      	add	r1, sp, #28
 8004aa8:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004aaa:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004aac:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aae:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ab0:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ab2:	f7fc fd3d 	bl	8001530 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = EN1C_Pin|EN2C_Pin;
 8004ab6:	f44f 63a0 	mov.w	r3, #1280	; 0x500
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004aba:	a907      	add	r1, sp, #28
 8004abc:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = EN1C_Pin|EN2C_Pin;
 8004abe:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ac0:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ac2:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ac4:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ac6:	f7fc fd33 	bl	8001530 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin 
                           PDPin PDPin */
  GPIO_InitStruct.Pin = EN1A_Pin|EN1B_Pin|EN2A_Pin|EN2B_Pin 
 8004aca:	233f      	movs	r3, #63	; 0x3f
                          |EN3A_Pin|EN3B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004acc:	a907      	add	r1, sp, #28
 8004ace:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = EN1A_Pin|EN1B_Pin|EN2A_Pin|EN2B_Pin 
 8004ad0:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ad2:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ad4:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ad6:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004ad8:	f7fc fd2a 	bl	8001530 <HAL_GPIO_Init>

}
 8004adc:	b00d      	add	sp, #52	; 0x34
 8004ade:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004ae2:	bf00      	nop
 8004ae4:	40023800 	.word	0x40023800
 8004ae8:	40021000 	.word	0x40021000
 8004aec:	40020c00 	.word	0x40020c00
 8004af0:	40020800 	.word	0x40020800
 8004af4:	40020000 	.word	0x40020000

08004af8 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c2_rx;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004af8:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 8004afa:	480d      	ldr	r0, [pc, #52]	; (8004b30 <MX_I2C1_Init+0x38>)
  hi2c1.Init.ClockSpeed = 400000;
 8004afc:	4b0d      	ldr	r3, [pc, #52]	; (8004b34 <MX_I2C1_Init+0x3c>)
 8004afe:	f8df e03c 	ldr.w	lr, [pc, #60]	; 8004b3c <MX_I2C1_Init+0x44>
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004b02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 400000;
 8004b06:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004b0e:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004b10:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004b12:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004b14:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004b16:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004b18:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004b1a:	f7fc ffb7 	bl	8001a8c <HAL_I2C_Init>
 8004b1e:	b128      	cbz	r0, 8004b2c <MX_I2C1_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004b20:	2148      	movs	r1, #72	; 0x48
 8004b22:	4805      	ldr	r0, [pc, #20]	; (8004b38 <MX_I2C1_Init+0x40>)
  }

}
 8004b24:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8004b28:	f000 ba2a 	b.w	8004f80 <_Error_Handler>
 8004b2c:	bd08      	pop	{r3, pc}
 8004b2e:	bf00      	nop
 8004b30:	20000178 	.word	0x20000178
 8004b34:	40005400 	.word	0x40005400
 8004b38:	08005819 	.word	0x08005819
 8004b3c:	00061a80 	.word	0x00061a80

08004b40 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8004b40:	b508      	push	{r3, lr}

  hi2c2.Instance = I2C2;
 8004b42:	480d      	ldr	r0, [pc, #52]	; (8004b78 <MX_I2C2_Init+0x38>)
  hi2c2.Init.ClockSpeed = 400000;
 8004b44:	4b0d      	ldr	r3, [pc, #52]	; (8004b7c <MX_I2C2_Init+0x3c>)
 8004b46:	f8df e03c 	ldr.w	lr, [pc, #60]	; 8004b84 <MX_I2C2_Init+0x44>
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004b4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c2.Init.ClockSpeed = 400000;
 8004b4e:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004b52:	2300      	movs	r3, #0
 8004b54:	6083      	str	r3, [r0, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8004b56:	60c3      	str	r3, [r0, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004b58:	6102      	str	r2, [r0, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004b5a:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8004b5c:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004b5e:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004b60:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004b62:	f7fc ff93 	bl	8001a8c <HAL_I2C_Init>
 8004b66:	b128      	cbz	r0, 8004b74 <MX_I2C2_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004b68:	215b      	movs	r1, #91	; 0x5b
 8004b6a:	4805      	ldr	r0, [pc, #20]	; (8004b80 <MX_I2C2_Init+0x40>)
  }

}
 8004b6c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8004b70:	f000 ba06 	b.w	8004f80 <_Error_Handler>
 8004b74:	bd08      	pop	{r3, pc}
 8004b76:	bf00      	nop
 8004b78:	200001cc 	.word	0x200001cc
 8004b7c:	40005800 	.word	0x40005800
 8004b80:	08005819 	.word	0x08005819
 8004b84:	00061a80 	.word	0x00061a80

08004b88 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004b88:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C1)
 8004b8a:	6803      	ldr	r3, [r0, #0]
 8004b8c:	4a65      	ldr	r2, [pc, #404]	; (8004d24 <HAL_I2C_MspInit+0x19c>)
 8004b8e:	4293      	cmp	r3, r2
{
 8004b90:	b089      	sub	sp, #36	; 0x24
 8004b92:	4605      	mov	r5, r0
  if(i2cHandle->Instance==I2C1)
 8004b94:	d162      	bne.n	8004c5c <HAL_I2C_MspInit+0xd4>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004b96:	23c0      	movs	r3, #192	; 0xc0
 8004b98:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004b9a:	2312      	movs	r3, #18
 8004b9c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ba6:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004ba8:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004baa:	485f      	ldr	r0, [pc, #380]	; (8004d28 <HAL_I2C_MspInit+0x1a0>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004bac:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bae:	f7fc fcbf 	bl	8001530 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	4a5d      	ldr	r2, [pc, #372]	; (8004d2c <HAL_I2C_MspInit+0x1a4>)
 8004bb6:	9301      	str	r3, [sp, #4]
 8004bb8:	6c11      	ldr	r1, [r2, #64]	; 0x40
  
    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8004bba:	4c5d      	ldr	r4, [pc, #372]	; (8004d30 <HAL_I2C_MspInit+0x1a8>)
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8004bbc:	485d      	ldr	r0, [pc, #372]	; (8004d34 <HAL_I2C_MspInit+0x1ac>)
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004bbe:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
 8004bc2:	6411      	str	r1, [r2, #64]	; 0x40
 8004bc4:	6c12      	ldr	r2, [r2, #64]	; 0x40
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004bc6:	60a3      	str	r3, [r4, #8]
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004bc8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004bcc:	9201      	str	r2, [sp, #4]
 8004bce:	9a01      	ldr	r2, [sp, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004bd0:	60e3      	str	r3, [r4, #12]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8004bd2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004bd6:	e884 0005 	stmia.w	r4, {r0, r2}
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004bda:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8004bde:	4620      	mov	r0, r4
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004be0:	6122      	str	r2, [r4, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004be2:	6163      	str	r3, [r4, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004be4:	61a3      	str	r3, [r4, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8004be6:	61e3      	str	r3, [r4, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004be8:	6223      	str	r3, [r4, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004bea:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8004bec:	f7fc fb56 	bl	800129c <HAL_DMA_Init>
 8004bf0:	b118      	cbz	r0, 8004bfa <HAL_I2C_MspInit+0x72>
    {
      _Error_Handler(__FILE__, __LINE__);
 8004bf2:	2186      	movs	r1, #134	; 0x86
 8004bf4:	4850      	ldr	r0, [pc, #320]	; (8004d38 <HAL_I2C_MspInit+0x1b0>)
 8004bf6:	f000 f9c3 	bl	8004f80 <_Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8004bfa:	63ac      	str	r4, [r5, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004bfc:	494f      	ldr	r1, [pc, #316]	; (8004d3c <HAL_I2C_MspInit+0x1b4>)
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8004bfe:	63a5      	str	r5, [r4, #56]	; 0x38
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8004c00:	4c4f      	ldr	r4, [pc, #316]	; (8004d40 <HAL_I2C_MspInit+0x1b8>)
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004c02:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c06:	2340      	movs	r3, #64	; 0x40
 8004c08:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004c0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c10:	2300      	movs	r3, #0
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004c12:	6122      	str	r2, [r4, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_i2c1_tx.Init.Mode = DMA_CIRCULAR;
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8004c14:	4620      	mov	r0, r4
    hdma_i2c1_tx.Init.Mode = DMA_CIRCULAR;
 8004c16:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c1a:	60e3      	str	r3, [r4, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004c1c:	6163      	str	r3, [r4, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004c1e:	61a3      	str	r3, [r4, #24]
    hdma_i2c1_tx.Init.Mode = DMA_CIRCULAR;
 8004c20:	61e2      	str	r2, [r4, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004c22:	6223      	str	r3, [r4, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004c24:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8004c26:	f7fc fb39 	bl	800129c <HAL_DMA_Init>
 8004c2a:	b118      	cbz	r0, 8004c34 <HAL_I2C_MspInit+0xac>
    {
      _Error_Handler(__FILE__, __LINE__);
 8004c2c:	2198      	movs	r1, #152	; 0x98
 8004c2e:	4842      	ldr	r0, [pc, #264]	; (8004d38 <HAL_I2C_MspInit+0x1b0>)
 8004c30:	f000 f9a6 	bl	8004f80 <_Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004c34:	2200      	movs	r2, #0
 8004c36:	4611      	mov	r1, r2
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8004c38:	636c      	str	r4, [r5, #52]	; 0x34
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004c3a:	201f      	movs	r0, #31
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8004c3c:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004c3e:	f7fc faaf 	bl	80011a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004c42:	201f      	movs	r0, #31
 8004c44:	f7fc fae0 	bl	8001208 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8004c48:	2200      	movs	r2, #0
 8004c4a:	2020      	movs	r0, #32
 8004c4c:	4611      	mov	r1, r2
 8004c4e:	f7fc faa7 	bl	80011a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8004c52:	2020      	movs	r0, #32

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8004c54:	f7fc fad8 	bl	8001208 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8004c58:	b009      	add	sp, #36	; 0x24
 8004c5a:	bd30      	pop	{r4, r5, pc}
  else if(i2cHandle->Instance==I2C2)
 8004c5c:	4a39      	ldr	r2, [pc, #228]	; (8004d44 <HAL_I2C_MspInit+0x1bc>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d1fa      	bne.n	8004c58 <HAL_I2C_MspInit+0xd0>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004c62:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004c66:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004c68:	2312      	movs	r3, #18
 8004c6a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c70:	2303      	movs	r3, #3
 8004c72:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c74:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004c76:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c78:	482b      	ldr	r0, [pc, #172]	; (8004d28 <HAL_I2C_MspInit+0x1a0>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004c7a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c7c:	f7fc fc58 	bl	8001530 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004c80:	2300      	movs	r3, #0
 8004c82:	4a2a      	ldr	r2, [pc, #168]	; (8004d2c <HAL_I2C_MspInit+0x1a4>)
 8004c84:	9302      	str	r3, [sp, #8]
 8004c86:	6c11      	ldr	r1, [r2, #64]	; 0x40
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 8004c88:	4c2f      	ldr	r4, [pc, #188]	; (8004d48 <HAL_I2C_MspInit+0x1c0>)
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004c8a:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 8004c8e:	6411      	str	r1, [r2, #64]	; 0x40
 8004c90:	6c12      	ldr	r2, [r2, #64]	; 0x40
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8004c92:	492e      	ldr	r1, [pc, #184]	; (8004d4c <HAL_I2C_MspInit+0x1c4>)
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004c94:	60a3      	str	r3, [r4, #8]
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004c96:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8004c9a:	9202      	str	r2, [sp, #8]
 8004c9c:	9a02      	ldr	r2, [sp, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c9e:	60e3      	str	r3, [r4, #12]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8004ca0:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8004ca4:	e884 0006 	stmia.w	r4, {r1, r2}
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8004ca8:	4620      	mov	r0, r4
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004caa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004cae:	6122      	str	r2, [r4, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004cb0:	6163      	str	r3, [r4, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004cb2:	61a3      	str	r3, [r4, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8004cb4:	61e3      	str	r3, [r4, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004cb6:	6223      	str	r3, [r4, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004cb8:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8004cba:	f7fc faef 	bl	800129c <HAL_DMA_Init>
 8004cbe:	b118      	cbz	r0, 8004cc8 <HAL_I2C_MspInit+0x140>
      _Error_Handler(__FILE__, __LINE__);
 8004cc0:	21c8      	movs	r1, #200	; 0xc8
 8004cc2:	481d      	ldr	r0, [pc, #116]	; (8004d38 <HAL_I2C_MspInit+0x1b0>)
 8004cc4:	f000 f95c 	bl	8004f80 <_Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 8004cc8:	63ac      	str	r4, [r5, #56]	; 0x38
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004cca:	4b21      	ldr	r3, [pc, #132]	; (8004d50 <HAL_I2C_MspInit+0x1c8>)
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 8004ccc:	63a5      	str	r5, [r4, #56]	; 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 8004cce:	4c21      	ldr	r4, [pc, #132]	; (8004d54 <HAL_I2C_MspInit+0x1cc>)
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004cd0:	f04f 6c60 	mov.w	ip, #234881024	; 0xe000000
 8004cd4:	f04f 0e40 	mov.w	lr, #64	; 0x40
 8004cd8:	e884 5008 	stmia.w	r4, {r3, ip, lr}
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004cdc:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004ce0:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8004ce2:	4620      	mov	r0, r4
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004ce4:	60e3      	str	r3, [r4, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004ce6:	6122      	str	r2, [r4, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004ce8:	6163      	str	r3, [r4, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004cea:	61a3      	str	r3, [r4, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8004cec:	61e3      	str	r3, [r4, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004cee:	6223      	str	r3, [r4, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004cf0:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8004cf2:	f7fc fad3 	bl	800129c <HAL_DMA_Init>
 8004cf6:	b118      	cbz	r0, 8004d00 <HAL_I2C_MspInit+0x178>
      _Error_Handler(__FILE__, __LINE__);
 8004cf8:	21da      	movs	r1, #218	; 0xda
 8004cfa:	480f      	ldr	r0, [pc, #60]	; (8004d38 <HAL_I2C_MspInit+0x1b0>)
 8004cfc:	f000 f940 	bl	8004f80 <_Error_Handler>
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8004d00:	2200      	movs	r2, #0
 8004d02:	4611      	mov	r1, r2
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 8004d04:	636c      	str	r4, [r5, #52]	; 0x34
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8004d06:	2021      	movs	r0, #33	; 0x21
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 8004d08:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8004d0a:	f7fc fa49 	bl	80011a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8004d0e:	2021      	movs	r0, #33	; 0x21
 8004d10:	f7fc fa7a 	bl	8001208 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8004d14:	2200      	movs	r2, #0
 8004d16:	2022      	movs	r0, #34	; 0x22
 8004d18:	4611      	mov	r1, r2
 8004d1a:	f7fc fa41 	bl	80011a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8004d1e:	2022      	movs	r0, #34	; 0x22
 8004d20:	e798      	b.n	8004c54 <HAL_I2C_MspInit+0xcc>
 8004d22:	bf00      	nop
 8004d24:	40005400 	.word	0x40005400
 8004d28:	40020400 	.word	0x40020400
 8004d2c:	40023800 	.word	0x40023800
 8004d30:	200002e0 	.word	0x200002e0
 8004d34:	40026010 	.word	0x40026010
 8004d38:	08005819 	.word	0x08005819
 8004d3c:	400260a0 	.word	0x400260a0
 8004d40:	20000118 	.word	0x20000118
 8004d44:	40005800 	.word	0x40005800
 8004d48:	20000220 	.word	0x20000220
 8004d4c:	40026040 	.word	0x40026040
 8004d50:	400260b8 	.word	0x400260b8
 8004d54:	20000280 	.word	0x20000280

08004d58 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{

    if(htim->Instance == htim10.Instance)
 8004d58:	4b27      	ldr	r3, [pc, #156]	; (8004df8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8004d5a:	6802      	ldr	r2, [r0, #0]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	429a      	cmp	r2, r3
{
 8004d60:	b510      	push	{r4, lr}
    if(htim->Instance == htim10.Instance)
 8004d62:	d148      	bne.n	8004df6 <HAL_TIM_PeriodElapsedCallback+0x9e>
    {
        //out2 =out;
        //out=0;

        bgc_bldchdl(&bldc1, out);
 8004d64:	4c25      	ldr	r4, [pc, #148]	; (8004dfc <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8004d66:	4826      	ldr	r0, [pc, #152]	; (8004e00 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8004d68:	ed94 0a00 	vldr	s0, [r4]
 8004d6c:	f7ff fbbe 	bl	80044ec <bgc_bldchdl>
        bgc_SVPWM(&bldc1 , 200);
 8004d70:	21c8      	movs	r1, #200	; 0xc8
 8004d72:	4823      	ldr	r0, [pc, #140]	; (8004e00 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8004d74:	f7ff fc10 	bl	8004598 <bgc_SVPWM>

        deg0++;
 8004d78:	4a22      	ldr	r2, [pc, #136]	; (8004e04 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8004d7a:	6813      	ldr	r3, [r2, #0]
 8004d7c:	3301      	adds	r3, #1
        if (deg0 == 1000)
 8004d7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d82:	d024      	beq.n	8004dce <HAL_TIM_PeriodElapsedCallback+0x76>
        deg0++;
 8004d84:	6013      	str	r3, [r2, #0]
                out=out+1;
            }

        }

        dutya= bldc1.duty1;
 8004d86:	4b1e      	ldr	r3, [pc, #120]	; (8004e00 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8004d88:	4a1f      	ldr	r2, [pc, #124]	; (8004e08 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8004d8a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004d8c:	6010      	str	r0, [r2, #0]
        dutyb= bldc1.duty2;
 8004d8e:	4a1f      	ldr	r2, [pc, #124]	; (8004e0c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8004d90:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004d92:	6011      	str	r1, [r2, #0]
        dutyc= bldc1.duty3;
 8004d94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d96:	4b1e      	ldr	r3, [pc, #120]	; (8004e10 <HAL_TIM_PeriodElapsedCallback+0xb8>)
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, dutya);
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, dutyb);
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, dutyc);
        /**/

        MPU6050_ReadAll(&hi2c1,&mpu);
 8004d98:	4c1e      	ldr	r4, [pc, #120]	; (8004e14 <HAL_TIM_PeriodElapsedCallback+0xbc>)
        dutyc= bldc1.duty3;
 8004d9a:	601a      	str	r2, [r3, #0]
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, dutya);
 8004d9c:	4b1e      	ldr	r3, [pc, #120]	; (8004e18 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	6358      	str	r0, [r3, #52]	; 0x34
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, dutyb);
 8004da2:	6399      	str	r1, [r3, #56]	; 0x38
        MPU6050_ReadAll(&hi2c1,&mpu);
 8004da4:	481d      	ldr	r0, [pc, #116]	; (8004e1c <HAL_TIM_PeriodElapsedCallback+0xc4>)
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, dutyc);
 8004da6:	63da      	str	r2, [r3, #60]	; 0x3c
        MPU6050_ReadAll(&hi2c1,&mpu);
 8004da8:	4621      	mov	r1, r4
 8004daa:	f7ff fab7 	bl	800431c <MPU6050_ReadAll>
        MadgwickAHRSupdateIMU(mpu.GyroX,mpu.GyroY,mpu.GyroZ,mpu.AccX,mpu.AccY,mpu.AccZ);
 8004dae:	edd4 2a04 	vldr	s5, [r4, #16]
 8004db2:	ed94 2a03 	vldr	s4, [r4, #12]
 8004db6:	edd4 1a02 	vldr	s3, [r4, #8]
 8004dba:	ed94 1a07 	vldr	s2, [r4, #28]
 8004dbe:	edd4 0a06 	vldr	s1, [r4, #24]
 8004dc2:	ed94 0a05 	vldr	s0, [r4, #20]
        //qua2Euler();
    }
}
 8004dc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        MadgwickAHRSupdateIMU(mpu.GyroX,mpu.GyroY,mpu.GyroZ,mpu.AccX,mpu.AccY,mpu.AccZ);
 8004dca:	f7fe be2b 	b.w	8003a24 <MadgwickAHRSupdateIMU>
            if(out<10)
 8004dce:	edd4 7a00 	vldr	s15, [r4]
 8004dd2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004dd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                out=out+1;
 8004dde:	bf44      	itt	mi
 8004de0:	eeb7 7a00 	vmovmi.f32	s14, #112	; 0x3f800000  1.0
 8004de4:	ee77 7a87 	vaddmi.f32	s15, s15, s14
            deg0 =0;
 8004de8:	f04f 0300 	mov.w	r3, #0
 8004dec:	6013      	str	r3, [r2, #0]
                out=out+1;
 8004dee:	bf48      	it	mi
 8004df0:	edc4 7a00 	vstrmi	s15, [r4]
 8004df4:	e7c7      	b.n	8004d86 <HAL_TIM_PeriodElapsedCallback+0x2e>
 8004df6:	bd10      	pop	{r4, pc}
 8004df8:	200003e4 	.word	0x200003e4
 8004dfc:	20000344 	.word	0x20000344
 8004e00:	20000378 	.word	0x20000378
 8004e04:	20000068 	.word	0x20000068
 8004e08:	20000374 	.word	0x20000374
 8004e0c:	2000034c 	.word	0x2000034c
 8004e10:	20000348 	.word	0x20000348
 8004e14:	20000350 	.word	0x20000350
 8004e18:	20000420 	.word	0x20000420
 8004e1c:	20000178 	.word	0x20000178

08004e20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004e20:	b530      	push	{r4, r5, lr}
 8004e22:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004e24:	4b26      	ldr	r3, [pc, #152]	; (8004ec0 <SystemClock_Config+0xa0>)
 8004e26:	2100      	movs	r1, #0
 8004e28:	9101      	str	r1, [sp, #4]
 8004e2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e2c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004e30:	641a      	str	r2, [r3, #64]	; 0x40
 8004e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e38:	9301      	str	r3, [sp, #4]
 8004e3a:	9b01      	ldr	r3, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e3c:	4b21      	ldr	r3, [pc, #132]	; (8004ec4 <SystemClock_Config+0xa4>)
 8004e3e:	9102      	str	r1, [sp, #8]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e46:	601a      	str	r2, [r3, #0]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e4e:	9302      	str	r3, [sp, #8]
 8004e50:	9b02      	ldr	r3, [sp, #8]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004e52:	2301      	movs	r3, #1
 8004e54:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004e56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004e5a:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004e5c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004e60:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004e62:	2404      	movs	r4, #4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004e64:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004e66:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLN = 168;
 8004e68:	23a8      	movs	r3, #168	; 0xa8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004e6a:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004e6c:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8004e6e:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004e70:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004e72:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004e74:	f7fd fd94 	bl	80029a0 <HAL_RCC_OscConfig>
 8004e78:	b100      	cbz	r0, 8004e7c <SystemClock_Config+0x5c>
 8004e7a:	e7fe      	b.n	8004e7a <SystemClock_Config+0x5a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004e7c:	230f      	movs	r3, #15
 8004e7e:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004e80:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004e82:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004e86:	2105      	movs	r1, #5
 8004e88:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004e8a:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004e8c:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8004e8e:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004e90:	f7fd ff36 	bl	8002d00 <HAL_RCC_ClockConfig>
 8004e94:	4605      	mov	r5, r0
 8004e96:	b100      	cbz	r0, 8004e9a <SystemClock_Config+0x7a>
 8004e98:	e7fe      	b.n	8004e98 <SystemClock_Config+0x78>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8004e9a:	f7fd ffcb 	bl	8002e34 <HAL_RCC_GetHCLKFreq>
 8004e9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ea2:	fbb0 f0f3 	udiv	r0, r0, r3
 8004ea6:	f7fc f9bb 	bl	8001220 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8004eaa:	4620      	mov	r0, r4
 8004eac:	f7fc f9ce 	bl	800124c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8004eb0:	462a      	mov	r2, r5
 8004eb2:	4629      	mov	r1, r5
 8004eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8004eb8:	f7fc f972 	bl	80011a0 <HAL_NVIC_SetPriority>
}
 8004ebc:	b015      	add	sp, #84	; 0x54
 8004ebe:	bd30      	pop	{r4, r5, pc}
 8004ec0:	40023800 	.word	0x40023800
 8004ec4:	40007000 	.word	0x40007000

08004ec8 <main>:
{
 8004ec8:	b508      	push	{r3, lr}
  HAL_Init();
 8004eca:	f7fb ff43 	bl	8000d54 <HAL_Init>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8004ece:	4c24      	ldr	r4, [pc, #144]	; (8004f60 <main+0x98>)
  SystemClock_Config();
 8004ed0:	f7ff ffa6 	bl	8004e20 <SystemClock_Config>
  MX_GPIO_Init();
 8004ed4:	f7ff fd76 	bl	80049c4 <MX_GPIO_Init>
  MX_DMA_Init();
 8004ed8:	f7ff fd42 	bl	8004960 <MX_DMA_Init>
  MX_ADC1_Init();
 8004edc:	f7ff fca0 	bl	8004820 <MX_ADC1_Init>
  MX_I2C1_Init();
 8004ee0:	f7ff fe0a 	bl	8004af8 <MX_I2C1_Init>
  MX_I2C2_Init();
 8004ee4:	f7ff fe2c 	bl	8004b40 <MX_I2C2_Init>
  MX_TIM1_Init();
 8004ee8:	f000 f9dc 	bl	80052a4 <MX_TIM1_Init>
  MX_TIM3_Init();
 8004eec:	f000 fa56 	bl	800539c <MX_TIM3_Init>
  MX_TIM4_Init();
 8004ef0:	f000 fab8 	bl	8005464 <MX_TIM4_Init>
  MX_USART3_Init();
 8004ef4:	f000 fb1a 	bl	800552c <MX_USART3_Init>
  MX_TIM10_Init();
 8004ef8:	f000 f914 	bl	8005124 <MX_TIM10_Init>
  MX_ADC2_Init();
 8004efc:	f7ff fcc0 	bl	8004880 <MX_ADC2_Init>
  bldc_init(&bldc1, 0.36 ,20 ,VDC, 3 , 0.1);     //0.2857 ...0.32..0.07
 8004f00:	ed9f 2a18 	vldr	s4, [pc, #96]	; 8004f64 <main+0x9c>
 8004f04:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8004f68 <main+0xa0>
 8004f08:	4818      	ldr	r0, [pc, #96]	; (8004f6c <main+0xa4>)
 8004f0a:	eef0 1a08 	vmov.f32	s3, #8	; 0x40400000  3.0
 8004f0e:	eeb2 1a08 	vmov.f32	s2, #40	; 0x41400000  12.0
 8004f12:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8004f16:	f7fe fd63 	bl	80039e0 <bldc_init>
  out=0;
 8004f1a:	4b15      	ldr	r3, [pc, #84]	; (8004f70 <main+0xa8>)
 8004f1c:	2200      	movs	r2, #0
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8004f1e:	2100      	movs	r1, #0
 8004f20:	4620      	mov	r0, r4
  out=0;
 8004f22:	601a      	str	r2, [r3, #0]
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8004f24:	f7fe fad2 	bl	80034cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8004f28:	2104      	movs	r1, #4
 8004f2a:	4620      	mov	r0, r4
 8004f2c:	f7fe face 	bl	80034cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8004f30:	2108      	movs	r1, #8
 8004f32:	4620      	mov	r0, r4
 8004f34:	f7fe faca 	bl	80034cc <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 150);
 8004f38:	6823      	ldr	r3, [r4, #0]
 8004f3a:	2296      	movs	r2, #150	; 0x96
 8004f3c:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8004f3e:	2200      	movs	r2, #0
 8004f40:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_Delay(1500);
 8004f42:	f240 50dc 	movw	r0, #1500	; 0x5dc
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8004f46:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_Delay(1500);
 8004f48:	f7fb ff30 	bl	8000dac <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim10);
 8004f4c:	4809      	ldr	r0, [pc, #36]	; (8004f74 <main+0xac>)
 8004f4e:	f7fe f81b 	bl	8002f88 <HAL_TIM_Base_Start_IT>
  MPU6050_Init(&hi2c1,&mpu,Acc_8G,Gyro_2000s);
 8004f52:	2303      	movs	r3, #3
 8004f54:	2202      	movs	r2, #2
 8004f56:	4908      	ldr	r1, [pc, #32]	; (8004f78 <main+0xb0>)
 8004f58:	4808      	ldr	r0, [pc, #32]	; (8004f7c <main+0xb4>)
 8004f5a:	f7ff f94b 	bl	80041f4 <MPU6050_Init>
 8004f5e:	e7fe      	b.n	8004f5e <main+0x96>
 8004f60:	20000420 	.word	0x20000420
 8004f64:	3dcccccd 	.word	0x3dcccccd
 8004f68:	3eb851ec 	.word	0x3eb851ec
 8004f6c:	20000378 	.word	0x20000378
 8004f70:	20000344 	.word	0x20000344
 8004f74:	200003e4 	.word	0x200003e4
 8004f78:	20000350 	.word	0x20000350
 8004f7c:	20000178 	.word	0x20000178

08004f80 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8004f80:	e7fe      	b.n	8004f80 <_Error_Handler>
	...

08004f84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004f84:	b513      	push	{r0, r1, r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f86:	4b22      	ldr	r3, [pc, #136]	; (8005010 <HAL_MspInit+0x8c>)
 8004f88:	2400      	movs	r4, #0
 8004f8a:	9400      	str	r4, [sp, #0]
 8004f8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f92:	645a      	str	r2, [r3, #68]	; 0x44
 8004f94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f96:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004f9a:	9200      	str	r2, [sp, #0]
 8004f9c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004f9e:	9401      	str	r4, [sp, #4]
 8004fa0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fa2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004fa6:	641a      	str	r2, [r3, #64]	; 0x40
 8004fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fae:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004fb0:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 8004fb2:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004fb4:	f7fc f8e2 	bl	800117c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8004fb8:	4622      	mov	r2, r4
 8004fba:	4621      	mov	r1, r4
 8004fbc:	f06f 000b 	mvn.w	r0, #11
 8004fc0:	f7fc f8ee 	bl	80011a0 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8004fc4:	4622      	mov	r2, r4
 8004fc6:	4621      	mov	r1, r4
 8004fc8:	f06f 000a 	mvn.w	r0, #10
 8004fcc:	f7fc f8e8 	bl	80011a0 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8004fd0:	4622      	mov	r2, r4
 8004fd2:	4621      	mov	r1, r4
 8004fd4:	f06f 0009 	mvn.w	r0, #9
 8004fd8:	f7fc f8e2 	bl	80011a0 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8004fdc:	4622      	mov	r2, r4
 8004fde:	4621      	mov	r1, r4
 8004fe0:	f06f 0004 	mvn.w	r0, #4
 8004fe4:	f7fc f8dc 	bl	80011a0 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8004fe8:	4622      	mov	r2, r4
 8004fea:	4621      	mov	r1, r4
 8004fec:	f06f 0003 	mvn.w	r0, #3
 8004ff0:	f7fc f8d6 	bl	80011a0 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8004ff4:	4622      	mov	r2, r4
 8004ff6:	4621      	mov	r1, r4
 8004ff8:	f06f 0001 	mvn.w	r0, #1
 8004ffc:	f7fc f8d0 	bl	80011a0 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8005000:	4622      	mov	r2, r4
 8005002:	4621      	mov	r1, r4
 8005004:	f04f 30ff 	mov.w	r0, #4294967295
 8005008:	f7fc f8ca 	bl	80011a0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800500c:	b002      	add	sp, #8
 800500e:	bd10      	pop	{r4, pc}
 8005010:	40023800 	.word	0x40023800

08005014 <NMI_Handler>:
 8005014:	4770      	bx	lr

08005016 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8005016:	e7fe      	b.n	8005016 <HardFault_Handler>

08005018 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8005018:	e7fe      	b.n	8005018 <MemManage_Handler>

0800501a <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800501a:	e7fe      	b.n	800501a <BusFault_Handler>

0800501c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800501c:	e7fe      	b.n	800501c <UsageFault_Handler>

0800501e <SVC_Handler>:
 800501e:	4770      	bx	lr

08005020 <DebugMon_Handler>:
 8005020:	4770      	bx	lr

08005022 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8005022:	4770      	bx	lr

08005024 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8005024:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005026:	f7fb feaf 	bl	8000d88 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800502a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800502e:	f7fc b91a 	b.w	8001266 <HAL_SYSTICK_IRQHandler>
	...

08005034 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8005034:	4801      	ldr	r0, [pc, #4]	; (800503c <DMA1_Stream0_IRQHandler+0x8>)
 8005036:	f7fc b9c1 	b.w	80013bc <HAL_DMA_IRQHandler>
 800503a:	bf00      	nop
 800503c:	200002e0 	.word	0x200002e0

08005040 <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8005040:	4801      	ldr	r0, [pc, #4]	; (8005048 <DMA1_Stream2_IRQHandler+0x8>)
 8005042:	f7fc b9bb 	b.w	80013bc <HAL_DMA_IRQHandler>
 8005046:	bf00      	nop
 8005048:	20000220 	.word	0x20000220

0800504c <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800504c:	4801      	ldr	r0, [pc, #4]	; (8005054 <DMA1_Stream6_IRQHandler+0x8>)
 800504e:	f7fc b9b5 	b.w	80013bc <HAL_DMA_IRQHandler>
 8005052:	bf00      	nop
 8005054:	20000118 	.word	0x20000118

08005058 <ADC_IRQHandler>:

/**
* @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
*/
void ADC_IRQHandler(void)
{
 8005058:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800505a:	4804      	ldr	r0, [pc, #16]	; (800506c <ADC_IRQHandler+0x14>)
 800505c:	f7fb ff61 	bl	8000f22 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8005060:	4803      	ldr	r0, [pc, #12]	; (8005070 <ADC_IRQHandler+0x18>)
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8005062:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_ADC_IRQHandler(&hadc2);
 8005066:	f7fb bf5c 	b.w	8000f22 <HAL_ADC_IRQHandler>
 800506a:	bf00      	nop
 800506c:	200000d0 	.word	0x200000d0
 8005070:	20000088 	.word	0x20000088

08005074 <TIM1_UP_TIM10_IRQHandler>:

/**
* @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
*/
void TIM1_UP_TIM10_IRQHandler(void)
{
 8005074:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005076:	4804      	ldr	r0, [pc, #16]	; (8005088 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8005078:	f7fe f84f 	bl	800311a <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 800507c:	4803      	ldr	r0, [pc, #12]	; (800508c <TIM1_UP_TIM10_IRQHandler+0x18>)
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800507e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim10);
 8005082:	f7fe b84a 	b.w	800311a <HAL_TIM_IRQHandler>
 8005086:	bf00      	nop
 8005088:	2000045c 	.word	0x2000045c
 800508c:	200003e4 	.word	0x200003e4

08005090 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005090:	4801      	ldr	r0, [pc, #4]	; (8005098 <I2C1_EV_IRQHandler+0x8>)
 8005092:	f7fd b85b 	b.w	800214c <HAL_I2C_EV_IRQHandler>
 8005096:	bf00      	nop
 8005098:	20000178 	.word	0x20000178

0800509c <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800509c:	4801      	ldr	r0, [pc, #4]	; (80050a4 <I2C1_ER_IRQHandler+0x8>)
 800509e:	f7fd bbbf 	b.w	8002820 <HAL_I2C_ER_IRQHandler>
 80050a2:	bf00      	nop
 80050a4:	20000178 	.word	0x20000178

080050a8 <I2C2_EV_IRQHandler>:
void I2C2_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80050a8:	4801      	ldr	r0, [pc, #4]	; (80050b0 <I2C2_EV_IRQHandler+0x8>)
 80050aa:	f7fd b84f 	b.w	800214c <HAL_I2C_EV_IRQHandler>
 80050ae:	bf00      	nop
 80050b0:	200001cc 	.word	0x200001cc

080050b4 <I2C2_ER_IRQHandler>:
void I2C2_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80050b4:	4801      	ldr	r0, [pc, #4]	; (80050bc <I2C2_ER_IRQHandler+0x8>)
 80050b6:	f7fd bbb3 	b.w	8002820 <HAL_I2C_ER_IRQHandler>
 80050ba:	bf00      	nop
 80050bc:	200001cc 	.word	0x200001cc

080050c0 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_USART_IRQHandler(&husart3);
 80050c0:	4801      	ldr	r0, [pc, #4]	; (80050c8 <USART3_IRQHandler+0x8>)
 80050c2:	f7fe bbcd 	b.w	8003860 <HAL_USART_IRQHandler>
 80050c6:	bf00      	nop
 80050c8:	20000498 	.word	0x20000498

080050cc <DMA1_Stream7_IRQHandler>:
void DMA1_Stream7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 80050cc:	4801      	ldr	r0, [pc, #4]	; (80050d4 <DMA1_Stream7_IRQHandler+0x8>)
 80050ce:	f7fc b975 	b.w	80013bc <HAL_DMA_IRQHandler>
 80050d2:	bf00      	nop
 80050d4:	20000280 	.word	0x20000280

080050d8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80050d8:	490f      	ldr	r1, [pc, #60]	; (8005118 <SystemInit+0x40>)
 80050da:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80050de:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80050e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80050e6:	4b0d      	ldr	r3, [pc, #52]	; (800511c <SystemInit+0x44>)
 80050e8:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80050ea:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80050ec:	f042 0201 	orr.w	r2, r2, #1
 80050f0:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80050f2:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80050fa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80050fe:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8005100:	4a07      	ldr	r2, [pc, #28]	; (8005120 <SystemInit+0x48>)
 8005102:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800510a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800510c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800510e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005112:	608b      	str	r3, [r1, #8]
 8005114:	4770      	bx	lr
 8005116:	bf00      	nop
 8005118:	e000ed00 	.word	0xe000ed00
 800511c:	40023800 	.word	0x40023800
 8005120:	24003010 	.word	0x24003010

08005124 <MX_TIM10_Init>:
}
/* TIM10 init function */
void MX_TIM10_Init(void)
{

  htim10.Instance = TIM10;
 8005124:	480a      	ldr	r0, [pc, #40]	; (8005150 <MX_TIM10_Init+0x2c>)
  htim10.Init.Prescaler = 83;
 8005126:	490b      	ldr	r1, [pc, #44]	; (8005154 <MX_TIM10_Init+0x30>)
{
 8005128:	b508      	push	{r3, lr}
  htim10.Init.Prescaler = 83;
 800512a:	2353      	movs	r3, #83	; 0x53
 800512c:	e880 000a 	stmia.w	r0, {r1, r3}
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim10.Init.Period = 999;
 8005130:	f240 32e7 	movw	r2, #999	; 0x3e7
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005134:	2300      	movs	r3, #0
 8005136:	6083      	str	r3, [r0, #8]
  htim10.Init.Period = 999;
 8005138:	60c2      	str	r2, [r0, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800513a:	6103      	str	r3, [r0, #16]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800513c:	f7fe f8f4 	bl	8003328 <HAL_TIM_Base_Init>
 8005140:	b128      	cbz	r0, 800514e <MX_TIM10_Init+0x2a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005142:	21fb      	movs	r1, #251	; 0xfb
 8005144:	4804      	ldr	r0, [pc, #16]	; (8005158 <MX_TIM10_Init+0x34>)
  }

}
 8005146:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 800514a:	f7ff bf19 	b.w	8004f80 <_Error_Handler>
 800514e:	bd08      	pop	{r3, pc}
 8005150:	200003e4 	.word	0x200003e4
 8005154:	40014400 	.word	0x40014400
 8005158:	0800583e 	.word	0x0800583e

0800515c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800515c:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  if(tim_baseHandle->Instance==TIM1)
 800515e:	6803      	ldr	r3, [r0, #0]
 8005160:	4a24      	ldr	r2, [pc, #144]	; (80051f4 <HAL_TIM_Base_MspInit+0x98>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d113      	bne.n	800518e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005166:	4b24      	ldr	r3, [pc, #144]	; (80051f8 <HAL_TIM_Base_MspInit+0x9c>)
 8005168:	2200      	movs	r2, #0
 800516a:	9200      	str	r2, [sp, #0]
 800516c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800516e:	f041 0101 	orr.w	r1, r1, #1
 8005172:	6459      	str	r1, [r3, #68]	; 0x44
 8005174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005176:	f003 0301 	and.w	r3, r3, #1
 800517a:	9300      	str	r3, [sp, #0]
 800517c:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800517e:	4611      	mov	r1, r2
 8005180:	2019      	movs	r0, #25
 8005182:	f7fc f80d 	bl	80011a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8005186:	2019      	movs	r0, #25
 8005188:	f7fc f83e 	bl	8001208 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 800518c:	e00e      	b.n	80051ac <HAL_TIM_Base_MspInit+0x50>
  else if(tim_baseHandle->Instance==TIM3)
 800518e:	4a1b      	ldr	r2, [pc, #108]	; (80051fc <HAL_TIM_Base_MspInit+0xa0>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d10e      	bne.n	80051b2 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005194:	2300      	movs	r3, #0
 8005196:	9301      	str	r3, [sp, #4]
 8005198:	4b17      	ldr	r3, [pc, #92]	; (80051f8 <HAL_TIM_Base_MspInit+0x9c>)
 800519a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800519c:	f042 0202 	orr.w	r2, r2, #2
 80051a0:	641a      	str	r2, [r3, #64]	; 0x40
 80051a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a4:	f003 0302 	and.w	r3, r3, #2
 80051a8:	9301      	str	r3, [sp, #4]
 80051aa:	9b01      	ldr	r3, [sp, #4]
}
 80051ac:	b005      	add	sp, #20
 80051ae:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(tim_baseHandle->Instance==TIM4)
 80051b2:	4a13      	ldr	r2, [pc, #76]	; (8005200 <HAL_TIM_Base_MspInit+0xa4>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d10c      	bne.n	80051d2 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80051b8:	2300      	movs	r3, #0
 80051ba:	9302      	str	r3, [sp, #8]
 80051bc:	4b0e      	ldr	r3, [pc, #56]	; (80051f8 <HAL_TIM_Base_MspInit+0x9c>)
 80051be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051c0:	f042 0204 	orr.w	r2, r2, #4
 80051c4:	641a      	str	r2, [r3, #64]	; 0x40
 80051c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c8:	f003 0304 	and.w	r3, r3, #4
 80051cc:	9302      	str	r3, [sp, #8]
 80051ce:	9b02      	ldr	r3, [sp, #8]
 80051d0:	e7ec      	b.n	80051ac <HAL_TIM_Base_MspInit+0x50>
  else if(tim_baseHandle->Instance==TIM10)
 80051d2:	4a0c      	ldr	r2, [pc, #48]	; (8005204 <HAL_TIM_Base_MspInit+0xa8>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d1e9      	bne.n	80051ac <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80051d8:	4b07      	ldr	r3, [pc, #28]	; (80051f8 <HAL_TIM_Base_MspInit+0x9c>)
 80051da:	2200      	movs	r2, #0
 80051dc:	9203      	str	r2, [sp, #12]
 80051de:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80051e0:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80051e4:	6459      	str	r1, [r3, #68]	; 0x44
 80051e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051ec:	9303      	str	r3, [sp, #12]
 80051ee:	9b03      	ldr	r3, [sp, #12]
 80051f0:	e7c5      	b.n	800517e <HAL_TIM_Base_MspInit+0x22>
 80051f2:	bf00      	nop
 80051f4:	40010000 	.word	0x40010000
 80051f8:	40023800 	.word	0x40023800
 80051fc:	40000400 	.word	0x40000400
 8005200:	40000800 	.word	0x40000800
 8005204:	40014400 	.word	0x40014400

08005208 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005208:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(timHandle->Instance==TIM1)
 800520a:	6803      	ldr	r3, [r0, #0]
 800520c:	4a1e      	ldr	r2, [pc, #120]	; (8005288 <HAL_TIM_MspPostInit+0x80>)
 800520e:	4293      	cmp	r3, r2
{
 8005210:	b086      	sub	sp, #24
  if(timHandle->Instance==TIM1)
 8005212:	d110      	bne.n	8005236 <HAL_TIM_MspPostInit+0x2e>
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 8005214:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 8005218:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800521a:	2312      	movs	r3, #18
 800521c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800521e:	2300      	movs	r3, #0
 8005220:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005222:	2303      	movs	r3, #3
 8005224:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005226:	4819      	ldr	r0, [pc, #100]	; (800528c <HAL_TIM_MspPostInit+0x84>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005228:	2301      	movs	r3, #1
 800522a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800522c:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800522e:	f7fc f97f 	bl	8001530 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8005232:	b006      	add	sp, #24
 8005234:	bd70      	pop	{r4, r5, r6, pc}
  else if(timHandle->Instance==TIM3)
 8005236:	4a16      	ldr	r2, [pc, #88]	; (8005290 <HAL_TIM_MspPostInit+0x88>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d115      	bne.n	8005268 <HAL_TIM_MspPostInit+0x60>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800523c:	2402      	movs	r4, #2
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800523e:	23c0      	movs	r3, #192	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005240:	2600      	movs	r6, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005242:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005244:	a901      	add	r1, sp, #4
 8005246:	4813      	ldr	r0, [pc, #76]	; (8005294 <HAL_TIM_MspPostInit+0x8c>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005248:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800524a:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800524c:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800524e:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005250:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005252:	f7fc f96d 	bl	8001530 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005256:	2301      	movs	r3, #1
 8005258:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800525a:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800525c:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800525e:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005260:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005262:	a901      	add	r1, sp, #4
 8005264:	480c      	ldr	r0, [pc, #48]	; (8005298 <HAL_TIM_MspPostInit+0x90>)
 8005266:	e7e2      	b.n	800522e <HAL_TIM_MspPostInit+0x26>
  else if(timHandle->Instance==TIM4)
 8005268:	4a0c      	ldr	r2, [pc, #48]	; (800529c <HAL_TIM_MspPostInit+0x94>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d1e1      	bne.n	8005232 <HAL_TIM_MspPostInit+0x2a>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 800526e:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005272:	2200      	movs	r2, #0
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8005274:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005276:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005278:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800527a:	2203      	movs	r2, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800527c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800527e:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005280:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005282:	a901      	add	r1, sp, #4
 8005284:	4806      	ldr	r0, [pc, #24]	; (80052a0 <HAL_TIM_MspPostInit+0x98>)
 8005286:	e7d2      	b.n	800522e <HAL_TIM_MspPostInit+0x26>
 8005288:	40010000 	.word	0x40010000
 800528c:	40021000 	.word	0x40021000
 8005290:	40000400 	.word	0x40000400
 8005294:	40020000 	.word	0x40020000
 8005298:	40020400 	.word	0x40020400
 800529c:	40000800 	.word	0x40000800
 80052a0:	40020c00 	.word	0x40020c00

080052a4 <MX_TIM1_Init>:
{
 80052a4:	b500      	push	{lr}
  htim1.Instance = TIM1;
 80052a6:	483a      	ldr	r0, [pc, #232]	; (8005390 <MX_TIM1_Init+0xec>)
  htim1.Init.Prescaler = 6;
 80052a8:	493a      	ldr	r1, [pc, #232]	; (8005394 <MX_TIM1_Init+0xf0>)
 80052aa:	2306      	movs	r3, #6
{
 80052ac:	b095      	sub	sp, #84	; 0x54
  htim1.Init.Prescaler = 6;
 80052ae:	e880 000a 	stmia.w	r0, {r1, r3}
  htim1.Init.Period = 399;
 80052b2:	f240 128f 	movw	r2, #399	; 0x18f
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80052b6:	2300      	movs	r3, #0
 80052b8:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 399;
 80052ba:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80052bc:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 80052be:	6143      	str	r3, [r0, #20]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80052c0:	f7fe f832 	bl	8003328 <HAL_TIM_Base_Init>
 80052c4:	b118      	cbz	r0, 80052ce <MX_TIM1_Init+0x2a>
    _Error_Handler(__FILE__, __LINE__);
 80052c6:	2144      	movs	r1, #68	; 0x44
 80052c8:	4833      	ldr	r0, [pc, #204]	; (8005398 <MX_TIM1_Init+0xf4>)
 80052ca:	f7ff fe59 	bl	8004f80 <_Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80052ce:	a914      	add	r1, sp, #80	; 0x50
 80052d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80052d4:	f841 3d48 	str.w	r3, [r1, #-72]!
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80052d8:	482d      	ldr	r0, [pc, #180]	; (8005390 <MX_TIM1_Init+0xec>)
 80052da:	f7fd fe61 	bl	8002fa0 <HAL_TIM_ConfigClockSource>
 80052de:	b118      	cbz	r0, 80052e8 <MX_TIM1_Init+0x44>
    _Error_Handler(__FILE__, __LINE__);
 80052e0:	214a      	movs	r1, #74	; 0x4a
 80052e2:	482d      	ldr	r0, [pc, #180]	; (8005398 <MX_TIM1_Init+0xf4>)
 80052e4:	f7ff fe4c 	bl	8004f80 <_Error_Handler>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80052e8:	4829      	ldr	r0, [pc, #164]	; (8005390 <MX_TIM1_Init+0xec>)
 80052ea:	f7fe f837 	bl	800335c <HAL_TIM_PWM_Init>
 80052ee:	b118      	cbz	r0, 80052f8 <MX_TIM1_Init+0x54>
    _Error_Handler(__FILE__, __LINE__);
 80052f0:	214f      	movs	r1, #79	; 0x4f
 80052f2:	4829      	ldr	r0, [pc, #164]	; (8005398 <MX_TIM1_Init+0xf4>)
 80052f4:	f7ff fe44 	bl	8004f80 <_Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80052f8:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80052fa:	4669      	mov	r1, sp
 80052fc:	4824      	ldr	r0, [pc, #144]	; (8005390 <MX_TIM1_Init+0xec>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80052fe:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005300:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005302:	f7fe f8fd 	bl	8003500 <HAL_TIMEx_MasterConfigSynchronization>
 8005306:	b118      	cbz	r0, 8005310 <MX_TIM1_Init+0x6c>
    _Error_Handler(__FILE__, __LINE__);
 8005308:	2156      	movs	r1, #86	; 0x56
 800530a:	4823      	ldr	r0, [pc, #140]	; (8005398 <MX_TIM1_Init+0xf4>)
 800530c:	f7ff fe38 	bl	8004f80 <_Error_Handler>
  sConfigOC.Pulse = 0;
 8005310:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005312:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005314:	a906      	add	r1, sp, #24
 8005316:	481e      	ldr	r0, [pc, #120]	; (8005390 <MX_TIM1_Init+0xec>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005318:	9306      	str	r3, [sp, #24]
  sConfigOC.Pulse = 0;
 800531a:	9207      	str	r2, [sp, #28]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800531c:	9208      	str	r2, [sp, #32]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800531e:	9209      	str	r2, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005320:	920a      	str	r2, [sp, #40]	; 0x28
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005322:	920b      	str	r2, [sp, #44]	; 0x2c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005324:	920c      	str	r2, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005326:	f7fe f863 	bl	80033f0 <HAL_TIM_PWM_ConfigChannel>
 800532a:	b118      	cbz	r0, 8005334 <MX_TIM1_Init+0x90>
    _Error_Handler(__FILE__, __LINE__);
 800532c:	2162      	movs	r1, #98	; 0x62
 800532e:	481a      	ldr	r0, [pc, #104]	; (8005398 <MX_TIM1_Init+0xf4>)
 8005330:	f7ff fe26 	bl	8004f80 <_Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005334:	2204      	movs	r2, #4
 8005336:	a906      	add	r1, sp, #24
 8005338:	4815      	ldr	r0, [pc, #84]	; (8005390 <MX_TIM1_Init+0xec>)
 800533a:	f7fe f859 	bl	80033f0 <HAL_TIM_PWM_ConfigChannel>
 800533e:	b118      	cbz	r0, 8005348 <MX_TIM1_Init+0xa4>
    _Error_Handler(__FILE__, __LINE__);
 8005340:	2167      	movs	r1, #103	; 0x67
 8005342:	4815      	ldr	r0, [pc, #84]	; (8005398 <MX_TIM1_Init+0xf4>)
 8005344:	f7ff fe1c 	bl	8004f80 <_Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005348:	2208      	movs	r2, #8
 800534a:	a906      	add	r1, sp, #24
 800534c:	4810      	ldr	r0, [pc, #64]	; (8005390 <MX_TIM1_Init+0xec>)
 800534e:	f7fe f84f 	bl	80033f0 <HAL_TIM_PWM_ConfigChannel>
 8005352:	b118      	cbz	r0, 800535c <MX_TIM1_Init+0xb8>
    _Error_Handler(__FILE__, __LINE__);
 8005354:	216c      	movs	r1, #108	; 0x6c
 8005356:	4810      	ldr	r0, [pc, #64]	; (8005398 <MX_TIM1_Init+0xf4>)
 8005358:	f7ff fe12 	bl	8004f80 <_Error_Handler>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800535c:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800535e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005362:	a90d      	add	r1, sp, #52	; 0x34
 8005364:	480a      	ldr	r0, [pc, #40]	; (8005390 <MX_TIM1_Init+0xec>)
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005366:	930d      	str	r3, [sp, #52]	; 0x34
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005368:	930e      	str	r3, [sp, #56]	; 0x38
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800536a:	930f      	str	r3, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.DeadTime = 0;
 800536c:	9310      	str	r3, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800536e:	9311      	str	r3, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005370:	9212      	str	r2, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005372:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005374:	f7fe f8e6 	bl	8003544 <HAL_TIMEx_ConfigBreakDeadTime>
 8005378:	b118      	cbz	r0, 8005382 <MX_TIM1_Init+0xde>
    _Error_Handler(__FILE__, __LINE__);
 800537a:	2178      	movs	r1, #120	; 0x78
 800537c:	4806      	ldr	r0, [pc, #24]	; (8005398 <MX_TIM1_Init+0xf4>)
 800537e:	f7ff fdff 	bl	8004f80 <_Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 8005382:	4803      	ldr	r0, [pc, #12]	; (8005390 <MX_TIM1_Init+0xec>)
 8005384:	f7ff ff40 	bl	8005208 <HAL_TIM_MspPostInit>
}
 8005388:	b015      	add	sp, #84	; 0x54
 800538a:	f85d fb04 	ldr.w	pc, [sp], #4
 800538e:	bf00      	nop
 8005390:	2000045c 	.word	0x2000045c
 8005394:	40010000 	.word	0x40010000
 8005398:	0800583e 	.word	0x0800583e

0800539c <MX_TIM3_Init>:
{
 800539c:	b500      	push	{lr}
  htim3.Instance = TIM3;
 800539e:	482e      	ldr	r0, [pc, #184]	; (8005458 <MX_TIM3_Init+0xbc>)
  htim3.Init.Prescaler = 6;
 80053a0:	492e      	ldr	r1, [pc, #184]	; (800545c <MX_TIM3_Init+0xc0>)
 80053a2:	2306      	movs	r3, #6
{
 80053a4:	b08f      	sub	sp, #60	; 0x3c
  htim3.Init.Prescaler = 6;
 80053a6:	e880 000a 	stmia.w	r0, {r1, r3}
  htim3.Init.Period = 399;
 80053aa:	f240 128f 	movw	r2, #399	; 0x18f
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80053ae:	2300      	movs	r3, #0
 80053b0:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 399;
 80053b2:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80053b4:	6103      	str	r3, [r0, #16]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80053b6:	f7fd ffb7 	bl	8003328 <HAL_TIM_Base_Init>
 80053ba:	b118      	cbz	r0, 80053c4 <MX_TIM3_Init+0x28>
    _Error_Handler(__FILE__, __LINE__);
 80053bc:	218c      	movs	r1, #140	; 0x8c
 80053be:	4828      	ldr	r0, [pc, #160]	; (8005460 <MX_TIM3_Init+0xc4>)
 80053c0:	f7ff fdde 	bl	8004f80 <_Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80053c4:	a90e      	add	r1, sp, #56	; 0x38
 80053c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80053ca:	f841 3d2c 	str.w	r3, [r1, #-44]!
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80053ce:	4822      	ldr	r0, [pc, #136]	; (8005458 <MX_TIM3_Init+0xbc>)
 80053d0:	f7fd fde6 	bl	8002fa0 <HAL_TIM_ConfigClockSource>
 80053d4:	b118      	cbz	r0, 80053de <MX_TIM3_Init+0x42>
    _Error_Handler(__FILE__, __LINE__);
 80053d6:	2192      	movs	r1, #146	; 0x92
 80053d8:	4821      	ldr	r0, [pc, #132]	; (8005460 <MX_TIM3_Init+0xc4>)
 80053da:	f7ff fdd1 	bl	8004f80 <_Error_Handler>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80053de:	481e      	ldr	r0, [pc, #120]	; (8005458 <MX_TIM3_Init+0xbc>)
 80053e0:	f7fd ffbc 	bl	800335c <HAL_TIM_PWM_Init>
 80053e4:	b118      	cbz	r0, 80053ee <MX_TIM3_Init+0x52>
    _Error_Handler(__FILE__, __LINE__);
 80053e6:	2197      	movs	r1, #151	; 0x97
 80053e8:	481d      	ldr	r0, [pc, #116]	; (8005460 <MX_TIM3_Init+0xc4>)
 80053ea:	f7ff fdc9 	bl	8004f80 <_Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80053ee:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80053f0:	a901      	add	r1, sp, #4
 80053f2:	4819      	ldr	r0, [pc, #100]	; (8005458 <MX_TIM3_Init+0xbc>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80053f4:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80053f6:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80053f8:	f7fe f882 	bl	8003500 <HAL_TIMEx_MasterConfigSynchronization>
 80053fc:	b118      	cbz	r0, 8005406 <MX_TIM3_Init+0x6a>
    _Error_Handler(__FILE__, __LINE__);
 80053fe:	219e      	movs	r1, #158	; 0x9e
 8005400:	4817      	ldr	r0, [pc, #92]	; (8005460 <MX_TIM3_Init+0xc4>)
 8005402:	f7ff fdbd 	bl	8004f80 <_Error_Handler>
  sConfigOC.Pulse = 0;
 8005406:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005408:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800540a:	a907      	add	r1, sp, #28
 800540c:	4812      	ldr	r0, [pc, #72]	; (8005458 <MX_TIM3_Init+0xbc>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800540e:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 0;
 8005410:	9208      	str	r2, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005412:	9209      	str	r2, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005414:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005416:	f7fd ffeb 	bl	80033f0 <HAL_TIM_PWM_ConfigChannel>
 800541a:	b118      	cbz	r0, 8005424 <MX_TIM3_Init+0x88>
    _Error_Handler(__FILE__, __LINE__);
 800541c:	21a7      	movs	r1, #167	; 0xa7
 800541e:	4810      	ldr	r0, [pc, #64]	; (8005460 <MX_TIM3_Init+0xc4>)
 8005420:	f7ff fdae 	bl	8004f80 <_Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005424:	2204      	movs	r2, #4
 8005426:	a907      	add	r1, sp, #28
 8005428:	480b      	ldr	r0, [pc, #44]	; (8005458 <MX_TIM3_Init+0xbc>)
 800542a:	f7fd ffe1 	bl	80033f0 <HAL_TIM_PWM_ConfigChannel>
 800542e:	b118      	cbz	r0, 8005438 <MX_TIM3_Init+0x9c>
    _Error_Handler(__FILE__, __LINE__);
 8005430:	21ac      	movs	r1, #172	; 0xac
 8005432:	480b      	ldr	r0, [pc, #44]	; (8005460 <MX_TIM3_Init+0xc4>)
 8005434:	f7ff fda4 	bl	8004f80 <_Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005438:	2208      	movs	r2, #8
 800543a:	a907      	add	r1, sp, #28
 800543c:	4806      	ldr	r0, [pc, #24]	; (8005458 <MX_TIM3_Init+0xbc>)
 800543e:	f7fd ffd7 	bl	80033f0 <HAL_TIM_PWM_ConfigChannel>
 8005442:	b118      	cbz	r0, 800544c <MX_TIM3_Init+0xb0>
    _Error_Handler(__FILE__, __LINE__);
 8005444:	21b1      	movs	r1, #177	; 0xb1
 8005446:	4806      	ldr	r0, [pc, #24]	; (8005460 <MX_TIM3_Init+0xc4>)
 8005448:	f7ff fd9a 	bl	8004f80 <_Error_Handler>
  HAL_TIM_MspPostInit(&htim3);
 800544c:	4802      	ldr	r0, [pc, #8]	; (8005458 <MX_TIM3_Init+0xbc>)
 800544e:	f7ff fedb 	bl	8005208 <HAL_TIM_MspPostInit>
}
 8005452:	b00f      	add	sp, #60	; 0x3c
 8005454:	f85d fb04 	ldr.w	pc, [sp], #4
 8005458:	20000420 	.word	0x20000420
 800545c:	40000400 	.word	0x40000400
 8005460:	0800583e 	.word	0x0800583e

08005464 <MX_TIM4_Init>:
{
 8005464:	b500      	push	{lr}
  htim4.Instance = TIM4;
 8005466:	482e      	ldr	r0, [pc, #184]	; (8005520 <MX_TIM4_Init+0xbc>)
  htim4.Init.Prescaler = 6;
 8005468:	492e      	ldr	r1, [pc, #184]	; (8005524 <MX_TIM4_Init+0xc0>)
 800546a:	2306      	movs	r3, #6
{
 800546c:	b08f      	sub	sp, #60	; 0x3c
  htim4.Init.Prescaler = 6;
 800546e:	e880 000a 	stmia.w	r0, {r1, r3}
  htim4.Init.Period = 399;
 8005472:	f240 128f 	movw	r2, #399	; 0x18f
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005476:	2300      	movs	r3, #0
 8005478:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 399;
 800547a:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800547c:	6103      	str	r3, [r0, #16]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800547e:	f7fd ff53 	bl	8003328 <HAL_TIM_Base_Init>
 8005482:	b118      	cbz	r0, 800548c <MX_TIM4_Init+0x28>
    _Error_Handler(__FILE__, __LINE__);
 8005484:	21c5      	movs	r1, #197	; 0xc5
 8005486:	4828      	ldr	r0, [pc, #160]	; (8005528 <MX_TIM4_Init+0xc4>)
 8005488:	f7ff fd7a 	bl	8004f80 <_Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800548c:	a90e      	add	r1, sp, #56	; 0x38
 800548e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005492:	f841 3d2c 	str.w	r3, [r1, #-44]!
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8005496:	4822      	ldr	r0, [pc, #136]	; (8005520 <MX_TIM4_Init+0xbc>)
 8005498:	f7fd fd82 	bl	8002fa0 <HAL_TIM_ConfigClockSource>
 800549c:	b118      	cbz	r0, 80054a6 <MX_TIM4_Init+0x42>
    _Error_Handler(__FILE__, __LINE__);
 800549e:	21cb      	movs	r1, #203	; 0xcb
 80054a0:	4821      	ldr	r0, [pc, #132]	; (8005528 <MX_TIM4_Init+0xc4>)
 80054a2:	f7ff fd6d 	bl	8004f80 <_Error_Handler>
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80054a6:	481e      	ldr	r0, [pc, #120]	; (8005520 <MX_TIM4_Init+0xbc>)
 80054a8:	f7fd ff58 	bl	800335c <HAL_TIM_PWM_Init>
 80054ac:	b118      	cbz	r0, 80054b6 <MX_TIM4_Init+0x52>
    _Error_Handler(__FILE__, __LINE__);
 80054ae:	21d0      	movs	r1, #208	; 0xd0
 80054b0:	481d      	ldr	r0, [pc, #116]	; (8005528 <MX_TIM4_Init+0xc4>)
 80054b2:	f7ff fd65 	bl	8004f80 <_Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80054b6:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80054b8:	a901      	add	r1, sp, #4
 80054ba:	4819      	ldr	r0, [pc, #100]	; (8005520 <MX_TIM4_Init+0xbc>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80054bc:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80054be:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80054c0:	f7fe f81e 	bl	8003500 <HAL_TIMEx_MasterConfigSynchronization>
 80054c4:	b118      	cbz	r0, 80054ce <MX_TIM4_Init+0x6a>
    _Error_Handler(__FILE__, __LINE__);
 80054c6:	21d7      	movs	r1, #215	; 0xd7
 80054c8:	4817      	ldr	r0, [pc, #92]	; (8005528 <MX_TIM4_Init+0xc4>)
 80054ca:	f7ff fd59 	bl	8004f80 <_Error_Handler>
  sConfigOC.Pulse = 0;
 80054ce:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80054d0:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80054d2:	a907      	add	r1, sp, #28
 80054d4:	4812      	ldr	r0, [pc, #72]	; (8005520 <MX_TIM4_Init+0xbc>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80054d6:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 0;
 80054d8:	9208      	str	r2, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80054da:	9209      	str	r2, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80054dc:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80054de:	f7fd ff87 	bl	80033f0 <HAL_TIM_PWM_ConfigChannel>
 80054e2:	b118      	cbz	r0, 80054ec <MX_TIM4_Init+0x88>
    _Error_Handler(__FILE__, __LINE__);
 80054e4:	21e0      	movs	r1, #224	; 0xe0
 80054e6:	4810      	ldr	r0, [pc, #64]	; (8005528 <MX_TIM4_Init+0xc4>)
 80054e8:	f7ff fd4a 	bl	8004f80 <_Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80054ec:	2204      	movs	r2, #4
 80054ee:	a907      	add	r1, sp, #28
 80054f0:	480b      	ldr	r0, [pc, #44]	; (8005520 <MX_TIM4_Init+0xbc>)
 80054f2:	f7fd ff7d 	bl	80033f0 <HAL_TIM_PWM_ConfigChannel>
 80054f6:	b118      	cbz	r0, 8005500 <MX_TIM4_Init+0x9c>
    _Error_Handler(__FILE__, __LINE__);
 80054f8:	21e5      	movs	r1, #229	; 0xe5
 80054fa:	480b      	ldr	r0, [pc, #44]	; (8005528 <MX_TIM4_Init+0xc4>)
 80054fc:	f7ff fd40 	bl	8004f80 <_Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005500:	2208      	movs	r2, #8
 8005502:	a907      	add	r1, sp, #28
 8005504:	4806      	ldr	r0, [pc, #24]	; (8005520 <MX_TIM4_Init+0xbc>)
 8005506:	f7fd ff73 	bl	80033f0 <HAL_TIM_PWM_ConfigChannel>
 800550a:	b118      	cbz	r0, 8005514 <MX_TIM4_Init+0xb0>
    _Error_Handler(__FILE__, __LINE__);
 800550c:	21ea      	movs	r1, #234	; 0xea
 800550e:	4806      	ldr	r0, [pc, #24]	; (8005528 <MX_TIM4_Init+0xc4>)
 8005510:	f7ff fd36 	bl	8004f80 <_Error_Handler>
  HAL_TIM_MspPostInit(&htim4);
 8005514:	4802      	ldr	r0, [pc, #8]	; (8005520 <MX_TIM4_Init+0xbc>)
 8005516:	f7ff fe77 	bl	8005208 <HAL_TIM_MspPostInit>
}
 800551a:	b00f      	add	sp, #60	; 0x3c
 800551c:	f85d fb04 	ldr.w	pc, [sp], #4
 8005520:	200003a8 	.word	0x200003a8
 8005524:	40000800 	.word	0x40000800
 8005528:	0800583e 	.word	0x0800583e

0800552c <MX_USART3_Init>:

USART_HandleTypeDef husart3;

/* USART3 init function */
void MX_USART3_Init(void)
{
 800552c:	b508      	push	{r3, lr}

  husart3.Instance = USART3;
 800552e:	480c      	ldr	r0, [pc, #48]	; (8005560 <MX_USART3_Init+0x34>)
  husart3.Init.BaudRate = 115200;
 8005530:	4b0c      	ldr	r3, [pc, #48]	; (8005564 <MX_USART3_Init+0x38>)
 8005532:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8005536:	e880 4008 	stmia.w	r0, {r3, lr}
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
  husart3.Init.StopBits = USART_STOPBITS_1;
  husart3.Init.Parity = USART_PARITY_NONE;
  husart3.Init.Mode = USART_MODE_TX_RX;
 800553a:	220c      	movs	r2, #12
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 800553c:	2300      	movs	r3, #0
 800553e:	6083      	str	r3, [r0, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 8005540:	60c3      	str	r3, [r0, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 8005542:	6103      	str	r3, [r0, #16]
  husart3.Init.Mode = USART_MODE_TX_RX;
 8005544:	6142      	str	r2, [r0, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_LOW;
 8005546:	6183      	str	r3, [r0, #24]
  husart3.Init.CLKPhase = USART_PHASE_1EDGE;
 8005548:	61c3      	str	r3, [r0, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 800554a:	6203      	str	r3, [r0, #32]
  if (HAL_USART_Init(&husart3) != HAL_OK)
 800554c:	f7fe f830 	bl	80035b0 <HAL_USART_Init>
 8005550:	b128      	cbz	r0, 800555e <MX_USART3_Init+0x32>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005552:	2142      	movs	r1, #66	; 0x42
 8005554:	4804      	ldr	r0, [pc, #16]	; (8005568 <MX_USART3_Init+0x3c>)
  }

}
 8005556:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 800555a:	f7ff bd11 	b.w	8004f80 <_Error_Handler>
 800555e:	bd08      	pop	{r3, pc}
 8005560:	20000498 	.word	0x20000498
 8005564:	40004800 	.word	0x40004800
 8005568:	0800584b 	.word	0x0800584b

0800556c <HAL_USART_MspInit>:

void HAL_USART_MspInit(USART_HandleTypeDef* usartHandle)
{
 800556c:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(usartHandle->Instance==USART3)
 800556e:	6802      	ldr	r2, [r0, #0]
 8005570:	4b19      	ldr	r3, [pc, #100]	; (80055d8 <HAL_USART_MspInit+0x6c>)
 8005572:	429a      	cmp	r2, r3
{
 8005574:	b087      	sub	sp, #28
  if(usartHandle->Instance==USART3)
 8005576:	d12d      	bne.n	80055d4 <HAL_USART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8005578:	2400      	movs	r4, #0
 800557a:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 800557e:	9400      	str	r4, [sp, #0]
 8005580:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005582:	4816      	ldr	r0, [pc, #88]	; (80055dc <HAL_USART_MspInit+0x70>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8005584:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005588:	641a      	str	r2, [r3, #64]	; 0x40
 800558a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800558c:	9403      	str	r4, [sp, #12]
    __HAL_RCC_USART3_CLK_ENABLE();
 800558e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005592:	9300      	str	r3, [sp, #0]
 8005594:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005596:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8005598:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800559c:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800559e:	2507      	movs	r5, #7
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055a0:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80055a2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055a4:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055a6:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80055a8:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055aa:	f7fb ffc1 	bl	8001530 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80055ae:	f44f 7340 	mov.w	r3, #768	; 0x300
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80055b2:	a901      	add	r1, sp, #4
 80055b4:	480a      	ldr	r0, [pc, #40]	; (80055e0 <HAL_USART_MspInit+0x74>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80055b6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055b8:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055ba:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055bc:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80055be:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80055c0:	f7fb ffb6 	bl	8001530 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80055c4:	2027      	movs	r0, #39	; 0x27
 80055c6:	4622      	mov	r2, r4
 80055c8:	4621      	mov	r1, r4
 80055ca:	f7fb fde9 	bl	80011a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80055ce:	2027      	movs	r0, #39	; 0x27
 80055d0:	f7fb fe1a 	bl	8001208 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80055d4:	b007      	add	sp, #28
 80055d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055d8:	40004800 	.word	0x40004800
 80055dc:	40020400 	.word	0x40020400
 80055e0:	40020c00 	.word	0x40020c00

080055e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80055e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800561c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80055e8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80055ea:	e003      	b.n	80055f4 <LoopCopyDataInit>

080055ec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80055ec:	4b0c      	ldr	r3, [pc, #48]	; (8005620 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80055ee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80055f0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80055f2:	3104      	adds	r1, #4

080055f4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80055f4:	480b      	ldr	r0, [pc, #44]	; (8005624 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80055f6:	4b0c      	ldr	r3, [pc, #48]	; (8005628 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80055f8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80055fa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80055fc:	d3f6      	bcc.n	80055ec <CopyDataInit>
  ldr  r2, =_sbss
 80055fe:	4a0b      	ldr	r2, [pc, #44]	; (800562c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005600:	e002      	b.n	8005608 <LoopFillZerobss>

08005602 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005602:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005604:	f842 3b04 	str.w	r3, [r2], #4

08005608 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005608:	4b09      	ldr	r3, [pc, #36]	; (8005630 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800560a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800560c:	d3f9      	bcc.n	8005602 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800560e:	f7ff fd63 	bl	80050d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005612:	f000 f811 	bl	8005638 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005616:	f7ff fc57 	bl	8004ec8 <main>
  bx  lr    
 800561a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800561c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8005620:	0800586c 	.word	0x0800586c
  ldr  r0, =_sdata
 8005624:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005628:	20000020 	.word	0x20000020
  ldr  r2, =_sbss
 800562c:	20000020 	.word	0x20000020
  ldr  r3, = _ebss
 8005630:	200004dc 	.word	0x200004dc

08005634 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005634:	e7fe      	b.n	8005634 <CAN1_RX0_IRQHandler>
	...

08005638 <__libc_init_array>:
 8005638:	b570      	push	{r4, r5, r6, lr}
 800563a:	4e0d      	ldr	r6, [pc, #52]	; (8005670 <__libc_init_array+0x38>)
 800563c:	4c0d      	ldr	r4, [pc, #52]	; (8005674 <__libc_init_array+0x3c>)
 800563e:	1ba4      	subs	r4, r4, r6
 8005640:	10a4      	asrs	r4, r4, #2
 8005642:	2500      	movs	r5, #0
 8005644:	42a5      	cmp	r5, r4
 8005646:	d109      	bne.n	800565c <__libc_init_array+0x24>
 8005648:	4e0b      	ldr	r6, [pc, #44]	; (8005678 <__libc_init_array+0x40>)
 800564a:	4c0c      	ldr	r4, [pc, #48]	; (800567c <__libc_init_array+0x44>)
 800564c:	f000 f818 	bl	8005680 <_init>
 8005650:	1ba4      	subs	r4, r4, r6
 8005652:	10a4      	asrs	r4, r4, #2
 8005654:	2500      	movs	r5, #0
 8005656:	42a5      	cmp	r5, r4
 8005658:	d105      	bne.n	8005666 <__libc_init_array+0x2e>
 800565a:	bd70      	pop	{r4, r5, r6, pc}
 800565c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005660:	4798      	blx	r3
 8005662:	3501      	adds	r5, #1
 8005664:	e7ee      	b.n	8005644 <__libc_init_array+0xc>
 8005666:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800566a:	4798      	blx	r3
 800566c:	3501      	adds	r5, #1
 800566e:	e7f2      	b.n	8005656 <__libc_init_array+0x1e>
 8005670:	08005864 	.word	0x08005864
 8005674:	08005864 	.word	0x08005864
 8005678:	08005864 	.word	0x08005864
 800567c:	08005868 	.word	0x08005868

08005680 <_init>:
 8005680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005682:	bf00      	nop
 8005684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005686:	bc08      	pop	{r3}
 8005688:	469e      	mov	lr, r3
 800568a:	4770      	bx	lr

0800568c <_fini>:
 800568c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800568e:	bf00      	nop
 8005690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005692:	bc08      	pop	{r3}
 8005694:	469e      	mov	lr, r3
 8005696:	4770      	bx	lr
