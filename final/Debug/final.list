
final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003604  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800378c  0800378c  0001378c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080037e4  080037e4  000137e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080037ec  080037ec  000137ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080037f0  080037f0  000137f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  080037f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  8 .bss          00000514  2000000c  2000000c  0002000c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000520  20000520  0002000c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00021481  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00003ce0  00000000  00000000  000414bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00009ec0  00000000  00000000  0004519d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ce0  00000000  00000000  0004f060  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010c8  00000000  00000000  0004fd40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000088ee  00000000  00000000  00050e08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00004cff  00000000  00000000  000596f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0005e3f5  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002628  00000000  00000000  0005e474  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003774 	.word	0x08003774

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003774 	.word	0x08003774

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004d8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004da:	4a0e      	ldr	r2, [pc, #56]	; (8000514 <HAL_InitTick+0x3c>)
 80004dc:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <HAL_InitTick+0x40>)
{
 80004de:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004e0:	7818      	ldrb	r0, [r3, #0]
 80004e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004e6:	fbb3 f3f0 	udiv	r3, r3, r0
 80004ea:	6810      	ldr	r0, [r2, #0]
 80004ec:	fbb0 f0f3 	udiv	r0, r0, r3
 80004f0:	f000 fa7c 	bl	80009ec <HAL_SYSTICK_Config>
 80004f4:	4604      	mov	r4, r0
 80004f6:	b958      	cbnz	r0, 8000510 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004f8:	2d0f      	cmp	r5, #15
 80004fa:	d809      	bhi.n	8000510 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004fc:	4602      	mov	r2, r0
 80004fe:	4629      	mov	r1, r5
 8000500:	f04f 30ff 	mov.w	r0, #4294967295
 8000504:	f000 fa32 	bl	800096c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000508:	4b04      	ldr	r3, [pc, #16]	; (800051c <HAL_InitTick+0x44>)
 800050a:	4620      	mov	r0, r4
 800050c:	601d      	str	r5, [r3, #0]
 800050e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000510:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000512:	bd38      	pop	{r3, r4, r5, pc}
 8000514:	20000008 	.word	0x20000008
 8000518:	20000000 	.word	0x20000000
 800051c:	20000004 	.word	0x20000004

08000520 <HAL_Init>:
{
 8000520:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000522:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <HAL_Init+0x30>)
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800052a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800052c:	681a      	ldr	r2, [r3, #0]
 800052e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000532:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800053a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800053c:	2003      	movs	r0, #3
 800053e:	f000 fa03 	bl	8000948 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000542:	2000      	movs	r0, #0
 8000544:	f7ff ffc8 	bl	80004d8 <HAL_InitTick>
  HAL_MspInit();
 8000548:	f002 fd96 	bl	8003078 <HAL_MspInit>
}
 800054c:	2000      	movs	r0, #0
 800054e:	bd08      	pop	{r3, pc}
 8000550:	40023c00 	.word	0x40023c00

08000554 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000554:	4a03      	ldr	r2, [pc, #12]	; (8000564 <HAL_IncTick+0x10>)
 8000556:	4b04      	ldr	r3, [pc, #16]	; (8000568 <HAL_IncTick+0x14>)
 8000558:	6811      	ldr	r1, [r2, #0]
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	440b      	add	r3, r1
 800055e:	6013      	str	r3, [r2, #0]
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	2000002c 	.word	0x2000002c
 8000568:	20000000 	.word	0x20000000

0800056c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800056c:	4b01      	ldr	r3, [pc, #4]	; (8000574 <HAL_GetTick+0x8>)
 800056e:	6818      	ldr	r0, [r3, #0]
}
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	2000002c 	.word	0x2000002c

08000578 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000578:	b538      	push	{r3, r4, r5, lr}
 800057a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800057c:	f7ff fff6 	bl	800056c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000580:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000582:	bf1c      	itt	ne
 8000584:	4b05      	ldrne	r3, [pc, #20]	; (800059c <HAL_Delay+0x24>)
 8000586:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000588:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800058a:	bf18      	it	ne
 800058c:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800058e:	f7ff ffed 	bl	800056c <HAL_GetTick>
 8000592:	1b40      	subs	r0, r0, r5
 8000594:	4284      	cmp	r4, r0
 8000596:	d8fa      	bhi.n	800058e <HAL_Delay+0x16>
  {
  }
}
 8000598:	bd38      	pop	{r3, r4, r5, pc}
 800059a:	bf00      	nop
 800059c:	20000000 	.word	0x20000000

080005a0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80005a0:	b510      	push	{r4, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 80005a2:	4604      	mov	r4, r0
 80005a4:	2800      	cmp	r0, #0
 80005a6:	f000 8099 	beq.w	80006dc <HAL_ADC_Init+0x13c>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80005aa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80005ac:	b923      	cbnz	r3, 80005b8 <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80005ae:	6443      	str	r3, [r0, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80005b0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80005b4:	f002 fa40 	bl	8002a38 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80005b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80005ba:	06db      	lsls	r3, r3, #27
 80005bc:	f100 808c 	bmi.w	80006d8 <HAL_ADC_Init+0x138>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80005c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80005c2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80005c6:	f023 0302 	bic.w	r3, r3, #2
 80005ca:	f043 0302 	orr.w	r3, r3, #2
 80005ce:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80005d0:	4b43      	ldr	r3, [pc, #268]	; (80006e0 <HAL_ADC_Init+0x140>)
 80005d2:	685a      	ldr	r2, [r3, #4]
 80005d4:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80005d8:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80005da:	685a      	ldr	r2, [r3, #4]
 80005dc:	6861      	ldr	r1, [r4, #4]
 80005de:	430a      	orrs	r2, r1
 80005e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80005e2:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80005e4:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80005e6:	685a      	ldr	r2, [r3, #4]
 80005e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80005ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80005ee:	685a      	ldr	r2, [r3, #4]
 80005f0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80005f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80005f6:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80005f8:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80005fa:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80005fe:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000600:	685a      	ldr	r2, [r3, #4]
 8000602:	430a      	orrs	r2, r1
 8000604:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000606:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000608:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800060a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800060e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000610:	689a      	ldr	r2, [r3, #8]
 8000612:	430a      	orrs	r2, r1
 8000614:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000616:	4933      	ldr	r1, [pc, #204]	; (80006e4 <HAL_ADC_Init+0x144>)
 8000618:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800061a:	428a      	cmp	r2, r1
 800061c:	d050      	beq.n	80006c0 <HAL_ADC_Init+0x120>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800061e:	6899      	ldr	r1, [r3, #8]
 8000620:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8000624:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000626:	6899      	ldr	r1, [r3, #8]
 8000628:	430a      	orrs	r2, r1
 800062a:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800062c:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800062e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000630:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000634:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000636:	689a      	ldr	r2, [r3, #8]
 8000638:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800063a:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800063c:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 800063e:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000640:	f022 0202 	bic.w	r2, r2, #2
 8000644:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000646:	689a      	ldr	r2, [r3, #8]
 8000648:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800064c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800064e:	6a22      	ldr	r2, [r4, #32]
 8000650:	2a00      	cmp	r2, #0
 8000652:	d03d      	beq.n	80006d0 <HAL_ADC_Init+0x130>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000654:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000656:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000658:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800065c:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800065e:	685a      	ldr	r2, [r3, #4]
 8000660:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000664:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000666:	685a      	ldr	r2, [r3, #4]
 8000668:	3901      	subs	r1, #1
 800066a:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800066e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000672:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000674:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000678:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800067a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800067c:	3901      	subs	r1, #1
 800067e:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8000682:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000684:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000686:	6b21      	ldr	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000688:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800068c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 800068e:	689a      	ldr	r2, [r3, #8]
 8000690:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8000694:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000696:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000698:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800069a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800069e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80006a0:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80006a2:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80006a4:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 80006a8:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80006aa:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80006ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80006ae:	f023 0303 	bic.w	r3, r3, #3
 80006b2:	f043 0301 	orr.w	r3, r3, #1
 80006b6:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 80006b8:	2300      	movs	r3, #0
 80006ba:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 80006be:	bd10      	pop	{r4, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80006c0:	689a      	ldr	r2, [r3, #8]
 80006c2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80006c6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80006c8:	689a      	ldr	r2, [r3, #8]
 80006ca:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80006ce:	e7b4      	b.n	800063a <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80006d0:	685a      	ldr	r2, [r3, #4]
 80006d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80006d6:	e7ca      	b.n	800066e <HAL_ADC_Init+0xce>
    tmp_hal_status = HAL_ERROR;
 80006d8:	2001      	movs	r0, #1
 80006da:	e7ed      	b.n	80006b8 <HAL_ADC_Init+0x118>
    return HAL_ERROR;
 80006dc:	2001      	movs	r0, #1
}
 80006de:	bd10      	pop	{r4, pc}
 80006e0:	40012300 	.word	0x40012300
 80006e4:	0f000001 	.word	0x0f000001

080006e8 <HAL_ADC_ConvCpltCallback>:
 80006e8:	4770      	bx	lr

080006ea <HAL_ADC_LevelOutOfWindowCallback>:
 80006ea:	4770      	bx	lr

080006ec <HAL_ADC_ErrorCallback>:
{
 80006ec:	4770      	bx	lr

080006ee <HAL_ADC_IRQHandler>:
{
 80006ee:	b538      	push	{r3, r4, r5, lr}
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80006f0:	6803      	ldr	r3, [r0, #0]
 80006f2:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80006f4:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 80006f6:	078d      	lsls	r5, r1, #30
{
 80006f8:	4604      	mov	r4, r0
  if(tmp1 && tmp2)
 80006fa:	d52b      	bpl.n	8000754 <HAL_ADC_IRQHandler+0x66>
 80006fc:	0690      	lsls	r0, r2, #26
 80006fe:	d529      	bpl.n	8000754 <HAL_ADC_IRQHandler+0x66>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000700:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000702:	06d1      	lsls	r1, r2, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000704:	bf5e      	ittt	pl
 8000706:	6c22      	ldrpl	r2, [r4, #64]	; 0x40
 8000708:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 800070c:	6422      	strpl	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800070e:	689a      	ldr	r2, [r3, #8]
 8000710:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8000714:	d117      	bne.n	8000746 <HAL_ADC_IRQHandler+0x58>
 8000716:	69a2      	ldr	r2, [r4, #24]
 8000718:	b9aa      	cbnz	r2, 8000746 <HAL_ADC_IRQHandler+0x58>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800071a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800071c:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8000720:	d002      	beq.n	8000728 <HAL_ADC_IRQHandler+0x3a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000722:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000724:	0552      	lsls	r2, r2, #21
 8000726:	d40e      	bmi.n	8000746 <HAL_ADC_IRQHandler+0x58>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000728:	685a      	ldr	r2, [r3, #4]
 800072a:	f022 0220 	bic.w	r2, r2, #32
 800072e:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000730:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000732:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000736:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000738:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800073a:	04db      	lsls	r3, r3, #19
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800073c:	bf5e      	ittt	pl
 800073e:	6c23      	ldrpl	r3, [r4, #64]	; 0x40
 8000740:	f043 0301 	orrpl.w	r3, r3, #1
 8000744:	6423      	strpl	r3, [r4, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8000746:	4620      	mov	r0, r4
 8000748:	f7ff ffce 	bl	80006e8 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800074c:	6823      	ldr	r3, [r4, #0]
 800074e:	f06f 0212 	mvn.w	r2, #18
 8000752:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8000754:	6823      	ldr	r3, [r4, #0]
 8000756:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8000758:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 800075a:	074d      	lsls	r5, r1, #29
 800075c:	d532      	bpl.n	80007c4 <HAL_ADC_IRQHandler+0xd6>
 800075e:	0610      	lsls	r0, r2, #24
 8000760:	d530      	bpl.n	80007c4 <HAL_ADC_IRQHandler+0xd6>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000762:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000764:	06d1      	lsls	r1, r2, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000766:	bf5e      	ittt	pl
 8000768:	6c22      	ldrpl	r2, [r4, #64]	; 0x40
 800076a:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 800076e:	6422      	strpl	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000770:	689a      	ldr	r2, [r3, #8]
 8000772:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8000776:	d11e      	bne.n	80007b6 <HAL_ADC_IRQHandler+0xc8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000778:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800077a:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 800077e:	d002      	beq.n	8000786 <HAL_ADC_IRQHandler+0x98>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8000780:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000782:	0552      	lsls	r2, r2, #21
 8000784:	d417      	bmi.n	80007b6 <HAL_ADC_IRQHandler+0xc8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000786:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8000788:	0555      	lsls	r5, r2, #21
 800078a:	d414      	bmi.n	80007b6 <HAL_ADC_IRQHandler+0xc8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800078c:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800078e:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8000792:	d110      	bne.n	80007b6 <HAL_ADC_IRQHandler+0xc8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000794:	69a2      	ldr	r2, [r4, #24]
 8000796:	b972      	cbnz	r2, 80007b6 <HAL_ADC_IRQHandler+0xc8>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000798:	685a      	ldr	r2, [r3, #4]
 800079a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800079e:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80007a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80007a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80007a6:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80007a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80007aa:	05d8      	lsls	r0, r3, #23
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80007ac:	bf5e      	ittt	pl
 80007ae:	6c23      	ldrpl	r3, [r4, #64]	; 0x40
 80007b0:	f043 0301 	orrpl.w	r3, r3, #1
 80007b4:	6423      	strpl	r3, [r4, #64]	; 0x40
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80007b6:	4620      	mov	r0, r4
 80007b8:	f000 f8c4 	bl	8000944 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80007bc:	6823      	ldr	r3, [r4, #0]
 80007be:	f06f 020c 	mvn.w	r2, #12
 80007c2:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80007c4:	6823      	ldr	r3, [r4, #0]
 80007c6:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80007c8:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 80007ca:	07c9      	lsls	r1, r1, #31
 80007cc:	d50f      	bpl.n	80007ee <HAL_ADC_IRQHandler+0x100>
 80007ce:	0655      	lsls	r5, r2, #25
 80007d0:	d50d      	bpl.n	80007ee <HAL_ADC_IRQHandler+0x100>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	07d8      	lsls	r0, r3, #31
 80007d6:	d50a      	bpl.n	80007ee <HAL_ADC_IRQHandler+0x100>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80007d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80007da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007de:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80007e0:	4620      	mov	r0, r4
 80007e2:	f7ff ff82 	bl	80006ea <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80007e6:	6823      	ldr	r3, [r4, #0]
 80007e8:	f06f 0201 	mvn.w	r2, #1
 80007ec:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80007ee:	6823      	ldr	r3, [r4, #0]
 80007f0:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80007f2:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 80007f4:	0689      	lsls	r1, r1, #26
 80007f6:	d50d      	bpl.n	8000814 <HAL_ADC_IRQHandler+0x126>
 80007f8:	0152      	lsls	r2, r2, #5
 80007fa:	d50b      	bpl.n	8000814 <HAL_ADC_IRQHandler+0x126>
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80007fc:	6c62      	ldr	r2, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80007fe:	f06f 0520 	mvn.w	r5, #32
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000802:	f042 0202 	orr.w	r2, r2, #2
 8000806:	6462      	str	r2, [r4, #68]	; 0x44
    HAL_ADC_ErrorCallback(hadc);
 8000808:	4620      	mov	r0, r4
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800080a:	601d      	str	r5, [r3, #0]
    HAL_ADC_ErrorCallback(hadc);
 800080c:	f7ff ff6e 	bl	80006ec <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000810:	6823      	ldr	r3, [r4, #0]
 8000812:	601d      	str	r5, [r3, #0]
 8000814:	bd38      	pop	{r3, r4, r5, pc}
	...

08000818 <HAL_ADC_ConfigChannel>:
{
 8000818:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 800081a:	2300      	movs	r3, #0
 800081c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800081e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000822:	2b01      	cmp	r3, #1
 8000824:	f000 8083 	beq.w	800092e <HAL_ADC_ConfigChannel+0x116>
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000828:	680d      	ldr	r5, [r1, #0]
 800082a:	6804      	ldr	r4, [r0, #0]
 800082c:	688a      	ldr	r2, [r1, #8]
  __HAL_LOCK(hadc);
 800082e:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000830:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 8000832:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8000836:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000838:	d92a      	bls.n	8000890 <HAL_ADC_ConfigChannel+0x78>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800083a:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 800083e:	68e7      	ldr	r7, [r4, #12]
 8000840:	3b1e      	subs	r3, #30
 8000842:	f04f 0e07 	mov.w	lr, #7
 8000846:	fa0e fe03 	lsl.w	lr, lr, r3
 800084a:	ea27 070e 	bic.w	r7, r7, lr
 800084e:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000850:	68e7      	ldr	r7, [r4, #12]
 8000852:	fa02 f303 	lsl.w	r3, r2, r3
 8000856:	433b      	orrs	r3, r7
 8000858:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 800085a:	684a      	ldr	r2, [r1, #4]
 800085c:	2a06      	cmp	r2, #6
 800085e:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8000862:	d825      	bhi.n	80008b0 <HAL_ADC_ConfigChannel+0x98>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000864:	4413      	add	r3, r2
 8000866:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8000868:	1f59      	subs	r1, r3, #5
 800086a:	231f      	movs	r3, #31
 800086c:	408b      	lsls	r3, r1
 800086e:	ea27 0303 	bic.w	r3, r7, r3
 8000872:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000874:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000876:	fa06 f101 	lsl.w	r1, r6, r1
 800087a:	4311      	orrs	r1, r2
 800087c:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800087e:	4b2d      	ldr	r3, [pc, #180]	; (8000934 <HAL_ADC_ConfigChannel+0x11c>)
 8000880:	429c      	cmp	r4, r3
 8000882:	d034      	beq.n	80008ee <HAL_ADC_ConfigChannel+0xd6>
  __HAL_UNLOCK(hadc);
 8000884:	2300      	movs	r3, #0
 8000886:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800088a:	4618      	mov	r0, r3
}
 800088c:	b003      	add	sp, #12
 800088e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000890:	6927      	ldr	r7, [r4, #16]
 8000892:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8000896:	f04f 0e07 	mov.w	lr, #7
 800089a:	fa0e fe03 	lsl.w	lr, lr, r3
 800089e:	ea27 070e 	bic.w	r7, r7, lr
 80008a2:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80008a4:	6927      	ldr	r7, [r4, #16]
 80008a6:	fa02 f303 	lsl.w	r3, r2, r3
 80008aa:	433b      	orrs	r3, r7
 80008ac:	6123      	str	r3, [r4, #16]
 80008ae:	e7d4      	b.n	800085a <HAL_ADC_ConfigChannel+0x42>
  else if (sConfig->Rank < 13U)
 80008b0:	2a0c      	cmp	r2, #12
 80008b2:	d80e      	bhi.n	80008d2 <HAL_ADC_ConfigChannel+0xba>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80008b4:	4413      	add	r3, r2
 80008b6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80008b8:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 80008bc:	231f      	movs	r3, #31
 80008be:	4093      	lsls	r3, r2
 80008c0:	ea21 0303 	bic.w	r3, r1, r3
 80008c4:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80008c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80008c8:	fa06 f202 	lsl.w	r2, r6, r2
 80008cc:	431a      	orrs	r2, r3
 80008ce:	6322      	str	r2, [r4, #48]	; 0x30
 80008d0:	e7d5      	b.n	800087e <HAL_ADC_ConfigChannel+0x66>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80008d2:	4413      	add	r3, r2
 80008d4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80008d6:	3b41      	subs	r3, #65	; 0x41
 80008d8:	221f      	movs	r2, #31
 80008da:	409a      	lsls	r2, r3
 80008dc:	ea21 0202 	bic.w	r2, r1, r2
 80008e0:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80008e2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80008e4:	fa06 f103 	lsl.w	r1, r6, r3
 80008e8:	4311      	orrs	r1, r2
 80008ea:	62e1      	str	r1, [r4, #44]	; 0x2c
 80008ec:	e7c7      	b.n	800087e <HAL_ADC_ConfigChannel+0x66>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80008ee:	2d12      	cmp	r5, #18
 80008f0:	d104      	bne.n	80008fc <HAL_ADC_ConfigChannel+0xe4>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80008f2:	4a11      	ldr	r2, [pc, #68]	; (8000938 <HAL_ADC_ConfigChannel+0x120>)
 80008f4:	6853      	ldr	r3, [r2, #4]
 80008f6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008fa:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80008fc:	f1a5 0310 	sub.w	r3, r5, #16
 8000900:	2b01      	cmp	r3, #1
 8000902:	d8bf      	bhi.n	8000884 <HAL_ADC_ConfigChannel+0x6c>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000904:	4a0c      	ldr	r2, [pc, #48]	; (8000938 <HAL_ADC_ConfigChannel+0x120>)
 8000906:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000908:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800090a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800090e:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000910:	d1b8      	bne.n	8000884 <HAL_ADC_ConfigChannel+0x6c>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000912:	4b0a      	ldr	r3, [pc, #40]	; (800093c <HAL_ADC_ConfigChannel+0x124>)
 8000914:	4a0a      	ldr	r2, [pc, #40]	; (8000940 <HAL_ADC_ConfigChannel+0x128>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	fbb3 f2f2 	udiv	r2, r3, r2
 800091c:	230a      	movs	r3, #10
 800091e:	4353      	muls	r3, r2
        counter--;
 8000920:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8000922:	9b01      	ldr	r3, [sp, #4]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d0ad      	beq.n	8000884 <HAL_ADC_ConfigChannel+0x6c>
        counter--;
 8000928:	9b01      	ldr	r3, [sp, #4]
 800092a:	3b01      	subs	r3, #1
 800092c:	e7f8      	b.n	8000920 <HAL_ADC_ConfigChannel+0x108>
  __HAL_LOCK(hadc);
 800092e:	2002      	movs	r0, #2
 8000930:	e7ac      	b.n	800088c <HAL_ADC_ConfigChannel+0x74>
 8000932:	bf00      	nop
 8000934:	40012000 	.word	0x40012000
 8000938:	40012300 	.word	0x40012300
 800093c:	20000008 	.word	0x20000008
 8000940:	000f4240 	.word	0x000f4240

08000944 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000944:	4770      	bx	lr
	...

08000948 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000948:	4a07      	ldr	r2, [pc, #28]	; (8000968 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800094a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800094c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000950:	041b      	lsls	r3, r3, #16
 8000952:	0c1b      	lsrs	r3, r3, #16
 8000954:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000958:	0200      	lsls	r0, r0, #8
 800095a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800095e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000962:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000964:	60d3      	str	r3, [r2, #12]
 8000966:	4770      	bx	lr
 8000968:	e000ed00 	.word	0xe000ed00

0800096c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800096c:	4b17      	ldr	r3, [pc, #92]	; (80009cc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800096e:	b530      	push	{r4, r5, lr}
 8000970:	68dc      	ldr	r4, [r3, #12]
 8000972:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000976:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800097a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800097c:	2b04      	cmp	r3, #4
 800097e:	bf28      	it	cs
 8000980:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000982:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000984:	f04f 0501 	mov.w	r5, #1
 8000988:	fa05 f303 	lsl.w	r3, r5, r3
 800098c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000990:	bf8c      	ite	hi
 8000992:	3c03      	subhi	r4, #3
 8000994:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000996:	4019      	ands	r1, r3
 8000998:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800099a:	fa05 f404 	lsl.w	r4, r5, r4
 800099e:	3c01      	subs	r4, #1
 80009a0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80009a2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009a4:	ea42 0201 	orr.w	r2, r2, r1
 80009a8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ac:	bfaf      	iteee	ge
 80009ae:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009b2:	f000 000f 	andlt.w	r0, r0, #15
 80009b6:	4b06      	ldrlt	r3, [pc, #24]	; (80009d0 <HAL_NVIC_SetPriority+0x64>)
 80009b8:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ba:	bfa5      	ittet	ge
 80009bc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80009c0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009c2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009c4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80009c8:	bd30      	pop	{r4, r5, pc}
 80009ca:	bf00      	nop
 80009cc:	e000ed00 	.word	0xe000ed00
 80009d0:	e000ed14 	.word	0xe000ed14

080009d4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80009d4:	0942      	lsrs	r2, r0, #5
 80009d6:	2301      	movs	r3, #1
 80009d8:	f000 001f 	and.w	r0, r0, #31
 80009dc:	fa03 f000 	lsl.w	r0, r3, r0
 80009e0:	4b01      	ldr	r3, [pc, #4]	; (80009e8 <HAL_NVIC_EnableIRQ+0x14>)
 80009e2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80009e6:	4770      	bx	lr
 80009e8:	e000e100 	.word	0xe000e100

080009ec <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009ec:	3801      	subs	r0, #1
 80009ee:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009f2:	d20a      	bcs.n	8000a0a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009f4:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f6:	4a07      	ldr	r2, [pc, #28]	; (8000a14 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009f8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009fa:	21f0      	movs	r1, #240	; 0xf0
 80009fc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a00:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a02:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a04:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000a0a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	e000e010 	.word	0xe000e010
 8000a14:	e000ed00 	.word	0xe000ed00

08000a18 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000a18:	4b04      	ldr	r3, [pc, #16]	; (8000a2c <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000a1a:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000a1c:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000a1e:	bf0c      	ite	eq
 8000a20:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000a24:	f022 0204 	bicne.w	r2, r2, #4
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	4770      	bx	lr
 8000a2c:	e000e010 	.word	0xe000e010

08000a30 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000a30:	4770      	bx	lr

08000a32 <HAL_SYSTICK_IRQHandler>:
{
 8000a32:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000a34:	f7ff fffc 	bl	8000a30 <HAL_SYSTICK_Callback>
 8000a38:	bd08      	pop	{r3, pc}
	...

08000a3c <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000a3c:	6803      	ldr	r3, [r0, #0]
 8000a3e:	b2da      	uxtb	r2, r3
 8000a40:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000a44:	f023 0303 	bic.w	r3, r3, #3
 8000a48:	2118      	movs	r1, #24
 8000a4a:	3a10      	subs	r2, #16
 8000a4c:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000a50:	4904      	ldr	r1, [pc, #16]	; (8000a64 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8000a52:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000a54:	bf88      	it	hi
 8000a56:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000a58:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000a5a:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000a5c:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 8000a5e:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	0800378c 	.word	0x0800378c

08000a68 <HAL_DMA_Init>:
{
 8000a68:	b570      	push	{r4, r5, r6, lr}
 8000a6a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000a6c:	f7ff fd7e 	bl	800056c <HAL_GetTick>
 8000a70:	4605      	mov	r5, r0
  if(hdma == NULL)
 8000a72:	2c00      	cmp	r4, #0
 8000a74:	d071      	beq.n	8000b5a <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 8000a76:	2300      	movs	r3, #0
 8000a78:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8000a7c:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8000a84:	6813      	ldr	r3, [r2, #0]
 8000a86:	f023 0301 	bic.w	r3, r3, #1
 8000a8a:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000a8c:	6821      	ldr	r1, [r4, #0]
 8000a8e:	680b      	ldr	r3, [r1, #0]
 8000a90:	07d8      	lsls	r0, r3, #31
 8000a92:	d43c      	bmi.n	8000b0e <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 8000a94:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000a96:	4d32      	ldr	r5, [pc, #200]	; (8000b60 <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000a98:	6862      	ldr	r2, [r4, #4]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a9a:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000a9c:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000a9e:	68a3      	ldr	r3, [r4, #8]
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	68e2      	ldr	r2, [r4, #12]
 8000aa4:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000aa6:	6922      	ldr	r2, [r4, #16]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	6962      	ldr	r2, [r4, #20]
 8000aac:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000aae:	69e2      	ldr	r2, [r4, #28]
 8000ab0:	4303      	orrs	r3, r0
 8000ab2:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ab4:	6a22      	ldr	r2, [r4, #32]
 8000ab6:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000ab8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000aba:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000abc:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000ac0:	bf01      	itttt	eq
 8000ac2:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 8000ac4:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 8000ac6:	4335      	orreq	r5, r6
 8000ac8:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 8000aca:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8000acc:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000ace:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000ad0:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8000ad4:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000ad8:	d10b      	bne.n	8000af2 <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 8000ada:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000adc:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8000ade:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000ae0:	b13d      	cbz	r5, 8000af2 <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000ae2:	b9f8      	cbnz	r0, 8000b24 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 8000ae4:	2a01      	cmp	r2, #1
 8000ae6:	d02d      	beq.n	8000b44 <HAL_DMA_Init+0xdc>
 8000ae8:	d301      	bcc.n	8000aee <HAL_DMA_Init+0x86>
 8000aea:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000aec:	d101      	bne.n	8000af2 <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000aee:	01ea      	lsls	r2, r5, #7
 8000af0:	d42b      	bmi.n	8000b4a <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 8000af2:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000af4:	4620      	mov	r0, r4
 8000af6:	f7ff ffa1 	bl	8000a3c <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000afa:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000afc:	233f      	movs	r3, #63	; 0x3f
 8000afe:	4093      	lsls	r3, r2
 8000b00:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b02:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000b04:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b06:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8000b08:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8000b0c:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000b0e:	f7ff fd2d 	bl	800056c <HAL_GetTick>
 8000b12:	1b40      	subs	r0, r0, r5
 8000b14:	2805      	cmp	r0, #5
 8000b16:	d9b9      	bls.n	8000a8c <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000b18:	2320      	movs	r3, #32
 8000b1a:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000b1c:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 8000b1e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8000b22:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000b24:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8000b28:	d113      	bne.n	8000b52 <HAL_DMA_Init+0xea>
    switch (tmp)
 8000b2a:	2a03      	cmp	r2, #3
 8000b2c:	d8e1      	bhi.n	8000af2 <HAL_DMA_Init+0x8a>
 8000b2e:	a001      	add	r0, pc, #4	; (adr r0, 8000b34 <HAL_DMA_Init+0xcc>)
 8000b30:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8000b34:	08000b4b 	.word	0x08000b4b
 8000b38:	08000aef 	.word	0x08000aef
 8000b3c:	08000b4b 	.word	0x08000b4b
 8000b40:	08000b45 	.word	0x08000b45
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000b44:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8000b48:	d1d3      	bne.n	8000af2 <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000b4a:	2340      	movs	r3, #64	; 0x40
 8000b4c:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8000b4e:	2001      	movs	r0, #1
 8000b50:	e7e5      	b.n	8000b1e <HAL_DMA_Init+0xb6>
    switch (tmp)
 8000b52:	2a02      	cmp	r2, #2
 8000b54:	d9f9      	bls.n	8000b4a <HAL_DMA_Init+0xe2>
 8000b56:	2a03      	cmp	r2, #3
 8000b58:	e7c8      	b.n	8000aec <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 8000b5a:	2001      	movs	r0, #1
 8000b5c:	bd70      	pop	{r4, r5, r6, pc}
 8000b5e:	bf00      	nop
 8000b60:	f010803f 	.word	0xf010803f

08000b64 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b64:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000b68:	2b02      	cmp	r3, #2
 8000b6a:	d003      	beq.n	8000b74 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b6c:	2380      	movs	r3, #128	; 0x80
 8000b6e:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000b70:	2001      	movs	r0, #1
 8000b72:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8000b74:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8000b76:	2305      	movs	r3, #5
 8000b78:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8000b7c:	6813      	ldr	r3, [r2, #0]
 8000b7e:	f023 0301 	bic.w	r3, r3, #1
 8000b82:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8000b84:	2000      	movs	r0, #0
}
 8000b86:	4770      	bx	lr

08000b88 <HAL_DMA_IRQHandler>:
{
 8000b88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000b8e:	4b5a      	ldr	r3, [pc, #360]	; (8000cf8 <HAL_DMA_IRQHandler+0x170>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000b90:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8000b92:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b94:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8000b96:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b98:	2208      	movs	r2, #8
 8000b9a:	409a      	lsls	r2, r3
 8000b9c:	4216      	tst	r6, r2
{
 8000b9e:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000ba0:	d00c      	beq.n	8000bbc <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000ba2:	6801      	ldr	r1, [r0, #0]
 8000ba4:	6808      	ldr	r0, [r1, #0]
 8000ba6:	0740      	lsls	r0, r0, #29
 8000ba8:	d508      	bpl.n	8000bbc <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000baa:	6808      	ldr	r0, [r1, #0]
 8000bac:	f020 0004 	bic.w	r0, r0, #4
 8000bb0:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000bb2:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000bb4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000bb6:	f042 0201 	orr.w	r2, r2, #1
 8000bba:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	409a      	lsls	r2, r3
 8000bc0:	4216      	tst	r6, r2
 8000bc2:	d008      	beq.n	8000bd6 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000bc4:	6821      	ldr	r1, [r4, #0]
 8000bc6:	6949      	ldr	r1, [r1, #20]
 8000bc8:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000bca:	bf41      	itttt	mi
 8000bcc:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000bce:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8000bd0:	f042 0202 	orrmi.w	r2, r2, #2
 8000bd4:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000bd6:	2204      	movs	r2, #4
 8000bd8:	409a      	lsls	r2, r3
 8000bda:	4216      	tst	r6, r2
 8000bdc:	d008      	beq.n	8000bf0 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000bde:	6821      	ldr	r1, [r4, #0]
 8000be0:	6809      	ldr	r1, [r1, #0]
 8000be2:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000be4:	bf41      	itttt	mi
 8000be6:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000be8:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8000bea:	f042 0204 	orrmi.w	r2, r2, #4
 8000bee:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000bf0:	2210      	movs	r2, #16
 8000bf2:	409a      	lsls	r2, r3
 8000bf4:	4216      	tst	r6, r2
 8000bf6:	d010      	beq.n	8000c1a <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000bf8:	6823      	ldr	r3, [r4, #0]
 8000bfa:	6819      	ldr	r1, [r3, #0]
 8000bfc:	0709      	lsls	r1, r1, #28
 8000bfe:	d50c      	bpl.n	8000c1a <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000c00:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	0350      	lsls	r0, r2, #13
 8000c06:	d535      	bpl.n	8000c74 <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	0319      	lsls	r1, r3, #12
 8000c0c:	d401      	bmi.n	8000c12 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8000c0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000c10:	e000      	b.n	8000c14 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000c12:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8000c14:	b10b      	cbz	r3, 8000c1a <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8000c16:	4620      	mov	r0, r4
 8000c18:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000c1a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8000c1c:	2220      	movs	r2, #32
 8000c1e:	408a      	lsls	r2, r1
 8000c20:	4216      	tst	r6, r2
 8000c22:	d038      	beq.n	8000c96 <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000c24:	6823      	ldr	r3, [r4, #0]
 8000c26:	6818      	ldr	r0, [r3, #0]
 8000c28:	06c6      	lsls	r6, r0, #27
 8000c2a:	d534      	bpl.n	8000c96 <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000c2c:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000c2e:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8000c32:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000c34:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000c36:	d125      	bne.n	8000c84 <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000c38:	f022 0216 	bic.w	r2, r2, #22
 8000c3c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000c3e:	695a      	ldr	r2, [r3, #20]
 8000c40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c44:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000c46:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000c48:	b90a      	cbnz	r2, 8000c4e <HAL_DMA_IRQHandler+0xc6>
 8000c4a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000c4c:	b11a      	cbz	r2, 8000c56 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	f022 0208 	bic.w	r2, r2, #8
 8000c54:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000c56:	233f      	movs	r3, #63	; 0x3f
 8000c58:	408b      	lsls	r3, r1
 8000c5a:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8000c62:	2301      	movs	r3, #1
 8000c64:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8000c68:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8000c6a:	b10b      	cbz	r3, 8000c70 <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 8000c6c:	4620      	mov	r0, r4
 8000c6e:	4798      	blx	r3
}
 8000c70:	b003      	add	sp, #12
 8000c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000c78:	bf5e      	ittt	pl
 8000c7a:	681a      	ldrpl	r2, [r3, #0]
 8000c7c:	f022 0208 	bicpl.w	r2, r2, #8
 8000c80:	601a      	strpl	r2, [r3, #0]
 8000c82:	e7c4      	b.n	8000c0e <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000c84:	0350      	lsls	r0, r2, #13
 8000c86:	d528      	bpl.n	8000cda <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	0319      	lsls	r1, r3, #12
 8000c8c:	d432      	bmi.n	8000cf4 <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 8000c8e:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8000c90:	b10b      	cbz	r3, 8000c96 <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 8000c92:	4620      	mov	r0, r4
 8000c94:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000c96:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d0e9      	beq.n	8000c70 <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000c9c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000c9e:	07da      	lsls	r2, r3, #31
 8000ca0:	d519      	bpl.n	8000cd6 <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 8000ca2:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8000ca4:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8000ca6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8000caa:	6813      	ldr	r3, [r2, #0]
 8000cac:	f023 0301 	bic.w	r3, r3, #1
 8000cb0:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000cb2:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000cb6:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 8000cba:	9b01      	ldr	r3, [sp, #4]
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	429f      	cmp	r7, r3
 8000cc0:	9301      	str	r3, [sp, #4]
 8000cc2:	d302      	bcc.n	8000cca <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000cc4:	6813      	ldr	r3, [r2, #0]
 8000cc6:	07db      	lsls	r3, r3, #31
 8000cc8:	d4f7      	bmi.n	8000cba <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 8000cca:	2300      	movs	r3, #0
 8000ccc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8000cd6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000cd8:	e7c7      	b.n	8000c6a <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8000ce0:	d108      	bne.n	8000cf4 <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000ce2:	6819      	ldr	r1, [r3, #0]
 8000ce4:	f021 0110 	bic.w	r1, r1, #16
 8000ce8:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8000cea:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8000cec:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8000cf0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8000cf4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000cf6:	e7cb      	b.n	8000c90 <HAL_DMA_IRQHandler+0x108>
 8000cf8:	20000008 	.word	0x20000008

08000cfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d00:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d02:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d04:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8000eb4 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d08:	4a68      	ldr	r2, [pc, #416]	; (8000eac <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d0a:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8000eb8 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d0e:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d10:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000d12:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d16:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000d18:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d1c:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000d20:	45b6      	cmp	lr, r6
 8000d22:	f040 80ae 	bne.w	8000e82 <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d26:	684c      	ldr	r4, [r1, #4]
 8000d28:	f024 0710 	bic.w	r7, r4, #16
 8000d2c:	2f02      	cmp	r7, #2
 8000d2e:	d116      	bne.n	8000d5e <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000d30:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000d34:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d38:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000d3c:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d40:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000d44:	f04f 0c0f 	mov.w	ip, #15
 8000d48:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000d4c:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d50:	690d      	ldr	r5, [r1, #16]
 8000d52:	fa05 f50b 	lsl.w	r5, r5, fp
 8000d56:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000d5a:	f8ca 5020 	str.w	r5, [sl, #32]
 8000d5e:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d62:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000d64:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d68:	fa05 f50a 	lsl.w	r5, r5, sl
 8000d6c:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d6e:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d72:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d76:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d7a:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d7c:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d80:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000d82:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d86:	d811      	bhi.n	8000dac <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000d88:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d8a:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d8e:	68cf      	ldr	r7, [r1, #12]
 8000d90:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000d94:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000d98:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000d9a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d9c:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000da0:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000da4:	409f      	lsls	r7, r3
 8000da6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000daa:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000dac:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dae:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000db0:	688f      	ldr	r7, [r1, #8]
 8000db2:	fa07 f70a 	lsl.w	r7, r7, sl
 8000db6:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000db8:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dba:	00e5      	lsls	r5, r4, #3
 8000dbc:	d561      	bpl.n	8000e82 <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dbe:	f04f 0b00 	mov.w	fp, #0
 8000dc2:	f8cd b00c 	str.w	fp, [sp, #12]
 8000dc6:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dca:	4d39      	ldr	r5, [pc, #228]	; (8000eb0 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dcc:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000dd0:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000dd4:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000dd8:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000ddc:	9703      	str	r7, [sp, #12]
 8000dde:	9f03      	ldr	r7, [sp, #12]
 8000de0:	f023 0703 	bic.w	r7, r3, #3
 8000de4:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000de8:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000dec:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000df0:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000df4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000df8:	f04f 0e0f 	mov.w	lr, #15
 8000dfc:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e00:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e02:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e06:	d043      	beq.n	8000e90 <HAL_GPIO_Init+0x194>
 8000e08:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000e0c:	42a8      	cmp	r0, r5
 8000e0e:	d041      	beq.n	8000e94 <HAL_GPIO_Init+0x198>
 8000e10:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000e14:	42a8      	cmp	r0, r5
 8000e16:	d03f      	beq.n	8000e98 <HAL_GPIO_Init+0x19c>
 8000e18:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000e1c:	42a8      	cmp	r0, r5
 8000e1e:	d03d      	beq.n	8000e9c <HAL_GPIO_Init+0x1a0>
 8000e20:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000e24:	42a8      	cmp	r0, r5
 8000e26:	d03b      	beq.n	8000ea0 <HAL_GPIO_Init+0x1a4>
 8000e28:	4548      	cmp	r0, r9
 8000e2a:	d03b      	beq.n	8000ea4 <HAL_GPIO_Init+0x1a8>
 8000e2c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000e30:	42a8      	cmp	r0, r5
 8000e32:	d039      	beq.n	8000ea8 <HAL_GPIO_Init+0x1ac>
 8000e34:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000e38:	42a8      	cmp	r0, r5
 8000e3a:	bf14      	ite	ne
 8000e3c:	2508      	movne	r5, #8
 8000e3e:	2507      	moveq	r5, #7
 8000e40:	fa05 f50c 	lsl.w	r5, r5, ip
 8000e44:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e48:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000e4a:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000e4c:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e4e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000e52:	bf0c      	ite	eq
 8000e54:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000e56:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000e58:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000e5a:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e5c:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000e60:	bf0c      	ite	eq
 8000e62:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000e64:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000e66:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e68:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e6a:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000e6e:	bf0c      	ite	eq
 8000e70:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000e72:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000e74:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000e76:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e78:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000e7a:	bf54      	ite	pl
 8000e7c:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000e7e:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000e80:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e82:	3301      	adds	r3, #1
 8000e84:	2b10      	cmp	r3, #16
 8000e86:	f47f af44 	bne.w	8000d12 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000e8a:	b005      	add	sp, #20
 8000e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e90:	465d      	mov	r5, fp
 8000e92:	e7d5      	b.n	8000e40 <HAL_GPIO_Init+0x144>
 8000e94:	2501      	movs	r5, #1
 8000e96:	e7d3      	b.n	8000e40 <HAL_GPIO_Init+0x144>
 8000e98:	2502      	movs	r5, #2
 8000e9a:	e7d1      	b.n	8000e40 <HAL_GPIO_Init+0x144>
 8000e9c:	2503      	movs	r5, #3
 8000e9e:	e7cf      	b.n	8000e40 <HAL_GPIO_Init+0x144>
 8000ea0:	2504      	movs	r5, #4
 8000ea2:	e7cd      	b.n	8000e40 <HAL_GPIO_Init+0x144>
 8000ea4:	2505      	movs	r5, #5
 8000ea6:	e7cb      	b.n	8000e40 <HAL_GPIO_Init+0x144>
 8000ea8:	2506      	movs	r5, #6
 8000eaa:	e7c9      	b.n	8000e40 <HAL_GPIO_Init+0x144>
 8000eac:	40013c00 	.word	0x40013c00
 8000eb0:	40020000 	.word	0x40020000
 8000eb4:	40023800 	.word	0x40023800
 8000eb8:	40021400 	.word	0x40021400

08000ebc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ebc:	b10a      	cbz	r2, 8000ec2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ebe:	6181      	str	r1, [r0, #24]
 8000ec0:	4770      	bx	lr
 8000ec2:	0409      	lsls	r1, r1, #16
 8000ec4:	e7fb      	b.n	8000ebe <HAL_GPIO_WritePin+0x2>
	...

08000ec8 <HAL_I2C_Init>:
  * @param  hi2c pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000ec8:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange = 0U;
  uint32_t pclk1 = 0U;

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8000eca:	4604      	mov	r4, r0
 8000ecc:	2800      	cmp	r0, #0
 8000ece:	d062      	beq.n	8000f96 <HAL_I2C_Init+0xce>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8000ed0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000ed4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000ed8:	b91b      	cbnz	r3, 8000ee2 <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000eda:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000ede:	f001 fefd 	bl	8002cdc <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000ee2:	6822      	ldr	r2, [r4, #0]
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000ee4:	4e2d      	ldr	r6, [pc, #180]	; (8000f9c <HAL_I2C_Init+0xd4>)
  freqrange = I2C_FREQRANGE(pclk1);
 8000ee6:	4d2e      	ldr	r5, [pc, #184]	; (8000fa0 <HAL_I2C_Init+0xd8>)
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ee8:	2324      	movs	r3, #36	; 0x24
 8000eea:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8000eee:	6813      	ldr	r3, [r2, #0]
 8000ef0:	f023 0301 	bic.w	r3, r3, #1
 8000ef4:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000ef6:	f000 ff6d 	bl	8001dd4 <HAL_RCC_GetPCLK1Freq>
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000efa:	6863      	ldr	r3, [r4, #4]
  hi2c->Instance->CR2 = freqrange;
 8000efc:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8000efe:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000f02:	42b3      	cmp	r3, r6
 8000f04:	bf84      	itt	hi
 8000f06:	f44f 7196 	movhi.w	r1, #300	; 0x12c
 8000f0a:	4369      	mulhi	r1, r5
  hi2c->Instance->CR2 = freqrange;
 8000f0c:	6055      	str	r5, [r2, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000f0e:	bf91      	iteee	ls
 8000f10:	1c69      	addls	r1, r5, #1
 8000f12:	f44f 757a 	movhi.w	r5, #1000	; 0x3e8
 8000f16:	fbb1 f1f5 	udivhi	r1, r1, r5
 8000f1a:	3101      	addhi	r1, #1

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000f1c:	42b3      	cmp	r3, r6
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000f1e:	6211      	str	r1, [r2, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000f20:	d821      	bhi.n	8000f66 <HAL_I2C_Init+0x9e>
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f28:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8000f2c:	2b03      	cmp	r3, #3
 8000f2e:	bf98      	it	ls
 8000f30:	2004      	movls	r0, #4

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000f32:	6a21      	ldr	r1, [r4, #32]
 8000f34:	69e3      	ldr	r3, [r4, #28]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000f36:	61d0      	str	r0, [r2, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000f38:	430b      	orrs	r3, r1
 8000f3a:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8000f3c:	68e1      	ldr	r1, [r4, #12]
 8000f3e:	6923      	ldr	r3, [r4, #16]
 8000f40:	430b      	orrs	r3, r1
 8000f42:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8000f44:	69a1      	ldr	r1, [r4, #24]
 8000f46:	6963      	ldr	r3, [r4, #20]
 8000f48:	430b      	orrs	r3, r1
 8000f4a:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000f4c:	6813      	ldr	r3, [r2, #0]
 8000f4e:	f043 0301 	orr.w	r3, r3, #1
 8000f52:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f54:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8000f56:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f58:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000f5a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f5e:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f60:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
 8000f64:	bd70      	pop	{r4, r5, r6, pc}
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000f66:	68a1      	ldr	r1, [r4, #8]
 8000f68:	b949      	cbnz	r1, 8000f7e <HAL_I2C_Init+0xb6>
 8000f6a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000f6e:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f72:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8000f76:	b163      	cbz	r3, 8000f92 <HAL_I2C_Init+0xca>
 8000f78:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8000f7c:	e7d9      	b.n	8000f32 <HAL_I2C_Init+0x6a>
 8000f7e:	2119      	movs	r1, #25
 8000f80:	434b      	muls	r3, r1
 8000f82:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f86:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8000f8a:	b113      	cbz	r3, 8000f92 <HAL_I2C_Init+0xca>
 8000f8c:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8000f90:	e7cf      	b.n	8000f32 <HAL_I2C_Init+0x6a>
 8000f92:	2001      	movs	r0, #1
 8000f94:	e7cd      	b.n	8000f32 <HAL_I2C_Init+0x6a>
    return HAL_ERROR;
 8000f96:	2001      	movs	r0, #1
}
 8000f98:	bd70      	pop	{r4, r5, r6, pc}
 8000f9a:	bf00      	nop
 8000f9c:	000186a0 	.word	0x000186a0
 8000fa0:	000f4240 	.word	0x000f4240

08000fa4 <HAL_I2C_MasterTxCpltCallback>:
 8000fa4:	4770      	bx	lr

08000fa6 <HAL_I2C_MasterRxCpltCallback>:
 8000fa6:	4770      	bx	lr

08000fa8 <HAL_I2C_SlaveTxCpltCallback>:
 8000fa8:	4770      	bx	lr

08000faa <HAL_I2C_SlaveRxCpltCallback>:
 8000faa:	4770      	bx	lr

08000fac <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferOptions_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8000fac:	4770      	bx	lr

08000fae <HAL_I2C_ListenCpltCallback>:
 8000fae:	4770      	bx	lr

08000fb0 <HAL_I2C_MemTxCpltCallback>:
 8000fb0:	4770      	bx	lr

08000fb2 <HAL_I2C_MemRxCpltCallback>:
 8000fb2:	4770      	bx	lr

08000fb4 <HAL_I2C_ErrorCallback>:
 8000fb4:	4770      	bx	lr

08000fb6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000fb6:	4770      	bx	lr

08000fb8 <I2C_ITError>:
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentState = hi2c->State;
 8000fb8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d

  if((CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8000fbc:	3b29      	subs	r3, #41	; 0x29
 8000fbe:	2b01      	cmp	r3, #1
{
 8000fc0:	b510      	push	{r4, lr}
 8000fc2:	6803      	ldr	r3, [r0, #0]
 8000fc4:	4604      	mov	r4, r0
  if((CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8000fc6:	d839      	bhi.n	800103c <I2C_ITError+0x84>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8000fc8:	2200      	movs	r2, #0
 8000fca:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8000fcc:	2228      	movs	r2, #40	; 0x28
 8000fce:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->Mode = HAL_I2C_MODE_NONE;
  }

  /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
  hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000fd8:	601a      	str	r2, [r3, #0]

  /* Abort DMA transfer */
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8000fda:	685a      	ldr	r2, [r3, #4]
 8000fdc:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8000fe0:	d054      	beq.n	800108c <I2C_ITError+0xd4>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8000fe2:	685a      	ldr	r2, [r3, #4]

    if(hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8000fe4:	6b60      	ldr	r0, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8000fe6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000fea:	605a      	str	r2, [r3, #4]
    if(hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8000fec:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	4b39      	ldr	r3, [pc, #228]	; (80010d8 <I2C_ITError+0x120>)
 8000ff4:	d031      	beq.n	800105a <I2C_ITError+0xa2>
    {
      /* Set the DMA Abort callback : 
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8000ff6:	6503      	str	r3, [r0, #80]	; 0x50

      if(HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8000ff8:	f7ff fdb4 	bl	8000b64 <HAL_DMA_Abort_IT>
 8000ffc:	b150      	cbz	r0, 8001014 <I2C_ITError+0x5c>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8000ffe:	6822      	ldr	r2, [r4, #0]

        hi2c->State = HAL_I2C_STATE_READY;

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001000:	6b60      	ldr	r0, [r4, #52]	; 0x34
        __HAL_I2C_DISABLE(hi2c);
 8001002:	6813      	ldr	r3, [r2, #0]
 8001004:	f023 0301 	bic.w	r3, r3, #1
 8001008:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 800100a:	2320      	movs	r3, #32
 800100c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        __HAL_I2C_DISABLE(hi2c);

        hi2c->State = HAL_I2C_STATE_READY;

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001010:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001012:	4798      	blx	r3
    HAL_I2C_ErrorCallback(hi2c);
  }
  /* STOP Flag is not set after a NACK reception */
  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  if((hi2c->State == HAL_I2C_STATE_LISTEN) && ((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF))
 8001014:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001018:	2b28      	cmp	r3, #40	; 0x28
 800101a:	d10e      	bne.n	800103a <I2C_ITError+0x82>
 800101c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800101e:	075b      	lsls	r3, r3, #29
 8001020:	d50b      	bpl.n	800103a <I2C_ITError+0x82>
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001022:	4b2e      	ldr	r3, [pc, #184]	; (80010dc <I2C_ITError+0x124>)
 8001024:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State = HAL_I2C_STATE_READY;
 8001026:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 8001028:	2300      	movs	r3, #0
 800102a:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
    
    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    HAL_I2C_ListenCpltCallback(hi2c);
 800102c:	4620      	mov	r0, r4
    hi2c->State = HAL_I2C_STATE_READY;
 800102e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001032:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8001036:	f7ff ffba 	bl	8000fae <HAL_I2C_ListenCpltCallback>
 800103a:	bd10      	pop	{r4, pc}
    if((hi2c->State != HAL_I2C_STATE_ABORT) && ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) != I2C_CR2_DMAEN))
 800103c:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8001040:	2a60      	cmp	r2, #96	; 0x60
 8001042:	d005      	beq.n	8001050 <I2C_ITError+0x98>
 8001044:	685a      	ldr	r2, [r3, #4]
 8001046:	0512      	lsls	r2, r2, #20
      hi2c->State = HAL_I2C_STATE_READY;
 8001048:	bf5c      	itt	pl
 800104a:	2220      	movpl	r2, #32
 800104c:	f880 203d 	strbpl.w	r2, [r0, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 8001050:	2200      	movs	r2, #0
 8001052:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001054:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
 8001058:	e7bb      	b.n	8000fd2 <I2C_ITError+0x1a>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800105a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800105c:	6503      	str	r3, [r0, #80]	; 0x50
      if(HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800105e:	f7ff fd81 	bl	8000b64 <HAL_DMA_Abort_IT>
 8001062:	2800      	cmp	r0, #0
 8001064:	d0d6      	beq.n	8001014 <I2C_ITError+0x5c>
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8001066:	6822      	ldr	r2, [r4, #0]
 8001068:	6953      	ldr	r3, [r2, #20]
 800106a:	0658      	lsls	r0, r3, #25
 800106c:	d504      	bpl.n	8001078 <I2C_ITError+0xc0>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800106e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001070:	6912      	ldr	r2, [r2, #16]
 8001072:	1c59      	adds	r1, r3, #1
 8001074:	6261      	str	r1, [r4, #36]	; 0x24
 8001076:	701a      	strb	r2, [r3, #0]
        __HAL_I2C_DISABLE(hi2c);
 8001078:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800107a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        __HAL_I2C_DISABLE(hi2c);
 800107c:	6813      	ldr	r3, [r2, #0]
 800107e:	f023 0301 	bic.w	r3, r3, #1
 8001082:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8001084:	2320      	movs	r3, #32
 8001086:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 800108a:	e7c1      	b.n	8001010 <I2C_ITError+0x58>
  else if(hi2c->State == HAL_I2C_STATE_ABORT)
 800108c:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8001090:	2960      	cmp	r1, #96	; 0x60
 8001092:	d114      	bne.n	80010be <I2C_ITError+0x106>
    hi2c->State = HAL_I2C_STATE_READY;
 8001094:	2120      	movs	r1, #32
 8001096:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800109a:	6422      	str	r2, [r4, #64]	; 0x40
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800109c:	695a      	ldr	r2, [r3, #20]
 800109e:	0651      	lsls	r1, r2, #25
 80010a0:	d504      	bpl.n	80010ac <I2C_ITError+0xf4>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80010a2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80010a4:	691b      	ldr	r3, [r3, #16]
 80010a6:	1c51      	adds	r1, r2, #1
 80010a8:	6261      	str	r1, [r4, #36]	; 0x24
 80010aa:	7013      	strb	r3, [r2, #0]
    __HAL_I2C_DISABLE(hi2c);
 80010ac:	6822      	ldr	r2, [r4, #0]
 80010ae:	6813      	ldr	r3, [r2, #0]
 80010b0:	f023 0301 	bic.w	r3, r3, #1
 80010b4:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 80010b6:	4620      	mov	r0, r4
 80010b8:	f7ff ff7d 	bl	8000fb6 <HAL_I2C_AbortCpltCallback>
 80010bc:	e7aa      	b.n	8001014 <I2C_ITError+0x5c>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80010be:	695a      	ldr	r2, [r3, #20]
 80010c0:	0652      	lsls	r2, r2, #25
 80010c2:	d504      	bpl.n	80010ce <I2C_ITError+0x116>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80010c4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80010c6:	691b      	ldr	r3, [r3, #16]
 80010c8:	1c51      	adds	r1, r2, #1
 80010ca:	6261      	str	r1, [r4, #36]	; 0x24
 80010cc:	7013      	strb	r3, [r2, #0]
    HAL_I2C_ErrorCallback(hi2c);
 80010ce:	4620      	mov	r0, r4
 80010d0:	f7ff ff70 	bl	8000fb4 <HAL_I2C_ErrorCallback>
 80010d4:	e79e      	b.n	8001014 <I2C_ITError+0x5c>
 80010d6:	bf00      	nop
 80010d8:	080018e9 	.word	0x080018e9
 80010dc:	ffff0000 	.word	0xffff0000

080010e0 <HAL_I2C_EV_IRQHandler>:
  uint32_t sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80010e0:	6803      	ldr	r3, [r0, #0]
{
 80010e2:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80010e4:	699d      	ldr	r5, [r3, #24]
  uint32_t sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80010e6:	6959      	ldr	r1, [r3, #20]
  uint32_t itsources    = READ_REG(hi2c->Instance->CR2);
 80010e8:	685a      	ldr	r2, [r3, #4]
  uint32_t CurrentMode  = hi2c->Mode;
 80010ea:	f890 403e 	ldrb.w	r4, [r0, #62]	; 0x3e
 80010ee:	b2e4      	uxtb	r4, r4
  if((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80010f0:	2c10      	cmp	r4, #16
{
 80010f2:	b08d      	sub	sp, #52	; 0x34
  if((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80010f4:	d002      	beq.n	80010fc <HAL_I2C_EV_IRQHandler+0x1c>
 80010f6:	2c40      	cmp	r4, #64	; 0x40
 80010f8:	f040 8255 	bne.w	80015a6 <HAL_I2C_EV_IRQHandler+0x4c6>
    if(((sr1itflags & I2C_FLAG_SB) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80010fc:	f011 1f01 	tst.w	r1, #65537	; 0x10001
 8001100:	d066      	beq.n	80011d0 <HAL_I2C_EV_IRQHandler+0xf0>
 8001102:	0597      	lsls	r7, r2, #22
 8001104:	d564      	bpl.n	80011d0 <HAL_I2C_EV_IRQHandler+0xf0>
  if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8001106:	f890 403e 	ldrb.w	r4, [r0, #62]	; 0x3e
 800110a:	2c40      	cmp	r4, #64	; 0x40
 800110c:	d143      	bne.n	8001196 <HAL_I2C_EV_IRQHandler+0xb6>
    if(hi2c->EventCount == 0U)
 800110e:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8001110:	2c00      	cmp	r4, #0
 8001112:	d13b      	bne.n	800118c <HAL_I2C_EV_IRQHandler+0xac>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001114:	6c44      	ldr	r4, [r0, #68]	; 0x44
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001116:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800111a:	611c      	str	r4, [r3, #16]
    if((sr2itflags & I2C_FLAG_TRA) != RESET)
 800111c:	4e98      	ldr	r6, [pc, #608]	; (8001380 <HAL_I2C_EV_IRQHandler+0x2a0>)
 800111e:	4c99      	ldr	r4, [pc, #612]	; (8001384 <HAL_I2C_EV_IRQHandler+0x2a4>)
 8001120:	402e      	ands	r6, r5
 8001122:	400c      	ands	r4, r1
 8001124:	2e00      	cmp	r6, #0
 8001126:	f000 819f 	beq.w	8001468 <HAL_I2C_EV_IRQHandler+0x388>
      if(((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 800112a:	4d97      	ldr	r5, [pc, #604]	; (8001388 <HAL_I2C_EV_IRQHandler+0x2a8>)
 800112c:	400d      	ands	r5, r1
 800112e:	2d00      	cmp	r5, #0
 8001130:	f000 8166 	beq.w	8001400 <HAL_I2C_EV_IRQHandler+0x320>
 8001134:	0555      	lsls	r5, r2, #21
 8001136:	f140 8163 	bpl.w	8001400 <HAL_I2C_EV_IRQHandler+0x320>
 800113a:	2c00      	cmp	r4, #0
 800113c:	f040 8160 	bne.w	8001400 <HAL_I2C_EV_IRQHandler+0x320>
  uint32_t CurrentState       = hi2c->State;
 8001140:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  if((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001144:	8d05      	ldrh	r5, [r0, #40]	; 0x28
  uint32_t CurrentMode        = hi2c->Mode;
 8001146:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800114a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  uint32_t CurrentState       = hi2c->State;
 800114c:	b2d2      	uxtb	r2, r2
  uint32_t CurrentMode        = hi2c->Mode;
 800114e:	b2c9      	uxtb	r1, r1
  if((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001150:	2d00      	cmp	r5, #0
 8001152:	f040 8105 	bne.w	8001360 <HAL_I2C_EV_IRQHandler+0x280>
 8001156:	2a21      	cmp	r2, #33	; 0x21
 8001158:	f040 8104 	bne.w	8001364 <HAL_I2C_EV_IRQHandler+0x284>
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800115c:	2c04      	cmp	r4, #4
 800115e:	f000 816c 	beq.w	800143a <HAL_I2C_EV_IRQHandler+0x35a>
 8001162:	2c08      	cmp	r4, #8
 8001164:	f000 8169 	beq.w	800143a <HAL_I2C_EV_IRQHandler+0x35a>
 8001168:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
 800116c:	f000 8165 	beq.w	800143a <HAL_I2C_EV_IRQHandler+0x35a>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001170:	685a      	ldr	r2, [r3, #4]
 8001172:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001176:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001178:	2311      	movs	r3, #17
 800117a:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800117c:	f880 503e 	strb.w	r5, [r0, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001180:	2320      	movs	r3, #32
 8001182:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001186:	f7ff ff0d 	bl	8000fa4 <HAL_I2C_MasterTxCpltCallback>
 800118a:	e0f6      	b.n	800137a <HAL_I2C_EV_IRQHandler+0x29a>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800118c:	6c44      	ldr	r4, [r0, #68]	; 0x44
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800118e:	f044 0401 	orr.w	r4, r4, #1
 8001192:	b2e4      	uxtb	r4, r4
 8001194:	e7c1      	b.n	800111a <HAL_I2C_EV_IRQHandler+0x3a>
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001196:	6904      	ldr	r4, [r0, #16]
 8001198:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
 800119c:	d105      	bne.n	80011aa <HAL_I2C_EV_IRQHandler+0xca>
      if(hi2c->State == HAL_I2C_STATE_BUSY_TX) 
 800119e:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 80011a2:	2c21      	cmp	r4, #33	; 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80011a4:	6c44      	ldr	r4, [r0, #68]	; 0x44
      if(hi2c->State == HAL_I2C_STATE_BUSY_TX) 
 80011a6:	d1f2      	bne.n	800118e <HAL_I2C_EV_IRQHandler+0xae>
 80011a8:	e7b5      	b.n	8001116 <HAL_I2C_EV_IRQHandler+0x36>
      if(hi2c->EventCount == 0U)
 80011aa:	6d04      	ldr	r4, [r0, #80]	; 0x50
 80011ac:	b934      	cbnz	r4, 80011bc <HAL_I2C_EV_IRQHandler+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80011ae:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80011b0:	11e4      	asrs	r4, r4, #7
 80011b2:	f004 0406 	and.w	r4, r4, #6
 80011b6:	f044 04f0 	orr.w	r4, r4, #240	; 0xf0
 80011ba:	e7ae      	b.n	800111a <HAL_I2C_EV_IRQHandler+0x3a>
      else if(hi2c->EventCount == 1U)
 80011bc:	6d04      	ldr	r4, [r0, #80]	; 0x50
 80011be:	2c01      	cmp	r4, #1
 80011c0:	d1ac      	bne.n	800111c <HAL_I2C_EV_IRQHandler+0x3c>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80011c2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80011c4:	11e4      	asrs	r4, r4, #7
 80011c6:	f004 0406 	and.w	r4, r4, #6
 80011ca:	f044 04f1 	orr.w	r4, r4, #241	; 0xf1
 80011ce:	e7a4      	b.n	800111a <HAL_I2C_EV_IRQHandler+0x3a>
    else if(((sr1itflags & I2C_FLAG_ADD10) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80011d0:	4c6e      	ldr	r4, [pc, #440]	; (800138c <HAL_I2C_EV_IRQHandler+0x2ac>)
 80011d2:	400c      	ands	r4, r1
 80011d4:	b11c      	cbz	r4, 80011de <HAL_I2C_EV_IRQHandler+0xfe>
 80011d6:	0596      	lsls	r6, r2, #22
 80011d8:	d501      	bpl.n	80011de <HAL_I2C_EV_IRQHandler+0xfe>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80011da:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80011dc:	e7d9      	b.n	8001192 <HAL_I2C_EV_IRQHandler+0xb2>
    else if(((sr1itflags & I2C_FLAG_ADDR) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80011de:	4c6c      	ldr	r4, [pc, #432]	; (8001390 <HAL_I2C_EV_IRQHandler+0x2b0>)
 80011e0:	400c      	ands	r4, r1
 80011e2:	2c00      	cmp	r4, #0
 80011e4:	d09a      	beq.n	800111c <HAL_I2C_EV_IRQHandler+0x3c>
 80011e6:	0594      	lsls	r4, r2, #22
 80011e8:	d598      	bpl.n	800111c <HAL_I2C_EV_IRQHandler+0x3c>
  uint32_t CurrentMode        = hi2c->Mode;
 80011ea:	f890 403e 	ldrb.w	r4, [r0, #62]	; 0x3e
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80011ee:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  uint32_t Prev_State         = hi2c->PreviousState;
 80011f0:	f8d0 e030 	ldr.w	lr, [r0, #48]	; 0x30
  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80011f4:	f890 703d 	ldrb.w	r7, [r0, #61]	; 0x3d
 80011f8:	2f22      	cmp	r7, #34	; 0x22
  uint32_t CurrentMode        = hi2c->Mode;
 80011fa:	b2e4      	uxtb	r4, r4
  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80011fc:	f040 80a8 	bne.w	8001350 <HAL_I2C_EV_IRQHandler+0x270>
    if((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8001200:	6d07      	ldr	r7, [r0, #80]	; 0x50
 8001202:	b947      	cbnz	r7, 8001216 <HAL_I2C_EV_IRQHandler+0x136>
 8001204:	2c40      	cmp	r4, #64	; 0x40
 8001206:	d106      	bne.n	8001216 <HAL_I2C_EV_IRQHandler+0x136>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001208:	9701      	str	r7, [sp, #4]
 800120a:	695c      	ldr	r4, [r3, #20]
 800120c:	9401      	str	r4, [sp, #4]
 800120e:	699c      	ldr	r4, [r3, #24]
 8001210:	9401      	str	r4, [sp, #4]
 8001212:	9c01      	ldr	r4, [sp, #4]
 8001214:	e782      	b.n	800111c <HAL_I2C_EV_IRQHandler+0x3c>
    else if((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8001216:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8001218:	b98c      	cbnz	r4, 800123e <HAL_I2C_EV_IRQHandler+0x15e>
 800121a:	6907      	ldr	r7, [r0, #16]
 800121c:	f5b7 4f40 	cmp.w	r7, #49152	; 0xc000
 8001220:	d10d      	bne.n	800123e <HAL_I2C_EV_IRQHandler+0x15e>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001222:	9402      	str	r4, [sp, #8]
 8001224:	695c      	ldr	r4, [r3, #20]
 8001226:	9402      	str	r4, [sp, #8]
 8001228:	699c      	ldr	r4, [r3, #24]
 800122a:	9402      	str	r4, [sp, #8]
 800122c:	9c02      	ldr	r4, [sp, #8]
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800122e:	681c      	ldr	r4, [r3, #0]
 8001230:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8001234:	601c      	str	r4, [r3, #0]
      hi2c->EventCount++;
 8001236:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8001238:	3401      	adds	r4, #1
      hi2c->EventCount = 0U;
 800123a:	6504      	str	r4, [r0, #80]	; 0x50
 800123c:	e76e      	b.n	800111c <HAL_I2C_EV_IRQHandler+0x3c>
      if(hi2c->XferCount == 0U)
 800123e:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 8001240:	b2a4      	uxth	r4, r4
 8001242:	b954      	cbnz	r4, 800125a <HAL_I2C_EV_IRQHandler+0x17a>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001244:	9403      	str	r4, [sp, #12]
 8001246:	695c      	ldr	r4, [r3, #20]
 8001248:	9403      	str	r4, [sp, #12]
 800124a:	699c      	ldr	r4, [r3, #24]
 800124c:	9403      	str	r4, [sp, #12]
 800124e:	9c03      	ldr	r4, [sp, #12]
            hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001250:	681c      	ldr	r4, [r3, #0]
 8001252:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 8001256:	601c      	str	r4, [r3, #0]
 8001258:	e019      	b.n	800128e <HAL_I2C_EV_IRQHandler+0x1ae>
      else if(hi2c->XferCount == 1U)   
 800125a:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 800125c:	b2a4      	uxth	r4, r4
 800125e:	2c01      	cmp	r4, #1
 8001260:	d142      	bne.n	80012e8 <HAL_I2C_EV_IRQHandler+0x208>
        if(CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8001262:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
 8001266:	d11b      	bne.n	80012a0 <HAL_I2C_EV_IRQHandler+0x1c0>
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001268:	681c      	ldr	r4, [r3, #0]
 800126a:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 800126e:	601c      	str	r4, [r3, #0]
          if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001270:	685c      	ldr	r4, [r3, #4]
 8001272:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
 8001276:	d00c      	beq.n	8001292 <HAL_I2C_EV_IRQHandler+0x1b2>
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001278:	681c      	ldr	r4, [r3, #0]
 800127a:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 800127e:	601c      	str	r4, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001280:	2400      	movs	r4, #0
 8001282:	9404      	str	r4, [sp, #16]
 8001284:	695c      	ldr	r4, [r3, #20]
 8001286:	9404      	str	r4, [sp, #16]
 8001288:	699c      	ldr	r4, [r3, #24]
 800128a:	9404      	str	r4, [sp, #16]
 800128c:	9c04      	ldr	r4, [sp, #16]
      hi2c->EventCount = 0U;
 800128e:	2400      	movs	r4, #0
 8001290:	e7d3      	b.n	800123a <HAL_I2C_EV_IRQHandler+0x15a>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001292:	9405      	str	r4, [sp, #20]
 8001294:	695c      	ldr	r4, [r3, #20]
 8001296:	9405      	str	r4, [sp, #20]
 8001298:	699c      	ldr	r4, [r3, #24]
 800129a:	9405      	str	r4, [sp, #20]
 800129c:	9c05      	ldr	r4, [sp, #20]
 800129e:	e7d7      	b.n	8001250 <HAL_I2C_EV_IRQHandler+0x170>
        else if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80012a0:	2e04      	cmp	r6, #4
 80012a2:	d015      	beq.n	80012d0 <HAL_I2C_EV_IRQHandler+0x1f0>
 80012a4:	2e08      	cmp	r6, #8
 80012a6:	d013      	beq.n	80012d0 <HAL_I2C_EV_IRQHandler+0x1f0>
          && (Prev_State != I2C_STATE_MASTER_BUSY_RX))
 80012a8:	f1be 0f12 	cmp.w	lr, #18
 80012ac:	d010      	beq.n	80012d0 <HAL_I2C_EV_IRQHandler+0x1f0>
          if(hi2c->XferOptions != I2C_NEXT_FRAME)
 80012ae:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80012b0:	2c02      	cmp	r4, #2
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80012b2:	681c      	ldr	r4, [r3, #0]
 80012b4:	bf14      	ite	ne
 80012b6:	f424 6480 	bicne.w	r4, r4, #1024	; 0x400
            hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80012ba:	f444 6480 	orreq.w	r4, r4, #1024	; 0x400
 80012be:	601c      	str	r4, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80012c0:	2400      	movs	r4, #0
 80012c2:	9406      	str	r4, [sp, #24]
 80012c4:	695c      	ldr	r4, [r3, #20]
 80012c6:	9406      	str	r4, [sp, #24]
 80012c8:	699c      	ldr	r4, [r3, #24]
 80012ca:	9406      	str	r4, [sp, #24]
 80012cc:	9c06      	ldr	r4, [sp, #24]
 80012ce:	e7de      	b.n	800128e <HAL_I2C_EV_IRQHandler+0x1ae>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80012d0:	681c      	ldr	r4, [r3, #0]
 80012d2:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 80012d6:	601c      	str	r4, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80012d8:	2400      	movs	r4, #0
 80012da:	9407      	str	r4, [sp, #28]
 80012dc:	695c      	ldr	r4, [r3, #20]
 80012de:	9407      	str	r4, [sp, #28]
 80012e0:	699c      	ldr	r4, [r3, #24]
 80012e2:	9407      	str	r4, [sp, #28]
 80012e4:	9c07      	ldr	r4, [sp, #28]
 80012e6:	e7b3      	b.n	8001250 <HAL_I2C_EV_IRQHandler+0x170>
      else if(hi2c->XferCount == 2U)
 80012e8:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 80012ea:	b2a4      	uxth	r4, r4
 80012ec:	2c02      	cmp	r4, #2
 80012ee:	d11c      	bne.n	800132a <HAL_I2C_EV_IRQHandler+0x24a>
        if(hi2c->XferOptions != I2C_NEXT_FRAME)
 80012f0:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80012f2:	2c02      	cmp	r4, #2
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80012f4:	681c      	ldr	r4, [r3, #0]
 80012f6:	bf1d      	ittte	ne
 80012f8:	f424 6480 	bicne.w	r4, r4, #1024	; 0x400
 80012fc:	601c      	strne	r4, [r3, #0]
          hi2c->Instance->CR1 |= I2C_CR1_POS;
 80012fe:	681c      	ldrne	r4, [r3, #0]
          hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001300:	f444 6480 	orreq.w	r4, r4, #1024	; 0x400
          hi2c->Instance->CR1 |= I2C_CR1_POS;
 8001304:	bf18      	it	ne
 8001306:	f444 6400 	orrne.w	r4, r4, #2048	; 0x800
          hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800130a:	601c      	str	r4, [r3, #0]
        if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800130c:	685c      	ldr	r4, [r3, #4]
 800130e:	0527      	lsls	r7, r4, #20
          hi2c->Instance->CR2 |= I2C_CR2_LAST;
 8001310:	bf42      	ittt	mi
 8001312:	685c      	ldrmi	r4, [r3, #4]
 8001314:	f444 5480 	orrmi.w	r4, r4, #4096	; 0x1000
 8001318:	605c      	strmi	r4, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800131a:	2400      	movs	r4, #0
 800131c:	9408      	str	r4, [sp, #32]
 800131e:	695c      	ldr	r4, [r3, #20]
 8001320:	9408      	str	r4, [sp, #32]
 8001322:	699c      	ldr	r4, [r3, #24]
 8001324:	9408      	str	r4, [sp, #32]
 8001326:	9c08      	ldr	r4, [sp, #32]
 8001328:	e7b1      	b.n	800128e <HAL_I2C_EV_IRQHandler+0x1ae>
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800132a:	681c      	ldr	r4, [r3, #0]
 800132c:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 8001330:	601c      	str	r4, [r3, #0]
        if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001332:	685c      	ldr	r4, [r3, #4]
 8001334:	0526      	lsls	r6, r4, #20
          hi2c->Instance->CR2 |= I2C_CR2_LAST;
 8001336:	bf42      	ittt	mi
 8001338:	685c      	ldrmi	r4, [r3, #4]
 800133a:	f444 5480 	orrmi.w	r4, r4, #4096	; 0x1000
 800133e:	605c      	strmi	r4, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001340:	2400      	movs	r4, #0
 8001342:	9409      	str	r4, [sp, #36]	; 0x24
 8001344:	695c      	ldr	r4, [r3, #20]
 8001346:	9409      	str	r4, [sp, #36]	; 0x24
 8001348:	699c      	ldr	r4, [r3, #24]
 800134a:	9409      	str	r4, [sp, #36]	; 0x24
 800134c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800134e:	e79e      	b.n	800128e <HAL_I2C_EV_IRQHandler+0x1ae>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001350:	2400      	movs	r4, #0
 8001352:	940a      	str	r4, [sp, #40]	; 0x28
 8001354:	695c      	ldr	r4, [r3, #20]
 8001356:	940a      	str	r4, [sp, #40]	; 0x28
 8001358:	699c      	ldr	r4, [r3, #24]
 800135a:	940a      	str	r4, [sp, #40]	; 0x28
 800135c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800135e:	e6dd      	b.n	800111c <HAL_I2C_EV_IRQHandler+0x3c>
  else if((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001360:	2a21      	cmp	r2, #33	; 0x21
 8001362:	d003      	beq.n	800136c <HAL_I2C_EV_IRQHandler+0x28c>
 8001364:	2940      	cmp	r1, #64	; 0x40
 8001366:	d108      	bne.n	800137a <HAL_I2C_EV_IRQHandler+0x29a>
    ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001368:	2a22      	cmp	r2, #34	; 0x22
 800136a:	d106      	bne.n	800137a <HAL_I2C_EV_IRQHandler+0x29a>
    if(hi2c->XferCount == 0U)
 800136c:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 800136e:	b292      	uxth	r2, r2
 8001370:	b982      	cbnz	r2, 8001394 <HAL_I2C_EV_IRQHandler+0x2b4>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001372:	685a      	ldr	r2, [r3, #4]
 8001374:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001378:	605a      	str	r2, [r3, #4]
}
 800137a:	b00d      	add	sp, #52	; 0x34
 800137c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800137e:	bf00      	nop
 8001380:	00100004 	.word	0x00100004
 8001384:	00010004 	.word	0x00010004
 8001388:	00010080 	.word	0x00010080
 800138c:	00010008 	.word	0x00010008
 8001390:	00010002 	.word	0x00010002
      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8001394:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8001398:	2a40      	cmp	r2, #64	; 0x40
 800139a:	d127      	bne.n	80013ec <HAL_I2C_EV_IRQHandler+0x30c>
        if(hi2c->EventCount == 0)
 800139c:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800139e:	b97a      	cbnz	r2, 80013c0 <HAL_I2C_EV_IRQHandler+0x2e0>
          if(hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80013a0:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80013a2:	2a01      	cmp	r2, #1
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80013a4:	6c82      	ldr	r2, [r0, #72]	; 0x48
          if(hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80013a6:	d105      	bne.n	80013b4 <HAL_I2C_EV_IRQHandler+0x2d4>
 80013a8:	b2d2      	uxtb	r2, r2
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80013aa:	611a      	str	r2, [r3, #16]
            hi2c->EventCount += 2;
 80013ac:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80013ae:	3302      	adds	r3, #2
            hi2c->EventCount++;
 80013b0:	6503      	str	r3, [r0, #80]	; 0x50
 80013b2:	e7e2      	b.n	800137a <HAL_I2C_EV_IRQHandler+0x29a>
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80013b4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80013b8:	611a      	str	r2, [r3, #16]
            hi2c->EventCount++;
 80013ba:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80013bc:	3301      	adds	r3, #1
 80013be:	e7f7      	b.n	80013b0 <HAL_I2C_EV_IRQHandler+0x2d0>
        else if(hi2c->EventCount == 1)
 80013c0:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80013c2:	2a01      	cmp	r2, #1
 80013c4:	d102      	bne.n	80013cc <HAL_I2C_EV_IRQHandler+0x2ec>
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80013c6:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80013c8:	b2d2      	uxtb	r2, r2
 80013ca:	e7f5      	b.n	80013b8 <HAL_I2C_EV_IRQHandler+0x2d8>
        else if(hi2c->EventCount == 2)
 80013cc:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80013ce:	2a02      	cmp	r2, #2
 80013d0:	d1d3      	bne.n	800137a <HAL_I2C_EV_IRQHandler+0x29a>
          if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80013d2:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 80013d6:	2a22      	cmp	r2, #34	; 0x22
 80013d8:	d104      	bne.n	80013e4 <HAL_I2C_EV_IRQHandler+0x304>
            hi2c->Instance->CR1 |= I2C_CR1_START;
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	e7ca      	b.n	800137a <HAL_I2C_EV_IRQHandler+0x29a>
          else if(hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80013e4:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 80013e8:	2a21      	cmp	r2, #33	; 0x21
 80013ea:	d1c6      	bne.n	800137a <HAL_I2C_EV_IRQHandler+0x29a>
    hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80013ec:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80013ee:	1c51      	adds	r1, r2, #1
 80013f0:	6241      	str	r1, [r0, #36]	; 0x24
 80013f2:	7812      	ldrb	r2, [r2, #0]
 80013f4:	611a      	str	r2, [r3, #16]
    hi2c->XferCount--;
 80013f6:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80013f8:	3b01      	subs	r3, #1
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	8543      	strh	r3, [r0, #42]	; 0x2a
}
 80013fe:	e7bc      	b.n	800137a <HAL_I2C_EV_IRQHandler+0x29a>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8001400:	2c00      	cmp	r4, #0
 8001402:	d0ba      	beq.n	800137a <HAL_I2C_EV_IRQHandler+0x29a>
 8001404:	0594      	lsls	r4, r2, #22
 8001406:	d5b8      	bpl.n	800137a <HAL_I2C_EV_IRQHandler+0x29a>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001408:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  if(hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800140a:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 800140e:	2a21      	cmp	r2, #33	; 0x21
 8001410:	d1b3      	bne.n	800137a <HAL_I2C_EV_IRQHandler+0x29a>
    if(hi2c->XferCount != 0U)
 8001412:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8001414:	b292      	uxth	r2, r2
 8001416:	2a00      	cmp	r2, #0
 8001418:	d1e8      	bne.n	80013ec <HAL_I2C_EV_IRQHandler+0x30c>
      if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800141a:	2904      	cmp	r1, #4
 800141c:	d00d      	beq.n	800143a <HAL_I2C_EV_IRQHandler+0x35a>
 800141e:	2908      	cmp	r1, #8
 8001420:	d00b      	beq.n	800143a <HAL_I2C_EV_IRQHandler+0x35a>
 8001422:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8001426:	d008      	beq.n	800143a <HAL_I2C_EV_IRQHandler+0x35a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001428:	6859      	ldr	r1, [r3, #4]
 800142a:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 800142e:	6059      	str	r1, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001430:	2311      	movs	r3, #17
 8001432:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001434:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
 8001438:	e6a2      	b.n	8001180 <HAL_I2C_EV_IRQHandler+0xa0>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800143a:	685a      	ldr	r2, [r3, #4]
 800143c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001440:	605a      	str	r2, [r3, #4]
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001448:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800144a:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 800144c:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 800144e:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001450:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
        if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8001454:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001458:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        if(hi2c->Mode == HAL_I2C_MODE_MEM)
 800145c:	2a40      	cmp	r2, #64	; 0x40
 800145e:	f47f ae92 	bne.w	8001186 <HAL_I2C_EV_IRQHandler+0xa6>
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001462:	f7ff fda5 	bl	8000fb0 <HAL_I2C_MemTxCpltCallback>
 8001466:	e788      	b.n	800137a <HAL_I2C_EV_IRQHandler+0x29a>
      if(((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 8001468:	4d90      	ldr	r5, [pc, #576]	; (80016ac <HAL_I2C_EV_IRQHandler+0x5cc>)
 800146a:	400d      	ands	r5, r1
 800146c:	2d00      	cmp	r5, #0
 800146e:	d041      	beq.n	80014f4 <HAL_I2C_EV_IRQHandler+0x414>
 8001470:	0551      	lsls	r1, r2, #21
 8001472:	d53f      	bpl.n	80014f4 <HAL_I2C_EV_IRQHandler+0x414>
 8001474:	2c00      	cmp	r4, #0
 8001476:	d13d      	bne.n	80014f4 <HAL_I2C_EV_IRQHandler+0x414>
  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001478:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 800147c:	2a22      	cmp	r2, #34	; 0x22
 800147e:	f47f af7c 	bne.w	800137a <HAL_I2C_EV_IRQHandler+0x29a>
    tmp = hi2c->XferCount;
 8001482:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8001484:	b292      	uxth	r2, r2
    if(tmp > 3U)
 8001486:	2a03      	cmp	r2, #3
 8001488:	d913      	bls.n	80014b2 <HAL_I2C_EV_IRQHandler+0x3d2>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800148a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800148c:	691b      	ldr	r3, [r3, #16]
 800148e:	1c51      	adds	r1, r2, #1
 8001490:	6241      	str	r1, [r0, #36]	; 0x24
 8001492:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 8001494:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001496:	3b01      	subs	r3, #1
 8001498:	b29b      	uxth	r3, r3
 800149a:	8543      	strh	r3, [r0, #42]	; 0x2a
      if(hi2c->XferCount == 3)
 800149c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800149e:	b29b      	uxth	r3, r3
 80014a0:	2b03      	cmp	r3, #3
 80014a2:	f47f af6a 	bne.w	800137a <HAL_I2C_EV_IRQHandler+0x29a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80014a6:	6802      	ldr	r2, [r0, #0]
 80014a8:	6853      	ldr	r3, [r2, #4]
 80014aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80014ae:	6053      	str	r3, [r2, #4]
 80014b0:	e763      	b.n	800137a <HAL_I2C_EV_IRQHandler+0x29a>
    else if((tmp == 1U) || (tmp == 0U))
 80014b2:	2a01      	cmp	r2, #1
 80014b4:	f63f af61 	bhi.w	800137a <HAL_I2C_EV_IRQHandler+0x29a>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014be:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80014c0:	685a      	ldr	r2, [r3, #4]
 80014c2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80014c6:	605a      	str	r2, [r3, #4]
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80014c8:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80014ca:	691b      	ldr	r3, [r3, #16]
 80014cc:	1c51      	adds	r1, r2, #1
 80014ce:	6241      	str	r1, [r0, #36]	; 0x24
 80014d0:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 80014d2:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80014d4:	3b01      	subs	r3, #1
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 80014da:	2320      	movs	r3, #32
 80014dc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      hi2c->PreviousState = I2C_STATE_NONE;
 80014e0:	6304      	str	r4, [r0, #48]	; 0x30
      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 80014e2:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80014e6:	f880 403e 	strb.w	r4, [r0, #62]	; 0x3e
      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 80014ea:	2b40      	cmp	r3, #64	; 0x40
    if(hi2c->Mode == HAL_I2C_MODE_MEM)
 80014ec:	d158      	bne.n	80015a0 <HAL_I2C_EV_IRQHandler+0x4c0>
      HAL_I2C_MemRxCpltCallback(hi2c);
 80014ee:	f7ff fd60 	bl	8000fb2 <HAL_I2C_MemRxCpltCallback>
 80014f2:	e742      	b.n	800137a <HAL_I2C_EV_IRQHandler+0x29a>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80014f4:	2c00      	cmp	r4, #0
 80014f6:	f43f af40 	beq.w	800137a <HAL_I2C_EV_IRQHandler+0x29a>
 80014fa:	0597      	lsls	r7, r2, #22
 80014fc:	f57f af3d 	bpl.w	800137a <HAL_I2C_EV_IRQHandler+0x29a>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001500:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  if(hi2c->XferCount == 4U)
 8001502:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8001504:	b292      	uxth	r2, r2
 8001506:	2a04      	cmp	r2, #4
 8001508:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800150a:	d108      	bne.n	800151e <HAL_I2C_EV_IRQHandler+0x43e>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800150c:	6859      	ldr	r1, [r3, #4]
 800150e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8001512:	6059      	str	r1, [r3, #4]
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001514:	1c51      	adds	r1, r2, #1
 8001516:	691b      	ldr	r3, [r3, #16]
 8001518:	6241      	str	r1, [r0, #36]	; 0x24
 800151a:	7013      	strb	r3, [r2, #0]
 800151c:	e76b      	b.n	80013f6 <HAL_I2C_EV_IRQHandler+0x316>
  else if(hi2c->XferCount == 3U)
 800151e:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 8001520:	b2a4      	uxth	r4, r4
 8001522:	2c03      	cmp	r4, #3
 8001524:	d108      	bne.n	8001538 <HAL_I2C_EV_IRQHandler+0x458>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001526:	6859      	ldr	r1, [r3, #4]
 8001528:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800152c:	6059      	str	r1, [r3, #4]
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800152e:	6819      	ldr	r1, [r3, #0]
 8001530:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8001534:	6019      	str	r1, [r3, #0]
 8001536:	e7ed      	b.n	8001514 <HAL_I2C_EV_IRQHandler+0x434>
  else if(hi2c->XferCount == 2U)
 8001538:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 800153a:	b2a4      	uxth	r4, r4
 800153c:	2c02      	cmp	r4, #2
 800153e:	d1e9      	bne.n	8001514 <HAL_I2C_EV_IRQHandler+0x434>
    if((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME))
 8001540:	3901      	subs	r1, #1
 8001542:	2901      	cmp	r1, #1
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001544:	6819      	ldr	r1, [r3, #0]
 8001546:	bf9d      	ittte	ls
 8001548:	f421 6180 	bicls.w	r1, r1, #1024	; 0x400
 800154c:	6019      	strls	r1, [r3, #0]
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800154e:	6819      	ldrls	r1, [r3, #0]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001550:	f441 7100 	orrhi.w	r1, r1, #512	; 0x200
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001554:	bf98      	it	ls
 8001556:	f441 7180 	orrls.w	r1, r1, #256	; 0x100
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800155a:	6019      	str	r1, [r3, #0]
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800155c:	691b      	ldr	r3, [r3, #16]
 800155e:	1c51      	adds	r1, r2, #1
 8001560:	6241      	str	r1, [r0, #36]	; 0x24
 8001562:	7013      	strb	r3, [r2, #0]
    hi2c->XferCount--;
 8001564:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001566:	3b01      	subs	r3, #1
 8001568:	b29b      	uxth	r3, r3
 800156a:	8543      	strh	r3, [r0, #42]	; 0x2a
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800156c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800156e:	1c5a      	adds	r2, r3, #1
 8001570:	6242      	str	r2, [r0, #36]	; 0x24
 8001572:	6802      	ldr	r2, [r0, #0]
 8001574:	6912      	ldr	r2, [r2, #16]
 8001576:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8001578:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800157a:	6802      	ldr	r2, [r0, #0]
    hi2c->XferCount--;
 800157c:	3b01      	subs	r3, #1
 800157e:	b29b      	uxth	r3, r3
 8001580:	8543      	strh	r3, [r0, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001582:	6853      	ldr	r3, [r2, #4]
 8001584:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001588:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800158a:	2320      	movs	r3, #32
 800158c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 8001590:	2300      	movs	r3, #0
 8001592:	6303      	str	r3, [r0, #48]	; 0x30
    if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8001594:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001598:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    if(hi2c->Mode == HAL_I2C_MODE_MEM)
 800159c:	2a40      	cmp	r2, #64	; 0x40
 800159e:	e7a5      	b.n	80014ec <HAL_I2C_EV_IRQHandler+0x40c>
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80015a0:	f7ff fd01 	bl	8000fa6 <HAL_I2C_MasterRxCpltCallback>
 80015a4:	e6e9      	b.n	800137a <HAL_I2C_EV_IRQHandler+0x29a>
    if(((sr1itflags & I2C_FLAG_ADDR) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80015a6:	4c42      	ldr	r4, [pc, #264]	; (80016b0 <HAL_I2C_EV_IRQHandler+0x5d0>)
 80015a8:	400c      	ands	r4, r1
 80015aa:	b174      	cbz	r4, 80015ca <HAL_I2C_EV_IRQHandler+0x4ea>
 80015ac:	0596      	lsls	r6, r2, #22
 80015ae:	d50c      	bpl.n	80015ca <HAL_I2C_EV_IRQHandler+0x4ea>
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TRA) == RESET)
 80015b0:	6999      	ldr	r1, [r3, #24]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_DUALF) == RESET)
 80015b2:	699b      	ldr	r3, [r3, #24]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TRA) == RESET)
 80015b4:	f081 0104 	eor.w	r1, r1, #4
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_DUALF) == RESET)
 80015b8:	061d      	lsls	r5, r3, #24
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80015ba:	f3c1 0180 	ubfx	r1, r1, #2, #1
    SlaveAddrCode = hi2c->Init.OwnAddress1;
 80015be:	bf54      	ite	pl
 80015c0:	8982      	ldrhpl	r2, [r0, #12]
    SlaveAddrCode = hi2c->Init.OwnAddress2;
 80015c2:	8b02      	ldrhmi	r2, [r0, #24]
  HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80015c4:	f7ff fcf2 	bl	8000fac <HAL_I2C_AddrCallback>
 80015c8:	e6d7      	b.n	800137a <HAL_I2C_EV_IRQHandler+0x29a>
    else if(((sr1itflags & I2C_FLAG_STOPF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80015ca:	4c3a      	ldr	r4, [pc, #232]	; (80016b4 <HAL_I2C_EV_IRQHandler+0x5d4>)
 80015cc:	400c      	ands	r4, r1
 80015ce:	2c00      	cmp	r4, #0
 80015d0:	d074      	beq.n	80016bc <HAL_I2C_EV_IRQHandler+0x5dc>
 80015d2:	0594      	lsls	r4, r2, #22
 80015d4:	d572      	bpl.n	80016bc <HAL_I2C_EV_IRQHandler+0x5dc>
  uint32_t CurrentState = hi2c->State;
 80015d6:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80015da:	6859      	ldr	r1, [r3, #4]
 80015dc:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 80015e0:	6059      	str	r1, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80015e2:	2100      	movs	r1, #0
 80015e4:	910b      	str	r1, [sp, #44]	; 0x2c
 80015e6:	6959      	ldr	r1, [r3, #20]
 80015e8:	910b      	str	r1, [sp, #44]	; 0x2c
 80015ea:	6819      	ldr	r1, [r3, #0]
 80015ec:	f041 0101 	orr.w	r1, r1, #1
 80015f0:	6019      	str	r1, [r3, #0]
 80015f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80015f4:	6819      	ldr	r1, [r3, #0]
 80015f6:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80015fa:	6019      	str	r1, [r3, #0]
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80015fc:	6859      	ldr	r1, [r3, #4]
 80015fe:	0509      	lsls	r1, r1, #20
  uint32_t CurrentState = hi2c->State;
 8001600:	b2d2      	uxtb	r2, r2
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001602:	d50c      	bpl.n	800161e <HAL_I2C_EV_IRQHandler+0x53e>
    if((hi2c->State == HAL_I2C_STATE_BUSY_RX) || (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001604:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 8001608:	2922      	cmp	r1, #34	; 0x22
 800160a:	d003      	beq.n	8001614 <HAL_I2C_EV_IRQHandler+0x534>
 800160c:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 8001610:	292a      	cmp	r1, #42	; 0x2a
 8001612:	d129      	bne.n	8001668 <HAL_I2C_EV_IRQHandler+0x588>
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8001614:	6b81      	ldr	r1, [r0, #56]	; 0x38
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8001616:	6809      	ldr	r1, [r1, #0]
 8001618:	6849      	ldr	r1, [r1, #4]
 800161a:	b289      	uxth	r1, r1
 800161c:	8541      	strh	r1, [r0, #42]	; 0x2a
  if(hi2c->XferCount != 0U)
 800161e:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 8001620:	b289      	uxth	r1, r1
 8001622:	b1e1      	cbz	r1, 800165e <HAL_I2C_EV_IRQHandler+0x57e>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001624:	6959      	ldr	r1, [r3, #20]
 8001626:	074f      	lsls	r7, r1, #29
 8001628:	d508      	bpl.n	800163c <HAL_I2C_EV_IRQHandler+0x55c>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800162a:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800162c:	691b      	ldr	r3, [r3, #16]
 800162e:	1c4c      	adds	r4, r1, #1
 8001630:	6244      	str	r4, [r0, #36]	; 0x24
 8001632:	700b      	strb	r3, [r1, #0]
      hi2c->XferCount--;
 8001634:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001636:	3b01      	subs	r3, #1
 8001638:	b29b      	uxth	r3, r3
 800163a:	8543      	strh	r3, [r0, #42]	; 0x2a
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800163c:	6801      	ldr	r1, [r0, #0]
 800163e:	694b      	ldr	r3, [r1, #20]
 8001640:	065e      	lsls	r6, r3, #25
 8001642:	d508      	bpl.n	8001656 <HAL_I2C_EV_IRQHandler+0x576>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001644:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001646:	6909      	ldr	r1, [r1, #16]
 8001648:	1c5c      	adds	r4, r3, #1
 800164a:	6244      	str	r4, [r0, #36]	; 0x24
 800164c:	7019      	strb	r1, [r3, #0]
      hi2c->XferCount--;
 800164e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001650:	3b01      	subs	r3, #1
 8001652:	b29b      	uxth	r3, r3
 8001654:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001656:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001658:	f043 0304 	orr.w	r3, r3, #4
 800165c:	6403      	str	r3, [r0, #64]	; 0x40
  if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800165e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001660:	b123      	cbz	r3, 800166c <HAL_I2C_EV_IRQHandler+0x58c>
    I2C_ITError(hi2c);
 8001662:	f7ff fca9 	bl	8000fb8 <I2C_ITError>
 8001666:	e688      	b.n	800137a <HAL_I2C_EV_IRQHandler+0x29a>
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8001668:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800166a:	e7d4      	b.n	8001616 <HAL_I2C_EV_IRQHandler+0x536>
    if((CurrentState == HAL_I2C_STATE_LISTEN ) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN) || \
 800166c:	f1a2 0128 	sub.w	r1, r2, #40	; 0x28
 8001670:	2902      	cmp	r1, #2
 8001672:	d80a      	bhi.n	800168a <HAL_I2C_EV_IRQHandler+0x5aa>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001674:	4a10      	ldr	r2, [pc, #64]	; (80016b8 <HAL_I2C_EV_IRQHandler+0x5d8>)
 8001676:	62c2      	str	r2, [r0, #44]	; 0x2c
      hi2c->State = HAL_I2C_STATE_READY;
 8001678:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 800167a:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800167c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001680:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8001684:	f7ff fc93 	bl	8000fae <HAL_I2C_ListenCpltCallback>
 8001688:	e677      	b.n	800137a <HAL_I2C_EV_IRQHandler+0x29a>
      if((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800168a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800168c:	2b22      	cmp	r3, #34	; 0x22
 800168e:	d002      	beq.n	8001696 <HAL_I2C_EV_IRQHandler+0x5b6>
 8001690:	2a22      	cmp	r2, #34	; 0x22
 8001692:	f47f ae72 	bne.w	800137a <HAL_I2C_EV_IRQHandler+0x29a>
        hi2c->PreviousState = I2C_STATE_NONE;
 8001696:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8001698:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 800169a:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800169c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80016a0:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80016a4:	f7ff fc81 	bl	8000faa <HAL_I2C_SlaveRxCpltCallback>
 80016a8:	e667      	b.n	800137a <HAL_I2C_EV_IRQHandler+0x29a>
 80016aa:	bf00      	nop
 80016ac:	00010040 	.word	0x00010040
 80016b0:	00010002 	.word	0x00010002
 80016b4:	00010010 	.word	0x00010010
 80016b8:	ffff0000 	.word	0xffff0000
    else if((sr2itflags & I2C_FLAG_TRA) != RESET)
 80016bc:	4e39      	ldr	r6, [pc, #228]	; (80017a4 <HAL_I2C_EV_IRQHandler+0x6c4>)
 80016be:	4c3a      	ldr	r4, [pc, #232]	; (80017a8 <HAL_I2C_EV_IRQHandler+0x6c8>)
 80016c0:	402e      	ands	r6, r5
 80016c2:	400c      	ands	r4, r1
 80016c4:	2e00      	cmp	r6, #0
 80016c6:	d036      	beq.n	8001736 <HAL_I2C_EV_IRQHandler+0x656>
      if(((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 80016c8:	4d38      	ldr	r5, [pc, #224]	; (80017ac <HAL_I2C_EV_IRQHandler+0x6cc>)
 80016ca:	400d      	ands	r5, r1
 80016cc:	b33d      	cbz	r5, 800171e <HAL_I2C_EV_IRQHandler+0x63e>
 80016ce:	0555      	lsls	r5, r2, #21
 80016d0:	d525      	bpl.n	800171e <HAL_I2C_EV_IRQHandler+0x63e>
 80016d2:	bb24      	cbnz	r4, 800171e <HAL_I2C_EV_IRQHandler+0x63e>
  uint32_t CurrentState = hi2c->State;
 80016d4:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
  if(hi2c->XferCount != 0U)
 80016d8:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80016da:	b292      	uxth	r2, r2
  uint32_t CurrentState = hi2c->State;
 80016dc:	b2c9      	uxtb	r1, r1
  if(hi2c->XferCount != 0U)
 80016de:	2a00      	cmp	r2, #0
 80016e0:	f43f ae4b 	beq.w	800137a <HAL_I2C_EV_IRQHandler+0x29a>
    hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80016e4:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80016e6:	1c54      	adds	r4, r2, #1
 80016e8:	6244      	str	r4, [r0, #36]	; 0x24
 80016ea:	7812      	ldrb	r2, [r2, #0]
 80016ec:	611a      	str	r2, [r3, #16]
    hi2c->XferCount--;
 80016ee:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80016f0:	3a01      	subs	r2, #1
 80016f2:	b292      	uxth	r2, r2
 80016f4:	8542      	strh	r2, [r0, #42]	; 0x2a
    if((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80016f6:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80016f8:	b292      	uxth	r2, r2
 80016fa:	2a00      	cmp	r2, #0
 80016fc:	f47f ae3d 	bne.w	800137a <HAL_I2C_EV_IRQHandler+0x29a>
 8001700:	2929      	cmp	r1, #41	; 0x29
 8001702:	f47f ae3a 	bne.w	800137a <HAL_I2C_EV_IRQHandler+0x29a>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001706:	685a      	ldr	r2, [r3, #4]
 8001708:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800170c:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800170e:	2321      	movs	r3, #33	; 0x21
 8001710:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8001712:	2328      	movs	r3, #40	; 0x28
 8001714:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001718:	f7ff fc46 	bl	8000fa8 <HAL_I2C_SlaveTxCpltCallback>
 800171c:	e62d      	b.n	800137a <HAL_I2C_EV_IRQHandler+0x29a>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 800171e:	2c00      	cmp	r4, #0
 8001720:	f43f ae2b 	beq.w	800137a <HAL_I2C_EV_IRQHandler+0x29a>
 8001724:	0594      	lsls	r4, r2, #22
 8001726:	f57f ae28 	bpl.w	800137a <HAL_I2C_EV_IRQHandler+0x29a>
  if(hi2c->XferCount != 0U)
 800172a:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 800172c:	b292      	uxth	r2, r2
 800172e:	2a00      	cmp	r2, #0
 8001730:	f47f ae5c 	bne.w	80013ec <HAL_I2C_EV_IRQHandler+0x30c>
 8001734:	e621      	b.n	800137a <HAL_I2C_EV_IRQHandler+0x29a>
      if(((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 8001736:	4d1e      	ldr	r5, [pc, #120]	; (80017b0 <HAL_I2C_EV_IRQHandler+0x6d0>)
 8001738:	400d      	ands	r5, r1
 800173a:	b335      	cbz	r5, 800178a <HAL_I2C_EV_IRQHandler+0x6aa>
 800173c:	0551      	lsls	r1, r2, #21
 800173e:	d524      	bpl.n	800178a <HAL_I2C_EV_IRQHandler+0x6aa>
 8001740:	bb1c      	cbnz	r4, 800178a <HAL_I2C_EV_IRQHandler+0x6aa>
  uint32_t CurrentState = hi2c->State;
 8001742:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  if(hi2c->XferCount != 0U)
 8001746:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 8001748:	b289      	uxth	r1, r1
  uint32_t CurrentState = hi2c->State;
 800174a:	b2d2      	uxtb	r2, r2
  if(hi2c->XferCount != 0U)
 800174c:	2900      	cmp	r1, #0
 800174e:	f43f ae14 	beq.w	800137a <HAL_I2C_EV_IRQHandler+0x29a>
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001752:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8001754:	691b      	ldr	r3, [r3, #16]
 8001756:	1c4c      	adds	r4, r1, #1
 8001758:	6244      	str	r4, [r0, #36]	; 0x24
 800175a:	700b      	strb	r3, [r1, #0]
    hi2c->XferCount--;
 800175c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800175e:	3b01      	subs	r3, #1
 8001760:	b29b      	uxth	r3, r3
 8001762:	8543      	strh	r3, [r0, #42]	; 0x2a
    if((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001764:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001766:	b29b      	uxth	r3, r3
 8001768:	2b00      	cmp	r3, #0
 800176a:	f47f ae06 	bne.w	800137a <HAL_I2C_EV_IRQHandler+0x29a>
 800176e:	2a2a      	cmp	r2, #42	; 0x2a
 8001770:	f47f ae03 	bne.w	800137a <HAL_I2C_EV_IRQHandler+0x29a>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001774:	6802      	ldr	r2, [r0, #0]
 8001776:	6853      	ldr	r3, [r2, #4]
 8001778:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800177c:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800177e:	2322      	movs	r3, #34	; 0x22
 8001780:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8001782:	2328      	movs	r3, #40	; 0x28
 8001784:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 8001788:	e78c      	b.n	80016a4 <HAL_I2C_EV_IRQHandler+0x5c4>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 800178a:	2c00      	cmp	r4, #0
 800178c:	f43f adf5 	beq.w	800137a <HAL_I2C_EV_IRQHandler+0x29a>
 8001790:	0592      	lsls	r2, r2, #22
 8001792:	f57f adf2 	bpl.w	800137a <HAL_I2C_EV_IRQHandler+0x29a>
  if(hi2c->XferCount != 0U)
 8001796:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8001798:	b292      	uxth	r2, r2
 800179a:	2a00      	cmp	r2, #0
 800179c:	f43f aded 	beq.w	800137a <HAL_I2C_EV_IRQHandler+0x29a>
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80017a0:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80017a2:	e6b7      	b.n	8001514 <HAL_I2C_EV_IRQHandler+0x434>
 80017a4:	00100004 	.word	0x00100004
 80017a8:	00010004 	.word	0x00010004
 80017ac:	00010080 	.word	0x00010080
 80017b0:	00010040 	.word	0x00010040

080017b4 <HAL_I2C_ER_IRQHandler>:
{
 80017b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80017b6:	6803      	ldr	r3, [r0, #0]
  if(((sr1itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 80017b8:	4a49      	ldr	r2, [pc, #292]	; (80018e0 <HAL_I2C_ER_IRQHandler+0x12c>)
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80017ba:	695e      	ldr	r6, [r3, #20]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80017bc:	685d      	ldr	r5, [r3, #4]
  if(((sr1itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 80017be:	4216      	tst	r6, r2
{
 80017c0:	4604      	mov	r4, r0
  if(((sr1itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 80017c2:	d008      	beq.n	80017d6 <HAL_I2C_ER_IRQHandler+0x22>
 80017c4:	05e8      	lsls	r0, r5, #23
 80017c6:	d506      	bpl.n	80017d6 <HAL_I2C_ER_IRQHandler+0x22>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80017c8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80017ca:	f042 0201 	orr.w	r2, r2, #1
 80017ce:	6422      	str	r2, [r4, #64]	; 0x40
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80017d0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80017d4:	615a      	str	r2, [r3, #20]
  if(((sr1itflags & I2C_FLAG_ARLO) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 80017d6:	f416 3f81 	tst.w	r6, #66048	; 0x10200
 80017da:	d008      	beq.n	80017ee <HAL_I2C_ER_IRQHandler+0x3a>
 80017dc:	05e9      	lsls	r1, r5, #23
 80017de:	d506      	bpl.n	80017ee <HAL_I2C_ER_IRQHandler+0x3a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80017e0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80017e2:	f042 0202 	orr.w	r2, r2, #2
 80017e6:	6422      	str	r2, [r4, #64]	; 0x40
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80017e8:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80017ec:	615a      	str	r2, [r3, #20]
  if(((sr1itflags & I2C_FLAG_AF) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 80017ee:	f416 3f82 	tst.w	r6, #66560	; 0x10400
 80017f2:	d036      	beq.n	8001862 <HAL_I2C_ER_IRQHandler+0xae>
 80017f4:	05ea      	lsls	r2, r5, #23
 80017f6:	d534      	bpl.n	8001862 <HAL_I2C_ER_IRQHandler+0xae>
    tmp1 = hi2c->Mode;
 80017f8:	f894 703e 	ldrb.w	r7, [r4, #62]	; 0x3e
    tmp2 = hi2c->XferCount;
 80017fc:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    tmp3 = hi2c->State;
 80017fe:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
    tmp4 = hi2c->PreviousState;
 8001802:	6b20      	ldr	r0, [r4, #48]	; 0x30
    if((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8001804:	2f20      	cmp	r7, #32
    tmp2 = hi2c->XferCount;
 8001806:	b289      	uxth	r1, r1
    tmp3 = hi2c->State;
 8001808:	b2d2      	uxtb	r2, r2
    if((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800180a:	d158      	bne.n	80018be <HAL_I2C_ER_IRQHandler+0x10a>
 800180c:	2900      	cmp	r1, #0
 800180e:	d156      	bne.n	80018be <HAL_I2C_ER_IRQHandler+0x10a>
 8001810:	f002 01f7 	and.w	r1, r2, #247	; 0xf7
 8001814:	2921      	cmp	r1, #33	; 0x21
 8001816:	d003      	beq.n	8001820 <HAL_I2C_ER_IRQHandler+0x6c>
      ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8001818:	2a28      	cmp	r2, #40	; 0x28
 800181a:	d150      	bne.n	80018be <HAL_I2C_ER_IRQHandler+0x10a>
      ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800181c:	2821      	cmp	r0, #33	; 0x21
 800181e:	d14e      	bne.n	80018be <HAL_I2C_ER_IRQHandler+0x10a>
  uint32_t CurrentState       = hi2c->State;
 8001820:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001824:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if(((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8001826:	2904      	cmp	r1, #4
  uint32_t CurrentState       = hi2c->State;
 8001828:	b2d2      	uxtb	r2, r2
  if(((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800182a:	d001      	beq.n	8001830 <HAL_I2C_ER_IRQHandler+0x7c>
 800182c:	2908      	cmp	r1, #8
 800182e:	d12c      	bne.n	800188a <HAL_I2C_ER_IRQHandler+0xd6>
 8001830:	2a28      	cmp	r2, #40	; 0x28
 8001832:	d12a      	bne.n	800188a <HAL_I2C_ER_IRQHandler+0xd6>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001834:	4a2b      	ldr	r2, [pc, #172]	; (80018e4 <HAL_I2C_ER_IRQHandler+0x130>)
 8001836:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001838:	685a      	ldr	r2, [r3, #4]
 800183a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800183e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001840:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001844:	615a      	str	r2, [r3, #20]
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800184c:	601a      	str	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 800184e:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001850:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 8001852:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 8001854:	4620      	mov	r0, r4
    hi2c->State = HAL_I2C_STATE_READY;
 8001856:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800185a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 800185e:	f7ff fba6 	bl	8000fae <HAL_I2C_ListenCpltCallback>
  if(((sr1itflags & I2C_FLAG_OVR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 8001862:	f416 3f84 	tst.w	r6, #67584	; 0x10800
 8001866:	d009      	beq.n	800187c <HAL_I2C_ER_IRQHandler+0xc8>
 8001868:	05eb      	lsls	r3, r5, #23
 800186a:	d507      	bpl.n	800187c <HAL_I2C_ER_IRQHandler+0xc8>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800186c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800186e:	f043 0308 	orr.w	r3, r3, #8
 8001872:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001874:	6823      	ldr	r3, [r4, #0]
 8001876:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800187a:	615a      	str	r2, [r3, #20]
  if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800187c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800187e:	b373      	cbz	r3, 80018de <HAL_I2C_ER_IRQHandler+0x12a>
    I2C_ITError(hi2c);
 8001880:	4620      	mov	r0, r4
}
 8001882:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    I2C_ITError(hi2c);
 8001886:	f7ff bb97 	b.w	8000fb8 <I2C_ITError>
  else if(CurrentState == HAL_I2C_STATE_BUSY_TX)
 800188a:	2a21      	cmp	r2, #33	; 0x21
 800188c:	d123      	bne.n	80018d6 <HAL_I2C_ER_IRQHandler+0x122>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800188e:	4915      	ldr	r1, [pc, #84]	; (80018e4 <HAL_I2C_ER_IRQHandler+0x130>)
 8001890:	62e1      	str	r1, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001892:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 8001894:	2220      	movs	r2, #32
 8001896:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800189a:	2200      	movs	r2, #0
 800189c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80018a0:	685a      	ldr	r2, [r3, #4]
 80018a2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80018a6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018a8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80018ac:	615a      	str	r2, [r3, #20]
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018b4:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80018b6:	4620      	mov	r0, r4
 80018b8:	f7ff fb76 	bl	8000fa8 <HAL_I2C_SlaveTxCpltCallback>
 80018bc:	e7d1      	b.n	8001862 <HAL_I2C_ER_IRQHandler+0xae>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80018be:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80018c0:	f042 0204 	orr.w	r2, r2, #4
 80018c4:	6422      	str	r2, [r4, #64]	; 0x40
      if(hi2c->Mode == HAL_I2C_MODE_MASTER)
 80018c6:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 80018ca:	2a10      	cmp	r2, #16
        SET_BIT(hi2c->Instance->CR1,I2C_CR1_STOP);
 80018cc:	bf02      	ittt	eq
 80018ce:	681a      	ldreq	r2, [r3, #0]
 80018d0:	f442 7200 	orreq.w	r2, r2, #512	; 0x200
 80018d4:	601a      	streq	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80018da:	615a      	str	r2, [r3, #20]
 80018dc:	e7c1      	b.n	8001862 <HAL_I2C_ER_IRQHandler+0xae>
 80018de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80018e0:	00010100 	.word	0x00010100
 80018e4:	ffff0000 	.word	0xffff0000

080018e8 <I2C_DMAAbort>:
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
  I2C_HandleTypeDef* hi2c = ( I2C_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018e8:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 80018ea:	b508      	push	{r3, lr}
  
  /* Disable Acknowledge */
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80018ec:	6803      	ldr	r3, [r0, #0]

  hi2c->XferCount = 0U;

  /* Reset XferAbortCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 80018ee:	6b41      	ldr	r1, [r0, #52]	; 0x34
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018f6:	601a      	str	r2, [r3, #0]
  hi2c->XferCount = 0U;
 80018f8:	2200      	movs	r2, #0
 80018fa:	8542      	strh	r2, [r0, #42]	; 0x2a
  hi2c->hdmatx->XferAbortCallback = NULL;
 80018fc:	650a      	str	r2, [r1, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 80018fe:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8001900:	650a      	str	r2, [r1, #80]	; 0x50

  /* Check if come from abort from user */
  if(hi2c->State == HAL_I2C_STATE_ABORT)
 8001902:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 8001906:	2960      	cmp	r1, #96	; 0x60
 8001908:	f04f 0120 	mov.w	r1, #32
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800190c:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001910:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  if(hi2c->State == HAL_I2C_STATE_ABORT)
 8001914:	d107      	bne.n	8001926 <I2C_DMAAbort+0x3e>
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001916:	6402      	str	r2, [r0, #64]	; 0x40

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	f022 0201 	bic.w	r2, r2, #1
 800191e:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    HAL_I2C_AbortCpltCallback(hi2c);
 8001920:	f7ff fb49 	bl	8000fb6 <HAL_I2C_AbortCpltCallback>
 8001924:	bd08      	pop	{r3, pc}
  {
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	f022 0201 	bic.w	r2, r2, #1
 800192c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    HAL_I2C_ErrorCallback(hi2c);
 800192e:	f7ff fb41 	bl	8000fb4 <HAL_I2C_ErrorCallback>
 8001932:	bd08      	pop	{r3, pc}

08001934 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001934:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001938:	4604      	mov	r4, r0
 800193a:	b918      	cbnz	r0, 8001944 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 800193c:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 800193e:	b002      	add	sp, #8
 8001940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001944:	6803      	ldr	r3, [r0, #0]
 8001946:	07dd      	lsls	r5, r3, #31
 8001948:	d410      	bmi.n	800196c <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800194a:	6823      	ldr	r3, [r4, #0]
 800194c:	0798      	lsls	r0, r3, #30
 800194e:	d458      	bmi.n	8001a02 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001950:	6823      	ldr	r3, [r4, #0]
 8001952:	071a      	lsls	r2, r3, #28
 8001954:	f100 809a 	bmi.w	8001a8c <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001958:	6823      	ldr	r3, [r4, #0]
 800195a:	075b      	lsls	r3, r3, #29
 800195c:	f100 80b8 	bmi.w	8001ad0 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001960:	69a2      	ldr	r2, [r4, #24]
 8001962:	2a00      	cmp	r2, #0
 8001964:	f040 8119 	bne.w	8001b9a <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8001968:	2000      	movs	r0, #0
 800196a:	e7e8      	b.n	800193e <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800196c:	4ba6      	ldr	r3, [pc, #664]	; (8001c08 <HAL_RCC_OscConfig+0x2d4>)
 800196e:	689a      	ldr	r2, [r3, #8]
 8001970:	f002 020c 	and.w	r2, r2, #12
 8001974:	2a04      	cmp	r2, #4
 8001976:	d007      	beq.n	8001988 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001978:	689a      	ldr	r2, [r3, #8]
 800197a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800197e:	2a08      	cmp	r2, #8
 8001980:	d10a      	bne.n	8001998 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	0259      	lsls	r1, r3, #9
 8001986:	d507      	bpl.n	8001998 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001988:	4b9f      	ldr	r3, [pc, #636]	; (8001c08 <HAL_RCC_OscConfig+0x2d4>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	039a      	lsls	r2, r3, #14
 800198e:	d5dc      	bpl.n	800194a <HAL_RCC_OscConfig+0x16>
 8001990:	6863      	ldr	r3, [r4, #4]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d1d9      	bne.n	800194a <HAL_RCC_OscConfig+0x16>
 8001996:	e7d1      	b.n	800193c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001998:	6863      	ldr	r3, [r4, #4]
 800199a:	4d9b      	ldr	r5, [pc, #620]	; (8001c08 <HAL_RCC_OscConfig+0x2d4>)
 800199c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019a0:	d111      	bne.n	80019c6 <HAL_RCC_OscConfig+0x92>
 80019a2:	682b      	ldr	r3, [r5, #0]
 80019a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019a8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80019aa:	f7fe fddf 	bl	800056c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ae:	4d96      	ldr	r5, [pc, #600]	; (8001c08 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80019b0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019b2:	682b      	ldr	r3, [r5, #0]
 80019b4:	039b      	lsls	r3, r3, #14
 80019b6:	d4c8      	bmi.n	800194a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019b8:	f7fe fdd8 	bl	800056c <HAL_GetTick>
 80019bc:	1b80      	subs	r0, r0, r6
 80019be:	2864      	cmp	r0, #100	; 0x64
 80019c0:	d9f7      	bls.n	80019b2 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 80019c2:	2003      	movs	r0, #3
 80019c4:	e7bb      	b.n	800193e <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019ca:	d104      	bne.n	80019d6 <HAL_RCC_OscConfig+0xa2>
 80019cc:	682b      	ldr	r3, [r5, #0]
 80019ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019d2:	602b      	str	r3, [r5, #0]
 80019d4:	e7e5      	b.n	80019a2 <HAL_RCC_OscConfig+0x6e>
 80019d6:	682a      	ldr	r2, [r5, #0]
 80019d8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80019dc:	602a      	str	r2, [r5, #0]
 80019de:	682a      	ldr	r2, [r5, #0]
 80019e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80019e4:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1df      	bne.n	80019aa <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 80019ea:	f7fe fdbf 	bl	800056c <HAL_GetTick>
 80019ee:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019f0:	682b      	ldr	r3, [r5, #0]
 80019f2:	039f      	lsls	r7, r3, #14
 80019f4:	d5a9      	bpl.n	800194a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019f6:	f7fe fdb9 	bl	800056c <HAL_GetTick>
 80019fa:	1b80      	subs	r0, r0, r6
 80019fc:	2864      	cmp	r0, #100	; 0x64
 80019fe:	d9f7      	bls.n	80019f0 <HAL_RCC_OscConfig+0xbc>
 8001a00:	e7df      	b.n	80019c2 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a02:	4b81      	ldr	r3, [pc, #516]	; (8001c08 <HAL_RCC_OscConfig+0x2d4>)
 8001a04:	689a      	ldr	r2, [r3, #8]
 8001a06:	f012 0f0c 	tst.w	r2, #12
 8001a0a:	d007      	beq.n	8001a1c <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a0c:	689a      	ldr	r2, [r3, #8]
 8001a0e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a12:	2a08      	cmp	r2, #8
 8001a14:	d111      	bne.n	8001a3a <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	025e      	lsls	r6, r3, #9
 8001a1a:	d40e      	bmi.n	8001a3a <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a1c:	4b7a      	ldr	r3, [pc, #488]	; (8001c08 <HAL_RCC_OscConfig+0x2d4>)
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	0795      	lsls	r5, r2, #30
 8001a22:	d502      	bpl.n	8001a2a <HAL_RCC_OscConfig+0xf6>
 8001a24:	68e2      	ldr	r2, [r4, #12]
 8001a26:	2a01      	cmp	r2, #1
 8001a28:	d188      	bne.n	800193c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	6921      	ldr	r1, [r4, #16]
 8001a2e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001a32:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001a36:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a38:	e78a      	b.n	8001950 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a3a:	68e2      	ldr	r2, [r4, #12]
 8001a3c:	4b73      	ldr	r3, [pc, #460]	; (8001c0c <HAL_RCC_OscConfig+0x2d8>)
 8001a3e:	b1b2      	cbz	r2, 8001a6e <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8001a40:	2201      	movs	r2, #1
 8001a42:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001a44:	f7fe fd92 	bl	800056c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a48:	4d6f      	ldr	r5, [pc, #444]	; (8001c08 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001a4a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a4c:	682b      	ldr	r3, [r5, #0]
 8001a4e:	0798      	lsls	r0, r3, #30
 8001a50:	d507      	bpl.n	8001a62 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a52:	682b      	ldr	r3, [r5, #0]
 8001a54:	6922      	ldr	r2, [r4, #16]
 8001a56:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001a5a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001a5e:	602b      	str	r3, [r5, #0]
 8001a60:	e776      	b.n	8001950 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a62:	f7fe fd83 	bl	800056c <HAL_GetTick>
 8001a66:	1b80      	subs	r0, r0, r6
 8001a68:	2802      	cmp	r0, #2
 8001a6a:	d9ef      	bls.n	8001a4c <HAL_RCC_OscConfig+0x118>
 8001a6c:	e7a9      	b.n	80019c2 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8001a6e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001a70:	f7fe fd7c 	bl	800056c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a74:	4d64      	ldr	r5, [pc, #400]	; (8001c08 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001a76:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a78:	682b      	ldr	r3, [r5, #0]
 8001a7a:	0799      	lsls	r1, r3, #30
 8001a7c:	f57f af68 	bpl.w	8001950 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a80:	f7fe fd74 	bl	800056c <HAL_GetTick>
 8001a84:	1b80      	subs	r0, r0, r6
 8001a86:	2802      	cmp	r0, #2
 8001a88:	d9f6      	bls.n	8001a78 <HAL_RCC_OscConfig+0x144>
 8001a8a:	e79a      	b.n	80019c2 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a8c:	6962      	ldr	r2, [r4, #20]
 8001a8e:	4b60      	ldr	r3, [pc, #384]	; (8001c10 <HAL_RCC_OscConfig+0x2dc>)
 8001a90:	b17a      	cbz	r2, 8001ab2 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8001a92:	2201      	movs	r2, #1
 8001a94:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001a96:	f7fe fd69 	bl	800056c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a9a:	4d5b      	ldr	r5, [pc, #364]	; (8001c08 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001a9c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a9e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001aa0:	079f      	lsls	r7, r3, #30
 8001aa2:	f53f af59 	bmi.w	8001958 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001aa6:	f7fe fd61 	bl	800056c <HAL_GetTick>
 8001aaa:	1b80      	subs	r0, r0, r6
 8001aac:	2802      	cmp	r0, #2
 8001aae:	d9f6      	bls.n	8001a9e <HAL_RCC_OscConfig+0x16a>
 8001ab0:	e787      	b.n	80019c2 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8001ab2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001ab4:	f7fe fd5a 	bl	800056c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ab8:	4d53      	ldr	r5, [pc, #332]	; (8001c08 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001aba:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001abc:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001abe:	0798      	lsls	r0, r3, #30
 8001ac0:	f57f af4a 	bpl.w	8001958 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ac4:	f7fe fd52 	bl	800056c <HAL_GetTick>
 8001ac8:	1b80      	subs	r0, r0, r6
 8001aca:	2802      	cmp	r0, #2
 8001acc:	d9f6      	bls.n	8001abc <HAL_RCC_OscConfig+0x188>
 8001ace:	e778      	b.n	80019c2 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ad0:	4b4d      	ldr	r3, [pc, #308]	; (8001c08 <HAL_RCC_OscConfig+0x2d4>)
 8001ad2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ad4:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001ad8:	d128      	bne.n	8001b2c <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ada:	9201      	str	r2, [sp, #4]
 8001adc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ade:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001ae2:	641a      	str	r2, [r3, #64]	; 0x40
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aea:	9301      	str	r3, [sp, #4]
 8001aec:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001aee:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001af0:	4d48      	ldr	r5, [pc, #288]	; (8001c14 <HAL_RCC_OscConfig+0x2e0>)
 8001af2:	682b      	ldr	r3, [r5, #0]
 8001af4:	05d9      	lsls	r1, r3, #23
 8001af6:	d51b      	bpl.n	8001b30 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001af8:	68a3      	ldr	r3, [r4, #8]
 8001afa:	4d43      	ldr	r5, [pc, #268]	; (8001c08 <HAL_RCC_OscConfig+0x2d4>)
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d127      	bne.n	8001b50 <HAL_RCC_OscConfig+0x21c>
 8001b00:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001b02:	f043 0301 	orr.w	r3, r3, #1
 8001b06:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001b08:	f7fe fd30 	bl	800056c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b0c:	4d3e      	ldr	r5, [pc, #248]	; (8001c08 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001b0e:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b10:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b14:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001b16:	079b      	lsls	r3, r3, #30
 8001b18:	d539      	bpl.n	8001b8e <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8001b1a:	2e00      	cmp	r6, #0
 8001b1c:	f43f af20 	beq.w	8001960 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b20:	4a39      	ldr	r2, [pc, #228]	; (8001c08 <HAL_RCC_OscConfig+0x2d4>)
 8001b22:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001b24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b28:	6413      	str	r3, [r2, #64]	; 0x40
 8001b2a:	e719      	b.n	8001960 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8001b2c:	2600      	movs	r6, #0
 8001b2e:	e7df      	b.n	8001af0 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b30:	682b      	ldr	r3, [r5, #0]
 8001b32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b36:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001b38:	f7fe fd18 	bl	800056c <HAL_GetTick>
 8001b3c:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b3e:	682b      	ldr	r3, [r5, #0]
 8001b40:	05da      	lsls	r2, r3, #23
 8001b42:	d4d9      	bmi.n	8001af8 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b44:	f7fe fd12 	bl	800056c <HAL_GetTick>
 8001b48:	1bc0      	subs	r0, r0, r7
 8001b4a:	2802      	cmp	r0, #2
 8001b4c:	d9f7      	bls.n	8001b3e <HAL_RCC_OscConfig+0x20a>
 8001b4e:	e738      	b.n	80019c2 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b50:	2b05      	cmp	r3, #5
 8001b52:	d104      	bne.n	8001b5e <HAL_RCC_OscConfig+0x22a>
 8001b54:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001b56:	f043 0304 	orr.w	r3, r3, #4
 8001b5a:	672b      	str	r3, [r5, #112]	; 0x70
 8001b5c:	e7d0      	b.n	8001b00 <HAL_RCC_OscConfig+0x1cc>
 8001b5e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001b60:	f022 0201 	bic.w	r2, r2, #1
 8001b64:	672a      	str	r2, [r5, #112]	; 0x70
 8001b66:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001b68:	f022 0204 	bic.w	r2, r2, #4
 8001b6c:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1ca      	bne.n	8001b08 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8001b72:	f7fe fcfb 	bl	800056c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b76:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001b7a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b7c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001b7e:	0798      	lsls	r0, r3, #30
 8001b80:	d5cb      	bpl.n	8001b1a <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b82:	f7fe fcf3 	bl	800056c <HAL_GetTick>
 8001b86:	1bc0      	subs	r0, r0, r7
 8001b88:	4540      	cmp	r0, r8
 8001b8a:	d9f7      	bls.n	8001b7c <HAL_RCC_OscConfig+0x248>
 8001b8c:	e719      	b.n	80019c2 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b8e:	f7fe fced 	bl	800056c <HAL_GetTick>
 8001b92:	1bc0      	subs	r0, r0, r7
 8001b94:	4540      	cmp	r0, r8
 8001b96:	d9bd      	bls.n	8001b14 <HAL_RCC_OscConfig+0x1e0>
 8001b98:	e713      	b.n	80019c2 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b9a:	4d1b      	ldr	r5, [pc, #108]	; (8001c08 <HAL_RCC_OscConfig+0x2d4>)
 8001b9c:	68ab      	ldr	r3, [r5, #8]
 8001b9e:	f003 030c 	and.w	r3, r3, #12
 8001ba2:	2b08      	cmp	r3, #8
 8001ba4:	f43f aeca 	beq.w	800193c <HAL_RCC_OscConfig+0x8>
 8001ba8:	4e1b      	ldr	r6, [pc, #108]	; (8001c18 <HAL_RCC_OscConfig+0x2e4>)
 8001baa:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bac:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001bae:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bb0:	d134      	bne.n	8001c1c <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8001bb2:	f7fe fcdb 	bl	800056c <HAL_GetTick>
 8001bb6:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bb8:	682b      	ldr	r3, [r5, #0]
 8001bba:	0199      	lsls	r1, r3, #6
 8001bbc:	d41e      	bmi.n	8001bfc <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001bbe:	6a22      	ldr	r2, [r4, #32]
 8001bc0:	69e3      	ldr	r3, [r4, #28]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001bc6:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001bca:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001bcc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001bd0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bd2:	4c0d      	ldr	r4, [pc, #52]	; (8001c08 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001bd4:	0852      	lsrs	r2, r2, #1
 8001bd6:	3a01      	subs	r2, #1
 8001bd8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001bdc:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001bde:	2301      	movs	r3, #1
 8001be0:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001be2:	f7fe fcc3 	bl	800056c <HAL_GetTick>
 8001be6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001be8:	6823      	ldr	r3, [r4, #0]
 8001bea:	019a      	lsls	r2, r3, #6
 8001bec:	f53f aebc 	bmi.w	8001968 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bf0:	f7fe fcbc 	bl	800056c <HAL_GetTick>
 8001bf4:	1b40      	subs	r0, r0, r5
 8001bf6:	2802      	cmp	r0, #2
 8001bf8:	d9f6      	bls.n	8001be8 <HAL_RCC_OscConfig+0x2b4>
 8001bfa:	e6e2      	b.n	80019c2 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bfc:	f7fe fcb6 	bl	800056c <HAL_GetTick>
 8001c00:	1bc0      	subs	r0, r0, r7
 8001c02:	2802      	cmp	r0, #2
 8001c04:	d9d8      	bls.n	8001bb8 <HAL_RCC_OscConfig+0x284>
 8001c06:	e6dc      	b.n	80019c2 <HAL_RCC_OscConfig+0x8e>
 8001c08:	40023800 	.word	0x40023800
 8001c0c:	42470000 	.word	0x42470000
 8001c10:	42470e80 	.word	0x42470e80
 8001c14:	40007000 	.word	0x40007000
 8001c18:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8001c1c:	f7fe fca6 	bl	800056c <HAL_GetTick>
 8001c20:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c22:	682b      	ldr	r3, [r5, #0]
 8001c24:	019b      	lsls	r3, r3, #6
 8001c26:	f57f ae9f 	bpl.w	8001968 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c2a:	f7fe fc9f 	bl	800056c <HAL_GetTick>
 8001c2e:	1b00      	subs	r0, r0, r4
 8001c30:	2802      	cmp	r0, #2
 8001c32:	d9f6      	bls.n	8001c22 <HAL_RCC_OscConfig+0x2ee>
 8001c34:	e6c5      	b.n	80019c2 <HAL_RCC_OscConfig+0x8e>
 8001c36:	bf00      	nop

08001c38 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c38:	4913      	ldr	r1, [pc, #76]	; (8001c88 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001c3a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c3c:	688b      	ldr	r3, [r1, #8]
 8001c3e:	f003 030c 	and.w	r3, r3, #12
 8001c42:	2b04      	cmp	r3, #4
 8001c44:	d003      	beq.n	8001c4e <HAL_RCC_GetSysClockFreq+0x16>
 8001c46:	2b08      	cmp	r3, #8
 8001c48:	d003      	beq.n	8001c52 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c4a:	4810      	ldr	r0, [pc, #64]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001c4c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001c4e:	4810      	ldr	r0, [pc, #64]	; (8001c90 <HAL_RCC_GetSysClockFreq+0x58>)
 8001c50:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c52:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c54:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c56:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c58:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c5c:	bf14      	ite	ne
 8001c5e:	480c      	ldrne	r0, [pc, #48]	; (8001c90 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c60:	480a      	ldreq	r0, [pc, #40]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c62:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001c66:	bf18      	it	ne
 8001c68:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c6a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c6e:	fba1 0100 	umull	r0, r1, r1, r0
 8001c72:	f7fe faa9 	bl	80001c8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c76:	4b04      	ldr	r3, [pc, #16]	; (8001c88 <HAL_RCC_GetSysClockFreq+0x50>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001c7e:	3301      	adds	r3, #1
 8001c80:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001c82:	fbb0 f0f3 	udiv	r0, r0, r3
 8001c86:	bd08      	pop	{r3, pc}
 8001c88:	40023800 	.word	0x40023800
 8001c8c:	00f42400 	.word	0x00f42400
 8001c90:	007a1200 	.word	0x007a1200

08001c94 <HAL_RCC_ClockConfig>:
{
 8001c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c98:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001c9a:	4604      	mov	r4, r0
 8001c9c:	b910      	cbnz	r0, 8001ca4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001c9e:	2001      	movs	r0, #1
 8001ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ca4:	4b44      	ldr	r3, [pc, #272]	; (8001db8 <HAL_RCC_ClockConfig+0x124>)
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	f002 020f 	and.w	r2, r2, #15
 8001cac:	428a      	cmp	r2, r1
 8001cae:	d328      	bcc.n	8001d02 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cb0:	6821      	ldr	r1, [r4, #0]
 8001cb2:	078f      	lsls	r7, r1, #30
 8001cb4:	d42d      	bmi.n	8001d12 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cb6:	07c8      	lsls	r0, r1, #31
 8001cb8:	d440      	bmi.n	8001d3c <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cba:	4b3f      	ldr	r3, [pc, #252]	; (8001db8 <HAL_RCC_ClockConfig+0x124>)
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	f002 020f 	and.w	r2, r2, #15
 8001cc2:	4295      	cmp	r5, r2
 8001cc4:	d366      	bcc.n	8001d94 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cc6:	6822      	ldr	r2, [r4, #0]
 8001cc8:	0751      	lsls	r1, r2, #29
 8001cca:	d46c      	bmi.n	8001da6 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ccc:	0713      	lsls	r3, r2, #28
 8001cce:	d507      	bpl.n	8001ce0 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cd0:	4a3a      	ldr	r2, [pc, #232]	; (8001dbc <HAL_RCC_ClockConfig+0x128>)
 8001cd2:	6921      	ldr	r1, [r4, #16]
 8001cd4:	6893      	ldr	r3, [r2, #8]
 8001cd6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001cda:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001cde:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ce0:	f7ff ffaa 	bl	8001c38 <HAL_RCC_GetSysClockFreq>
 8001ce4:	4b35      	ldr	r3, [pc, #212]	; (8001dbc <HAL_RCC_ClockConfig+0x128>)
 8001ce6:	4a36      	ldr	r2, [pc, #216]	; (8001dc0 <HAL_RCC_ClockConfig+0x12c>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001cee:	5cd3      	ldrb	r3, [r2, r3]
 8001cf0:	40d8      	lsrs	r0, r3
 8001cf2:	4b34      	ldr	r3, [pc, #208]	; (8001dc4 <HAL_RCC_ClockConfig+0x130>)
 8001cf4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001cf6:	2000      	movs	r0, #0
 8001cf8:	f7fe fbee 	bl	80004d8 <HAL_InitTick>
  return HAL_OK;
 8001cfc:	2000      	movs	r0, #0
 8001cfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d02:	b2ca      	uxtb	r2, r1
 8001d04:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 030f 	and.w	r3, r3, #15
 8001d0c:	4299      	cmp	r1, r3
 8001d0e:	d1c6      	bne.n	8001c9e <HAL_RCC_ClockConfig+0xa>
 8001d10:	e7ce      	b.n	8001cb0 <HAL_RCC_ClockConfig+0x1c>
 8001d12:	4b2a      	ldr	r3, [pc, #168]	; (8001dbc <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d14:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d18:	bf1e      	ittt	ne
 8001d1a:	689a      	ldrne	r2, [r3, #8]
 8001d1c:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001d20:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d22:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d24:	bf42      	ittt	mi
 8001d26:	689a      	ldrmi	r2, [r3, #8]
 8001d28:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001d2c:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d2e:	689a      	ldr	r2, [r3, #8]
 8001d30:	68a0      	ldr	r0, [r4, #8]
 8001d32:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001d36:	4302      	orrs	r2, r0
 8001d38:	609a      	str	r2, [r3, #8]
 8001d3a:	e7bc      	b.n	8001cb6 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d3c:	6862      	ldr	r2, [r4, #4]
 8001d3e:	4b1f      	ldr	r3, [pc, #124]	; (8001dbc <HAL_RCC_ClockConfig+0x128>)
 8001d40:	2a01      	cmp	r2, #1
 8001d42:	d11d      	bne.n	8001d80 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d4a:	d0a8      	beq.n	8001c9e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d4c:	4e1b      	ldr	r6, [pc, #108]	; (8001dbc <HAL_RCC_ClockConfig+0x128>)
 8001d4e:	68b3      	ldr	r3, [r6, #8]
 8001d50:	f023 0303 	bic.w	r3, r3, #3
 8001d54:	4313      	orrs	r3, r2
 8001d56:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001d58:	f7fe fc08 	bl	800056c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d5c:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001d60:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d62:	68b3      	ldr	r3, [r6, #8]
 8001d64:	6862      	ldr	r2, [r4, #4]
 8001d66:	f003 030c 	and.w	r3, r3, #12
 8001d6a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001d6e:	d0a4      	beq.n	8001cba <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d70:	f7fe fbfc 	bl	800056c <HAL_GetTick>
 8001d74:	1bc0      	subs	r0, r0, r7
 8001d76:	4540      	cmp	r0, r8
 8001d78:	d9f3      	bls.n	8001d62 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8001d7a:	2003      	movs	r0, #3
}
 8001d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d80:	1e91      	subs	r1, r2, #2
 8001d82:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d84:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d86:	d802      	bhi.n	8001d8e <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d88:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001d8c:	e7dd      	b.n	8001d4a <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d8e:	f013 0f02 	tst.w	r3, #2
 8001d92:	e7da      	b.n	8001d4a <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d94:	b2ea      	uxtb	r2, r5
 8001d96:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 030f 	and.w	r3, r3, #15
 8001d9e:	429d      	cmp	r5, r3
 8001da0:	f47f af7d 	bne.w	8001c9e <HAL_RCC_ClockConfig+0xa>
 8001da4:	e78f      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001da6:	4905      	ldr	r1, [pc, #20]	; (8001dbc <HAL_RCC_ClockConfig+0x128>)
 8001da8:	68e0      	ldr	r0, [r4, #12]
 8001daa:	688b      	ldr	r3, [r1, #8]
 8001dac:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001db0:	4303      	orrs	r3, r0
 8001db2:	608b      	str	r3, [r1, #8]
 8001db4:	e78a      	b.n	8001ccc <HAL_RCC_ClockConfig+0x38>
 8001db6:	bf00      	nop
 8001db8:	40023c00 	.word	0x40023c00
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	080037ae 	.word	0x080037ae
 8001dc4:	20000008 	.word	0x20000008

08001dc8 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001dc8:	4b01      	ldr	r3, [pc, #4]	; (8001dd0 <HAL_RCC_GetHCLKFreq+0x8>)
 8001dca:	6818      	ldr	r0, [r3, #0]
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	20000008 	.word	0x20000008

08001dd4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001dd4:	4b04      	ldr	r3, [pc, #16]	; (8001de8 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001dd6:	4a05      	ldr	r2, [pc, #20]	; (8001dec <HAL_RCC_GetPCLK1Freq+0x18>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001dde:	5cd3      	ldrb	r3, [r2, r3]
 8001de0:	4a03      	ldr	r2, [pc, #12]	; (8001df0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001de2:	6810      	ldr	r0, [r2, #0]
}
 8001de4:	40d8      	lsrs	r0, r3
 8001de6:	4770      	bx	lr
 8001de8:	40023800 	.word	0x40023800
 8001dec:	080037be 	.word	0x080037be
 8001df0:	20000008 	.word	0x20000008

08001df4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001df4:	4b04      	ldr	r3, [pc, #16]	; (8001e08 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001df6:	4a05      	ldr	r2, [pc, #20]	; (8001e0c <HAL_RCC_GetPCLK2Freq+0x18>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001dfe:	5cd3      	ldrb	r3, [r2, r3]
 8001e00:	4a03      	ldr	r2, [pc, #12]	; (8001e10 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001e02:	6810      	ldr	r0, [r2, #0]
}
 8001e04:	40d8      	lsrs	r0, r3
 8001e06:	4770      	bx	lr
 8001e08:	40023800 	.word	0x40023800
 8001e0c:	080037be 	.word	0x080037be
 8001e10:	20000008 	.word	0x20000008

08001e14 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e14:	6a03      	ldr	r3, [r0, #32]
 8001e16:	f023 0301 	bic.w	r3, r3, #1
 8001e1a:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e1c:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001e1e:	6842      	ldr	r2, [r0, #4]
{
 8001e20:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001e22:	6984      	ldr	r4, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001e24:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001e26:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001e2a:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001e2c:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8001e2e:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8001e32:	4323      	orrs	r3, r4

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001e34:	4c0c      	ldr	r4, [pc, #48]	; (8001e68 <TIM_OC1_SetConfig+0x54>)
 8001e36:	42a0      	cmp	r0, r4
 8001e38:	d009      	beq.n	8001e4e <TIM_OC1_SetConfig+0x3a>
 8001e3a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001e3e:	42a0      	cmp	r0, r4
 8001e40:	d005      	beq.n	8001e4e <TIM_OC1_SetConfig+0x3a>
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e42:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001e44:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001e46:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8001e48:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001e4a:	6203      	str	r3, [r0, #32]
} 
 8001e4c:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= OC_Config->OCNPolarity;
 8001e4e:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8001e50:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001e52:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001e56:	4323      	orrs	r3, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001e58:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001e5a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8001e5e:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8001e60:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001e64:	4322      	orrs	r2, r4
 8001e66:	e7ec      	b.n	8001e42 <TIM_OC1_SetConfig+0x2e>
 8001e68:	40010000 	.word	0x40010000

08001e6c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001e6c:	6a03      	ldr	r3, [r0, #32]
 8001e6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e72:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e74:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001e76:	6842      	ldr	r2, [r0, #4]
{
 8001e78:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001e7a:	69c4      	ldr	r4, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001e7c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8001e7e:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001e82:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001e84:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8001e86:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001e8a:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001e8e:	4c0e      	ldr	r4, [pc, #56]	; (8001ec8 <TIM_OC3_SetConfig+0x5c>)
 8001e90:	42a0      	cmp	r0, r4
 8001e92:	d009      	beq.n	8001ea8 <TIM_OC3_SetConfig+0x3c>
 8001e94:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001e98:	42a0      	cmp	r0, r4
 8001e9a:	d005      	beq.n	8001ea8 <TIM_OC3_SetConfig+0x3c>
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e9c:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001e9e:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001ea0:	61c5      	str	r5, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8001ea2:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001ea4:	6203      	str	r3, [r0, #32]
}
 8001ea6:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001ea8:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001eaa:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001eac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001eb0:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001eb4:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001eb6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001eba:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8001ebc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001ec0:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 8001ec4:	e7ea      	b.n	8001e9c <TIM_OC3_SetConfig+0x30>
 8001ec6:	bf00      	nop
 8001ec8:	40010000 	.word	0x40010000

08001ecc <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001ecc:	6a03      	ldr	r3, [r0, #32]
 8001ece:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ed2:	6203      	str	r3, [r0, #32]
{
 8001ed4:	b530      	push	{r4, r5, lr}
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ed6:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001ed8:	6843      	ldr	r3, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001eda:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001edc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001ede:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001ee2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001ee6:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001ee8:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001eec:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001ef0:	4d09      	ldr	r5, [pc, #36]	; (8001f18 <TIM_OC4_SetConfig+0x4c>)
 8001ef2:	42a8      	cmp	r0, r5
 8001ef4:	d009      	beq.n	8001f0a <TIM_OC4_SetConfig+0x3e>
 8001ef6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001efa:	42a8      	cmp	r0, r5
 8001efc:	d005      	beq.n	8001f0a <TIM_OC4_SetConfig+0x3e>
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001efe:	6043      	str	r3, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001f00:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001f02:	61c2      	str	r2, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8001f04:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f06:	6204      	str	r4, [r0, #32]
}
 8001f08:	bd30      	pop	{r4, r5, pc}
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001f0a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001f0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001f10:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8001f14:	e7f3      	b.n	8001efe <TIM_OC4_SetConfig+0x32>
 8001f16:	bf00      	nop
 8001f18:	40010000 	.word	0x40010000

08001f1c <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f1c:	6803      	ldr	r3, [r0, #0]
 8001f1e:	68da      	ldr	r2, [r3, #12]
 8001f20:	f042 0201 	orr.w	r2, r2, #1
 8001f24:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	f042 0201 	orr.w	r2, r2, #1
 8001f2c:	601a      	str	r2, [r3, #0]
}
 8001f2e:	2000      	movs	r0, #0
 8001f30:	4770      	bx	lr

08001f32 <HAL_TIM_PWM_MspInit>:
 8001f32:	4770      	bx	lr

08001f34 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001f34:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001f38:	2b01      	cmp	r3, #1
{
 8001f3a:	b570      	push	{r4, r5, r6, lr}
 8001f3c:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8001f40:	d01c      	beq.n	8001f7c <HAL_TIM_ConfigClockSource+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 8001f42:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  tmpsmcr = htim->Instance->SMCR;
 8001f46:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8001f48:	2201      	movs	r2, #1
 8001f4a:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  tmpsmcr = htim->Instance->SMCR;
 8001f4e:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f50:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001f54:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001f58:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8001f5a:	680a      	ldr	r2, [r1, #0]
 8001f5c:	2a40      	cmp	r2, #64	; 0x40
 8001f5e:	d079      	beq.n	8002054 <HAL_TIM_ConfigClockSource+0x120>
 8001f60:	d819      	bhi.n	8001f96 <HAL_TIM_ConfigClockSource+0x62>
 8001f62:	2a10      	cmp	r2, #16
 8001f64:	f000 8093 	beq.w	800208e <HAL_TIM_ConfigClockSource+0x15a>
 8001f68:	d80a      	bhi.n	8001f80 <HAL_TIM_ConfigClockSource+0x4c>
 8001f6a:	2a00      	cmp	r2, #0
 8001f6c:	f000 8089 	beq.w	8002082 <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 8001f70:	2301      	movs	r3, #1
 8001f72:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8001f76:	2300      	movs	r3, #0
 8001f78:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8001f7c:	4618      	mov	r0, r3
}
 8001f7e:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001f80:	2a20      	cmp	r2, #32
 8001f82:	f000 808a 	beq.w	800209a <HAL_TIM_ConfigClockSource+0x166>
 8001f86:	2a30      	cmp	r2, #48	; 0x30
 8001f88:	d1f2      	bne.n	8001f70 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001f8a:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001f8c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001f90:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8001f94:	e036      	b.n	8002004 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8001f96:	2a70      	cmp	r2, #112	; 0x70
 8001f98:	d036      	beq.n	8002008 <HAL_TIM_ConfigClockSource+0xd4>
 8001f9a:	d81b      	bhi.n	8001fd4 <HAL_TIM_ConfigClockSource+0xa0>
 8001f9c:	2a50      	cmp	r2, #80	; 0x50
 8001f9e:	d042      	beq.n	8002026 <HAL_TIM_ConfigClockSource+0xf2>
 8001fa0:	2a60      	cmp	r2, #96	; 0x60
 8001fa2:	d1e5      	bne.n	8001f70 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001fa4:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8001fa6:	684d      	ldr	r5, [r1, #4]
 8001fa8:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001faa:	f024 0410 	bic.w	r4, r4, #16
 8001fae:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001fb0:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8001fb2:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001fb4:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001fb8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001fbc:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001fc0:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001fc4:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8001fc6:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001fc8:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001fca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001fce:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8001fd2:	e017      	b.n	8002004 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8001fd4:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001fd8:	d011      	beq.n	8001ffe <HAL_TIM_ConfigClockSource+0xca>
 8001fda:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001fde:	d1c7      	bne.n	8001f70 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001fe0:	688a      	ldr	r2, [r1, #8]
 8001fe2:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001fe4:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001fe6:	68c9      	ldr	r1, [r1, #12]
 8001fe8:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001fea:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001fee:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001ff2:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001ff4:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001ff6:	689a      	ldr	r2, [r3, #8]
 8001ff8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ffc:	e002      	b.n	8002004 <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001ffe:	689a      	ldr	r2, [r3, #8]
 8002000:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8002004:	609a      	str	r2, [r3, #8]
 8002006:	e7b3      	b.n	8001f70 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002008:	688a      	ldr	r2, [r1, #8]
 800200a:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800200c:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800200e:	68c9      	ldr	r1, [r1, #12]
 8002010:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002012:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002016:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800201a:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 800201c:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 800201e:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002020:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8002024:	e7ee      	b.n	8002004 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8002026:	684c      	ldr	r4, [r1, #4]
 8002028:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800202a:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800202c:	6a1d      	ldr	r5, [r3, #32]
 800202e:	f025 0501 	bic.w	r5, r5, #1
 8002032:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8002034:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002036:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800203a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800203e:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8002042:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8002044:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002046:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8002048:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800204a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800204e:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8002052:	e7d7      	b.n	8002004 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8002054:	684c      	ldr	r4, [r1, #4]
 8002056:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002058:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800205a:	6a1d      	ldr	r5, [r3, #32]
 800205c:	f025 0501 	bic.w	r5, r5, #1
 8002060:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8002062:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002064:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002068:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800206c:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8002070:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8002072:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002074:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8002076:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002078:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800207c:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8002080:	e7c0      	b.n	8002004 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8002082:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002084:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002088:	f042 0207 	orr.w	r2, r2, #7
 800208c:	e7ba      	b.n	8002004 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 800208e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002090:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002094:	f042 0217 	orr.w	r2, r2, #23
 8002098:	e7b4      	b.n	8002004 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 800209a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800209c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80020a0:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 80020a4:	e7ae      	b.n	8002004 <HAL_TIM_ConfigClockSource+0xd0>

080020a6 <HAL_TIM_OC_DelayElapsedCallback>:
 80020a6:	4770      	bx	lr

080020a8 <HAL_TIM_IC_CaptureCallback>:
 80020a8:	4770      	bx	lr

080020aa <HAL_TIM_PWM_PulseFinishedCallback>:
 80020aa:	4770      	bx	lr

080020ac <HAL_TIM_TriggerCallback>:
 80020ac:	4770      	bx	lr

080020ae <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020ae:	6803      	ldr	r3, [r0, #0]
 80020b0:	691a      	ldr	r2, [r3, #16]
 80020b2:	0791      	lsls	r1, r2, #30
{
 80020b4:	b510      	push	{r4, lr}
 80020b6:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020b8:	d50e      	bpl.n	80020d8 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80020ba:	68da      	ldr	r2, [r3, #12]
 80020bc:	0792      	lsls	r2, r2, #30
 80020be:	d50b      	bpl.n	80020d8 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80020c0:	f06f 0202 	mvn.w	r2, #2
 80020c4:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020c6:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020c8:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020ca:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020cc:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020ce:	d077      	beq.n	80021c0 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 80020d0:	f7ff ffea 	bl	80020a8 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020d4:	2300      	movs	r3, #0
 80020d6:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80020d8:	6823      	ldr	r3, [r4, #0]
 80020da:	691a      	ldr	r2, [r3, #16]
 80020dc:	0750      	lsls	r0, r2, #29
 80020de:	d510      	bpl.n	8002102 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80020e0:	68da      	ldr	r2, [r3, #12]
 80020e2:	0751      	lsls	r1, r2, #29
 80020e4:	d50d      	bpl.n	8002102 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80020e6:	f06f 0204 	mvn.w	r2, #4
 80020ea:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020ec:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020ee:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020f0:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020f4:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 80020f6:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020f8:	d068      	beq.n	80021cc <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 80020fa:	f7ff ffd5 	bl	80020a8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020fe:	2300      	movs	r3, #0
 8002100:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002102:	6823      	ldr	r3, [r4, #0]
 8002104:	691a      	ldr	r2, [r3, #16]
 8002106:	0712      	lsls	r2, r2, #28
 8002108:	d50f      	bpl.n	800212a <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800210a:	68da      	ldr	r2, [r3, #12]
 800210c:	0710      	lsls	r0, r2, #28
 800210e:	d50c      	bpl.n	800212a <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002110:	f06f 0208 	mvn.w	r2, #8
 8002114:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002116:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002118:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800211a:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800211c:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 800211e:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002120:	d05a      	beq.n	80021d8 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002122:	f7ff ffc1 	bl	80020a8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002126:	2300      	movs	r3, #0
 8002128:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800212a:	6823      	ldr	r3, [r4, #0]
 800212c:	691a      	ldr	r2, [r3, #16]
 800212e:	06d2      	lsls	r2, r2, #27
 8002130:	d510      	bpl.n	8002154 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002132:	68da      	ldr	r2, [r3, #12]
 8002134:	06d0      	lsls	r0, r2, #27
 8002136:	d50d      	bpl.n	8002154 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002138:	f06f 0210 	mvn.w	r2, #16
 800213c:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800213e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002140:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002142:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002146:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8002148:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800214a:	d04b      	beq.n	80021e4 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 800214c:	f7ff ffac 	bl	80020a8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002150:	2300      	movs	r3, #0
 8002152:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002154:	6823      	ldr	r3, [r4, #0]
 8002156:	691a      	ldr	r2, [r3, #16]
 8002158:	07d1      	lsls	r1, r2, #31
 800215a:	d508      	bpl.n	800216e <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800215c:	68da      	ldr	r2, [r3, #12]
 800215e:	07d2      	lsls	r2, r2, #31
 8002160:	d505      	bpl.n	800216e <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002162:	f06f 0201 	mvn.w	r2, #1
 8002166:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002168:	4620      	mov	r0, r4
 800216a:	f000 fe9f 	bl	8002eac <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800216e:	6823      	ldr	r3, [r4, #0]
 8002170:	691a      	ldr	r2, [r3, #16]
 8002172:	0610      	lsls	r0, r2, #24
 8002174:	d508      	bpl.n	8002188 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002176:	68da      	ldr	r2, [r3, #12]
 8002178:	0611      	lsls	r1, r2, #24
 800217a:	d505      	bpl.n	8002188 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800217c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002180:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002182:	4620      	mov	r0, r4
 8002184:	f000 f9cf 	bl	8002526 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002188:	6823      	ldr	r3, [r4, #0]
 800218a:	691a      	ldr	r2, [r3, #16]
 800218c:	0652      	lsls	r2, r2, #25
 800218e:	d508      	bpl.n	80021a2 <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002190:	68da      	ldr	r2, [r3, #12]
 8002192:	0650      	lsls	r0, r2, #25
 8002194:	d505      	bpl.n	80021a2 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002196:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800219a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800219c:	4620      	mov	r0, r4
 800219e:	f7ff ff85 	bl	80020ac <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80021a2:	6823      	ldr	r3, [r4, #0]
 80021a4:	691a      	ldr	r2, [r3, #16]
 80021a6:	0691      	lsls	r1, r2, #26
 80021a8:	d522      	bpl.n	80021f0 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80021aa:	68da      	ldr	r2, [r3, #12]
 80021ac:	0692      	lsls	r2, r2, #26
 80021ae:	d51f      	bpl.n	80021f0 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80021b0:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 80021b4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80021b6:	611a      	str	r2, [r3, #16]
}
 80021b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 80021bc:	f000 b9b2 	b.w	8002524 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021c0:	f7ff ff71 	bl	80020a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021c4:	4620      	mov	r0, r4
 80021c6:	f7ff ff70 	bl	80020aa <HAL_TIM_PWM_PulseFinishedCallback>
 80021ca:	e783      	b.n	80020d4 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021cc:	f7ff ff6b 	bl	80020a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021d0:	4620      	mov	r0, r4
 80021d2:	f7ff ff6a 	bl	80020aa <HAL_TIM_PWM_PulseFinishedCallback>
 80021d6:	e792      	b.n	80020fe <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021d8:	f7ff ff65 	bl	80020a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80021dc:	4620      	mov	r0, r4
 80021de:	f7ff ff64 	bl	80020aa <HAL_TIM_PWM_PulseFinishedCallback>
 80021e2:	e7a0      	b.n	8002126 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021e4:	f7ff ff5f 	bl	80020a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021e8:	4620      	mov	r0, r4
 80021ea:	f7ff ff5e 	bl	80020aa <HAL_TIM_PWM_PulseFinishedCallback>
 80021ee:	e7af      	b.n	8002150 <HAL_TIM_IRQHandler+0xa2>
 80021f0:	bd10      	pop	{r4, pc}
	...

080021f4 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80021f4:	4a2e      	ldr	r2, [pc, #184]	; (80022b0 <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 80021f6:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80021f8:	4290      	cmp	r0, r2
 80021fa:	d012      	beq.n	8002222 <TIM_Base_SetConfig+0x2e>
 80021fc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002200:	d00f      	beq.n	8002222 <TIM_Base_SetConfig+0x2e>
 8002202:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002206:	4290      	cmp	r0, r2
 8002208:	d00b      	beq.n	8002222 <TIM_Base_SetConfig+0x2e>
 800220a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800220e:	4290      	cmp	r0, r2
 8002210:	d007      	beq.n	8002222 <TIM_Base_SetConfig+0x2e>
 8002212:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002216:	4290      	cmp	r0, r2
 8002218:	d003      	beq.n	8002222 <TIM_Base_SetConfig+0x2e>
 800221a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800221e:	4290      	cmp	r0, r2
 8002220:	d11d      	bne.n	800225e <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 8002222:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002224:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002228:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800222a:	4a21      	ldr	r2, [pc, #132]	; (80022b0 <TIM_Base_SetConfig+0xbc>)
 800222c:	4290      	cmp	r0, r2
 800222e:	d104      	bne.n	800223a <TIM_Base_SetConfig+0x46>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002230:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002232:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002236:	4313      	orrs	r3, r2
 8002238:	e028      	b.n	800228c <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800223a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800223e:	d0f7      	beq.n	8002230 <TIM_Base_SetConfig+0x3c>
 8002240:	4a1c      	ldr	r2, [pc, #112]	; (80022b4 <TIM_Base_SetConfig+0xc0>)
 8002242:	4290      	cmp	r0, r2
 8002244:	d0f4      	beq.n	8002230 <TIM_Base_SetConfig+0x3c>
 8002246:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800224a:	4290      	cmp	r0, r2
 800224c:	d0f0      	beq.n	8002230 <TIM_Base_SetConfig+0x3c>
 800224e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002252:	4290      	cmp	r0, r2
 8002254:	d0ec      	beq.n	8002230 <TIM_Base_SetConfig+0x3c>
 8002256:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800225a:	4290      	cmp	r0, r2
 800225c:	d0e8      	beq.n	8002230 <TIM_Base_SetConfig+0x3c>
 800225e:	4a16      	ldr	r2, [pc, #88]	; (80022b8 <TIM_Base_SetConfig+0xc4>)
 8002260:	4290      	cmp	r0, r2
 8002262:	d0e5      	beq.n	8002230 <TIM_Base_SetConfig+0x3c>
 8002264:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002268:	4290      	cmp	r0, r2
 800226a:	d0e1      	beq.n	8002230 <TIM_Base_SetConfig+0x3c>
 800226c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002270:	4290      	cmp	r0, r2
 8002272:	d0dd      	beq.n	8002230 <TIM_Base_SetConfig+0x3c>
 8002274:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002278:	4290      	cmp	r0, r2
 800227a:	d0d9      	beq.n	8002230 <TIM_Base_SetConfig+0x3c>
 800227c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002280:	4290      	cmp	r0, r2
 8002282:	d0d5      	beq.n	8002230 <TIM_Base_SetConfig+0x3c>
 8002284:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002288:	4290      	cmp	r0, r2
 800228a:	d0d1      	beq.n	8002230 <TIM_Base_SetConfig+0x3c>
  TIMx->CR1 = tmpcr1;
 800228c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800228e:	688b      	ldr	r3, [r1, #8]
 8002290:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002292:	680b      	ldr	r3, [r1, #0]
 8002294:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8002296:	4b06      	ldr	r3, [pc, #24]	; (80022b0 <TIM_Base_SetConfig+0xbc>)
 8002298:	4298      	cmp	r0, r3
 800229a:	d006      	beq.n	80022aa <TIM_Base_SetConfig+0xb6>
 800229c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022a0:	4298      	cmp	r0, r3
 80022a2:	d002      	beq.n	80022aa <TIM_Base_SetConfig+0xb6>
  TIMx->EGR = TIM_EGR_UG;
 80022a4:	2301      	movs	r3, #1
 80022a6:	6143      	str	r3, [r0, #20]
}
 80022a8:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 80022aa:	690b      	ldr	r3, [r1, #16]
 80022ac:	6303      	str	r3, [r0, #48]	; 0x30
 80022ae:	e7f9      	b.n	80022a4 <TIM_Base_SetConfig+0xb0>
 80022b0:	40010000 	.word	0x40010000
 80022b4:	40000400 	.word	0x40000400
 80022b8:	40014000 	.word	0x40014000

080022bc <HAL_TIM_Base_Init>:
{ 
 80022bc:	b510      	push	{r4, lr}
  if(htim == NULL)
 80022be:	4604      	mov	r4, r0
 80022c0:	b1a0      	cbz	r0, 80022ec <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80022c2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80022c6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80022ca:	b91b      	cbnz	r3, 80022d4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80022cc:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 80022d0:	f000 ffbe 	bl	8003250 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80022d4:	2302      	movs	r3, #2
 80022d6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80022da:	6820      	ldr	r0, [r4, #0]
 80022dc:	1d21      	adds	r1, r4, #4
 80022de:	f7ff ff89 	bl	80021f4 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80022e2:	2301      	movs	r3, #1
 80022e4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 80022e8:	2000      	movs	r0, #0
 80022ea:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80022ec:	2001      	movs	r0, #1
}
 80022ee:	bd10      	pop	{r4, pc}

080022f0 <HAL_TIM_PWM_Init>:
{
 80022f0:	b510      	push	{r4, lr}
  if(htim == NULL)
 80022f2:	4604      	mov	r4, r0
 80022f4:	b1a0      	cbz	r0, 8002320 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80022f6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80022fa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80022fe:	b91b      	cbnz	r3, 8002308 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002300:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 8002304:	f7ff fe15 	bl	8001f32 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;  
 8002308:	2302      	movs	r3, #2
 800230a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800230e:	6820      	ldr	r0, [r4, #0]
 8002310:	1d21      	adds	r1, r4, #4
 8002312:	f7ff ff6f 	bl	80021f4 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002316:	2301      	movs	r3, #1
 8002318:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 800231c:	2000      	movs	r0, #0
 800231e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002320:	2001      	movs	r0, #1
}  
 8002322:	bd10      	pop	{r4, pc}

08002324 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002324:	6a03      	ldr	r3, [r0, #32]
 8002326:	f023 0310 	bic.w	r3, r3, #16
 800232a:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800232c:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 800232e:	6842      	ldr	r2, [r0, #4]
{
 8002330:	b570      	push	{r4, r5, r6, lr}
  tmpccmrx = TIMx->CCMR1;
 8002332:	6984      	ldr	r4, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002334:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002336:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800233a:	ea44 2505 	orr.w	r5, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800233e:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8002340:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002344:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002348:	4c0d      	ldr	r4, [pc, #52]	; (8002380 <TIM_OC2_SetConfig+0x5c>)
 800234a:	42a0      	cmp	r0, r4
 800234c:	d009      	beq.n	8002362 <TIM_OC2_SetConfig+0x3e>
 800234e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002352:	42a0      	cmp	r0, r4
 8002354:	d005      	beq.n	8002362 <TIM_OC2_SetConfig+0x3e>
  TIMx->CR2 = tmpcr2;
 8002356:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8002358:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 800235a:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800235c:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800235e:	6203      	str	r3, [r0, #32]
}
 8002360:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002362:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002364:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 8002366:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800236a:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800236e:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002370:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002374:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8002376:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800237a:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
 800237e:	e7ea      	b.n	8002356 <TIM_OC2_SetConfig+0x32>
 8002380:	40010000 	.word	0x40010000

08002384 <HAL_TIM_PWM_ConfigChannel>:
{
 8002384:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002386:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800238a:	2b01      	cmp	r3, #1
{
 800238c:	4604      	mov	r4, r0
 800238e:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8002392:	d025      	beq.n	80023e0 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8002394:	2301      	movs	r3, #1
 8002396:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 800239a:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  switch (Channel)
 800239e:	2a0c      	cmp	r2, #12
 80023a0:	d818      	bhi.n	80023d4 <HAL_TIM_PWM_ConfigChannel+0x50>
 80023a2:	e8df f002 	tbb	[pc, r2]
 80023a6:	1707      	.short	0x1707
 80023a8:	171e1717 	.word	0x171e1717
 80023ac:	172f1717 	.word	0x172f1717
 80023b0:	1717      	.short	0x1717
 80023b2:	40          	.byte	0x40
 80023b3:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80023b4:	6820      	ldr	r0, [r4, #0]
 80023b6:	f7ff fd2d 	bl	8001e14 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80023ba:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80023bc:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80023be:	699a      	ldr	r2, [r3, #24]
 80023c0:	f042 0208 	orr.w	r2, r2, #8
 80023c4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80023c6:	699a      	ldr	r2, [r3, #24]
 80023c8:	f022 0204 	bic.w	r2, r2, #4
 80023cc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80023ce:	699a      	ldr	r2, [r3, #24]
 80023d0:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80023d2:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 80023d4:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80023d6:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80023d8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 80023dc:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 80023e0:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80023e2:	6820      	ldr	r0, [r4, #0]
 80023e4:	f7ff ff9e 	bl	8002324 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80023e8:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80023ea:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80023ec:	699a      	ldr	r2, [r3, #24]
 80023ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80023f4:	699a      	ldr	r2, [r3, #24]
 80023f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80023fc:	699a      	ldr	r2, [r3, #24]
 80023fe:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002402:	e7e6      	b.n	80023d2 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002404:	6820      	ldr	r0, [r4, #0]
 8002406:	f7ff fd31 	bl	8001e6c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800240a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 800240c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800240e:	69da      	ldr	r2, [r3, #28]
 8002410:	f042 0208 	orr.w	r2, r2, #8
 8002414:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002416:	69da      	ldr	r2, [r3, #28]
 8002418:	f022 0204 	bic.w	r2, r2, #4
 800241c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 800241e:	69da      	ldr	r2, [r3, #28]
 8002420:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8002422:	61da      	str	r2, [r3, #28]
    break;
 8002424:	e7d6      	b.n	80023d4 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002426:	6820      	ldr	r0, [r4, #0]
 8002428:	f7ff fd50 	bl	8001ecc <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800242c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 800242e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002430:	69da      	ldr	r2, [r3, #28]
 8002432:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002436:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002438:	69da      	ldr	r2, [r3, #28]
 800243a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800243e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8002440:	69da      	ldr	r2, [r3, #28]
 8002442:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002446:	e7ec      	b.n	8002422 <HAL_TIM_PWM_ConfigChannel+0x9e>

08002448 <TIM_CCxChannelCmd>:
  TIMx->CCER &= ~tmp;
 8002448:	6a03      	ldr	r3, [r0, #32]
{
 800244a:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << Channel;
 800244c:	2401      	movs	r4, #1
 800244e:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8002450:	ea23 0304 	bic.w	r3, r3, r4
 8002454:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8002456:	6a03      	ldr	r3, [r0, #32]
 8002458:	408a      	lsls	r2, r1
 800245a:	431a      	orrs	r2, r3
 800245c:	6202      	str	r2, [r0, #32]
 800245e:	bd10      	pop	{r4, pc}

08002460 <HAL_TIM_PWM_Start>:
{
 8002460:	b510      	push	{r4, lr}
 8002462:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002464:	2201      	movs	r2, #1
 8002466:	6800      	ldr	r0, [r0, #0]
 8002468:	f7ff ffee 	bl	8002448 <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 800246c:	6823      	ldr	r3, [r4, #0]
 800246e:	4a08      	ldr	r2, [pc, #32]	; (8002490 <HAL_TIM_PWM_Start+0x30>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d003      	beq.n	800247c <HAL_TIM_PWM_Start+0x1c>
 8002474:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002478:	4293      	cmp	r3, r2
 800247a:	d103      	bne.n	8002484 <HAL_TIM_PWM_Start+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 800247c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800247e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002482:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	f042 0201 	orr.w	r2, r2, #1
 800248a:	601a      	str	r2, [r3, #0]
} 
 800248c:	2000      	movs	r0, #0
 800248e:	bd10      	pop	{r4, pc}
 8002490:	40010000 	.word	0x40010000

08002494 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8002494:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002498:	2b01      	cmp	r3, #1
{
 800249a:	b510      	push	{r4, lr}
 800249c:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 80024a0:	d018      	beq.n	80024d4 <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 80024a2:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80024a6:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 80024a8:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80024aa:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80024ac:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80024ae:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80024b2:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 80024b4:	685a      	ldr	r2, [r3, #4]
 80024b6:	4322      	orrs	r2, r4
 80024b8:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80024ba:	689a      	ldr	r2, [r3, #8]
 80024bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024c0:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80024c2:	689a      	ldr	r2, [r3, #8]
 80024c4:	430a      	orrs	r2, r1
 80024c6:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 80024c8:	2301      	movs	r3, #1
 80024ca:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 80024ce:	2300      	movs	r3, #0
 80024d0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 80024d4:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 80024d6:	bd10      	pop	{r4, pc}

080024d8 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80024d8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d01f      	beq.n	8002520 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80024e0:	68cb      	ldr	r3, [r1, #12]
 80024e2:	688a      	ldr	r2, [r1, #8]
 80024e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024e8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80024ea:	684a      	ldr	r2, [r1, #4]
 80024ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80024f0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80024f2:	680a      	ldr	r2, [r1, #0]
 80024f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80024f8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80024fa:	690a      	ldr	r2, [r1, #16]
 80024fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002500:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002502:	694a      	ldr	r2, [r1, #20]
 8002504:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002508:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800250a:	698a      	ldr	r2, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 800250c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002510:	4313      	orrs	r3, r2
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002512:	6802      	ldr	r2, [r0, #0]
 8002514:	6453      	str	r3, [r2, #68]	; 0x44
  
  __HAL_UNLOCK(htim);
 8002516:	2300      	movs	r3, #0
 8002518:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  return HAL_OK;
 800251c:	4618      	mov	r0, r3
 800251e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002520:	2002      	movs	r0, #2
}
 8002522:	4770      	bx	lr

08002524 <HAL_TIMEx_CommutationCallback>:
 8002524:	4770      	bx	lr

08002526 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002526:	4770      	bx	lr

08002528 <USART_EndRxTransfer>:
  * @retval None
  */
static void USART_EndRxTransfer(USART_HandleTypeDef *husart)
{
  /* Disable RXNE, PE and ERR interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002528:	6803      	ldr	r3, [r0, #0]
 800252a:	68da      	ldr	r2, [r3, #12]
 800252c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002530:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8002532:	695a      	ldr	r2, [r3, #20]
 8002534:	f022 0201 	bic.w	r2, r2, #1
 8002538:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 800253a:	2301      	movs	r3, #1
 800253c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 8002540:	4770      	bx	lr
	...

08002544 <HAL_USART_Init>:
{
 8002544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(husart == NULL)
 8002548:	4605      	mov	r5, r0
 800254a:	2800      	cmp	r0, #0
 800254c:	f000 808c 	beq.w	8002668 <HAL_USART_Init+0x124>
  if(husart->State == HAL_USART_STATE_RESET)
 8002550:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002554:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002558:	b91b      	cbnz	r3, 8002562 <HAL_USART_Init+0x1e>
    husart->Lock = HAL_UNLOCKED;
 800255a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_USART_MspInit(husart);
 800255e:	f001 f87f 	bl	8003660 <HAL_USART_MspInit>
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8002562:	682e      	ldr	r6, [r5, #0]
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE| husart->Init.CLKPolarity |
 8002564:	69e9      	ldr	r1, [r5, #28]
  husart->State = HAL_USART_STATE_BUSY;
 8002566:	2302      	movs	r3, #2
 8002568:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 800256c:	68f3      	ldr	r3, [r6, #12]
 800256e:	f023 030c 	bic.w	r3, r3, #12
 8002572:	60f3      	str	r3, [r6, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE| husart->Init.CLKPolarity |
 8002574:	69ab      	ldr	r3, [r5, #24]
  tmpreg = husart->Instance->CR2;
 8002576:	6932      	ldr	r2, [r6, #16]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE| husart->Init.CLKPolarity |
 8002578:	430b      	orrs	r3, r1
 800257a:	6a29      	ldr	r1, [r5, #32]
 800257c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002580:	430b      	orrs	r3, r1
 8002582:	68e9      	ldr	r1, [r5, #12]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 8002584:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE| husart->Init.CLKPolarity |
 8002588:	430b      	orrs	r3, r1
 800258a:	4313      	orrs	r3, r2
                       husart->Init.CLKPhase| husart->Init.CLKLastBit | husart->Init.StopBits);
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 800258c:	6133      	str	r3, [r6, #16]
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
     Force OVER8 bit to 1 in order to reach the max USART frequencies */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 800258e:	6929      	ldr	r1, [r5, #16]
 8002590:	68ab      	ldr	r3, [r5, #8]
  tmpreg = husart->Instance->CR1;
 8002592:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8002594:	430b      	orrs	r3, r1
 8002596:	6969      	ldr	r1, [r5, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8002598:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 800259c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80025a0:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 80025a4:	430b      	orrs	r3, r1
 80025a6:	4313      	orrs	r3, r2

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 80025a8:	60f3      	str	r3, [r6, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 80025aa:	6973      	ldr	r3, [r6, #20]
 80025ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025b0:	6173      	str	r3, [r6, #20]

  /*-------------------------- USART BRR Configuration -----------------------*/
#if defined(USART6) 
  if((husart->Instance == USART1) || (husart->Instance == USART6))
 80025b2:	4b2f      	ldr	r3, [pc, #188]	; (8002670 <HAL_USART_Init+0x12c>)
 80025b4:	429e      	cmp	r6, r3
 80025b6:	d003      	beq.n	80025c0 <HAL_USART_Init+0x7c>
 80025b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025bc:	429e      	cmp	r6, r3
 80025be:	d13b      	bne.n	8002638 <HAL_USART_Init+0xf4>
  {
    husart->Instance->BRR = USART_BRR(HAL_RCC_GetPCLK2Freq(), husart->Init.BaudRate);
 80025c0:	f7ff fc18 	bl	8001df4 <HAL_RCC_GetPCLK2Freq>
 80025c4:	686f      	ldr	r7, [r5, #4]
 80025c6:	2419      	movs	r4, #25
 80025c8:	fb04 f300 	mul.w	r3, r4, r0
 80025cc:	007f      	lsls	r7, r7, #1
 80025ce:	f04f 0864 	mov.w	r8, #100	; 0x64
 80025d2:	fbb3 f3f7 	udiv	r3, r3, r7
 80025d6:	fbb3 f3f8 	udiv	r3, r3, r8
 80025da:	011f      	lsls	r7, r3, #4
 80025dc:	f7ff fc0a 	bl	8001df4 <HAL_RCC_GetPCLK2Freq>
 80025e0:	686b      	ldr	r3, [r5, #4]
 80025e2:	4360      	muls	r0, r4
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	fbb0 f9f3 	udiv	r9, r0, r3
 80025ea:	f7ff fc03 	bl	8001df4 <HAL_RCC_GetPCLK2Freq>
    husart->Instance->BRR = USART_BRR(HAL_RCC_GetPCLK2Freq(), husart->Init.BaudRate);
  }	
#endif /* USART6 */	
  else
  {
    husart->Instance->BRR = USART_BRR(HAL_RCC_GetPCLK1Freq(), husart->Init.BaudRate);
 80025ee:	686b      	ldr	r3, [r5, #4]
 80025f0:	4360      	muls	r0, r4
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80025f8:	fbb3 f3f8 	udiv	r3, r3, r8
 80025fc:	fb08 9313 	mls	r3, r8, r3, r9
 8002600:	011b      	lsls	r3, r3, #4
 8002602:	3332      	adds	r3, #50	; 0x32
 8002604:	fbb3 f3f8 	udiv	r3, r3, r8
 8002608:	f003 030f 	and.w	r3, r3, #15
 800260c:	433b      	orrs	r3, r7
 800260e:	60b3      	str	r3, [r6, #8]
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 8002610:	682b      	ldr	r3, [r5, #0]
 8002612:	691a      	ldr	r2, [r3, #16]
 8002614:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002618:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800261a:	695a      	ldr	r2, [r3, #20]
 800261c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002620:	615a      	str	r2, [r3, #20]
  __HAL_USART_ENABLE(husart);
 8002622:	68da      	ldr	r2, [r3, #12]
 8002624:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002628:	60da      	str	r2, [r3, #12]
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800262a:	2000      	movs	r0, #0
  husart->State= HAL_USART_STATE_READY;
 800262c:	2301      	movs	r3, #1
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800262e:	6428      	str	r0, [r5, #64]	; 0x40
  husart->State= HAL_USART_STATE_READY;
 8002630:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  return HAL_OK;
 8002634:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    husart->Instance->BRR = USART_BRR(HAL_RCC_GetPCLK1Freq(), husart->Init.BaudRate);
 8002638:	f7ff fbcc 	bl	8001dd4 <HAL_RCC_GetPCLK1Freq>
 800263c:	686f      	ldr	r7, [r5, #4]
 800263e:	2419      	movs	r4, #25
 8002640:	fb04 f300 	mul.w	r3, r4, r0
 8002644:	007f      	lsls	r7, r7, #1
 8002646:	f04f 0864 	mov.w	r8, #100	; 0x64
 800264a:	fbb3 f3f7 	udiv	r3, r3, r7
 800264e:	fbb3 f3f8 	udiv	r3, r3, r8
 8002652:	011f      	lsls	r7, r3, #4
 8002654:	f7ff fbbe 	bl	8001dd4 <HAL_RCC_GetPCLK1Freq>
 8002658:	686b      	ldr	r3, [r5, #4]
 800265a:	4360      	muls	r0, r4
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	fbb0 f9f3 	udiv	r9, r0, r3
 8002662:	f7ff fbb7 	bl	8001dd4 <HAL_RCC_GetPCLK1Freq>
 8002666:	e7c2      	b.n	80025ee <HAL_USART_Init+0xaa>
    return HAL_ERROR;
 8002668:	2001      	movs	r0, #1
}
 800266a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800266e:	bf00      	nop
 8002670:	40011000 	.word	0x40011000

08002674 <HAL_USART_TxCpltCallback>:
 8002674:	4770      	bx	lr

08002676 <HAL_USART_RxCpltCallback>:
 8002676:	4770      	bx	lr

08002678 <USART_Receive_IT>:
  if(husart->State == HAL_USART_STATE_BUSY_RX)
 8002678:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800267c:	2b22      	cmp	r3, #34	; 0x22
{
 800267e:	b510      	push	{r4, lr}
  if(husart->State == HAL_USART_STATE_BUSY_RX)
 8002680:	d146      	bne.n	8002710 <USART_Receive_IT+0x98>
    if(husart->Init.WordLength == USART_WORDLENGTH_9B)
 8002682:	6883      	ldr	r3, [r0, #8]
 8002684:	6901      	ldr	r1, [r0, #16]
 8002686:	6802      	ldr	r2, [r0, #0]
 8002688:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800268c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800268e:	d12a      	bne.n	80026e6 <USART_Receive_IT+0x6e>
      if(husart->Init.Parity == USART_PARITY_NONE)
 8002690:	bb21      	cbnz	r1, 80026dc <USART_Receive_IT+0x64>
        *tmp = (uint16_t)(husart->Instance->DR & (uint16_t)0x01FF);
 8002692:	6851      	ldr	r1, [r2, #4]
 8002694:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002698:	f823 1b02 	strh.w	r1, [r3], #2
        husart->pRxBuffPtr += 1U;
 800269c:	62c3      	str	r3, [r0, #44]	; 0x2c
      if(--husart->RxXferCount != 0x00U)
 800269e:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80026a0:	3b01      	subs	r3, #1
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	8643      	strh	r3, [r0, #50]	; 0x32
 80026a6:	b113      	cbz	r3, 80026ae <USART_Receive_IT+0x36>
        husart->Instance->DR = (DUMMY_DATA & (uint16_t)0x01FF);
 80026a8:	f240 13ff 	movw	r3, #511	; 0x1ff
 80026ac:	6053      	str	r3, [r2, #4]
    if(husart->RxXferCount == 0U)
 80026ae:	8e44      	ldrh	r4, [r0, #50]	; 0x32
 80026b0:	b2a4      	uxth	r4, r4
 80026b2:	b98c      	cbnz	r4, 80026d8 <USART_Receive_IT+0x60>
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 80026b4:	6803      	ldr	r3, [r0, #0]
 80026b6:	68da      	ldr	r2, [r3, #12]
 80026b8:	f022 0220 	bic.w	r2, r2, #32
 80026bc:	60da      	str	r2, [r3, #12]
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 80026be:	68da      	ldr	r2, [r3, #12]
 80026c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026c4:	60da      	str	r2, [r3, #12]
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 80026c6:	695a      	ldr	r2, [r3, #20]
 80026c8:	f022 0201 	bic.w	r2, r2, #1
 80026cc:	615a      	str	r2, [r3, #20]
      husart->State = HAL_USART_STATE_READY;
 80026ce:	2301      	movs	r3, #1
 80026d0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_USART_RxCpltCallback(husart);
 80026d4:	f7ff ffcf 	bl	8002676 <HAL_USART_RxCpltCallback>
    if(husart->RxXferCount == 0U)
 80026d8:	2000      	movs	r0, #0
}
 80026da:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(husart->Instance->DR & (uint16_t)0x00FF);
 80026dc:	6851      	ldr	r1, [r2, #4]
 80026de:	b2c9      	uxtb	r1, r1
 80026e0:	f823 1b01 	strh.w	r1, [r3], #1
 80026e4:	e7da      	b.n	800269c <USART_Receive_IT+0x24>
      if(husart->Init.Parity == USART_PARITY_NONE)
 80026e6:	b969      	cbnz	r1, 8002704 <USART_Receive_IT+0x8c>
        *husart->pRxBuffPtr++ = (uint8_t)(husart->Instance->DR & (uint8_t)0x00FF);
 80026e8:	1c59      	adds	r1, r3, #1
 80026ea:	6852      	ldr	r2, [r2, #4]
 80026ec:	62c1      	str	r1, [r0, #44]	; 0x2c
        *husart->pRxBuffPtr++ = (uint8_t)(husart->Instance->DR & (uint8_t)0x007F);
 80026ee:	701a      	strb	r2, [r3, #0]
      if(--husart->RxXferCount != 0x00U)
 80026f0:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80026f2:	3b01      	subs	r3, #1
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	8643      	strh	r3, [r0, #50]	; 0x32
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d0d8      	beq.n	80026ae <USART_Receive_IT+0x36>
        husart->Instance->DR = (DUMMY_DATA & (uint16_t)0x00FF);
 80026fc:	6803      	ldr	r3, [r0, #0]
 80026fe:	22ff      	movs	r2, #255	; 0xff
 8002700:	605a      	str	r2, [r3, #4]
 8002702:	e7d4      	b.n	80026ae <USART_Receive_IT+0x36>
        *husart->pRxBuffPtr++ = (uint8_t)(husart->Instance->DR & (uint8_t)0x007F);
 8002704:	6852      	ldr	r2, [r2, #4]
 8002706:	1c59      	adds	r1, r3, #1
 8002708:	62c1      	str	r1, [r0, #44]	; 0x2c
 800270a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800270e:	e7ee      	b.n	80026ee <USART_Receive_IT+0x76>
    return HAL_BUSY;
 8002710:	2002      	movs	r0, #2
 8002712:	bd10      	pop	{r4, pc}

08002714 <HAL_USART_TxRxCpltCallback>:
 8002714:	4770      	bx	lr

08002716 <USART_TransmitReceive_IT>:
  if(husart->State == HAL_USART_STATE_BUSY_TX_RX)
 8002716:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800271a:	2b32      	cmp	r3, #50	; 0x32
{
 800271c:	b510      	push	{r4, lr}
  if(husart->State == HAL_USART_STATE_BUSY_TX_RX)
 800271e:	d165      	bne.n	80027ec <USART_TransmitReceive_IT+0xd6>
    if(husart->TxXferCount != 0x00U)
 8002720:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002722:	b29b      	uxth	r3, r3
 8002724:	b1e3      	cbz	r3, 8002760 <USART_TransmitReceive_IT+0x4a>
      if(__HAL_USART_GET_FLAG(husart, USART_FLAG_TXE) != RESET)
 8002726:	6802      	ldr	r2, [r0, #0]
 8002728:	6813      	ldr	r3, [r2, #0]
 800272a:	0619      	lsls	r1, r3, #24
 800272c:	d518      	bpl.n	8002760 <USART_TransmitReceive_IT+0x4a>
        if(husart->Init.WordLength == USART_WORDLENGTH_9B)
 800272e:	6883      	ldr	r3, [r0, #8]
 8002730:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002734:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002736:	d144      	bne.n	80027c2 <USART_TransmitReceive_IT+0xac>
          husart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002738:	8819      	ldrh	r1, [r3, #0]
 800273a:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800273e:	6051      	str	r1, [r2, #4]
          if(husart->Init.Parity == USART_PARITY_NONE)
 8002740:	6901      	ldr	r1, [r0, #16]
 8002742:	2900      	cmp	r1, #0
 8002744:	d13b      	bne.n	80027be <USART_TransmitReceive_IT+0xa8>
            husart->pTxBuffPtr += 2U;
 8002746:	3302      	adds	r3, #2
            husart->pTxBuffPtr += 1U;
 8002748:	6243      	str	r3, [r0, #36]	; 0x24
        husart->TxXferCount--;
 800274a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800274c:	3b01      	subs	r3, #1
 800274e:	b29b      	uxth	r3, r3
 8002750:	8543      	strh	r3, [r0, #42]	; 0x2a
        if(husart->TxXferCount == 0U)
 8002752:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002754:	b29b      	uxth	r3, r3
 8002756:	b91b      	cbnz	r3, 8002760 <USART_TransmitReceive_IT+0x4a>
          CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 8002758:	68d3      	ldr	r3, [r2, #12]
 800275a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800275e:	60d3      	str	r3, [r2, #12]
    if(husart->RxXferCount != 0x00U)
 8002760:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8002762:	b29b      	uxth	r3, r3
 8002764:	b1a3      	cbz	r3, 8002790 <USART_TransmitReceive_IT+0x7a>
      if(__HAL_USART_GET_FLAG(husart, USART_FLAG_RXNE) != RESET)
 8002766:	6802      	ldr	r2, [r0, #0]
 8002768:	6813      	ldr	r3, [r2, #0]
 800276a:	069b      	lsls	r3, r3, #26
 800276c:	d510      	bpl.n	8002790 <USART_TransmitReceive_IT+0x7a>
        if(husart->Init.WordLength == USART_WORDLENGTH_9B)
 800276e:	6883      	ldr	r3, [r0, #8]
 8002770:	6901      	ldr	r1, [r0, #16]
 8002772:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002776:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002778:	d12c      	bne.n	80027d4 <USART_TransmitReceive_IT+0xbe>
            *tmp = (uint16_t)(husart->Instance->DR & (uint16_t)0x01FF);
 800277a:	6852      	ldr	r2, [r2, #4]
          if(husart->Init.Parity == USART_PARITY_NONE)
 800277c:	bb31      	cbnz	r1, 80027cc <USART_TransmitReceive_IT+0xb6>
            *tmp = (uint16_t)(husart->Instance->DR & (uint16_t)0x01FF);
 800277e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002782:	f823 2b02 	strh.w	r2, [r3], #2
            husart->pRxBuffPtr += 1U;
 8002786:	62c3      	str	r3, [r0, #44]	; 0x2c
        husart->RxXferCount--;
 8002788:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 800278a:	3b01      	subs	r3, #1
 800278c:	b29b      	uxth	r3, r3
 800278e:	8643      	strh	r3, [r0, #50]	; 0x32
    if(husart->RxXferCount == 0U)
 8002790:	8e44      	ldrh	r4, [r0, #50]	; 0x32
 8002792:	b2a4      	uxth	r4, r4
 8002794:	b98c      	cbnz	r4, 80027ba <USART_TransmitReceive_IT+0xa4>
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 8002796:	6803      	ldr	r3, [r0, #0]
 8002798:	68da      	ldr	r2, [r3, #12]
 800279a:	f022 0220 	bic.w	r2, r2, #32
 800279e:	60da      	str	r2, [r3, #12]
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 80027a0:	68da      	ldr	r2, [r3, #12]
 80027a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027a6:	60da      	str	r2, [r3, #12]
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 80027a8:	695a      	ldr	r2, [r3, #20]
 80027aa:	f022 0201 	bic.w	r2, r2, #1
 80027ae:	615a      	str	r2, [r3, #20]
      husart->State = HAL_USART_STATE_READY;
 80027b0:	2301      	movs	r3, #1
 80027b2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_USART_TxRxCpltCallback(husart);
 80027b6:	f7ff ffad 	bl	8002714 <HAL_USART_TxRxCpltCallback>
    if(husart->RxXferCount == 0U)
 80027ba:	2000      	movs	r0, #0
}
 80027bc:	bd10      	pop	{r4, pc}
            husart->pTxBuffPtr += 1U;
 80027be:	3301      	adds	r3, #1
 80027c0:	e7c2      	b.n	8002748 <USART_TransmitReceive_IT+0x32>
          husart->Instance->DR = (uint8_t)(*husart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80027c2:	1c59      	adds	r1, r3, #1
 80027c4:	6241      	str	r1, [r0, #36]	; 0x24
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	6053      	str	r3, [r2, #4]
 80027ca:	e7be      	b.n	800274a <USART_TransmitReceive_IT+0x34>
            *tmp = (uint16_t)(husart->Instance->DR & (uint16_t)0x00FF);
 80027cc:	b2d2      	uxtb	r2, r2
 80027ce:	f823 2b01 	strh.w	r2, [r3], #1
 80027d2:	e7d8      	b.n	8002786 <USART_TransmitReceive_IT+0x70>
          if(husart->Init.Parity == USART_PARITY_NONE)
 80027d4:	b921      	cbnz	r1, 80027e0 <USART_TransmitReceive_IT+0xca>
            *husart->pRxBuffPtr++ = (uint8_t)(husart->Instance->DR & (uint8_t)0x00FF);
 80027d6:	1c59      	adds	r1, r3, #1
 80027d8:	6852      	ldr	r2, [r2, #4]
 80027da:	62c1      	str	r1, [r0, #44]	; 0x2c
            *husart->pRxBuffPtr++ = (uint8_t)(husart->Instance->DR & (uint8_t)0x007F);
 80027dc:	701a      	strb	r2, [r3, #0]
 80027de:	e7d3      	b.n	8002788 <USART_TransmitReceive_IT+0x72>
 80027e0:	6852      	ldr	r2, [r2, #4]
 80027e2:	1c59      	adds	r1, r3, #1
 80027e4:	62c1      	str	r1, [r0, #44]	; 0x2c
 80027e6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80027ea:	e7f7      	b.n	80027dc <USART_TransmitReceive_IT+0xc6>
    return HAL_BUSY;
 80027ec:	2002      	movs	r0, #2
 80027ee:	bd10      	pop	{r4, pc}

080027f0 <HAL_USART_ErrorCallback>:
 80027f0:	4770      	bx	lr
	...

080027f4 <HAL_USART_IRQHandler>:
  uint32_t isrflags = READ_REG(husart->Instance->SR);
 80027f4:	6803      	ldr	r3, [r0, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its   = READ_REG(husart->Instance->CR1);
 80027f8:	68d9      	ldr	r1, [r3, #12]
{
 80027fa:	b570      	push	{r4, r5, r6, lr}
  if(errorflags == RESET)
 80027fc:	0716      	lsls	r6, r2, #28
{
 80027fe:	4604      	mov	r4, r0
  uint32_t cr3its   = READ_REG(husart->Instance->CR3);
 8002800:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 8002802:	d110      	bne.n	8002826 <HAL_USART_IRQHandler+0x32>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002804:	0696      	lsls	r6, r2, #26
 8002806:	d56a      	bpl.n	80028de <HAL_USART_IRQHandler+0xea>
 8002808:	068d      	lsls	r5, r1, #26
 800280a:	d568      	bpl.n	80028de <HAL_USART_IRQHandler+0xea>
      if(husart->State == HAL_USART_STATE_BUSY_RX)
 800280c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002810:	2b22      	cmp	r3, #34	; 0x22
 8002812:	d103      	bne.n	800281c <HAL_USART_IRQHandler+0x28>
}
 8002814:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        USART_Receive_IT(husart);
 8002818:	f7ff bf2e 	b.w	8002678 <USART_Receive_IT>
        USART_TransmitReceive_IT(husart);
 800281c:	4620      	mov	r0, r4
}
 800281e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        USART_TransmitReceive_IT(husart);
 8002822:	f7ff bf78 	b.w	8002716 <USART_TransmitReceive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002826:	f015 0501 	ands.w	r5, r5, #1
 800282a:	d102      	bne.n	8002832 <HAL_USART_IRQHandler+0x3e>
 800282c:	f411 7f90 	tst.w	r1, #288	; 0x120
 8002830:	d055      	beq.n	80028de <HAL_USART_IRQHandler+0xea>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002832:	07d3      	lsls	r3, r2, #31
 8002834:	d505      	bpl.n	8002842 <HAL_USART_IRQHandler+0x4e>
 8002836:	05ce      	lsls	r6, r1, #23
      husart->ErrorCode |= HAL_USART_ERROR_PE;
 8002838:	bf42      	ittt	mi
 800283a:	6c23      	ldrmi	r3, [r4, #64]	; 0x40
 800283c:	f043 0301 	orrmi.w	r3, r3, #1
 8002840:	6423      	strmi	r3, [r4, #64]	; 0x40
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002842:	0750      	lsls	r0, r2, #29
 8002844:	d504      	bpl.n	8002850 <HAL_USART_IRQHandler+0x5c>
 8002846:	b11d      	cbz	r5, 8002850 <HAL_USART_IRQHandler+0x5c>
      husart->ErrorCode |= HAL_USART_ERROR_NE;
 8002848:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800284a:	f043 0302 	orr.w	r3, r3, #2
 800284e:	6423      	str	r3, [r4, #64]	; 0x40
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002850:	0793      	lsls	r3, r2, #30
 8002852:	d504      	bpl.n	800285e <HAL_USART_IRQHandler+0x6a>
 8002854:	b11d      	cbz	r5, 800285e <HAL_USART_IRQHandler+0x6a>
      husart->ErrorCode |= HAL_USART_ERROR_FE;
 8002856:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002858:	f043 0304 	orr.w	r3, r3, #4
 800285c:	6423      	str	r3, [r4, #64]	; 0x40
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800285e:	0716      	lsls	r6, r2, #28
 8002860:	d504      	bpl.n	800286c <HAL_USART_IRQHandler+0x78>
 8002862:	b11d      	cbz	r5, 800286c <HAL_USART_IRQHandler+0x78>
      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 8002864:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002866:	f043 0308 	orr.w	r3, r3, #8
 800286a:	6423      	str	r3, [r4, #64]	; 0x40
    if(husart->ErrorCode != HAL_USART_ERROR_NONE)
 800286c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800286e:	2b00      	cmp	r3, #0
 8002870:	d075      	beq.n	800295e <HAL_USART_IRQHandler+0x16a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002872:	0695      	lsls	r5, r2, #26
 8002874:	d508      	bpl.n	8002888 <HAL_USART_IRQHandler+0x94>
 8002876:	0688      	lsls	r0, r1, #26
 8002878:	d506      	bpl.n	8002888 <HAL_USART_IRQHandler+0x94>
        if(husart->State == HAL_USART_STATE_BUSY_RX)
 800287a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800287e:	2b22      	cmp	r3, #34	; 0x22
          USART_Receive_IT(husart);
 8002880:	4620      	mov	r0, r4
        if(husart->State == HAL_USART_STATE_BUSY_RX)
 8002882:	d121      	bne.n	80028c8 <HAL_USART_IRQHandler+0xd4>
          USART_Receive_IT(husart);
 8002884:	f7ff fef8 	bl	8002678 <USART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR);
 8002888:	6823      	ldr	r3, [r4, #0]
 800288a:	695d      	ldr	r5, [r3, #20]
      if(((husart->ErrorCode & HAL_USART_ERROR_ORE) != RESET) || dmarequest)
 800288c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800288e:	0711      	lsls	r1, r2, #28
        USART_EndRxTransfer(husart);
 8002890:	4620      	mov	r0, r4
      if(((husart->ErrorCode & HAL_USART_ERROR_ORE) != RESET) || dmarequest)
 8002892:	d402      	bmi.n	800289a <HAL_USART_IRQHandler+0xa6>
 8002894:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8002898:	d01d      	beq.n	80028d6 <HAL_USART_IRQHandler+0xe2>
        USART_EndRxTransfer(husart);
 800289a:	f7ff fe45 	bl	8002528 <USART_EndRxTransfer>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800289e:	6823      	ldr	r3, [r4, #0]
 80028a0:	695a      	ldr	r2, [r3, #20]
 80028a2:	0652      	lsls	r2, r2, #25
 80028a4:	d513      	bpl.n	80028ce <HAL_USART_IRQHandler+0xda>
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR);
 80028a6:	695a      	ldr	r2, [r3, #20]
          if(husart->hdmarx != NULL)
 80028a8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR);
 80028aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028ae:	615a      	str	r2, [r3, #20]
          if(husart->hdmarx != NULL)
 80028b0:	b168      	cbz	r0, 80028ce <HAL_USART_IRQHandler+0xda>
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 80028b2:	4b2b      	ldr	r3, [pc, #172]	; (8002960 <HAL_USART_IRQHandler+0x16c>)
 80028b4:	6503      	str	r3, [r0, #80]	; 0x50
            if(HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 80028b6:	f7fe f955 	bl	8000b64 <HAL_DMA_Abort_IT>
 80028ba:	2800      	cmp	r0, #0
 80028bc:	d04f      	beq.n	800295e <HAL_USART_IRQHandler+0x16a>
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 80028be:	6ba0      	ldr	r0, [r4, #56]	; 0x38
}
 80028c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 80028c4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80028c6:	4718      	bx	r3
          USART_TransmitReceive_IT(husart);
 80028c8:	f7ff ff25 	bl	8002716 <USART_TransmitReceive_IT>
 80028cc:	e7dc      	b.n	8002888 <HAL_USART_IRQHandler+0x94>
            HAL_USART_ErrorCallback(husart);
 80028ce:	4620      	mov	r0, r4
 80028d0:	f7ff ff8e 	bl	80027f0 <HAL_USART_ErrorCallback>
 80028d4:	bd70      	pop	{r4, r5, r6, pc}
        HAL_USART_ErrorCallback(husart);
 80028d6:	f7ff ff8b 	bl	80027f0 <HAL_USART_ErrorCallback>
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 80028da:	6425      	str	r5, [r4, #64]	; 0x40
 80028dc:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80028de:	0616      	lsls	r6, r2, #24
 80028e0:	d52b      	bpl.n	800293a <HAL_USART_IRQHandler+0x146>
 80028e2:	060d      	lsls	r5, r1, #24
 80028e4:	d529      	bpl.n	800293a <HAL_USART_IRQHandler+0x146>
    if(husart->State == HAL_USART_STATE_BUSY_TX)
 80028e6:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80028ea:	2a12      	cmp	r2, #18
 80028ec:	d196      	bne.n	800281c <HAL_USART_IRQHandler+0x28>
  if(husart->State == HAL_USART_STATE_BUSY_TX)
 80028ee:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80028f2:	2a12      	cmp	r2, #18
 80028f4:	d133      	bne.n	800295e <HAL_USART_IRQHandler+0x16a>
    if(husart->Init.WordLength == USART_WORDLENGTH_9B)
 80028f6:	68a2      	ldr	r2, [r4, #8]
 80028f8:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80028fc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80028fe:	d117      	bne.n	8002930 <HAL_USART_IRQHandler+0x13c>
      husart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002900:	8811      	ldrh	r1, [r2, #0]
 8002902:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002906:	6059      	str	r1, [r3, #4]
      if(husart->Init.Parity == USART_PARITY_NONE)
 8002908:	6921      	ldr	r1, [r4, #16]
 800290a:	b979      	cbnz	r1, 800292c <HAL_USART_IRQHandler+0x138>
        husart->pTxBuffPtr += 2U;
 800290c:	3202      	adds	r2, #2
        husart->pTxBuffPtr += 1U;
 800290e:	6262      	str	r2, [r4, #36]	; 0x24
    if(--husart->TxXferCount == 0U)
 8002910:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002912:	3a01      	subs	r2, #1
 8002914:	b292      	uxth	r2, r2
 8002916:	8562      	strh	r2, [r4, #42]	; 0x2a
 8002918:	bb0a      	cbnz	r2, 800295e <HAL_USART_IRQHandler+0x16a>
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 800291a:	68da      	ldr	r2, [r3, #12]
 800291c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002920:	60da      	str	r2, [r3, #12]
      SET_BIT(husart->Instance->CR1, USART_CR1_TCIE);
 8002922:	68da      	ldr	r2, [r3, #12]
 8002924:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002928:	60da      	str	r2, [r3, #12]
 800292a:	bd70      	pop	{r4, r5, r6, pc}
        husart->pTxBuffPtr += 1U;
 800292c:	3201      	adds	r2, #1
 800292e:	e7ee      	b.n	800290e <HAL_USART_IRQHandler+0x11a>
      husart->Instance->DR = (uint8_t)(*husart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002930:	1c51      	adds	r1, r2, #1
 8002932:	6261      	str	r1, [r4, #36]	; 0x24
 8002934:	7812      	ldrb	r2, [r2, #0]
 8002936:	605a      	str	r2, [r3, #4]
 8002938:	e7ea      	b.n	8002910 <HAL_USART_IRQHandler+0x11c>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800293a:	0650      	lsls	r0, r2, #25
 800293c:	d50f      	bpl.n	800295e <HAL_USART_IRQHandler+0x16a>
 800293e:	064a      	lsls	r2, r1, #25
 8002940:	d50d      	bpl.n	800295e <HAL_USART_IRQHandler+0x16a>
  CLEAR_BIT(husart->Instance->CR1, USART_CR1_TCIE);
 8002942:	68da      	ldr	r2, [r3, #12]
 8002944:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002948:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 800294a:	695a      	ldr	r2, [r3, #20]
 800294c:	f022 0201 	bic.w	r2, r2, #1
 8002950:	615a      	str	r2, [r3, #20]
  husart->State = HAL_USART_STATE_READY;
 8002952:	2301      	movs	r3, #1
 8002954:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  HAL_USART_TxCpltCallback(husart);
 8002958:	4620      	mov	r0, r4
 800295a:	f7ff fe8b 	bl	8002674 <HAL_USART_TxCpltCallback>
 800295e:	bd70      	pop	{r4, r5, r6, pc}
 8002960:	08002965 	.word	0x08002965

08002964 <USART_DMAAbortOnError>:
{
 8002964:	b508      	push	{r3, lr}
  USART_HandleTypeDef* husart = ( USART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002966:	6b80      	ldr	r0, [r0, #56]	; 0x38
  husart->RxXferCount = 0x00U;
 8002968:	2300      	movs	r3, #0
 800296a:	8643      	strh	r3, [r0, #50]	; 0x32
  husart->TxXferCount = 0x00U;
 800296c:	8543      	strh	r3, [r0, #42]	; 0x2a
  HAL_USART_ErrorCallback(husart);
 800296e:	f7ff ff3f 	bl	80027f0 <HAL_USART_ErrorCallback>
 8002972:	bd08      	pop	{r3, pc}

08002974 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002974:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
 8002976:	4813      	ldr	r0, [pc, #76]	; (80029c4 <MX_ADC1_Init+0x50>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002978:	4b13      	ldr	r3, [pc, #76]	; (80029c8 <MX_ADC1_Init+0x54>)
 800297a:	2400      	movs	r4, #0
 800297c:	e880 0018 	stmia.w	r0, {r3, r4}
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002980:	4b12      	ldr	r3, [pc, #72]	; (80029cc <MX_ADC1_Init+0x58>)
 8002982:	6283      	str	r3, [r0, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
 8002984:	2301      	movs	r3, #1
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002986:	6084      	str	r4, [r0, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002988:	6104      	str	r4, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800298a:	6184      	str	r4, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800298c:	6204      	str	r4, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800298e:	62c4      	str	r4, [r0, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002990:	60c4      	str	r4, [r0, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002992:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002994:	6304      	str	r4, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002996:	6143      	str	r3, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002998:	f7fd fe02 	bl	80005a0 <HAL_ADC_Init>
 800299c:	b118      	cbz	r0, 80029a6 <MX_ADC1_Init+0x32>
  {
    _Error_Handler(__FILE__, __LINE__);
 800299e:	2149      	movs	r1, #73	; 0x49
 80029a0:	480b      	ldr	r0, [pc, #44]	; (80029d0 <MX_ADC1_Init+0x5c>)
 80029a2:	f000 fb67 	bl	8003074 <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = 1;
 80029a6:	2301      	movs	r3, #1
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80029a8:	4669      	mov	r1, sp
 80029aa:	4806      	ldr	r0, [pc, #24]	; (80029c4 <MX_ADC1_Init+0x50>)
  sConfig.Channel = ADC_CHANNEL_0;
 80029ac:	9400      	str	r4, [sp, #0]
  sConfig.Rank = 1;
 80029ae:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80029b0:	9402      	str	r4, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80029b2:	f7fd ff31 	bl	8000818 <HAL_ADC_ConfigChannel>
 80029b6:	b118      	cbz	r0, 80029c0 <MX_ADC1_Init+0x4c>
  {
    _Error_Handler(__FILE__, __LINE__);
 80029b8:	2153      	movs	r1, #83	; 0x53
 80029ba:	4805      	ldr	r0, [pc, #20]	; (80029d0 <MX_ADC1_Init+0x5c>)
 80029bc:	f000 fb5a 	bl	8003074 <_Error_Handler>
  }

}
 80029c0:	b004      	add	sp, #16
 80029c2:	bd10      	pop	{r4, pc}
 80029c4:	2000012c 	.word	0x2000012c
 80029c8:	40012000 	.word	0x40012000
 80029cc:	0f000001 	.word	0x0f000001
 80029d0:	08003794 	.word	0x08003794

080029d4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80029d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc2.Instance = ADC2;
 80029d6:	4814      	ldr	r0, [pc, #80]	; (8002a28 <MX_ADC2_Init+0x54>)
 80029d8:	4b14      	ldr	r3, [pc, #80]	; (8002a2c <MX_ADC2_Init+0x58>)
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
  hadc2.Init.ScanConvMode = DISABLE;
  hadc2.Init.ContinuousConvMode = DISABLE;
  hadc2.Init.DiscontinuousConvMode = DISABLE;
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80029da:	4a15      	ldr	r2, [pc, #84]	; (8002a30 <MX_ADC2_Init+0x5c>)
  hadc2.Instance = ADC2;
 80029dc:	6003      	str	r3, [r0, #0]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80029de:	6282      	str	r2, [r0, #40]	; 0x28
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80029e0:	2300      	movs	r3, #0
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc2.Init.NbrOfConversion = 1;
 80029e2:	2201      	movs	r2, #1
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80029e4:	6043      	str	r3, [r0, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80029e6:	6083      	str	r3, [r0, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80029e8:	6103      	str	r3, [r0, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80029ea:	6183      	str	r3, [r0, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80029ec:	6203      	str	r3, [r0, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80029ee:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80029f0:	60c3      	str	r3, [r0, #12]
  hadc2.Init.NbrOfConversion = 1;
 80029f2:	61c2      	str	r2, [r0, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80029f4:	6303      	str	r3, [r0, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80029f6:	6142      	str	r2, [r0, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80029f8:	f7fd fdd2 	bl	80005a0 <HAL_ADC_Init>
 80029fc:	b118      	cbz	r0, 8002a06 <MX_ADC2_Init+0x32>
  {
    _Error_Handler(__FILE__, __LINE__);
 80029fe:	216c      	movs	r1, #108	; 0x6c
 8002a00:	480c      	ldr	r0, [pc, #48]	; (8002a34 <MX_ADC2_Init+0x60>)
 8002a02:	f000 fb37 	bl	8003074 <_Error_Handler>

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_2;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002a06:	2102      	movs	r1, #2
 8002a08:	2201      	movs	r2, #1
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002a10:	4805      	ldr	r0, [pc, #20]	; (8002a28 <MX_ADC2_Init+0x54>)
 8002a12:	4669      	mov	r1, sp
 8002a14:	f7fd ff00 	bl	8000818 <HAL_ADC_ConfigChannel>
 8002a18:	b118      	cbz	r0, 8002a22 <MX_ADC2_Init+0x4e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002a1a:	2176      	movs	r1, #118	; 0x76
 8002a1c:	4805      	ldr	r0, [pc, #20]	; (8002a34 <MX_ADC2_Init+0x60>)
 8002a1e:	f000 fb29 	bl	8003074 <_Error_Handler>
  }

}
 8002a22:	b005      	add	sp, #20
 8002a24:	f85d fb04 	ldr.w	pc, [sp], #4
 8002a28:	200000e4 	.word	0x200000e4
 8002a2c:	40012100 	.word	0x40012100
 8002a30:	0f000001 	.word	0x0f000001
 8002a34:	08003794 	.word	0x08003794

08002a38 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002a38:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(adcHandle->Instance==ADC1)
 8002a3a:	6803      	ldr	r3, [r0, #0]
 8002a3c:	4a19      	ldr	r2, [pc, #100]	; (8002aa4 <HAL_ADC_MspInit+0x6c>)
 8002a3e:	4293      	cmp	r3, r2
{
 8002a40:	b088      	sub	sp, #32
  if(adcHandle->Instance==ADC1)
 8002a42:	d11e      	bne.n	8002a82 <HAL_ADC_MspInit+0x4a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002a44:	4b18      	ldr	r3, [pc, #96]	; (8002aa8 <HAL_ADC_MspInit+0x70>)
 8002a46:	2400      	movs	r4, #0
 8002a48:	9401      	str	r4, [sp, #4]
 8002a4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a50:	645a      	str	r2, [r3, #68]	; 0x44
 8002a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a58:	9301      	str	r3, [sp, #4]
 8002a5a:	9b01      	ldr	r3, [sp, #4]
  
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0
    PA4     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 8002a5c:	2311      	movs	r3, #17
    __HAL_RCC_ADC2_CLK_ENABLE();
  
    /**ADC2 GPIO Configuration    
    PA2     ------> ADC2_IN2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002a5e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a60:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a62:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a64:	4811      	ldr	r0, [pc, #68]	; (8002aac <HAL_ADC_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a66:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a68:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a6a:	f7fe f947 	bl	8000cfc <HAL_GPIO_Init>

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002a6e:	2012      	movs	r0, #18
 8002a70:	4622      	mov	r2, r4
 8002a72:	4621      	mov	r1, r4
 8002a74:	f7fd ff7a 	bl	800096c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002a78:	2012      	movs	r0, #18
 8002a7a:	f7fd ffab 	bl	80009d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8002a7e:	b008      	add	sp, #32
 8002a80:	bd10      	pop	{r4, pc}
  else if(adcHandle->Instance==ADC2)
 8002a82:	4a0b      	ldr	r2, [pc, #44]	; (8002ab0 <HAL_ADC_MspInit+0x78>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d1fa      	bne.n	8002a7e <HAL_ADC_MspInit+0x46>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002a88:	4b07      	ldr	r3, [pc, #28]	; (8002aa8 <HAL_ADC_MspInit+0x70>)
 8002a8a:	2400      	movs	r4, #0
 8002a8c:	9402      	str	r4, [sp, #8]
 8002a8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a94:	645a      	str	r2, [r3, #68]	; 0x44
 8002a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a9c:	9302      	str	r3, [sp, #8]
 8002a9e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002aa0:	2304      	movs	r3, #4
 8002aa2:	e7dc      	b.n	8002a5e <HAL_ADC_MspInit+0x26>
 8002aa4:	40012000 	.word	0x40012000
 8002aa8:	40023800 	.word	0x40023800
 8002aac:	40020000 	.word	0x40020000
 8002ab0:	40012100 	.word	0x40012100

08002ab4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8002ab4:	b513      	push	{r0, r1, r4, lr}
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002ab6:	4b17      	ldr	r3, [pc, #92]	; (8002b14 <MX_DMA_Init+0x60>)
 8002ab8:	2400      	movs	r4, #0
 8002aba:	9401      	str	r4, [sp, #4]
 8002abc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002abe:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002ac2:	631a      	str	r2, [r3, #48]	; 0x30
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002aca:	4622      	mov	r2, r4
 8002acc:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002ace:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002ad0:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002ad2:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002ad4:	f7fd ff4a 	bl	800096c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002ad8:	200b      	movs	r0, #11
 8002ada:	f7fd ff7b 	bl	80009d4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8002ade:	4622      	mov	r2, r4
 8002ae0:	4621      	mov	r1, r4
 8002ae2:	200d      	movs	r0, #13
 8002ae4:	f7fd ff42 	bl	800096c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002ae8:	200d      	movs	r0, #13
 8002aea:	f7fd ff73 	bl	80009d4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002aee:	4622      	mov	r2, r4
 8002af0:	4621      	mov	r1, r4
 8002af2:	2011      	movs	r0, #17
 8002af4:	f7fd ff3a 	bl	800096c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002af8:	2011      	movs	r0, #17
 8002afa:	f7fd ff6b 	bl	80009d4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8002afe:	4622      	mov	r2, r4
 8002b00:	4621      	mov	r1, r4
 8002b02:	202f      	movs	r0, #47	; 0x2f
 8002b04:	f7fd ff32 	bl	800096c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8002b08:	202f      	movs	r0, #47	; 0x2f
 8002b0a:	f7fd ff63 	bl	80009d4 <HAL_NVIC_EnableIRQ>

}
 8002b0e:	b002      	add	sp, #8
 8002b10:	bd10      	pop	{r4, pc}
 8002b12:	bf00      	nop
 8002b14:	40023800 	.word	0x40023800

08002b18 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002b18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002b1c:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b1e:	2400      	movs	r4, #0
 8002b20:	4b45      	ldr	r3, [pc, #276]	; (8002c38 <MX_GPIO_Init+0x120>)
 8002b22:	9401      	str	r4, [sp, #4]
 8002b24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_1, GPIO_PIN_RESET);
 8002b26:	4e45      	ldr	r6, [pc, #276]	; (8002c3c <MX_GPIO_Init+0x124>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002b28:	f8df 9118 	ldr.w	r9, [pc, #280]	; 8002c44 <MX_GPIO_Init+0x12c>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN1C_Pin|EN2C_Pin, GPIO_PIN_RESET);
 8002b2c:	f8df 8118 	ldr.w	r8, [pc, #280]	; 8002c48 <MX_GPIO_Init+0x130>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, EN1A_Pin|EN1B_Pin|EN2A_Pin|EN2B_Pin 
 8002b30:	4f43      	ldr	r7, [pc, #268]	; (8002c40 <MX_GPIO_Init+0x128>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b32:	f042 0210 	orr.w	r2, r2, #16
 8002b36:	631a      	str	r2, [r3, #48]	; 0x30
 8002b38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b3a:	f002 0210 	and.w	r2, r2, #16
 8002b3e:	9201      	str	r2, [sp, #4]
 8002b40:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b42:	9402      	str	r4, [sp, #8]
 8002b44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b46:	f042 0204 	orr.w	r2, r2, #4
 8002b4a:	631a      	str	r2, [r3, #48]	; 0x30
 8002b4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b4e:	f002 0204 	and.w	r2, r2, #4
 8002b52:	9202      	str	r2, [sp, #8]
 8002b54:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b56:	9403      	str	r4, [sp, #12]
 8002b58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b5a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b5e:	631a      	str	r2, [r3, #48]	; 0x30
 8002b60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b62:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002b66:	9203      	str	r2, [sp, #12]
 8002b68:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b6a:	9404      	str	r4, [sp, #16]
 8002b6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b6e:	f042 0201 	orr.w	r2, r2, #1
 8002b72:	631a      	str	r2, [r3, #48]	; 0x30
 8002b74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b76:	f002 0201 	and.w	r2, r2, #1
 8002b7a:	9204      	str	r2, [sp, #16]
 8002b7c:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b7e:	9405      	str	r4, [sp, #20]
 8002b80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b82:	f042 0202 	orr.w	r2, r2, #2
 8002b86:	631a      	str	r2, [r3, #48]	; 0x30
 8002b88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b8a:	f002 0202 	and.w	r2, r2, #2
 8002b8e:	9205      	str	r2, [sp, #20]
 8002b90:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b92:	9406      	str	r4, [sp, #24]
 8002b94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b96:	f042 0208 	orr.w	r2, r2, #8
 8002b9a:	631a      	str	r2, [r3, #48]	; 0x30
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9e:	f003 0308 	and.w	r3, r3, #8
 8002ba2:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_1, GPIO_PIN_RESET);
 8002ba4:	4622      	mov	r2, r4
 8002ba6:	4630      	mov	r0, r6
 8002ba8:	212a      	movs	r1, #42	; 0x2a
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002baa:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_1, GPIO_PIN_RESET);
 8002bac:	f7fe f986 	bl	8000ebc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002bb0:	4622      	mov	r2, r4
 8002bb2:	4648      	mov	r0, r9
 8002bb4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002bb8:	f7fe f980 	bl	8000ebc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, EN1C_Pin|EN2C_Pin, GPIO_PIN_RESET);
 8002bbc:	4622      	mov	r2, r4
 8002bbe:	4640      	mov	r0, r8
 8002bc0:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8002bc4:	f7fe f97a 	bl	8000ebc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, EN1A_Pin|EN1B_Pin|EN2A_Pin|EN2B_Pin 
 8002bc8:	4622      	mov	r2, r4
 8002bca:	4638      	mov	r0, r7
 8002bcc:	213f      	movs	r1, #63	; 0x3f
 8002bce:	f7fe f975 	bl	8000ebc <HAL_GPIO_WritePin>
                          |EN3A_Pin|EN3B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE4 PE6 PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_0;
 8002bd2:	2355      	movs	r3, #85	; 0x55
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002bd4:	a907      	add	r1, sp, #28
 8002bd6:	4630      	mov	r0, r6

  /*Configure GPIO pins : PE3 PE5 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bd8:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_0;
 8002bda:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bdc:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bde:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002be0:	f7fe f88c 	bl	8000cfc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_1;
 8002be4:	232a      	movs	r3, #42	; 0x2a
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002be6:	a907      	add	r1, sp, #28
 8002be8:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_1;
 8002bea:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bec:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bee:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bf0:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002bf2:	f7fe f883 	bl	8000cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002bf6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bfa:	a907      	add	r1, sp, #28
 8002bfc:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002bfe:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c00:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c02:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c04:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c06:	f7fe f879 	bl	8000cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = EN1C_Pin|EN2C_Pin;
 8002c0a:	f44f 63a0 	mov.w	r3, #1280	; 0x500
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c0e:	a907      	add	r1, sp, #28
 8002c10:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = EN1C_Pin|EN2C_Pin;
 8002c12:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c14:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c16:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c18:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c1a:	f7fe f86f 	bl	8000cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin 
                           PDPin PDPin */
  GPIO_InitStruct.Pin = EN1A_Pin|EN1B_Pin|EN2A_Pin|EN2B_Pin 
 8002c1e:	233f      	movs	r3, #63	; 0x3f
                          |EN3A_Pin|EN3B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c20:	a907      	add	r1, sp, #28
 8002c22:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = EN1A_Pin|EN1B_Pin|EN2A_Pin|EN2B_Pin 
 8002c24:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c26:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c28:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c2a:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c2c:	f7fe f866 	bl	8000cfc <HAL_GPIO_Init>

}
 8002c30:	b00d      	add	sp, #52	; 0x34
 8002c32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002c36:	bf00      	nop
 8002c38:	40023800 	.word	0x40023800
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	40020c00 	.word	0x40020c00
 8002c44:	40020800 	.word	0x40020800
 8002c48:	40020000 	.word	0x40020000

08002c4c <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c2_rx;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002c4c:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 8002c4e:	480d      	ldr	r0, [pc, #52]	; (8002c84 <MX_I2C1_Init+0x38>)
  hi2c1.Init.ClockSpeed = 400000;
 8002c50:	4b0d      	ldr	r3, [pc, #52]	; (8002c88 <MX_I2C1_Init+0x3c>)
 8002c52:	f8df e03c 	ldr.w	lr, [pc, #60]	; 8002c90 <MX_I2C1_Init+0x44>
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c56:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 400000;
 8002c5a:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002c62:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c64:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c66:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002c68:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c6a:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c6c:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002c6e:	f7fe f92b 	bl	8000ec8 <HAL_I2C_Init>
 8002c72:	b128      	cbz	r0, 8002c80 <MX_I2C1_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002c74:	2148      	movs	r1, #72	; 0x48
 8002c76:	4805      	ldr	r0, [pc, #20]	; (8002c8c <MX_I2C1_Init+0x40>)
  }

}
 8002c78:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8002c7c:	f000 b9fa 	b.w	8003074 <_Error_Handler>
 8002c80:	bd08      	pop	{r3, pc}
 8002c82:	bf00      	nop
 8002c84:	200001d4 	.word	0x200001d4
 8002c88:	40005400 	.word	0x40005400
 8002c8c:	080037a1 	.word	0x080037a1
 8002c90:	00061a80 	.word	0x00061a80

08002c94 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8002c94:	b508      	push	{r3, lr}

  hi2c2.Instance = I2C2;
 8002c96:	480d      	ldr	r0, [pc, #52]	; (8002ccc <MX_I2C2_Init+0x38>)
  hi2c2.Init.ClockSpeed = 400000;
 8002c98:	4b0d      	ldr	r3, [pc, #52]	; (8002cd0 <MX_I2C2_Init+0x3c>)
 8002c9a:	f8df e03c 	ldr.w	lr, [pc, #60]	; 8002cd8 <MX_I2C2_Init+0x44>
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c2.Init.ClockSpeed = 400000;
 8002ca2:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	6083      	str	r3, [r0, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002caa:	60c3      	str	r3, [r0, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002cac:	6102      	str	r2, [r0, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002cae:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002cb0:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002cb2:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002cb4:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002cb6:	f7fe f907 	bl	8000ec8 <HAL_I2C_Init>
 8002cba:	b128      	cbz	r0, 8002cc8 <MX_I2C2_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002cbc:	215b      	movs	r1, #91	; 0x5b
 8002cbe:	4805      	ldr	r0, [pc, #20]	; (8002cd4 <MX_I2C2_Init+0x40>)
  }

}
 8002cc0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8002cc4:	f000 b9d6 	b.w	8003074 <_Error_Handler>
 8002cc8:	bd08      	pop	{r3, pc}
 8002cca:	bf00      	nop
 8002ccc:	20000228 	.word	0x20000228
 8002cd0:	40005800 	.word	0x40005800
 8002cd4:	080037a1 	.word	0x080037a1
 8002cd8:	00061a80 	.word	0x00061a80

08002cdc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002cdc:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C1)
 8002cde:	6803      	ldr	r3, [r0, #0]
 8002ce0:	4a65      	ldr	r2, [pc, #404]	; (8002e78 <HAL_I2C_MspInit+0x19c>)
 8002ce2:	4293      	cmp	r3, r2
{
 8002ce4:	b089      	sub	sp, #36	; 0x24
 8002ce6:	4605      	mov	r5, r0
  if(i2cHandle->Instance==I2C1)
 8002ce8:	d162      	bne.n	8002db0 <HAL_I2C_MspInit+0xd4>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002cea:	23c0      	movs	r3, #192	; 0xc0
 8002cec:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cee:	2312      	movs	r3, #18
 8002cf0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cfa:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002cfc:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cfe:	485f      	ldr	r0, [pc, #380]	; (8002e7c <HAL_I2C_MspInit+0x1a0>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002d00:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d02:	f7fd fffb 	bl	8000cfc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d06:	2300      	movs	r3, #0
 8002d08:	4a5d      	ldr	r2, [pc, #372]	; (8002e80 <HAL_I2C_MspInit+0x1a4>)
 8002d0a:	9301      	str	r3, [sp, #4]
 8002d0c:	6c11      	ldr	r1, [r2, #64]	; 0x40
  
    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8002d0e:	4c5d      	ldr	r4, [pc, #372]	; (8002e84 <HAL_I2C_MspInit+0x1a8>)
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8002d10:	485d      	ldr	r0, [pc, #372]	; (8002e88 <HAL_I2C_MspInit+0x1ac>)
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d12:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
 8002d16:	6411      	str	r1, [r2, #64]	; 0x40
 8002d18:	6c12      	ldr	r2, [r2, #64]	; 0x40
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d1a:	60a3      	str	r3, [r4, #8]
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d1c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002d20:	9201      	str	r2, [sp, #4]
 8002d22:	9a01      	ldr	r2, [sp, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d24:	60e3      	str	r3, [r4, #12]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8002d26:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d2a:	e884 0005 	stmia.w	r4, {r0, r2}
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002d32:	4620      	mov	r0, r4
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d34:	6122      	str	r2, [r4, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d36:	6163      	str	r3, [r4, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d38:	61a3      	str	r3, [r4, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002d3a:	61e3      	str	r3, [r4, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002d3c:	6223      	str	r3, [r4, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d3e:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002d40:	f7fd fe92 	bl	8000a68 <HAL_DMA_Init>
 8002d44:	b118      	cbz	r0, 8002d4e <HAL_I2C_MspInit+0x72>
    {
      _Error_Handler(__FILE__, __LINE__);
 8002d46:	2186      	movs	r1, #134	; 0x86
 8002d48:	4850      	ldr	r0, [pc, #320]	; (8002e8c <HAL_I2C_MspInit+0x1b0>)
 8002d4a:	f000 f993 	bl	8003074 <_Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8002d4e:	63ac      	str	r4, [r5, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d50:	494f      	ldr	r1, [pc, #316]	; (8002e90 <HAL_I2C_MspInit+0x1b4>)
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8002d52:	63a5      	str	r5, [r4, #56]	; 0x38
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8002d54:	4c4f      	ldr	r4, [pc, #316]	; (8002e94 <HAL_I2C_MspInit+0x1b8>)
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d5a:	2340      	movs	r3, #64	; 0x40
 8002d5c:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d60:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d64:	2300      	movs	r3, #0
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d66:	6122      	str	r2, [r4, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_i2c1_tx.Init.Mode = DMA_CIRCULAR;
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002d68:	4620      	mov	r0, r4
    hdma_i2c1_tx.Init.Mode = DMA_CIRCULAR;
 8002d6a:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d6e:	60e3      	str	r3, [r4, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d70:	6163      	str	r3, [r4, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d72:	61a3      	str	r3, [r4, #24]
    hdma_i2c1_tx.Init.Mode = DMA_CIRCULAR;
 8002d74:	61e2      	str	r2, [r4, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002d76:	6223      	str	r3, [r4, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d78:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002d7a:	f7fd fe75 	bl	8000a68 <HAL_DMA_Init>
 8002d7e:	b118      	cbz	r0, 8002d88 <HAL_I2C_MspInit+0xac>
    {
      _Error_Handler(__FILE__, __LINE__);
 8002d80:	2198      	movs	r1, #152	; 0x98
 8002d82:	4842      	ldr	r0, [pc, #264]	; (8002e8c <HAL_I2C_MspInit+0x1b0>)
 8002d84:	f000 f976 	bl	8003074 <_Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002d88:	2200      	movs	r2, #0
 8002d8a:	4611      	mov	r1, r2
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8002d8c:	636c      	str	r4, [r5, #52]	; 0x34
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002d8e:	201f      	movs	r0, #31
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8002d90:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002d92:	f7fd fdeb 	bl	800096c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002d96:	201f      	movs	r0, #31
 8002d98:	f7fd fe1c 	bl	80009d4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	2020      	movs	r0, #32
 8002da0:	4611      	mov	r1, r2
 8002da2:	f7fd fde3 	bl	800096c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002da6:	2020      	movs	r0, #32

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8002da8:	f7fd fe14 	bl	80009d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8002dac:	b009      	add	sp, #36	; 0x24
 8002dae:	bd30      	pop	{r4, r5, pc}
  else if(i2cHandle->Instance==I2C2)
 8002db0:	4a39      	ldr	r2, [pc, #228]	; (8002e98 <HAL_I2C_MspInit+0x1bc>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d1fa      	bne.n	8002dac <HAL_I2C_MspInit+0xd0>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002db6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002dba:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002dbc:	2312      	movs	r3, #18
 8002dbe:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dc8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002dca:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dcc:	482b      	ldr	r0, [pc, #172]	; (8002e7c <HAL_I2C_MspInit+0x1a0>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002dce:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dd0:	f7fd ff94 	bl	8000cfc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	4a2a      	ldr	r2, [pc, #168]	; (8002e80 <HAL_I2C_MspInit+0x1a4>)
 8002dd8:	9302      	str	r3, [sp, #8]
 8002dda:	6c11      	ldr	r1, [r2, #64]	; 0x40
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 8002ddc:	4c2f      	ldr	r4, [pc, #188]	; (8002e9c <HAL_I2C_MspInit+0x1c0>)
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002dde:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 8002de2:	6411      	str	r1, [r2, #64]	; 0x40
 8002de4:	6c12      	ldr	r2, [r2, #64]	; 0x40
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8002de6:	492e      	ldr	r1, [pc, #184]	; (8002ea0 <HAL_I2C_MspInit+0x1c4>)
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002de8:	60a3      	str	r3, [r4, #8]
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002dea:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8002dee:	9202      	str	r2, [sp, #8]
 8002df0:	9a02      	ldr	r2, [sp, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002df2:	60e3      	str	r3, [r4, #12]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8002df4:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8002df8:	e884 0006 	stmia.w	r4, {r1, r2}
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8002dfc:	4620      	mov	r0, r4
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002dfe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e02:	6122      	str	r2, [r4, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e04:	6163      	str	r3, [r4, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e06:	61a3      	str	r3, [r4, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8002e08:	61e3      	str	r3, [r4, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002e0a:	6223      	str	r3, [r4, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e0c:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8002e0e:	f7fd fe2b 	bl	8000a68 <HAL_DMA_Init>
 8002e12:	b118      	cbz	r0, 8002e1c <HAL_I2C_MspInit+0x140>
      _Error_Handler(__FILE__, __LINE__);
 8002e14:	21c8      	movs	r1, #200	; 0xc8
 8002e16:	481d      	ldr	r0, [pc, #116]	; (8002e8c <HAL_I2C_MspInit+0x1b0>)
 8002e18:	f000 f92c 	bl	8003074 <_Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 8002e1c:	63ac      	str	r4, [r5, #56]	; 0x38
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e1e:	4b21      	ldr	r3, [pc, #132]	; (8002ea4 <HAL_I2C_MspInit+0x1c8>)
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 8002e20:	63a5      	str	r5, [r4, #56]	; 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 8002e22:	4c21      	ldr	r4, [pc, #132]	; (8002ea8 <HAL_I2C_MspInit+0x1cc>)
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e24:	f04f 6c60 	mov.w	ip, #234881024	; 0xe000000
 8002e28:	f04f 0e40 	mov.w	lr, #64	; 0x40
 8002e2c:	e884 5008 	stmia.w	r4, {r3, ip, lr}
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002e30:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e34:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8002e36:	4620      	mov	r0, r4
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e38:	60e3      	str	r3, [r4, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002e3a:	6122      	str	r2, [r4, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e3c:	6163      	str	r3, [r4, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e3e:	61a3      	str	r3, [r4, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8002e40:	61e3      	str	r3, [r4, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002e42:	6223      	str	r3, [r4, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e44:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8002e46:	f7fd fe0f 	bl	8000a68 <HAL_DMA_Init>
 8002e4a:	b118      	cbz	r0, 8002e54 <HAL_I2C_MspInit+0x178>
      _Error_Handler(__FILE__, __LINE__);
 8002e4c:	21da      	movs	r1, #218	; 0xda
 8002e4e:	480f      	ldr	r0, [pc, #60]	; (8002e8c <HAL_I2C_MspInit+0x1b0>)
 8002e50:	f000 f910 	bl	8003074 <_Error_Handler>
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8002e54:	2200      	movs	r2, #0
 8002e56:	4611      	mov	r1, r2
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 8002e58:	636c      	str	r4, [r5, #52]	; 0x34
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8002e5a:	2021      	movs	r0, #33	; 0x21
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 8002e5c:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8002e5e:	f7fd fd85 	bl	800096c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8002e62:	2021      	movs	r0, #33	; 0x21
 8002e64:	f7fd fdb6 	bl	80009d4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8002e68:	2200      	movs	r2, #0
 8002e6a:	2022      	movs	r0, #34	; 0x22
 8002e6c:	4611      	mov	r1, r2
 8002e6e:	f7fd fd7d 	bl	800096c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8002e72:	2022      	movs	r0, #34	; 0x22
 8002e74:	e798      	b.n	8002da8 <HAL_I2C_MspInit+0xcc>
 8002e76:	bf00      	nop
 8002e78:	40005400 	.word	0x40005400
 8002e7c:	40020400 	.word	0x40020400
 8002e80:	40023800 	.word	0x40023800
 8002e84:	2000033c 	.word	0x2000033c
 8002e88:	40026010 	.word	0x40026010
 8002e8c:	080037a1 	.word	0x080037a1
 8002e90:	400260a0 	.word	0x400260a0
 8002e94:	20000174 	.word	0x20000174
 8002e98:	40005800 	.word	0x40005800
 8002e9c:	2000027c 	.word	0x2000027c
 8002ea0:	40026040 	.word	0x40026040
 8002ea4:	400260b8 	.word	0x400260b8
 8002ea8:	200002dc 	.word	0x200002dc

08002eac <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{

    if (htim->Instance == htim10.Instance)
 8002eac:	4b16      	ldr	r3, [pc, #88]	; (8002f08 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002eae:	6802      	ldr	r2, [r0, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d127      	bne.n	8002f06 <HAL_TIM_PeriodElapsedCallback+0x5a>
    {
        //out2 =out;
        //out=0;
        //MPU6050_ReadAll(&hi2c1,&mpu);

        mpu.GyroY -= 2;
 8002eb6:	4b15      	ldr	r3, [pc, #84]	; (8002f0c <HAL_TIM_PeriodElapsedCallback+0x60>)
        out = mpu.GyroY / 90;
 8002eb8:	eddf 6a15 	vldr	s13, [pc, #84]	; 8002f10 <HAL_TIM_PeriodElapsedCallback+0x64>
        mpu.GyroY -= 2;
 8002ebc:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002ec0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002ec4:	ee77 7ac7 	vsub.f32	s15, s15, s14
        out = mpu.GyroY / 90;
 8002ec8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
        mpu.GyroY -= 2;
 8002ecc:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
        out = mpu.GyroY / 90;
 8002ed0:	4b10      	ldr	r3, [pc, #64]	; (8002f14 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002ed2:	ed83 7a00 	vstr	s14, [r3]

        //bgc_bldchdl(&bldc1, out);
        //bgc_SVPWM(&bldc1 , 200);

        if (deg0 == 1000)
 8002ed6:	4b10      	ldr	r3, [pc, #64]	; (8002f18 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
        {
            deg0 = 0;
 8002ede:	bf04      	itt	eq
 8002ee0:	2200      	moveq	r2, #0
 8002ee2:	601a      	streq	r2, [r3, #0]
        }
        dutya = bldc1.duty1;
 8002ee4:	4b0d      	ldr	r3, [pc, #52]	; (8002f1c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002ee6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
        dutya = bldc2.duty1;
 8002ee8:	4a0d      	ldr	r2, [pc, #52]	; (8002f20 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002eea:	6b10      	ldr	r0, [r2, #48]	; 0x30
 8002eec:	4a0d      	ldr	r2, [pc, #52]	; (8002f24 <HAL_TIM_PeriodElapsedCallback+0x78>)
        dutyb = bldc1.duty2;
 8002eee:	6b59      	ldr	r1, [r3, #52]	; 0x34
        dutya = bldc2.duty1;
 8002ef0:	6010      	str	r0, [r2, #0]
        dutyb = bldc1.duty2;
 8002ef2:	4a0d      	ldr	r2, [pc, #52]	; (8002f28 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002ef4:	6011      	str	r1, [r2, #0]
        dutyc = bldc1.duty3;
 8002ef6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ef8:	4b0c      	ldr	r3, [pc, #48]	; (8002f2c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002efa:	601a      	str	r2, [r3, #0]

        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, dutya);
 8002efc:	4b0c      	ldr	r3, [pc, #48]	; (8002f30 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	6358      	str	r0, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, dutyb);
 8002f02:	6399      	str	r1, [r3, #56]	; 0x38
        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, dutyc);
 8002f04:	63da      	str	r2, [r3, #60]	; 0x3c
 8002f06:	4770      	bx	lr
 8002f08:	20000428 	.word	0x20000428
 8002f0c:	200003ac 	.word	0x200003ac
 8002f10:	42b40000 	.word	0x42b40000
 8002f14:	200003a0 	.word	0x200003a0
 8002f18:	20000028 	.word	0x20000028
 8002f1c:	200000a8 	.word	0x200000a8
 8002f20:	20000030 	.word	0x20000030
 8002f24:	200003e8 	.word	0x200003e8
 8002f28:	200003a8 	.word	0x200003a8
 8002f2c:	200003a4 	.word	0x200003a4
 8002f30:	20000464 	.word	0x20000464

08002f34 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002f34:	b530      	push	{r4, r5, lr}
 8002f36:	b095      	sub	sp, #84	; 0x54
    RCC_OscInitTypeDef RCC_OscInitStruct;
    RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f38:	4b26      	ldr	r3, [pc, #152]	; (8002fd4 <SystemClock_Config+0xa0>)
 8002f3a:	2100      	movs	r1, #0
 8002f3c:	9101      	str	r1, [sp, #4]
 8002f3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f40:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002f44:	641a      	str	r2, [r3, #64]	; 0x40
 8002f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f4c:	9301      	str	r3, [sp, #4]
 8002f4e:	9b01      	ldr	r3, [sp, #4]

    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f50:	4b21      	ldr	r3, [pc, #132]	; (8002fd8 <SystemClock_Config+0xa4>)
 8002f52:	9102      	str	r1, [sp, #8]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f5a:	601a      	str	r2, [r3, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f62:	9302      	str	r3, [sp, #8]
 8002f64:	9b02      	ldr	r3, [sp, #8]

    /**Initializes the CPU, AHB and APB busses clocks 
*/
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002f66:	2301      	movs	r3, #1
 8002f68:	9308      	str	r3, [sp, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002f6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f6e:	9309      	str	r3, [sp, #36]	; 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002f70:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f74:	2502      	movs	r5, #2
    RCC_OscInitStruct.PLL.PLLM = 4;
 8002f76:	2404      	movs	r4, #4
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002f78:	930f      	str	r3, [sp, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLN = 168;
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
    RCC_OscInitStruct.PLL.PLLQ = 4;
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f7a:	a808      	add	r0, sp, #32
    RCC_OscInitStruct.PLL.PLLN = 168;
 8002f7c:	23a8      	movs	r3, #168	; 0xa8
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f7e:	950e      	str	r5, [sp, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLM = 4;
 8002f80:	9410      	str	r4, [sp, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLN = 168;
 8002f82:	9311      	str	r3, [sp, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002f84:	9512      	str	r5, [sp, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ = 4;
 8002f86:	9413      	str	r4, [sp, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f88:	f7fe fcd4 	bl	8001934 <HAL_RCC_OscConfig>
 8002f8c:	b100      	cbz	r0, 8002f90 <SystemClock_Config+0x5c>
 8002f8e:	e7fe      	b.n	8002f8e <SystemClock_Config+0x5a>
        _Error_Handler(__FILE__, __LINE__);
    }

    /**Initializes the CPU, AHB and APB busses clocks 
*/
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK 
 8002f90:	230f      	movs	r3, #15
 8002f92:	9303      	str	r3, [sp, #12]
                                    | RCC_CLOCKTYPE_SYSCLK 
                                    | RCC_CLOCKTYPE_PCLK1 
                                    | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f94:	9005      	str	r0, [sp, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002f96:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002f9a:	2105      	movs	r1, #5
 8002f9c:	a803      	add	r0, sp, #12
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f9e:	9504      	str	r5, [sp, #16]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002fa0:	9306      	str	r3, [sp, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002fa2:	9307      	str	r3, [sp, #28]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002fa4:	f7fe fe76 	bl	8001c94 <HAL_RCC_ClockConfig>
 8002fa8:	4605      	mov	r5, r0
 8002faa:	b100      	cbz	r0, 8002fae <SystemClock_Config+0x7a>
 8002fac:	e7fe      	b.n	8002fac <SystemClock_Config+0x78>
        _Error_Handler(__FILE__, __LINE__);
    }

    /**Configure the Systick interrupt time 
*/
    HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 8002fae:	f7fe ff0b 	bl	8001dc8 <HAL_RCC_GetHCLKFreq>
 8002fb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fb6:	fbb0 f0f3 	udiv	r0, r0, r3
 8002fba:	f7fd fd17 	bl	80009ec <HAL_SYSTICK_Config>

    /**Configure the Systick 
*/
    HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002fbe:	4620      	mov	r0, r4
 8002fc0:	f7fd fd2a 	bl	8000a18 <HAL_SYSTICK_CLKSourceConfig>

    /* SysTick_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002fc4:	462a      	mov	r2, r5
 8002fc6:	4629      	mov	r1, r5
 8002fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fcc:	f7fd fcce 	bl	800096c <HAL_NVIC_SetPriority>
}
 8002fd0:	b015      	add	sp, #84	; 0x54
 8002fd2:	bd30      	pop	{r4, r5, pc}
 8002fd4:	40023800 	.word	0x40023800
 8002fd8:	40007000 	.word	0x40007000

08002fdc <main>:
{
 8002fdc:	b508      	push	{r3, lr}
    HAL_Init();
 8002fde:	f7fd fa9f 	bl	8000520 <HAL_Init>
    SystemClock_Config();
 8002fe2:	f7ff ffa7 	bl	8002f34 <SystemClock_Config>
    MX_GPIO_Init();
 8002fe6:	f7ff fd97 	bl	8002b18 <MX_GPIO_Init>
    MX_DMA_Init();
 8002fea:	f7ff fd63 	bl	8002ab4 <MX_DMA_Init>
    MX_ADC1_Init();
 8002fee:	f7ff fcc1 	bl	8002974 <MX_ADC1_Init>
    MX_I2C1_Init();
 8002ff2:	f7ff fe2b 	bl	8002c4c <MX_I2C1_Init>
    MX_I2C2_Init();
 8002ff6:	f7ff fe4d 	bl	8002c94 <MX_I2C2_Init>
    MX_TIM1_Init();
 8002ffa:	f000 f9cd 	bl	8003398 <MX_TIM1_Init>
    MX_TIM3_Init();
 8002ffe:	f000 fa47 	bl	8003490 <MX_TIM3_Init>
    MX_TIM4_Init();
 8003002:	f000 faa9 	bl	8003558 <MX_TIM4_Init>
    MX_USART3_Init();
 8003006:	f000 fb0b 	bl	8003620 <MX_USART3_Init>
    MX_TIM10_Init();
 800300a:	f000 f905 	bl	8003218 <MX_TIM10_Init>
    MX_ADC2_Init();
 800300e:	f7ff fce1 	bl	80029d4 <MX_ADC2_Init>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_SET);
 8003012:	2201      	movs	r2, #1
 8003014:	2102      	movs	r1, #2
 8003016:	4814      	ldr	r0, [pc, #80]	; (8003068 <main+0x8c>)
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8003018:	4c14      	ldr	r4, [pc, #80]	; (800306c <main+0x90>)
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_SET);
 800301a:	f7fd ff4f 	bl	8000ebc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);
 800301e:	2201      	movs	r2, #1
 8003020:	2108      	movs	r1, #8
 8003022:	4811      	ldr	r0, [pc, #68]	; (8003068 <main+0x8c>)
 8003024:	f7fd ff4a 	bl	8000ebc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_SET);
 8003028:	2201      	movs	r2, #1
 800302a:	2120      	movs	r1, #32
 800302c:	480e      	ldr	r0, [pc, #56]	; (8003068 <main+0x8c>)
 800302e:	f7fd ff45 	bl	8000ebc <HAL_GPIO_WritePin>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8003032:	2100      	movs	r1, #0
 8003034:	4620      	mov	r0, r4
 8003036:	f7ff fa13 	bl	8002460 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800303a:	2104      	movs	r1, #4
 800303c:	4620      	mov	r0, r4
 800303e:	f7ff fa0f 	bl	8002460 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8003042:	2108      	movs	r1, #8
 8003044:	4620      	mov	r0, r4
 8003046:	f7ff fa0b 	bl	8002460 <HAL_TIM_PWM_Start>
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 150);
 800304a:	6823      	ldr	r3, [r4, #0]
 800304c:	2296      	movs	r2, #150	; 0x96
 800304e:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8003050:	2200      	movs	r2, #0
 8003052:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_Delay(1500);
 8003054:	f240 50dc 	movw	r0, #1500	; 0x5dc
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8003058:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_Delay(1500);
 800305a:	f7fd fa8d 	bl	8000578 <HAL_Delay>
    HAL_TIM_Base_Start_IT(&htim10);
 800305e:	4804      	ldr	r0, [pc, #16]	; (8003070 <main+0x94>)
 8003060:	f7fe ff5c 	bl	8001f1c <HAL_TIM_Base_Start_IT>
 8003064:	e7fe      	b.n	8003064 <main+0x88>
 8003066:	bf00      	nop
 8003068:	40020c00 	.word	0x40020c00
 800306c:	20000464 	.word	0x20000464
 8003070:	20000428 	.word	0x20000428

08003074 <_Error_Handler>:
 * @param  file: The file name as string.
 * @param  line: The line in file as a number.
 * @retval None
 */
void _Error_Handler(char *file, int line)
{
 8003074:	e7fe      	b.n	8003074 <_Error_Handler>
	...

08003078 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003078:	b513      	push	{r0, r1, r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800307a:	4b22      	ldr	r3, [pc, #136]	; (8003104 <HAL_MspInit+0x8c>)
 800307c:	2400      	movs	r4, #0
 800307e:	9400      	str	r4, [sp, #0]
 8003080:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003082:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003086:	645a      	str	r2, [r3, #68]	; 0x44
 8003088:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800308a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800308e:	9200      	str	r2, [sp, #0]
 8003090:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003092:	9401      	str	r4, [sp, #4]
 8003094:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003096:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800309a:	641a      	str	r2, [r3, #64]	; 0x40
 800309c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030a2:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030a4:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 80030a6:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030a8:	f7fd fc4e 	bl	8000948 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80030ac:	4622      	mov	r2, r4
 80030ae:	4621      	mov	r1, r4
 80030b0:	f06f 000b 	mvn.w	r0, #11
 80030b4:	f7fd fc5a 	bl	800096c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80030b8:	4622      	mov	r2, r4
 80030ba:	4621      	mov	r1, r4
 80030bc:	f06f 000a 	mvn.w	r0, #10
 80030c0:	f7fd fc54 	bl	800096c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80030c4:	4622      	mov	r2, r4
 80030c6:	4621      	mov	r1, r4
 80030c8:	f06f 0009 	mvn.w	r0, #9
 80030cc:	f7fd fc4e 	bl	800096c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80030d0:	4622      	mov	r2, r4
 80030d2:	4621      	mov	r1, r4
 80030d4:	f06f 0004 	mvn.w	r0, #4
 80030d8:	f7fd fc48 	bl	800096c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80030dc:	4622      	mov	r2, r4
 80030de:	4621      	mov	r1, r4
 80030e0:	f06f 0003 	mvn.w	r0, #3
 80030e4:	f7fd fc42 	bl	800096c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80030e8:	4622      	mov	r2, r4
 80030ea:	4621      	mov	r1, r4
 80030ec:	f06f 0001 	mvn.w	r0, #1
 80030f0:	f7fd fc3c 	bl	800096c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80030f4:	4622      	mov	r2, r4
 80030f6:	4621      	mov	r1, r4
 80030f8:	f04f 30ff 	mov.w	r0, #4294967295
 80030fc:	f7fd fc36 	bl	800096c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003100:	b002      	add	sp, #8
 8003102:	bd10      	pop	{r4, pc}
 8003104:	40023800 	.word	0x40023800

08003108 <NMI_Handler>:
 8003108:	4770      	bx	lr

0800310a <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800310a:	e7fe      	b.n	800310a <HardFault_Handler>

0800310c <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 800310c:	e7fe      	b.n	800310c <MemManage_Handler>

0800310e <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800310e:	e7fe      	b.n	800310e <BusFault_Handler>

08003110 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8003110:	e7fe      	b.n	8003110 <UsageFault_Handler>

08003112 <SVC_Handler>:
 8003112:	4770      	bx	lr

08003114 <DebugMon_Handler>:
 8003114:	4770      	bx	lr

08003116 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8003116:	4770      	bx	lr

08003118 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8003118:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800311a:	f7fd fa1b 	bl	8000554 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800311e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8003122:	f7fd bc86 	b.w	8000a32 <HAL_SYSTICK_IRQHandler>
	...

08003128 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003128:	4801      	ldr	r0, [pc, #4]	; (8003130 <DMA1_Stream0_IRQHandler+0x8>)
 800312a:	f7fd bd2d 	b.w	8000b88 <HAL_DMA_IRQHandler>
 800312e:	bf00      	nop
 8003130:	2000033c 	.word	0x2000033c

08003134 <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8003134:	4801      	ldr	r0, [pc, #4]	; (800313c <DMA1_Stream2_IRQHandler+0x8>)
 8003136:	f7fd bd27 	b.w	8000b88 <HAL_DMA_IRQHandler>
 800313a:	bf00      	nop
 800313c:	2000027c 	.word	0x2000027c

08003140 <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8003140:	4801      	ldr	r0, [pc, #4]	; (8003148 <DMA1_Stream6_IRQHandler+0x8>)
 8003142:	f7fd bd21 	b.w	8000b88 <HAL_DMA_IRQHandler>
 8003146:	bf00      	nop
 8003148:	20000174 	.word	0x20000174

0800314c <ADC_IRQHandler>:

/**
* @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
*/
void ADC_IRQHandler(void)
{
 800314c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800314e:	4804      	ldr	r0, [pc, #16]	; (8003160 <ADC_IRQHandler+0x14>)
 8003150:	f7fd facd 	bl	80006ee <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8003154:	4803      	ldr	r0, [pc, #12]	; (8003164 <ADC_IRQHandler+0x18>)
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003156:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_ADC_IRQHandler(&hadc2);
 800315a:	f7fd bac8 	b.w	80006ee <HAL_ADC_IRQHandler>
 800315e:	bf00      	nop
 8003160:	2000012c 	.word	0x2000012c
 8003164:	200000e4 	.word	0x200000e4

08003168 <TIM1_UP_TIM10_IRQHandler>:

/**
* @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
*/
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003168:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800316a:	4804      	ldr	r0, [pc, #16]	; (800317c <TIM1_UP_TIM10_IRQHandler+0x14>)
 800316c:	f7fe ff9f 	bl	80020ae <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8003170:	4803      	ldr	r0, [pc, #12]	; (8003180 <TIM1_UP_TIM10_IRQHandler+0x18>)
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003172:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim10);
 8003176:	f7fe bf9a 	b.w	80020ae <HAL_TIM_IRQHandler>
 800317a:	bf00      	nop
 800317c:	200004a0 	.word	0x200004a0
 8003180:	20000428 	.word	0x20000428

08003184 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003184:	4801      	ldr	r0, [pc, #4]	; (800318c <I2C1_EV_IRQHandler+0x8>)
 8003186:	f7fd bfab 	b.w	80010e0 <HAL_I2C_EV_IRQHandler>
 800318a:	bf00      	nop
 800318c:	200001d4 	.word	0x200001d4

08003190 <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003190:	4801      	ldr	r0, [pc, #4]	; (8003198 <I2C1_ER_IRQHandler+0x8>)
 8003192:	f7fe bb0f 	b.w	80017b4 <HAL_I2C_ER_IRQHandler>
 8003196:	bf00      	nop
 8003198:	200001d4 	.word	0x200001d4

0800319c <I2C2_EV_IRQHandler>:
void I2C2_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800319c:	4801      	ldr	r0, [pc, #4]	; (80031a4 <I2C2_EV_IRQHandler+0x8>)
 800319e:	f7fd bf9f 	b.w	80010e0 <HAL_I2C_EV_IRQHandler>
 80031a2:	bf00      	nop
 80031a4:	20000228 	.word	0x20000228

080031a8 <I2C2_ER_IRQHandler>:
void I2C2_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80031a8:	4801      	ldr	r0, [pc, #4]	; (80031b0 <I2C2_ER_IRQHandler+0x8>)
 80031aa:	f7fe bb03 	b.w	80017b4 <HAL_I2C_ER_IRQHandler>
 80031ae:	bf00      	nop
 80031b0:	20000228 	.word	0x20000228

080031b4 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_USART_IRQHandler(&husart3);
 80031b4:	4801      	ldr	r0, [pc, #4]	; (80031bc <USART3_IRQHandler+0x8>)
 80031b6:	f7ff bb1d 	b.w	80027f4 <HAL_USART_IRQHandler>
 80031ba:	bf00      	nop
 80031bc:	200004dc 	.word	0x200004dc

080031c0 <DMA1_Stream7_IRQHandler>:
void DMA1_Stream7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 80031c0:	4801      	ldr	r0, [pc, #4]	; (80031c8 <DMA1_Stream7_IRQHandler+0x8>)
 80031c2:	f7fd bce1 	b.w	8000b88 <HAL_DMA_IRQHandler>
 80031c6:	bf00      	nop
 80031c8:	200002dc 	.word	0x200002dc

080031cc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031cc:	490f      	ldr	r1, [pc, #60]	; (800320c <SystemInit+0x40>)
 80031ce:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80031d2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80031da:	4b0d      	ldr	r3, [pc, #52]	; (8003210 <SystemInit+0x44>)
 80031dc:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80031de:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80031e0:	f042 0201 	orr.w	r2, r2, #1
 80031e4:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80031e6:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80031ee:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80031f2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80031f4:	4a07      	ldr	r2, [pc, #28]	; (8003214 <SystemInit+0x48>)
 80031f6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80031fe:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003200:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003202:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003206:	608b      	str	r3, [r1, #8]
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	e000ed00 	.word	0xe000ed00
 8003210:	40023800 	.word	0x40023800
 8003214:	24003010 	.word	0x24003010

08003218 <MX_TIM10_Init>:
}
/* TIM10 init function */
void MX_TIM10_Init(void)
{

  htim10.Instance = TIM10;
 8003218:	480a      	ldr	r0, [pc, #40]	; (8003244 <MX_TIM10_Init+0x2c>)
  htim10.Init.Prescaler = 83;
 800321a:	490b      	ldr	r1, [pc, #44]	; (8003248 <MX_TIM10_Init+0x30>)
{
 800321c:	b508      	push	{r3, lr}
  htim10.Init.Prescaler = 83;
 800321e:	2353      	movs	r3, #83	; 0x53
 8003220:	e880 000a 	stmia.w	r0, {r1, r3}
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim10.Init.Period = 999;
 8003224:	f240 32e7 	movw	r2, #999	; 0x3e7
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003228:	2300      	movs	r3, #0
 800322a:	6083      	str	r3, [r0, #8]
  htim10.Init.Period = 999;
 800322c:	60c2      	str	r2, [r0, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800322e:	6103      	str	r3, [r0, #16]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8003230:	f7ff f844 	bl	80022bc <HAL_TIM_Base_Init>
 8003234:	b128      	cbz	r0, 8003242 <MX_TIM10_Init+0x2a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003236:	21fb      	movs	r1, #251	; 0xfb
 8003238:	4804      	ldr	r0, [pc, #16]	; (800324c <MX_TIM10_Init+0x34>)
  }

}
 800323a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 800323e:	f7ff bf19 	b.w	8003074 <_Error_Handler>
 8003242:	bd08      	pop	{r3, pc}
 8003244:	20000428 	.word	0x20000428
 8003248:	40014400 	.word	0x40014400
 800324c:	080037c6 	.word	0x080037c6

08003250 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003250:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  if(tim_baseHandle->Instance==TIM1)
 8003252:	6803      	ldr	r3, [r0, #0]
 8003254:	4a24      	ldr	r2, [pc, #144]	; (80032e8 <HAL_TIM_Base_MspInit+0x98>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d113      	bne.n	8003282 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800325a:	4b24      	ldr	r3, [pc, #144]	; (80032ec <HAL_TIM_Base_MspInit+0x9c>)
 800325c:	2200      	movs	r2, #0
 800325e:	9200      	str	r2, [sp, #0]
 8003260:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003262:	f041 0101 	orr.w	r1, r1, #1
 8003266:	6459      	str	r1, [r3, #68]	; 0x44
 8003268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	9300      	str	r3, [sp, #0]
 8003270:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003272:	4611      	mov	r1, r2
 8003274:	2019      	movs	r0, #25
 8003276:	f7fd fb79 	bl	800096c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800327a:	2019      	movs	r0, #25
 800327c:	f7fd fbaa 	bl	80009d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8003280:	e00e      	b.n	80032a0 <HAL_TIM_Base_MspInit+0x50>
  else if(tim_baseHandle->Instance==TIM3)
 8003282:	4a1b      	ldr	r2, [pc, #108]	; (80032f0 <HAL_TIM_Base_MspInit+0xa0>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d10e      	bne.n	80032a6 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003288:	2300      	movs	r3, #0
 800328a:	9301      	str	r3, [sp, #4]
 800328c:	4b17      	ldr	r3, [pc, #92]	; (80032ec <HAL_TIM_Base_MspInit+0x9c>)
 800328e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003290:	f042 0202 	orr.w	r2, r2, #2
 8003294:	641a      	str	r2, [r3, #64]	; 0x40
 8003296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003298:	f003 0302 	and.w	r3, r3, #2
 800329c:	9301      	str	r3, [sp, #4]
 800329e:	9b01      	ldr	r3, [sp, #4]
}
 80032a0:	b005      	add	sp, #20
 80032a2:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(tim_baseHandle->Instance==TIM4)
 80032a6:	4a13      	ldr	r2, [pc, #76]	; (80032f4 <HAL_TIM_Base_MspInit+0xa4>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d10c      	bne.n	80032c6 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80032ac:	2300      	movs	r3, #0
 80032ae:	9302      	str	r3, [sp, #8]
 80032b0:	4b0e      	ldr	r3, [pc, #56]	; (80032ec <HAL_TIM_Base_MspInit+0x9c>)
 80032b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032b4:	f042 0204 	orr.w	r2, r2, #4
 80032b8:	641a      	str	r2, [r3, #64]	; 0x40
 80032ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032bc:	f003 0304 	and.w	r3, r3, #4
 80032c0:	9302      	str	r3, [sp, #8]
 80032c2:	9b02      	ldr	r3, [sp, #8]
 80032c4:	e7ec      	b.n	80032a0 <HAL_TIM_Base_MspInit+0x50>
  else if(tim_baseHandle->Instance==TIM10)
 80032c6:	4a0c      	ldr	r2, [pc, #48]	; (80032f8 <HAL_TIM_Base_MspInit+0xa8>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d1e9      	bne.n	80032a0 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80032cc:	4b07      	ldr	r3, [pc, #28]	; (80032ec <HAL_TIM_Base_MspInit+0x9c>)
 80032ce:	2200      	movs	r2, #0
 80032d0:	9203      	str	r2, [sp, #12]
 80032d2:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80032d4:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80032d8:	6459      	str	r1, [r3, #68]	; 0x44
 80032da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e0:	9303      	str	r3, [sp, #12]
 80032e2:	9b03      	ldr	r3, [sp, #12]
 80032e4:	e7c5      	b.n	8003272 <HAL_TIM_Base_MspInit+0x22>
 80032e6:	bf00      	nop
 80032e8:	40010000 	.word	0x40010000
 80032ec:	40023800 	.word	0x40023800
 80032f0:	40000400 	.word	0x40000400
 80032f4:	40000800 	.word	0x40000800
 80032f8:	40014400 	.word	0x40014400

080032fc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80032fc:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(timHandle->Instance==TIM1)
 80032fe:	6803      	ldr	r3, [r0, #0]
 8003300:	4a1e      	ldr	r2, [pc, #120]	; (800337c <HAL_TIM_MspPostInit+0x80>)
 8003302:	4293      	cmp	r3, r2
{
 8003304:	b086      	sub	sp, #24
  if(timHandle->Instance==TIM1)
 8003306:	d110      	bne.n	800332a <HAL_TIM_MspPostInit+0x2e>
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 8003308:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 800330c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800330e:	2312      	movs	r3, #18
 8003310:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003312:	2300      	movs	r3, #0
 8003314:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003316:	2303      	movs	r3, #3
 8003318:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800331a:	4819      	ldr	r0, [pc, #100]	; (8003380 <HAL_TIM_MspPostInit+0x84>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800331c:	2301      	movs	r3, #1
 800331e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003320:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003322:	f7fd fceb 	bl	8000cfc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003326:	b006      	add	sp, #24
 8003328:	bd70      	pop	{r4, r5, r6, pc}
  else if(timHandle->Instance==TIM3)
 800332a:	4a16      	ldr	r2, [pc, #88]	; (8003384 <HAL_TIM_MspPostInit+0x88>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d115      	bne.n	800335c <HAL_TIM_MspPostInit+0x60>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003330:	2402      	movs	r4, #2
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003332:	23c0      	movs	r3, #192	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003334:	2600      	movs	r6, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003336:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003338:	a901      	add	r1, sp, #4
 800333a:	4813      	ldr	r0, [pc, #76]	; (8003388 <HAL_TIM_MspPostInit+0x8c>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800333c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800333e:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003340:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003342:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003344:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003346:	f7fd fcd9 	bl	8000cfc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800334a:	2301      	movs	r3, #1
 800334c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800334e:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003350:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003352:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003354:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003356:	a901      	add	r1, sp, #4
 8003358:	480c      	ldr	r0, [pc, #48]	; (800338c <HAL_TIM_MspPostInit+0x90>)
 800335a:	e7e2      	b.n	8003322 <HAL_TIM_MspPostInit+0x26>
  else if(timHandle->Instance==TIM4)
 800335c:	4a0c      	ldr	r2, [pc, #48]	; (8003390 <HAL_TIM_MspPostInit+0x94>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d1e1      	bne.n	8003326 <HAL_TIM_MspPostInit+0x2a>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8003362:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003366:	2200      	movs	r2, #0
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8003368:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800336a:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800336c:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800336e:	2203      	movs	r2, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003370:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003372:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003374:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003376:	a901      	add	r1, sp, #4
 8003378:	4806      	ldr	r0, [pc, #24]	; (8003394 <HAL_TIM_MspPostInit+0x98>)
 800337a:	e7d2      	b.n	8003322 <HAL_TIM_MspPostInit+0x26>
 800337c:	40010000 	.word	0x40010000
 8003380:	40021000 	.word	0x40021000
 8003384:	40000400 	.word	0x40000400
 8003388:	40020000 	.word	0x40020000
 800338c:	40020400 	.word	0x40020400
 8003390:	40000800 	.word	0x40000800
 8003394:	40020c00 	.word	0x40020c00

08003398 <MX_TIM1_Init>:
{
 8003398:	b500      	push	{lr}
  htim1.Instance = TIM1;
 800339a:	483a      	ldr	r0, [pc, #232]	; (8003484 <MX_TIM1_Init+0xec>)
  htim1.Init.Prescaler = 6;
 800339c:	493a      	ldr	r1, [pc, #232]	; (8003488 <MX_TIM1_Init+0xf0>)
 800339e:	2306      	movs	r3, #6
{
 80033a0:	b095      	sub	sp, #84	; 0x54
  htim1.Init.Prescaler = 6;
 80033a2:	e880 000a 	stmia.w	r0, {r1, r3}
  htim1.Init.Period = 399;
 80033a6:	f240 128f 	movw	r2, #399	; 0x18f
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033aa:	2300      	movs	r3, #0
 80033ac:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 399;
 80033ae:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033b0:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 80033b2:	6143      	str	r3, [r0, #20]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80033b4:	f7fe ff82 	bl	80022bc <HAL_TIM_Base_Init>
 80033b8:	b118      	cbz	r0, 80033c2 <MX_TIM1_Init+0x2a>
    _Error_Handler(__FILE__, __LINE__);
 80033ba:	2144      	movs	r1, #68	; 0x44
 80033bc:	4833      	ldr	r0, [pc, #204]	; (800348c <MX_TIM1_Init+0xf4>)
 80033be:	f7ff fe59 	bl	8003074 <_Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80033c2:	a914      	add	r1, sp, #80	; 0x50
 80033c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033c8:	f841 3d48 	str.w	r3, [r1, #-72]!
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80033cc:	482d      	ldr	r0, [pc, #180]	; (8003484 <MX_TIM1_Init+0xec>)
 80033ce:	f7fe fdb1 	bl	8001f34 <HAL_TIM_ConfigClockSource>
 80033d2:	b118      	cbz	r0, 80033dc <MX_TIM1_Init+0x44>
    _Error_Handler(__FILE__, __LINE__);
 80033d4:	214a      	movs	r1, #74	; 0x4a
 80033d6:	482d      	ldr	r0, [pc, #180]	; (800348c <MX_TIM1_Init+0xf4>)
 80033d8:	f7ff fe4c 	bl	8003074 <_Error_Handler>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80033dc:	4829      	ldr	r0, [pc, #164]	; (8003484 <MX_TIM1_Init+0xec>)
 80033de:	f7fe ff87 	bl	80022f0 <HAL_TIM_PWM_Init>
 80033e2:	b118      	cbz	r0, 80033ec <MX_TIM1_Init+0x54>
    _Error_Handler(__FILE__, __LINE__);
 80033e4:	214f      	movs	r1, #79	; 0x4f
 80033e6:	4829      	ldr	r0, [pc, #164]	; (800348c <MX_TIM1_Init+0xf4>)
 80033e8:	f7ff fe44 	bl	8003074 <_Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033ec:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80033ee:	4669      	mov	r1, sp
 80033f0:	4824      	ldr	r0, [pc, #144]	; (8003484 <MX_TIM1_Init+0xec>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033f2:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033f4:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80033f6:	f7ff f84d 	bl	8002494 <HAL_TIMEx_MasterConfigSynchronization>
 80033fa:	b118      	cbz	r0, 8003404 <MX_TIM1_Init+0x6c>
    _Error_Handler(__FILE__, __LINE__);
 80033fc:	2156      	movs	r1, #86	; 0x56
 80033fe:	4823      	ldr	r0, [pc, #140]	; (800348c <MX_TIM1_Init+0xf4>)
 8003400:	f7ff fe38 	bl	8003074 <_Error_Handler>
  sConfigOC.Pulse = 0;
 8003404:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003406:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003408:	a906      	add	r1, sp, #24
 800340a:	481e      	ldr	r0, [pc, #120]	; (8003484 <MX_TIM1_Init+0xec>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800340c:	9306      	str	r3, [sp, #24]
  sConfigOC.Pulse = 0;
 800340e:	9207      	str	r2, [sp, #28]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003410:	9208      	str	r2, [sp, #32]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003412:	9209      	str	r2, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003414:	920a      	str	r2, [sp, #40]	; 0x28
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003416:	920b      	str	r2, [sp, #44]	; 0x2c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003418:	920c      	str	r2, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800341a:	f7fe ffb3 	bl	8002384 <HAL_TIM_PWM_ConfigChannel>
 800341e:	b118      	cbz	r0, 8003428 <MX_TIM1_Init+0x90>
    _Error_Handler(__FILE__, __LINE__);
 8003420:	2162      	movs	r1, #98	; 0x62
 8003422:	481a      	ldr	r0, [pc, #104]	; (800348c <MX_TIM1_Init+0xf4>)
 8003424:	f7ff fe26 	bl	8003074 <_Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003428:	2204      	movs	r2, #4
 800342a:	a906      	add	r1, sp, #24
 800342c:	4815      	ldr	r0, [pc, #84]	; (8003484 <MX_TIM1_Init+0xec>)
 800342e:	f7fe ffa9 	bl	8002384 <HAL_TIM_PWM_ConfigChannel>
 8003432:	b118      	cbz	r0, 800343c <MX_TIM1_Init+0xa4>
    _Error_Handler(__FILE__, __LINE__);
 8003434:	2167      	movs	r1, #103	; 0x67
 8003436:	4815      	ldr	r0, [pc, #84]	; (800348c <MX_TIM1_Init+0xf4>)
 8003438:	f7ff fe1c 	bl	8003074 <_Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800343c:	2208      	movs	r2, #8
 800343e:	a906      	add	r1, sp, #24
 8003440:	4810      	ldr	r0, [pc, #64]	; (8003484 <MX_TIM1_Init+0xec>)
 8003442:	f7fe ff9f 	bl	8002384 <HAL_TIM_PWM_ConfigChannel>
 8003446:	b118      	cbz	r0, 8003450 <MX_TIM1_Init+0xb8>
    _Error_Handler(__FILE__, __LINE__);
 8003448:	216c      	movs	r1, #108	; 0x6c
 800344a:	4810      	ldr	r0, [pc, #64]	; (800348c <MX_TIM1_Init+0xf4>)
 800344c:	f7ff fe12 	bl	8003074 <_Error_Handler>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003450:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003452:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003456:	a90d      	add	r1, sp, #52	; 0x34
 8003458:	480a      	ldr	r0, [pc, #40]	; (8003484 <MX_TIM1_Init+0xec>)
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800345a:	930d      	str	r3, [sp, #52]	; 0x34
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800345c:	930e      	str	r3, [sp, #56]	; 0x38
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800345e:	930f      	str	r3, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.DeadTime = 0;
 8003460:	9310      	str	r3, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003462:	9311      	str	r3, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003464:	9212      	str	r2, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003466:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003468:	f7ff f836 	bl	80024d8 <HAL_TIMEx_ConfigBreakDeadTime>
 800346c:	b118      	cbz	r0, 8003476 <MX_TIM1_Init+0xde>
    _Error_Handler(__FILE__, __LINE__);
 800346e:	2178      	movs	r1, #120	; 0x78
 8003470:	4806      	ldr	r0, [pc, #24]	; (800348c <MX_TIM1_Init+0xf4>)
 8003472:	f7ff fdff 	bl	8003074 <_Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 8003476:	4803      	ldr	r0, [pc, #12]	; (8003484 <MX_TIM1_Init+0xec>)
 8003478:	f7ff ff40 	bl	80032fc <HAL_TIM_MspPostInit>
}
 800347c:	b015      	add	sp, #84	; 0x54
 800347e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003482:	bf00      	nop
 8003484:	200004a0 	.word	0x200004a0
 8003488:	40010000 	.word	0x40010000
 800348c:	080037c6 	.word	0x080037c6

08003490 <MX_TIM3_Init>:
{
 8003490:	b500      	push	{lr}
  htim3.Instance = TIM3;
 8003492:	482e      	ldr	r0, [pc, #184]	; (800354c <MX_TIM3_Init+0xbc>)
  htim3.Init.Prescaler = 6;
 8003494:	492e      	ldr	r1, [pc, #184]	; (8003550 <MX_TIM3_Init+0xc0>)
 8003496:	2306      	movs	r3, #6
{
 8003498:	b08f      	sub	sp, #60	; 0x3c
  htim3.Init.Prescaler = 6;
 800349a:	e880 000a 	stmia.w	r0, {r1, r3}
  htim3.Init.Period = 399;
 800349e:	f240 128f 	movw	r2, #399	; 0x18f
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034a2:	2300      	movs	r3, #0
 80034a4:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 399;
 80034a6:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034a8:	6103      	str	r3, [r0, #16]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80034aa:	f7fe ff07 	bl	80022bc <HAL_TIM_Base_Init>
 80034ae:	b118      	cbz	r0, 80034b8 <MX_TIM3_Init+0x28>
    _Error_Handler(__FILE__, __LINE__);
 80034b0:	218c      	movs	r1, #140	; 0x8c
 80034b2:	4828      	ldr	r0, [pc, #160]	; (8003554 <MX_TIM3_Init+0xc4>)
 80034b4:	f7ff fdde 	bl	8003074 <_Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034b8:	a90e      	add	r1, sp, #56	; 0x38
 80034ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034be:	f841 3d2c 	str.w	r3, [r1, #-44]!
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80034c2:	4822      	ldr	r0, [pc, #136]	; (800354c <MX_TIM3_Init+0xbc>)
 80034c4:	f7fe fd36 	bl	8001f34 <HAL_TIM_ConfigClockSource>
 80034c8:	b118      	cbz	r0, 80034d2 <MX_TIM3_Init+0x42>
    _Error_Handler(__FILE__, __LINE__);
 80034ca:	2192      	movs	r1, #146	; 0x92
 80034cc:	4821      	ldr	r0, [pc, #132]	; (8003554 <MX_TIM3_Init+0xc4>)
 80034ce:	f7ff fdd1 	bl	8003074 <_Error_Handler>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80034d2:	481e      	ldr	r0, [pc, #120]	; (800354c <MX_TIM3_Init+0xbc>)
 80034d4:	f7fe ff0c 	bl	80022f0 <HAL_TIM_PWM_Init>
 80034d8:	b118      	cbz	r0, 80034e2 <MX_TIM3_Init+0x52>
    _Error_Handler(__FILE__, __LINE__);
 80034da:	2197      	movs	r1, #151	; 0x97
 80034dc:	481d      	ldr	r0, [pc, #116]	; (8003554 <MX_TIM3_Init+0xc4>)
 80034de:	f7ff fdc9 	bl	8003074 <_Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034e2:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80034e4:	a901      	add	r1, sp, #4
 80034e6:	4819      	ldr	r0, [pc, #100]	; (800354c <MX_TIM3_Init+0xbc>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034e8:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034ea:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80034ec:	f7fe ffd2 	bl	8002494 <HAL_TIMEx_MasterConfigSynchronization>
 80034f0:	b118      	cbz	r0, 80034fa <MX_TIM3_Init+0x6a>
    _Error_Handler(__FILE__, __LINE__);
 80034f2:	219e      	movs	r1, #158	; 0x9e
 80034f4:	4817      	ldr	r0, [pc, #92]	; (8003554 <MX_TIM3_Init+0xc4>)
 80034f6:	f7ff fdbd 	bl	8003074 <_Error_Handler>
  sConfigOC.Pulse = 0;
 80034fa:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80034fc:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80034fe:	a907      	add	r1, sp, #28
 8003500:	4812      	ldr	r0, [pc, #72]	; (800354c <MX_TIM3_Init+0xbc>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003502:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 0;
 8003504:	9208      	str	r2, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003506:	9209      	str	r2, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003508:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800350a:	f7fe ff3b 	bl	8002384 <HAL_TIM_PWM_ConfigChannel>
 800350e:	b118      	cbz	r0, 8003518 <MX_TIM3_Init+0x88>
    _Error_Handler(__FILE__, __LINE__);
 8003510:	21a7      	movs	r1, #167	; 0xa7
 8003512:	4810      	ldr	r0, [pc, #64]	; (8003554 <MX_TIM3_Init+0xc4>)
 8003514:	f7ff fdae 	bl	8003074 <_Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003518:	2204      	movs	r2, #4
 800351a:	a907      	add	r1, sp, #28
 800351c:	480b      	ldr	r0, [pc, #44]	; (800354c <MX_TIM3_Init+0xbc>)
 800351e:	f7fe ff31 	bl	8002384 <HAL_TIM_PWM_ConfigChannel>
 8003522:	b118      	cbz	r0, 800352c <MX_TIM3_Init+0x9c>
    _Error_Handler(__FILE__, __LINE__);
 8003524:	21ac      	movs	r1, #172	; 0xac
 8003526:	480b      	ldr	r0, [pc, #44]	; (8003554 <MX_TIM3_Init+0xc4>)
 8003528:	f7ff fda4 	bl	8003074 <_Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800352c:	2208      	movs	r2, #8
 800352e:	a907      	add	r1, sp, #28
 8003530:	4806      	ldr	r0, [pc, #24]	; (800354c <MX_TIM3_Init+0xbc>)
 8003532:	f7fe ff27 	bl	8002384 <HAL_TIM_PWM_ConfigChannel>
 8003536:	b118      	cbz	r0, 8003540 <MX_TIM3_Init+0xb0>
    _Error_Handler(__FILE__, __LINE__);
 8003538:	21b1      	movs	r1, #177	; 0xb1
 800353a:	4806      	ldr	r0, [pc, #24]	; (8003554 <MX_TIM3_Init+0xc4>)
 800353c:	f7ff fd9a 	bl	8003074 <_Error_Handler>
  HAL_TIM_MspPostInit(&htim3);
 8003540:	4802      	ldr	r0, [pc, #8]	; (800354c <MX_TIM3_Init+0xbc>)
 8003542:	f7ff fedb 	bl	80032fc <HAL_TIM_MspPostInit>
}
 8003546:	b00f      	add	sp, #60	; 0x3c
 8003548:	f85d fb04 	ldr.w	pc, [sp], #4
 800354c:	20000464 	.word	0x20000464
 8003550:	40000400 	.word	0x40000400
 8003554:	080037c6 	.word	0x080037c6

08003558 <MX_TIM4_Init>:
{
 8003558:	b500      	push	{lr}
  htim4.Instance = TIM4;
 800355a:	482e      	ldr	r0, [pc, #184]	; (8003614 <MX_TIM4_Init+0xbc>)
  htim4.Init.Prescaler = 6;
 800355c:	492e      	ldr	r1, [pc, #184]	; (8003618 <MX_TIM4_Init+0xc0>)
 800355e:	2306      	movs	r3, #6
{
 8003560:	b08f      	sub	sp, #60	; 0x3c
  htim4.Init.Prescaler = 6;
 8003562:	e880 000a 	stmia.w	r0, {r1, r3}
  htim4.Init.Period = 399;
 8003566:	f240 128f 	movw	r2, #399	; 0x18f
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800356a:	2300      	movs	r3, #0
 800356c:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 399;
 800356e:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003570:	6103      	str	r3, [r0, #16]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003572:	f7fe fea3 	bl	80022bc <HAL_TIM_Base_Init>
 8003576:	b118      	cbz	r0, 8003580 <MX_TIM4_Init+0x28>
    _Error_Handler(__FILE__, __LINE__);
 8003578:	21c5      	movs	r1, #197	; 0xc5
 800357a:	4828      	ldr	r0, [pc, #160]	; (800361c <MX_TIM4_Init+0xc4>)
 800357c:	f7ff fd7a 	bl	8003074 <_Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003580:	a90e      	add	r1, sp, #56	; 0x38
 8003582:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003586:	f841 3d2c 	str.w	r3, [r1, #-44]!
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800358a:	4822      	ldr	r0, [pc, #136]	; (8003614 <MX_TIM4_Init+0xbc>)
 800358c:	f7fe fcd2 	bl	8001f34 <HAL_TIM_ConfigClockSource>
 8003590:	b118      	cbz	r0, 800359a <MX_TIM4_Init+0x42>
    _Error_Handler(__FILE__, __LINE__);
 8003592:	21cb      	movs	r1, #203	; 0xcb
 8003594:	4821      	ldr	r0, [pc, #132]	; (800361c <MX_TIM4_Init+0xc4>)
 8003596:	f7ff fd6d 	bl	8003074 <_Error_Handler>
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800359a:	481e      	ldr	r0, [pc, #120]	; (8003614 <MX_TIM4_Init+0xbc>)
 800359c:	f7fe fea8 	bl	80022f0 <HAL_TIM_PWM_Init>
 80035a0:	b118      	cbz	r0, 80035aa <MX_TIM4_Init+0x52>
    _Error_Handler(__FILE__, __LINE__);
 80035a2:	21d0      	movs	r1, #208	; 0xd0
 80035a4:	481d      	ldr	r0, [pc, #116]	; (800361c <MX_TIM4_Init+0xc4>)
 80035a6:	f7ff fd65 	bl	8003074 <_Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035aa:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80035ac:	a901      	add	r1, sp, #4
 80035ae:	4819      	ldr	r0, [pc, #100]	; (8003614 <MX_TIM4_Init+0xbc>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035b0:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035b2:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80035b4:	f7fe ff6e 	bl	8002494 <HAL_TIMEx_MasterConfigSynchronization>
 80035b8:	b118      	cbz	r0, 80035c2 <MX_TIM4_Init+0x6a>
    _Error_Handler(__FILE__, __LINE__);
 80035ba:	21d7      	movs	r1, #215	; 0xd7
 80035bc:	4817      	ldr	r0, [pc, #92]	; (800361c <MX_TIM4_Init+0xc4>)
 80035be:	f7ff fd59 	bl	8003074 <_Error_Handler>
  sConfigOC.Pulse = 0;
 80035c2:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80035c4:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80035c6:	a907      	add	r1, sp, #28
 80035c8:	4812      	ldr	r0, [pc, #72]	; (8003614 <MX_TIM4_Init+0xbc>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80035ca:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 0;
 80035cc:	9208      	str	r2, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80035ce:	9209      	str	r2, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80035d0:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80035d2:	f7fe fed7 	bl	8002384 <HAL_TIM_PWM_ConfigChannel>
 80035d6:	b118      	cbz	r0, 80035e0 <MX_TIM4_Init+0x88>
    _Error_Handler(__FILE__, __LINE__);
 80035d8:	21e0      	movs	r1, #224	; 0xe0
 80035da:	4810      	ldr	r0, [pc, #64]	; (800361c <MX_TIM4_Init+0xc4>)
 80035dc:	f7ff fd4a 	bl	8003074 <_Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80035e0:	2204      	movs	r2, #4
 80035e2:	a907      	add	r1, sp, #28
 80035e4:	480b      	ldr	r0, [pc, #44]	; (8003614 <MX_TIM4_Init+0xbc>)
 80035e6:	f7fe fecd 	bl	8002384 <HAL_TIM_PWM_ConfigChannel>
 80035ea:	b118      	cbz	r0, 80035f4 <MX_TIM4_Init+0x9c>
    _Error_Handler(__FILE__, __LINE__);
 80035ec:	21e5      	movs	r1, #229	; 0xe5
 80035ee:	480b      	ldr	r0, [pc, #44]	; (800361c <MX_TIM4_Init+0xc4>)
 80035f0:	f7ff fd40 	bl	8003074 <_Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80035f4:	2208      	movs	r2, #8
 80035f6:	a907      	add	r1, sp, #28
 80035f8:	4806      	ldr	r0, [pc, #24]	; (8003614 <MX_TIM4_Init+0xbc>)
 80035fa:	f7fe fec3 	bl	8002384 <HAL_TIM_PWM_ConfigChannel>
 80035fe:	b118      	cbz	r0, 8003608 <MX_TIM4_Init+0xb0>
    _Error_Handler(__FILE__, __LINE__);
 8003600:	21ea      	movs	r1, #234	; 0xea
 8003602:	4806      	ldr	r0, [pc, #24]	; (800361c <MX_TIM4_Init+0xc4>)
 8003604:	f7ff fd36 	bl	8003074 <_Error_Handler>
  HAL_TIM_MspPostInit(&htim4);
 8003608:	4802      	ldr	r0, [pc, #8]	; (8003614 <MX_TIM4_Init+0xbc>)
 800360a:	f7ff fe77 	bl	80032fc <HAL_TIM_MspPostInit>
}
 800360e:	b00f      	add	sp, #60	; 0x3c
 8003610:	f85d fb04 	ldr.w	pc, [sp], #4
 8003614:	200003ec 	.word	0x200003ec
 8003618:	40000800 	.word	0x40000800
 800361c:	080037c6 	.word	0x080037c6

08003620 <MX_USART3_Init>:

USART_HandleTypeDef husart3;

/* USART3 init function */
void MX_USART3_Init(void)
{
 8003620:	b508      	push	{r3, lr}

  husart3.Instance = USART3;
 8003622:	480c      	ldr	r0, [pc, #48]	; (8003654 <MX_USART3_Init+0x34>)
  husart3.Init.BaudRate = 115200;
 8003624:	4b0c      	ldr	r3, [pc, #48]	; (8003658 <MX_USART3_Init+0x38>)
 8003626:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 800362a:	e880 4008 	stmia.w	r0, {r3, lr}
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
  husart3.Init.StopBits = USART_STOPBITS_1;
  husart3.Init.Parity = USART_PARITY_NONE;
  husart3.Init.Mode = USART_MODE_TX_RX;
 800362e:	220c      	movs	r2, #12
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 8003630:	2300      	movs	r3, #0
 8003632:	6083      	str	r3, [r0, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 8003634:	60c3      	str	r3, [r0, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 8003636:	6103      	str	r3, [r0, #16]
  husart3.Init.Mode = USART_MODE_TX_RX;
 8003638:	6142      	str	r2, [r0, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_LOW;
 800363a:	6183      	str	r3, [r0, #24]
  husart3.Init.CLKPhase = USART_PHASE_1EDGE;
 800363c:	61c3      	str	r3, [r0, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 800363e:	6203      	str	r3, [r0, #32]
  if (HAL_USART_Init(&husart3) != HAL_OK)
 8003640:	f7fe ff80 	bl	8002544 <HAL_USART_Init>
 8003644:	b128      	cbz	r0, 8003652 <MX_USART3_Init+0x32>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003646:	2142      	movs	r1, #66	; 0x42
 8003648:	4804      	ldr	r0, [pc, #16]	; (800365c <MX_USART3_Init+0x3c>)
  }

}
 800364a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 800364e:	f7ff bd11 	b.w	8003074 <_Error_Handler>
 8003652:	bd08      	pop	{r3, pc}
 8003654:	200004dc 	.word	0x200004dc
 8003658:	40004800 	.word	0x40004800
 800365c:	080037d3 	.word	0x080037d3

08003660 <HAL_USART_MspInit>:

void HAL_USART_MspInit(USART_HandleTypeDef* usartHandle)
{
 8003660:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(usartHandle->Instance==USART3)
 8003662:	6802      	ldr	r2, [r0, #0]
 8003664:	4b19      	ldr	r3, [pc, #100]	; (80036cc <HAL_USART_MspInit+0x6c>)
 8003666:	429a      	cmp	r2, r3
{
 8003668:	b087      	sub	sp, #28
  if(usartHandle->Instance==USART3)
 800366a:	d12d      	bne.n	80036c8 <HAL_USART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800366c:	2400      	movs	r4, #0
 800366e:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 8003672:	9400      	str	r4, [sp, #0]
 8003674:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003676:	4816      	ldr	r0, [pc, #88]	; (80036d0 <HAL_USART_MspInit+0x70>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8003678:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800367c:	641a      	str	r2, [r3, #64]	; 0x40
 800367e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003680:	9403      	str	r4, [sp, #12]
    __HAL_RCC_USART3_CLK_ENABLE();
 8003682:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003686:	9300      	str	r3, [sp, #0]
 8003688:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800368a:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800368c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003690:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003692:	2507      	movs	r5, #7
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003694:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003696:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003698:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800369a:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800369c:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800369e:	f7fd fb2d 	bl	8000cfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80036a2:	f44f 7340 	mov.w	r3, #768	; 0x300
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80036a6:	a901      	add	r1, sp, #4
 80036a8:	480a      	ldr	r0, [pc, #40]	; (80036d4 <HAL_USART_MspInit+0x74>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80036aa:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ac:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ae:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036b0:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80036b2:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80036b4:	f7fd fb22 	bl	8000cfc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80036b8:	2027      	movs	r0, #39	; 0x27
 80036ba:	4622      	mov	r2, r4
 80036bc:	4621      	mov	r1, r4
 80036be:	f7fd f955 	bl	800096c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80036c2:	2027      	movs	r0, #39	; 0x27
 80036c4:	f7fd f986 	bl	80009d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80036c8:	b007      	add	sp, #28
 80036ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036cc:	40004800 	.word	0x40004800
 80036d0:	40020400 	.word	0x40020400
 80036d4:	40020c00 	.word	0x40020c00

080036d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80036d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003710 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80036dc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80036de:	e003      	b.n	80036e8 <LoopCopyDataInit>

080036e0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80036e0:	4b0c      	ldr	r3, [pc, #48]	; (8003714 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80036e2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80036e4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80036e6:	3104      	adds	r1, #4

080036e8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80036e8:	480b      	ldr	r0, [pc, #44]	; (8003718 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80036ea:	4b0c      	ldr	r3, [pc, #48]	; (800371c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80036ec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80036ee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80036f0:	d3f6      	bcc.n	80036e0 <CopyDataInit>
  ldr  r2, =_sbss
 80036f2:	4a0b      	ldr	r2, [pc, #44]	; (8003720 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80036f4:	e002      	b.n	80036fc <LoopFillZerobss>

080036f6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80036f6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80036f8:	f842 3b04 	str.w	r3, [r2], #4

080036fc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80036fc:	4b09      	ldr	r3, [pc, #36]	; (8003724 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80036fe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003700:	d3f9      	bcc.n	80036f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003702:	f7ff fd63 	bl	80031cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003706:	f000 f811 	bl	800372c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800370a:	f7ff fc67 	bl	8002fdc <main>
  bx  lr    
 800370e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003710:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003714:	080037f4 	.word	0x080037f4
  ldr  r0, =_sdata
 8003718:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800371c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8003720:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8003724:	20000520 	.word	0x20000520

08003728 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003728:	e7fe      	b.n	8003728 <CAN1_RX0_IRQHandler>
	...

0800372c <__libc_init_array>:
 800372c:	b570      	push	{r4, r5, r6, lr}
 800372e:	4e0d      	ldr	r6, [pc, #52]	; (8003764 <__libc_init_array+0x38>)
 8003730:	4c0d      	ldr	r4, [pc, #52]	; (8003768 <__libc_init_array+0x3c>)
 8003732:	1ba4      	subs	r4, r4, r6
 8003734:	10a4      	asrs	r4, r4, #2
 8003736:	2500      	movs	r5, #0
 8003738:	42a5      	cmp	r5, r4
 800373a:	d109      	bne.n	8003750 <__libc_init_array+0x24>
 800373c:	4e0b      	ldr	r6, [pc, #44]	; (800376c <__libc_init_array+0x40>)
 800373e:	4c0c      	ldr	r4, [pc, #48]	; (8003770 <__libc_init_array+0x44>)
 8003740:	f000 f818 	bl	8003774 <_init>
 8003744:	1ba4      	subs	r4, r4, r6
 8003746:	10a4      	asrs	r4, r4, #2
 8003748:	2500      	movs	r5, #0
 800374a:	42a5      	cmp	r5, r4
 800374c:	d105      	bne.n	800375a <__libc_init_array+0x2e>
 800374e:	bd70      	pop	{r4, r5, r6, pc}
 8003750:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003754:	4798      	blx	r3
 8003756:	3501      	adds	r5, #1
 8003758:	e7ee      	b.n	8003738 <__libc_init_array+0xc>
 800375a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800375e:	4798      	blx	r3
 8003760:	3501      	adds	r5, #1
 8003762:	e7f2      	b.n	800374a <__libc_init_array+0x1e>
 8003764:	080037ec 	.word	0x080037ec
 8003768:	080037ec 	.word	0x080037ec
 800376c:	080037ec 	.word	0x080037ec
 8003770:	080037f0 	.word	0x080037f0

08003774 <_init>:
 8003774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003776:	bf00      	nop
 8003778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800377a:	bc08      	pop	{r3}
 800377c:	469e      	mov	lr, r3
 800377e:	4770      	bx	lr

08003780 <_fini>:
 8003780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003782:	bf00      	nop
 8003784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003786:	bc08      	pop	{r3}
 8003788:	469e      	mov	lr, r3
 800378a:	4770      	bx	lr
