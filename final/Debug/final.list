
final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059fc  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08005b88  08005b88  00015b88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005c28  08005c28  00015c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005c30  08005c30  00015c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005c34  08005c34  00015c34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  20000000  08005c38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
  8 .bss          0000052c  20000078  20000078  00020078  2**3
                  ALLOC
  9 ._user_heap_stack 00000600  200005a4  200005a4  00020078  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 11 .debug_info   00023a03  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00004160  00000000  00000000  00043aab  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000b9c5  00000000  00000000  00047c0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d50  00000000  00000000  000535d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001118  00000000  00000000  00054320  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000923a  00000000  00000000  00055438  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00005086  00000000  00000000  0005e672  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  000636f8  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002d9c  00000000  00000000  00063774  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000078 	.word	0x20000078
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005b6c 	.word	0x08005b6c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000007c 	.word	0x2000007c
 80001c4:	08005b6c 	.word	0x08005b6c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__gedf2>:
 800095c:	f04f 3cff 	mov.w	ip, #4294967295
 8000960:	e006      	b.n	8000970 <__cmpdf2+0x4>
 8000962:	bf00      	nop

08000964 <__ledf2>:
 8000964:	f04f 0c01 	mov.w	ip, #1
 8000968:	e002      	b.n	8000970 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__cmpdf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000986:	d01b      	beq.n	80009c0 <__cmpdf2+0x54>
 8000988:	b001      	add	sp, #4
 800098a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800098e:	bf0c      	ite	eq
 8000990:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000994:	ea91 0f03 	teqne	r1, r3
 8000998:	bf02      	ittt	eq
 800099a:	ea90 0f02 	teqeq	r0, r2
 800099e:	2000      	moveq	r0, #0
 80009a0:	4770      	bxeq	lr
 80009a2:	f110 0f00 	cmn.w	r0, #0
 80009a6:	ea91 0f03 	teq	r1, r3
 80009aa:	bf58      	it	pl
 80009ac:	4299      	cmppl	r1, r3
 80009ae:	bf08      	it	eq
 80009b0:	4290      	cmpeq	r0, r2
 80009b2:	bf2c      	ite	cs
 80009b4:	17d8      	asrcs	r0, r3, #31
 80009b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ba:	f040 0001 	orr.w	r0, r0, #1
 80009be:	4770      	bx	lr
 80009c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c8:	d102      	bne.n	80009d0 <__cmpdf2+0x64>
 80009ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ce:	d107      	bne.n	80009e0 <__cmpdf2+0x74>
 80009d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d1d6      	bne.n	8000988 <__cmpdf2+0x1c>
 80009da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009de:	d0d3      	beq.n	8000988 <__cmpdf2+0x1c>
 80009e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop

080009e8 <__aeabi_cdrcmple>:
 80009e8:	4684      	mov	ip, r0
 80009ea:	4610      	mov	r0, r2
 80009ec:	4662      	mov	r2, ip
 80009ee:	468c      	mov	ip, r1
 80009f0:	4619      	mov	r1, r3
 80009f2:	4663      	mov	r3, ip
 80009f4:	e000      	b.n	80009f8 <__aeabi_cdcmpeq>
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdcmpeq>:
 80009f8:	b501      	push	{r0, lr}
 80009fa:	f7ff ffb7 	bl	800096c <__cmpdf2>
 80009fe:	2800      	cmp	r0, #0
 8000a00:	bf48      	it	mi
 8000a02:	f110 0f00 	cmnmi.w	r0, #0
 8000a06:	bd01      	pop	{r0, pc}

08000a08 <__aeabi_dcmpeq>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff fff4 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a10:	bf0c      	ite	eq
 8000a12:	2001      	moveq	r0, #1
 8000a14:	2000      	movne	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <__aeabi_dcmplt>:
 8000a1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a20:	f7ff ffea 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a24:	bf34      	ite	cc
 8000a26:	2001      	movcc	r0, #1
 8000a28:	2000      	movcs	r0, #0
 8000a2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2e:	bf00      	nop

08000a30 <__aeabi_dcmple>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff ffe0 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a38:	bf94      	ite	ls
 8000a3a:	2001      	movls	r0, #1
 8000a3c:	2000      	movhi	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmpge>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffce 	bl	80009e8 <__aeabi_cdrcmple>
 8000a4c:	bf94      	ite	ls
 8000a4e:	2001      	movls	r0, #1
 8000a50:	2000      	movhi	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmpgt>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffc4 	bl	80009e8 <__aeabi_cdrcmple>
 8000a60:	bf34      	ite	cc
 8000a62:	2001      	movcc	r0, #1
 8000a64:	2000      	movcs	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmpun>:
 8000a6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a74:	d102      	bne.n	8000a7c <__aeabi_dcmpun+0x10>
 8000a76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7a:	d10a      	bne.n	8000a92 <__aeabi_dcmpun+0x26>
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x20>
 8000a86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8a:	d102      	bne.n	8000a92 <__aeabi_dcmpun+0x26>
 8000a8c:	f04f 0000 	mov.w	r0, #0
 8000a90:	4770      	bx	lr
 8000a92:	f04f 0001 	mov.w	r0, #1
 8000a96:	4770      	bx	lr

08000a98 <__aeabi_d2iz>:
 8000a98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa0:	d215      	bcs.n	8000ace <__aeabi_d2iz+0x36>
 8000aa2:	d511      	bpl.n	8000ac8 <__aeabi_d2iz+0x30>
 8000aa4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aa8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aac:	d912      	bls.n	8000ad4 <__aeabi_d2iz+0x3c>
 8000aae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ab6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	bf18      	it	ne
 8000ac4:	4240      	negne	r0, r0
 8000ac6:	4770      	bx	lr
 8000ac8:	f04f 0000 	mov.w	r0, #0
 8000acc:	4770      	bx	lr
 8000ace:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad2:	d105      	bne.n	8000ae0 <__aeabi_d2iz+0x48>
 8000ad4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ad8:	bf08      	it	eq
 8000ada:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_uldivmod>:
 8000ae8:	b953      	cbnz	r3, 8000b00 <__aeabi_uldivmod+0x18>
 8000aea:	b94a      	cbnz	r2, 8000b00 <__aeabi_uldivmod+0x18>
 8000aec:	2900      	cmp	r1, #0
 8000aee:	bf08      	it	eq
 8000af0:	2800      	cmpeq	r0, #0
 8000af2:	bf1c      	itt	ne
 8000af4:	f04f 31ff 	movne.w	r1, #4294967295
 8000af8:	f04f 30ff 	movne.w	r0, #4294967295
 8000afc:	f000 b97a 	b.w	8000df4 <__aeabi_idiv0>
 8000b00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b08:	f000 f806 	bl	8000b18 <__udivmoddi4>
 8000b0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b14:	b004      	add	sp, #16
 8000b16:	4770      	bx	lr

08000b18 <__udivmoddi4>:
 8000b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b1c:	468c      	mov	ip, r1
 8000b1e:	460d      	mov	r5, r1
 8000b20:	4604      	mov	r4, r0
 8000b22:	9e08      	ldr	r6, [sp, #32]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d151      	bne.n	8000bcc <__udivmoddi4+0xb4>
 8000b28:	428a      	cmp	r2, r1
 8000b2a:	4617      	mov	r7, r2
 8000b2c:	d96d      	bls.n	8000c0a <__udivmoddi4+0xf2>
 8000b2e:	fab2 fe82 	clz	lr, r2
 8000b32:	f1be 0f00 	cmp.w	lr, #0
 8000b36:	d00b      	beq.n	8000b50 <__udivmoddi4+0x38>
 8000b38:	f1ce 0c20 	rsb	ip, lr, #32
 8000b3c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000b40:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000b44:	fa02 f70e 	lsl.w	r7, r2, lr
 8000b48:	ea4c 0c05 	orr.w	ip, ip, r5
 8000b4c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000b50:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000b54:	0c25      	lsrs	r5, r4, #16
 8000b56:	fbbc f8fa 	udiv	r8, ip, sl
 8000b5a:	fa1f f987 	uxth.w	r9, r7
 8000b5e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000b62:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000b66:	fb08 f309 	mul.w	r3, r8, r9
 8000b6a:	42ab      	cmp	r3, r5
 8000b6c:	d90a      	bls.n	8000b84 <__udivmoddi4+0x6c>
 8000b6e:	19ed      	adds	r5, r5, r7
 8000b70:	f108 32ff 	add.w	r2, r8, #4294967295
 8000b74:	f080 8123 	bcs.w	8000dbe <__udivmoddi4+0x2a6>
 8000b78:	42ab      	cmp	r3, r5
 8000b7a:	f240 8120 	bls.w	8000dbe <__udivmoddi4+0x2a6>
 8000b7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000b82:	443d      	add	r5, r7
 8000b84:	1aed      	subs	r5, r5, r3
 8000b86:	b2a4      	uxth	r4, r4
 8000b88:	fbb5 f0fa 	udiv	r0, r5, sl
 8000b8c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000b90:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b94:	fb00 f909 	mul.w	r9, r0, r9
 8000b98:	45a1      	cmp	r9, r4
 8000b9a:	d909      	bls.n	8000bb0 <__udivmoddi4+0x98>
 8000b9c:	19e4      	adds	r4, r4, r7
 8000b9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ba2:	f080 810a 	bcs.w	8000dba <__udivmoddi4+0x2a2>
 8000ba6:	45a1      	cmp	r9, r4
 8000ba8:	f240 8107 	bls.w	8000dba <__udivmoddi4+0x2a2>
 8000bac:	3802      	subs	r0, #2
 8000bae:	443c      	add	r4, r7
 8000bb0:	eba4 0409 	sub.w	r4, r4, r9
 8000bb4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bb8:	2100      	movs	r1, #0
 8000bba:	2e00      	cmp	r6, #0
 8000bbc:	d061      	beq.n	8000c82 <__udivmoddi4+0x16a>
 8000bbe:	fa24 f40e 	lsr.w	r4, r4, lr
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	6034      	str	r4, [r6, #0]
 8000bc6:	6073      	str	r3, [r6, #4]
 8000bc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bcc:	428b      	cmp	r3, r1
 8000bce:	d907      	bls.n	8000be0 <__udivmoddi4+0xc8>
 8000bd0:	2e00      	cmp	r6, #0
 8000bd2:	d054      	beq.n	8000c7e <__udivmoddi4+0x166>
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	e886 0021 	stmia.w	r6, {r0, r5}
 8000bda:	4608      	mov	r0, r1
 8000bdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be0:	fab3 f183 	clz	r1, r3
 8000be4:	2900      	cmp	r1, #0
 8000be6:	f040 808e 	bne.w	8000d06 <__udivmoddi4+0x1ee>
 8000bea:	42ab      	cmp	r3, r5
 8000bec:	d302      	bcc.n	8000bf4 <__udivmoddi4+0xdc>
 8000bee:	4282      	cmp	r2, r0
 8000bf0:	f200 80fa 	bhi.w	8000de8 <__udivmoddi4+0x2d0>
 8000bf4:	1a84      	subs	r4, r0, r2
 8000bf6:	eb65 0503 	sbc.w	r5, r5, r3
 8000bfa:	2001      	movs	r0, #1
 8000bfc:	46ac      	mov	ip, r5
 8000bfe:	2e00      	cmp	r6, #0
 8000c00:	d03f      	beq.n	8000c82 <__udivmoddi4+0x16a>
 8000c02:	e886 1010 	stmia.w	r6, {r4, ip}
 8000c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c0a:	b912      	cbnz	r2, 8000c12 <__udivmoddi4+0xfa>
 8000c0c:	2701      	movs	r7, #1
 8000c0e:	fbb7 f7f2 	udiv	r7, r7, r2
 8000c12:	fab7 fe87 	clz	lr, r7
 8000c16:	f1be 0f00 	cmp.w	lr, #0
 8000c1a:	d134      	bne.n	8000c86 <__udivmoddi4+0x16e>
 8000c1c:	1beb      	subs	r3, r5, r7
 8000c1e:	0c3a      	lsrs	r2, r7, #16
 8000c20:	fa1f fc87 	uxth.w	ip, r7
 8000c24:	2101      	movs	r1, #1
 8000c26:	fbb3 f8f2 	udiv	r8, r3, r2
 8000c2a:	0c25      	lsrs	r5, r4, #16
 8000c2c:	fb02 3318 	mls	r3, r2, r8, r3
 8000c30:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000c34:	fb0c f308 	mul.w	r3, ip, r8
 8000c38:	42ab      	cmp	r3, r5
 8000c3a:	d907      	bls.n	8000c4c <__udivmoddi4+0x134>
 8000c3c:	19ed      	adds	r5, r5, r7
 8000c3e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000c42:	d202      	bcs.n	8000c4a <__udivmoddi4+0x132>
 8000c44:	42ab      	cmp	r3, r5
 8000c46:	f200 80d1 	bhi.w	8000dec <__udivmoddi4+0x2d4>
 8000c4a:	4680      	mov	r8, r0
 8000c4c:	1aed      	subs	r5, r5, r3
 8000c4e:	b2a3      	uxth	r3, r4
 8000c50:	fbb5 f0f2 	udiv	r0, r5, r2
 8000c54:	fb02 5510 	mls	r5, r2, r0, r5
 8000c58:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000c5c:	fb0c fc00 	mul.w	ip, ip, r0
 8000c60:	45a4      	cmp	ip, r4
 8000c62:	d907      	bls.n	8000c74 <__udivmoddi4+0x15c>
 8000c64:	19e4      	adds	r4, r4, r7
 8000c66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6a:	d202      	bcs.n	8000c72 <__udivmoddi4+0x15a>
 8000c6c:	45a4      	cmp	ip, r4
 8000c6e:	f200 80b8 	bhi.w	8000de2 <__udivmoddi4+0x2ca>
 8000c72:	4618      	mov	r0, r3
 8000c74:	eba4 040c 	sub.w	r4, r4, ip
 8000c78:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c7c:	e79d      	b.n	8000bba <__udivmoddi4+0xa2>
 8000c7e:	4631      	mov	r1, r6
 8000c80:	4630      	mov	r0, r6
 8000c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c86:	f1ce 0420 	rsb	r4, lr, #32
 8000c8a:	fa05 f30e 	lsl.w	r3, r5, lr
 8000c8e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000c92:	fa20 f804 	lsr.w	r8, r0, r4
 8000c96:	0c3a      	lsrs	r2, r7, #16
 8000c98:	fa25 f404 	lsr.w	r4, r5, r4
 8000c9c:	ea48 0803 	orr.w	r8, r8, r3
 8000ca0:	fbb4 f1f2 	udiv	r1, r4, r2
 8000ca4:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000ca8:	fb02 4411 	mls	r4, r2, r1, r4
 8000cac:	fa1f fc87 	uxth.w	ip, r7
 8000cb0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000cb4:	fb01 f30c 	mul.w	r3, r1, ip
 8000cb8:	42ab      	cmp	r3, r5
 8000cba:	fa00 f40e 	lsl.w	r4, r0, lr
 8000cbe:	d909      	bls.n	8000cd4 <__udivmoddi4+0x1bc>
 8000cc0:	19ed      	adds	r5, r5, r7
 8000cc2:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cc6:	f080 808a 	bcs.w	8000dde <__udivmoddi4+0x2c6>
 8000cca:	42ab      	cmp	r3, r5
 8000ccc:	f240 8087 	bls.w	8000dde <__udivmoddi4+0x2c6>
 8000cd0:	3902      	subs	r1, #2
 8000cd2:	443d      	add	r5, r7
 8000cd4:	1aeb      	subs	r3, r5, r3
 8000cd6:	fa1f f588 	uxth.w	r5, r8
 8000cda:	fbb3 f0f2 	udiv	r0, r3, r2
 8000cde:	fb02 3310 	mls	r3, r2, r0, r3
 8000ce2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000ce6:	fb00 f30c 	mul.w	r3, r0, ip
 8000cea:	42ab      	cmp	r3, r5
 8000cec:	d907      	bls.n	8000cfe <__udivmoddi4+0x1e6>
 8000cee:	19ed      	adds	r5, r5, r7
 8000cf0:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cf4:	d26f      	bcs.n	8000dd6 <__udivmoddi4+0x2be>
 8000cf6:	42ab      	cmp	r3, r5
 8000cf8:	d96d      	bls.n	8000dd6 <__udivmoddi4+0x2be>
 8000cfa:	3802      	subs	r0, #2
 8000cfc:	443d      	add	r5, r7
 8000cfe:	1aeb      	subs	r3, r5, r3
 8000d00:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d04:	e78f      	b.n	8000c26 <__udivmoddi4+0x10e>
 8000d06:	f1c1 0720 	rsb	r7, r1, #32
 8000d0a:	fa22 f807 	lsr.w	r8, r2, r7
 8000d0e:	408b      	lsls	r3, r1
 8000d10:	fa05 f401 	lsl.w	r4, r5, r1
 8000d14:	ea48 0303 	orr.w	r3, r8, r3
 8000d18:	fa20 fe07 	lsr.w	lr, r0, r7
 8000d1c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000d20:	40fd      	lsrs	r5, r7
 8000d22:	ea4e 0e04 	orr.w	lr, lr, r4
 8000d26:	fbb5 f9fc 	udiv	r9, r5, ip
 8000d2a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000d2e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000d32:	fa1f f883 	uxth.w	r8, r3
 8000d36:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000d3a:	fb09 f408 	mul.w	r4, r9, r8
 8000d3e:	42ac      	cmp	r4, r5
 8000d40:	fa02 f201 	lsl.w	r2, r2, r1
 8000d44:	fa00 fa01 	lsl.w	sl, r0, r1
 8000d48:	d908      	bls.n	8000d5c <__udivmoddi4+0x244>
 8000d4a:	18ed      	adds	r5, r5, r3
 8000d4c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d50:	d243      	bcs.n	8000dda <__udivmoddi4+0x2c2>
 8000d52:	42ac      	cmp	r4, r5
 8000d54:	d941      	bls.n	8000dda <__udivmoddi4+0x2c2>
 8000d56:	f1a9 0902 	sub.w	r9, r9, #2
 8000d5a:	441d      	add	r5, r3
 8000d5c:	1b2d      	subs	r5, r5, r4
 8000d5e:	fa1f fe8e 	uxth.w	lr, lr
 8000d62:	fbb5 f0fc 	udiv	r0, r5, ip
 8000d66:	fb0c 5510 	mls	r5, ip, r0, r5
 8000d6a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000d6e:	fb00 f808 	mul.w	r8, r0, r8
 8000d72:	45a0      	cmp	r8, r4
 8000d74:	d907      	bls.n	8000d86 <__udivmoddi4+0x26e>
 8000d76:	18e4      	adds	r4, r4, r3
 8000d78:	f100 35ff 	add.w	r5, r0, #4294967295
 8000d7c:	d229      	bcs.n	8000dd2 <__udivmoddi4+0x2ba>
 8000d7e:	45a0      	cmp	r8, r4
 8000d80:	d927      	bls.n	8000dd2 <__udivmoddi4+0x2ba>
 8000d82:	3802      	subs	r0, #2
 8000d84:	441c      	add	r4, r3
 8000d86:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d8a:	eba4 0408 	sub.w	r4, r4, r8
 8000d8e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d92:	454c      	cmp	r4, r9
 8000d94:	46c6      	mov	lr, r8
 8000d96:	464d      	mov	r5, r9
 8000d98:	d315      	bcc.n	8000dc6 <__udivmoddi4+0x2ae>
 8000d9a:	d012      	beq.n	8000dc2 <__udivmoddi4+0x2aa>
 8000d9c:	b156      	cbz	r6, 8000db4 <__udivmoddi4+0x29c>
 8000d9e:	ebba 030e 	subs.w	r3, sl, lr
 8000da2:	eb64 0405 	sbc.w	r4, r4, r5
 8000da6:	fa04 f707 	lsl.w	r7, r4, r7
 8000daa:	40cb      	lsrs	r3, r1
 8000dac:	431f      	orrs	r7, r3
 8000dae:	40cc      	lsrs	r4, r1
 8000db0:	6037      	str	r7, [r6, #0]
 8000db2:	6074      	str	r4, [r6, #4]
 8000db4:	2100      	movs	r1, #0
 8000db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	e6f8      	b.n	8000bb0 <__udivmoddi4+0x98>
 8000dbe:	4690      	mov	r8, r2
 8000dc0:	e6e0      	b.n	8000b84 <__udivmoddi4+0x6c>
 8000dc2:	45c2      	cmp	sl, r8
 8000dc4:	d2ea      	bcs.n	8000d9c <__udivmoddi4+0x284>
 8000dc6:	ebb8 0e02 	subs.w	lr, r8, r2
 8000dca:	eb69 0503 	sbc.w	r5, r9, r3
 8000dce:	3801      	subs	r0, #1
 8000dd0:	e7e4      	b.n	8000d9c <__udivmoddi4+0x284>
 8000dd2:	4628      	mov	r0, r5
 8000dd4:	e7d7      	b.n	8000d86 <__udivmoddi4+0x26e>
 8000dd6:	4640      	mov	r0, r8
 8000dd8:	e791      	b.n	8000cfe <__udivmoddi4+0x1e6>
 8000dda:	4681      	mov	r9, r0
 8000ddc:	e7be      	b.n	8000d5c <__udivmoddi4+0x244>
 8000dde:	4601      	mov	r1, r0
 8000de0:	e778      	b.n	8000cd4 <__udivmoddi4+0x1bc>
 8000de2:	3802      	subs	r0, #2
 8000de4:	443c      	add	r4, r7
 8000de6:	e745      	b.n	8000c74 <__udivmoddi4+0x15c>
 8000de8:	4608      	mov	r0, r1
 8000dea:	e708      	b.n	8000bfe <__udivmoddi4+0xe6>
 8000dec:	f1a8 0802 	sub.w	r8, r8, #2
 8000df0:	443d      	add	r5, r7
 8000df2:	e72b      	b.n	8000c4c <__udivmoddi4+0x134>

08000df4 <__aeabi_idiv0>:
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop

08000df8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dfa:	4a0e      	ldr	r2, [pc, #56]	; (8000e34 <HAL_InitTick+0x3c>)
 8000dfc:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <HAL_InitTick+0x40>)
{
 8000dfe:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e00:	7818      	ldrb	r0, [r3, #0]
 8000e02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e06:	fbb3 f3f0 	udiv	r3, r3, r0
 8000e0a:	6810      	ldr	r0, [r2, #0]
 8000e0c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e10:	f000 fa7c 	bl	800130c <HAL_SYSTICK_Config>
 8000e14:	4604      	mov	r4, r0
 8000e16:	b958      	cbnz	r0, 8000e30 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e18:	2d0f      	cmp	r5, #15
 8000e1a:	d809      	bhi.n	8000e30 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	4629      	mov	r1, r5
 8000e20:	f04f 30ff 	mov.w	r0, #4294967295
 8000e24:	f000 fa32 	bl	800128c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e28:	4b04      	ldr	r3, [pc, #16]	; (8000e3c <HAL_InitTick+0x44>)
 8000e2a:	4620      	mov	r0, r4
 8000e2c:	601d      	str	r5, [r3, #0]
 8000e2e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000e30:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000e32:	bd38      	pop	{r3, r4, r5, pc}
 8000e34:	2000000c 	.word	0x2000000c
 8000e38:	20000000 	.word	0x20000000
 8000e3c:	20000004 	.word	0x20000004

08000e40 <HAL_Init>:
{
 8000e40:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e42:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <HAL_Init+0x30>)
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000e4a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000e52:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000e5a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e5c:	2003      	movs	r0, #3
 8000e5e:	f000 fa03 	bl	8001268 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e62:	2000      	movs	r0, #0
 8000e64:	f7ff ffc8 	bl	8000df8 <HAL_InitTick>
  HAL_MspInit();
 8000e68:	f003 fd4c 	bl	8004904 <HAL_MspInit>
}
 8000e6c:	2000      	movs	r0, #0
 8000e6e:	bd08      	pop	{r3, pc}
 8000e70:	40023c00 	.word	0x40023c00

08000e74 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000e74:	4a03      	ldr	r2, [pc, #12]	; (8000e84 <HAL_IncTick+0x10>)
 8000e76:	4b04      	ldr	r3, [pc, #16]	; (8000e88 <HAL_IncTick+0x14>)
 8000e78:	6811      	ldr	r1, [r2, #0]
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	440b      	add	r3, r1
 8000e7e:	6013      	str	r3, [r2, #0]
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	200000a8 	.word	0x200000a8
 8000e88:	20000000 	.word	0x20000000

08000e8c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000e8c:	4b01      	ldr	r3, [pc, #4]	; (8000e94 <HAL_GetTick+0x8>)
 8000e8e:	6818      	ldr	r0, [r3, #0]
}
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	200000a8 	.word	0x200000a8

08000e98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e98:	b538      	push	{r3, r4, r5, lr}
 8000e9a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000e9c:	f7ff fff6 	bl	8000e8c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ea0:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000ea2:	bf1c      	itt	ne
 8000ea4:	4b05      	ldrne	r3, [pc, #20]	; (8000ebc <HAL_Delay+0x24>)
 8000ea6:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000ea8:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000eaa:	bf18      	it	ne
 8000eac:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000eae:	f7ff ffed 	bl	8000e8c <HAL_GetTick>
 8000eb2:	1b40      	subs	r0, r0, r5
 8000eb4:	4284      	cmp	r4, r0
 8000eb6:	d8fa      	bhi.n	8000eae <HAL_Delay+0x16>
  {
  }
}
 8000eb8:	bd38      	pop	{r3, r4, r5, pc}
 8000eba:	bf00      	nop
 8000ebc:	20000000 	.word	0x20000000

08000ec0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ec0:	b510      	push	{r4, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ec2:	4604      	mov	r4, r0
 8000ec4:	2800      	cmp	r0, #0
 8000ec6:	f000 8099 	beq.w	8000ffc <HAL_ADC_Init+0x13c>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000eca:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000ecc:	b923      	cbnz	r3, 8000ed8 <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ece:	6443      	str	r3, [r0, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ed0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ed4:	f003 f9de 	bl	8004294 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ed8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000eda:	06db      	lsls	r3, r3, #27
 8000edc:	f100 808c 	bmi.w	8000ff8 <HAL_ADC_Init+0x138>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ee0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000ee2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ee6:	f023 0302 	bic.w	r3, r3, #2
 8000eea:	f043 0302 	orr.w	r3, r3, #2
 8000eee:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000ef0:	4b43      	ldr	r3, [pc, #268]	; (8001000 <HAL_ADC_Init+0x140>)
 8000ef2:	685a      	ldr	r2, [r3, #4]
 8000ef4:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000ef8:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000efa:	685a      	ldr	r2, [r3, #4]
 8000efc:	6861      	ldr	r1, [r4, #4]
 8000efe:	430a      	orrs	r2, r1
 8000f00:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000f02:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000f04:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000f06:	685a      	ldr	r2, [r3, #4]
 8000f08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f0c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000f0e:	685a      	ldr	r2, [r3, #4]
 8000f10:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000f14:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000f16:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000f18:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000f1a:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000f1e:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000f20:	685a      	ldr	r2, [r3, #4]
 8000f22:	430a      	orrs	r2, r1
 8000f24:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000f26:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000f28:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000f2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f2e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000f30:	689a      	ldr	r2, [r3, #8]
 8000f32:	430a      	orrs	r2, r1
 8000f34:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f36:	4933      	ldr	r1, [pc, #204]	; (8001004 <HAL_ADC_Init+0x144>)
 8000f38:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000f3a:	428a      	cmp	r2, r1
 8000f3c:	d050      	beq.n	8000fe0 <HAL_ADC_Init+0x120>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000f3e:	6899      	ldr	r1, [r3, #8]
 8000f40:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8000f44:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000f46:	6899      	ldr	r1, [r3, #8]
 8000f48:	430a      	orrs	r2, r1
 8000f4a:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000f4c:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000f4e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000f50:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000f54:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000f56:	689a      	ldr	r2, [r3, #8]
 8000f58:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000f5a:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000f5c:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000f5e:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000f60:	f022 0202 	bic.w	r2, r2, #2
 8000f64:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000f66:	689a      	ldr	r2, [r3, #8]
 8000f68:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8000f6c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000f6e:	6a22      	ldr	r2, [r4, #32]
 8000f70:	2a00      	cmp	r2, #0
 8000f72:	d03d      	beq.n	8000ff0 <HAL_ADC_Init+0x130>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000f74:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000f76:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000f78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000f7c:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000f7e:	685a      	ldr	r2, [r3, #4]
 8000f80:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000f84:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000f86:	685a      	ldr	r2, [r3, #4]
 8000f88:	3901      	subs	r1, #1
 8000f8a:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000f8e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000f90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000f92:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000f94:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000f98:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f9c:	3901      	subs	r1, #1
 8000f9e:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8000fa2:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000fa4:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000fa6:	6b21      	ldr	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000fa8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000fac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000fae:	689a      	ldr	r2, [r3, #8]
 8000fb0:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8000fb4:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000fb6:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000fb8:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000fba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000fbe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000fc0:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8000fc2:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000fc4:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8000fc8:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8000fca:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8000fcc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000fce:	f023 0303 	bic.w	r3, r3, #3
 8000fd2:	f043 0301 	orr.w	r3, r3, #1
 8000fd6:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8000fd8:	2300      	movs	r3, #0
 8000fda:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 8000fde:	bd10      	pop	{r4, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000fe0:	689a      	ldr	r2, [r3, #8]
 8000fe2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000fe6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000fe8:	689a      	ldr	r2, [r3, #8]
 8000fea:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000fee:	e7b4      	b.n	8000f5a <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000ff0:	685a      	ldr	r2, [r3, #4]
 8000ff2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000ff6:	e7ca      	b.n	8000f8e <HAL_ADC_Init+0xce>
    tmp_hal_status = HAL_ERROR;
 8000ff8:	2001      	movs	r0, #1
 8000ffa:	e7ed      	b.n	8000fd8 <HAL_ADC_Init+0x118>
    return HAL_ERROR;
 8000ffc:	2001      	movs	r0, #1
}
 8000ffe:	bd10      	pop	{r4, pc}
 8001000:	40012300 	.word	0x40012300
 8001004:	0f000001 	.word	0x0f000001

08001008 <HAL_ADC_ConvCpltCallback>:
 8001008:	4770      	bx	lr

0800100a <HAL_ADC_LevelOutOfWindowCallback>:
 800100a:	4770      	bx	lr

0800100c <HAL_ADC_ErrorCallback>:
{
 800100c:	4770      	bx	lr

0800100e <HAL_ADC_IRQHandler>:
{
 800100e:	b538      	push	{r3, r4, r5, lr}
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001010:	6803      	ldr	r3, [r0, #0]
 8001012:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8001014:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 8001016:	078d      	lsls	r5, r1, #30
{
 8001018:	4604      	mov	r4, r0
  if(tmp1 && tmp2)
 800101a:	d52b      	bpl.n	8001074 <HAL_ADC_IRQHandler+0x66>
 800101c:	0690      	lsls	r0, r2, #26
 800101e:	d529      	bpl.n	8001074 <HAL_ADC_IRQHandler+0x66>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001020:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001022:	06d1      	lsls	r1, r2, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001024:	bf5e      	ittt	pl
 8001026:	6c22      	ldrpl	r2, [r4, #64]	; 0x40
 8001028:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 800102c:	6422      	strpl	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800102e:	689a      	ldr	r2, [r3, #8]
 8001030:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8001034:	d117      	bne.n	8001066 <HAL_ADC_IRQHandler+0x58>
 8001036:	69a2      	ldr	r2, [r4, #24]
 8001038:	b9aa      	cbnz	r2, 8001066 <HAL_ADC_IRQHandler+0x58>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800103a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800103c:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8001040:	d002      	beq.n	8001048 <HAL_ADC_IRQHandler+0x3a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001042:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001044:	0552      	lsls	r2, r2, #21
 8001046:	d40e      	bmi.n	8001066 <HAL_ADC_IRQHandler+0x58>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001048:	685a      	ldr	r2, [r3, #4]
 800104a:	f022 0220 	bic.w	r2, r2, #32
 800104e:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001050:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001052:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001056:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001058:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800105a:	04db      	lsls	r3, r3, #19
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800105c:	bf5e      	ittt	pl
 800105e:	6c23      	ldrpl	r3, [r4, #64]	; 0x40
 8001060:	f043 0301 	orrpl.w	r3, r3, #1
 8001064:	6423      	strpl	r3, [r4, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8001066:	4620      	mov	r0, r4
 8001068:	f7ff ffce 	bl	8001008 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800106c:	6823      	ldr	r3, [r4, #0]
 800106e:	f06f 0212 	mvn.w	r2, #18
 8001072:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8001074:	6823      	ldr	r3, [r4, #0]
 8001076:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8001078:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 800107a:	074d      	lsls	r5, r1, #29
 800107c:	d532      	bpl.n	80010e4 <HAL_ADC_IRQHandler+0xd6>
 800107e:	0610      	lsls	r0, r2, #24
 8001080:	d530      	bpl.n	80010e4 <HAL_ADC_IRQHandler+0xd6>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001082:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001084:	06d1      	lsls	r1, r2, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001086:	bf5e      	ittt	pl
 8001088:	6c22      	ldrpl	r2, [r4, #64]	; 0x40
 800108a:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 800108e:	6422      	strpl	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001090:	689a      	ldr	r2, [r3, #8]
 8001092:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8001096:	d11e      	bne.n	80010d6 <HAL_ADC_IRQHandler+0xc8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001098:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800109a:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 800109e:	d002      	beq.n	80010a6 <HAL_ADC_IRQHandler+0x98>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80010a0:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80010a2:	0552      	lsls	r2, r2, #21
 80010a4:	d417      	bmi.n	80010d6 <HAL_ADC_IRQHandler+0xc8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80010a6:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80010a8:	0555      	lsls	r5, r2, #21
 80010aa:	d414      	bmi.n	80010d6 <HAL_ADC_IRQHandler+0xc8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80010ac:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80010ae:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80010b2:	d110      	bne.n	80010d6 <HAL_ADC_IRQHandler+0xc8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80010b4:	69a2      	ldr	r2, [r4, #24]
 80010b6:	b972      	cbnz	r2, 80010d6 <HAL_ADC_IRQHandler+0xc8>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80010b8:	685a      	ldr	r2, [r3, #4]
 80010ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010be:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80010c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80010c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80010c6:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80010c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80010ca:	05d8      	lsls	r0, r3, #23
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80010cc:	bf5e      	ittt	pl
 80010ce:	6c23      	ldrpl	r3, [r4, #64]	; 0x40
 80010d0:	f043 0301 	orrpl.w	r3, r3, #1
 80010d4:	6423      	strpl	r3, [r4, #64]	; 0x40
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80010d6:	4620      	mov	r0, r4
 80010d8:	f000 f8c4 	bl	8001264 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80010dc:	6823      	ldr	r3, [r4, #0]
 80010de:	f06f 020c 	mvn.w	r2, #12
 80010e2:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80010e4:	6823      	ldr	r3, [r4, #0]
 80010e6:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80010e8:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 80010ea:	07c9      	lsls	r1, r1, #31
 80010ec:	d50f      	bpl.n	800110e <HAL_ADC_IRQHandler+0x100>
 80010ee:	0655      	lsls	r5, r2, #25
 80010f0:	d50d      	bpl.n	800110e <HAL_ADC_IRQHandler+0x100>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	07d8      	lsls	r0, r3, #31
 80010f6:	d50a      	bpl.n	800110e <HAL_ADC_IRQHandler+0x100>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80010f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80010fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010fe:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001100:	4620      	mov	r0, r4
 8001102:	f7ff ff82 	bl	800100a <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001106:	6823      	ldr	r3, [r4, #0]
 8001108:	f06f 0201 	mvn.w	r2, #1
 800110c:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800110e:	6823      	ldr	r3, [r4, #0]
 8001110:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8001112:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 8001114:	0689      	lsls	r1, r1, #26
 8001116:	d50d      	bpl.n	8001134 <HAL_ADC_IRQHandler+0x126>
 8001118:	0152      	lsls	r2, r2, #5
 800111a:	d50b      	bpl.n	8001134 <HAL_ADC_IRQHandler+0x126>
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800111c:	6c62      	ldr	r2, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800111e:	f06f 0520 	mvn.w	r5, #32
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001122:	f042 0202 	orr.w	r2, r2, #2
 8001126:	6462      	str	r2, [r4, #68]	; 0x44
    HAL_ADC_ErrorCallback(hadc);
 8001128:	4620      	mov	r0, r4
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800112a:	601d      	str	r5, [r3, #0]
    HAL_ADC_ErrorCallback(hadc);
 800112c:	f7ff ff6e 	bl	800100c <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001130:	6823      	ldr	r3, [r4, #0]
 8001132:	601d      	str	r5, [r3, #0]
 8001134:	bd38      	pop	{r3, r4, r5, pc}
	...

08001138 <HAL_ADC_ConfigChannel>:
{
 8001138:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 800113a:	2300      	movs	r3, #0
 800113c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800113e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001142:	2b01      	cmp	r3, #1
 8001144:	f000 8083 	beq.w	800124e <HAL_ADC_ConfigChannel+0x116>
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001148:	680d      	ldr	r5, [r1, #0]
 800114a:	6804      	ldr	r4, [r0, #0]
 800114c:	688a      	ldr	r2, [r1, #8]
  __HAL_LOCK(hadc);
 800114e:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001150:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 8001152:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8001156:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001158:	d92a      	bls.n	80011b0 <HAL_ADC_ConfigChannel+0x78>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800115a:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 800115e:	68e7      	ldr	r7, [r4, #12]
 8001160:	3b1e      	subs	r3, #30
 8001162:	f04f 0e07 	mov.w	lr, #7
 8001166:	fa0e fe03 	lsl.w	lr, lr, r3
 800116a:	ea27 070e 	bic.w	r7, r7, lr
 800116e:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001170:	68e7      	ldr	r7, [r4, #12]
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	433b      	orrs	r3, r7
 8001178:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 800117a:	684a      	ldr	r2, [r1, #4]
 800117c:	2a06      	cmp	r2, #6
 800117e:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8001182:	d825      	bhi.n	80011d0 <HAL_ADC_ConfigChannel+0x98>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001184:	4413      	add	r3, r2
 8001186:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8001188:	1f59      	subs	r1, r3, #5
 800118a:	231f      	movs	r3, #31
 800118c:	408b      	lsls	r3, r1
 800118e:	ea27 0303 	bic.w	r3, r7, r3
 8001192:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001194:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001196:	fa06 f101 	lsl.w	r1, r6, r1
 800119a:	4311      	orrs	r1, r2
 800119c:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800119e:	4b2d      	ldr	r3, [pc, #180]	; (8001254 <HAL_ADC_ConfigChannel+0x11c>)
 80011a0:	429c      	cmp	r4, r3
 80011a2:	d034      	beq.n	800120e <HAL_ADC_ConfigChannel+0xd6>
  __HAL_UNLOCK(hadc);
 80011a4:	2300      	movs	r3, #0
 80011a6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80011aa:	4618      	mov	r0, r3
}
 80011ac:	b003      	add	sp, #12
 80011ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80011b0:	6927      	ldr	r7, [r4, #16]
 80011b2:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80011b6:	f04f 0e07 	mov.w	lr, #7
 80011ba:	fa0e fe03 	lsl.w	lr, lr, r3
 80011be:	ea27 070e 	bic.w	r7, r7, lr
 80011c2:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80011c4:	6927      	ldr	r7, [r4, #16]
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	433b      	orrs	r3, r7
 80011cc:	6123      	str	r3, [r4, #16]
 80011ce:	e7d4      	b.n	800117a <HAL_ADC_ConfigChannel+0x42>
  else if (sConfig->Rank < 13U)
 80011d0:	2a0c      	cmp	r2, #12
 80011d2:	d80e      	bhi.n	80011f2 <HAL_ADC_ConfigChannel+0xba>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80011d4:	4413      	add	r3, r2
 80011d6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80011d8:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 80011dc:	231f      	movs	r3, #31
 80011de:	4093      	lsls	r3, r2
 80011e0:	ea21 0303 	bic.w	r3, r1, r3
 80011e4:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80011e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80011e8:	fa06 f202 	lsl.w	r2, r6, r2
 80011ec:	431a      	orrs	r2, r3
 80011ee:	6322      	str	r2, [r4, #48]	; 0x30
 80011f0:	e7d5      	b.n	800119e <HAL_ADC_ConfigChannel+0x66>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80011f2:	4413      	add	r3, r2
 80011f4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80011f6:	3b41      	subs	r3, #65	; 0x41
 80011f8:	221f      	movs	r2, #31
 80011fa:	409a      	lsls	r2, r3
 80011fc:	ea21 0202 	bic.w	r2, r1, r2
 8001200:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001202:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001204:	fa06 f103 	lsl.w	r1, r6, r3
 8001208:	4311      	orrs	r1, r2
 800120a:	62e1      	str	r1, [r4, #44]	; 0x2c
 800120c:	e7c7      	b.n	800119e <HAL_ADC_ConfigChannel+0x66>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800120e:	2d12      	cmp	r5, #18
 8001210:	d104      	bne.n	800121c <HAL_ADC_ConfigChannel+0xe4>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001212:	4a11      	ldr	r2, [pc, #68]	; (8001258 <HAL_ADC_ConfigChannel+0x120>)
 8001214:	6853      	ldr	r3, [r2, #4]
 8001216:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800121a:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800121c:	f1a5 0310 	sub.w	r3, r5, #16
 8001220:	2b01      	cmp	r3, #1
 8001222:	d8bf      	bhi.n	80011a4 <HAL_ADC_ConfigChannel+0x6c>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001224:	4a0c      	ldr	r2, [pc, #48]	; (8001258 <HAL_ADC_ConfigChannel+0x120>)
 8001226:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001228:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800122a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800122e:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001230:	d1b8      	bne.n	80011a4 <HAL_ADC_ConfigChannel+0x6c>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001232:	4b0a      	ldr	r3, [pc, #40]	; (800125c <HAL_ADC_ConfigChannel+0x124>)
 8001234:	4a0a      	ldr	r2, [pc, #40]	; (8001260 <HAL_ADC_ConfigChannel+0x128>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	fbb3 f2f2 	udiv	r2, r3, r2
 800123c:	230a      	movs	r3, #10
 800123e:	4353      	muls	r3, r2
        counter--;
 8001240:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8001242:	9b01      	ldr	r3, [sp, #4]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d0ad      	beq.n	80011a4 <HAL_ADC_ConfigChannel+0x6c>
        counter--;
 8001248:	9b01      	ldr	r3, [sp, #4]
 800124a:	3b01      	subs	r3, #1
 800124c:	e7f8      	b.n	8001240 <HAL_ADC_ConfigChannel+0x108>
  __HAL_LOCK(hadc);
 800124e:	2002      	movs	r0, #2
 8001250:	e7ac      	b.n	80011ac <HAL_ADC_ConfigChannel+0x74>
 8001252:	bf00      	nop
 8001254:	40012000 	.word	0x40012000
 8001258:	40012300 	.word	0x40012300
 800125c:	2000000c 	.word	0x2000000c
 8001260:	000f4240 	.word	0x000f4240

08001264 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001264:	4770      	bx	lr
	...

08001268 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001268:	4a07      	ldr	r2, [pc, #28]	; (8001288 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800126a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800126c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001270:	041b      	lsls	r3, r3, #16
 8001272:	0c1b      	lsrs	r3, r3, #16
 8001274:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001278:	0200      	lsls	r0, r0, #8
 800127a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800127e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8001282:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001284:	60d3      	str	r3, [r2, #12]
 8001286:	4770      	bx	lr
 8001288:	e000ed00 	.word	0xe000ed00

0800128c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800128c:	4b17      	ldr	r3, [pc, #92]	; (80012ec <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800128e:	b530      	push	{r4, r5, lr}
 8001290:	68dc      	ldr	r4, [r3, #12]
 8001292:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001296:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800129a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800129c:	2b04      	cmp	r3, #4
 800129e:	bf28      	it	cs
 80012a0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012a2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a4:	f04f 0501 	mov.w	r5, #1
 80012a8:	fa05 f303 	lsl.w	r3, r5, r3
 80012ac:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012b0:	bf8c      	ite	hi
 80012b2:	3c03      	subhi	r4, #3
 80012b4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b6:	4019      	ands	r1, r3
 80012b8:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012ba:	fa05 f404 	lsl.w	r4, r5, r4
 80012be:	3c01      	subs	r4, #1
 80012c0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80012c2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c4:	ea42 0201 	orr.w	r2, r2, r1
 80012c8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012cc:	bfaf      	iteee	ge
 80012ce:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d2:	f000 000f 	andlt.w	r0, r0, #15
 80012d6:	4b06      	ldrlt	r3, [pc, #24]	; (80012f0 <HAL_NVIC_SetPriority+0x64>)
 80012d8:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012da:	bfa5      	ittet	ge
 80012dc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80012e0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80012e8:	bd30      	pop	{r4, r5, pc}
 80012ea:	bf00      	nop
 80012ec:	e000ed00 	.word	0xe000ed00
 80012f0:	e000ed14 	.word	0xe000ed14

080012f4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80012f4:	0942      	lsrs	r2, r0, #5
 80012f6:	2301      	movs	r3, #1
 80012f8:	f000 001f 	and.w	r0, r0, #31
 80012fc:	fa03 f000 	lsl.w	r0, r3, r0
 8001300:	4b01      	ldr	r3, [pc, #4]	; (8001308 <HAL_NVIC_EnableIRQ+0x14>)
 8001302:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001306:	4770      	bx	lr
 8001308:	e000e100 	.word	0xe000e100

0800130c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800130c:	3801      	subs	r0, #1
 800130e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001312:	d20a      	bcs.n	800132a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001314:	4b06      	ldr	r3, [pc, #24]	; (8001330 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001316:	4a07      	ldr	r2, [pc, #28]	; (8001334 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001318:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800131a:	21f0      	movs	r1, #240	; 0xf0
 800131c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001320:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001322:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001324:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800132a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	e000e010 	.word	0xe000e010
 8001334:	e000ed00 	.word	0xe000ed00

08001338 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001338:	4b04      	ldr	r3, [pc, #16]	; (800134c <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800133a:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800133c:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800133e:	bf0c      	ite	eq
 8001340:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001344:	f022 0204 	bicne.w	r2, r2, #4
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	4770      	bx	lr
 800134c:	e000e010 	.word	0xe000e010

08001350 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001350:	4770      	bx	lr

08001352 <HAL_SYSTICK_IRQHandler>:
{
 8001352:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8001354:	f7ff fffc 	bl	8001350 <HAL_SYSTICK_Callback>
 8001358:	bd08      	pop	{r3, pc}
	...

0800135c <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800135c:	6803      	ldr	r3, [r0, #0]
 800135e:	b2da      	uxtb	r2, r3
 8001360:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001364:	f023 0303 	bic.w	r3, r3, #3
 8001368:	2118      	movs	r1, #24
 800136a:	3a10      	subs	r2, #16
 800136c:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001370:	4904      	ldr	r1, [pc, #16]	; (8001384 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8001372:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001374:	bf88      	it	hi
 8001376:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001378:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800137a:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800137c:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 800137e:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	08005b88 	.word	0x08005b88

08001388 <HAL_DMA_Init>:
{
 8001388:	b570      	push	{r4, r5, r6, lr}
 800138a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800138c:	f7ff fd7e 	bl	8000e8c <HAL_GetTick>
 8001390:	4605      	mov	r5, r0
  if(hdma == NULL)
 8001392:	2c00      	cmp	r4, #0
 8001394:	d071      	beq.n	800147a <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 8001396:	2300      	movs	r3, #0
 8001398:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 800139c:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 800139e:	2302      	movs	r3, #2
 80013a0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80013a4:	6813      	ldr	r3, [r2, #0]
 80013a6:	f023 0301 	bic.w	r3, r3, #1
 80013aa:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013ac:	6821      	ldr	r1, [r4, #0]
 80013ae:	680b      	ldr	r3, [r1, #0]
 80013b0:	07d8      	lsls	r0, r3, #31
 80013b2:	d43c      	bmi.n	800142e <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 80013b4:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80013b6:	4d32      	ldr	r5, [pc, #200]	; (8001480 <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013b8:	6862      	ldr	r2, [r4, #4]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013ba:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80013bc:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013be:	68a3      	ldr	r3, [r4, #8]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	68e2      	ldr	r2, [r4, #12]
 80013c4:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013c6:	6922      	ldr	r2, [r4, #16]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	6962      	ldr	r2, [r4, #20]
 80013cc:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013ce:	69e2      	ldr	r2, [r4, #28]
 80013d0:	4303      	orrs	r3, r0
 80013d2:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 80013d4:	6a22      	ldr	r2, [r4, #32]
 80013d6:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013d8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80013da:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013dc:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80013e0:	bf01      	itttt	eq
 80013e2:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 80013e4:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 80013e6:	4335      	orreq	r5, r6
 80013e8:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 80013ea:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 80013ec:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013ee:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80013f0:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 80013f4:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013f8:	d10b      	bne.n	8001412 <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 80013fa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80013fc:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 80013fe:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001400:	b13d      	cbz	r5, 8001412 <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001402:	b9f8      	cbnz	r0, 8001444 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 8001404:	2a01      	cmp	r2, #1
 8001406:	d02d      	beq.n	8001464 <HAL_DMA_Init+0xdc>
 8001408:	d301      	bcc.n	800140e <HAL_DMA_Init+0x86>
 800140a:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800140c:	d101      	bne.n	8001412 <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800140e:	01ea      	lsls	r2, r5, #7
 8001410:	d42b      	bmi.n	800146a <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 8001412:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001414:	4620      	mov	r0, r4
 8001416:	f7ff ffa1 	bl	800135c <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800141a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800141c:	233f      	movs	r3, #63	; 0x3f
 800141e:	4093      	lsls	r3, r2
 8001420:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001422:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001424:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001426:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001428:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 800142c:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800142e:	f7ff fd2d 	bl	8000e8c <HAL_GetTick>
 8001432:	1b40      	subs	r0, r0, r5
 8001434:	2805      	cmp	r0, #5
 8001436:	d9b9      	bls.n	80013ac <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001438:	2320      	movs	r3, #32
 800143a:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800143c:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 800143e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8001442:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001444:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8001448:	d113      	bne.n	8001472 <HAL_DMA_Init+0xea>
    switch (tmp)
 800144a:	2a03      	cmp	r2, #3
 800144c:	d8e1      	bhi.n	8001412 <HAL_DMA_Init+0x8a>
 800144e:	a001      	add	r0, pc, #4	; (adr r0, 8001454 <HAL_DMA_Init+0xcc>)
 8001450:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8001454:	0800146b 	.word	0x0800146b
 8001458:	0800140f 	.word	0x0800140f
 800145c:	0800146b 	.word	0x0800146b
 8001460:	08001465 	.word	0x08001465
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001464:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8001468:	d1d3      	bne.n	8001412 <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800146a:	2340      	movs	r3, #64	; 0x40
 800146c:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800146e:	2001      	movs	r0, #1
 8001470:	e7e5      	b.n	800143e <HAL_DMA_Init+0xb6>
    switch (tmp)
 8001472:	2a02      	cmp	r2, #2
 8001474:	d9f9      	bls.n	800146a <HAL_DMA_Init+0xe2>
 8001476:	2a03      	cmp	r2, #3
 8001478:	e7c8      	b.n	800140c <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 800147a:	2001      	movs	r0, #1
 800147c:	bd70      	pop	{r4, r5, r6, pc}
 800147e:	bf00      	nop
 8001480:	f010803f 	.word	0xf010803f

08001484 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001484:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001488:	2b02      	cmp	r3, #2
 800148a:	d003      	beq.n	8001494 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800148c:	2380      	movs	r3, #128	; 0x80
 800148e:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8001490:	2001      	movs	r0, #1
 8001492:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8001494:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8001496:	2305      	movs	r3, #5
 8001498:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 800149c:	6813      	ldr	r3, [r2, #0]
 800149e:	f023 0301 	bic.w	r3, r3, #1
 80014a2:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80014a4:	2000      	movs	r0, #0
}
 80014a6:	4770      	bx	lr

080014a8 <HAL_DMA_IRQHandler>:
{
 80014a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 80014aa:	2300      	movs	r3, #0
 80014ac:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 80014ae:	4b5a      	ldr	r3, [pc, #360]	; (8001618 <HAL_DMA_IRQHandler+0x170>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014b0:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 80014b2:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80014b4:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 80014b6:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80014b8:	2208      	movs	r2, #8
 80014ba:	409a      	lsls	r2, r3
 80014bc:	4216      	tst	r6, r2
{
 80014be:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80014c0:	d00c      	beq.n	80014dc <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80014c2:	6801      	ldr	r1, [r0, #0]
 80014c4:	6808      	ldr	r0, [r1, #0]
 80014c6:	0740      	lsls	r0, r0, #29
 80014c8:	d508      	bpl.n	80014dc <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80014ca:	6808      	ldr	r0, [r1, #0]
 80014cc:	f020 0004 	bic.w	r0, r0, #4
 80014d0:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80014d2:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80014d4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80014d6:	f042 0201 	orr.w	r2, r2, #1
 80014da:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80014dc:	2201      	movs	r2, #1
 80014de:	409a      	lsls	r2, r3
 80014e0:	4216      	tst	r6, r2
 80014e2:	d008      	beq.n	80014f6 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80014e4:	6821      	ldr	r1, [r4, #0]
 80014e6:	6949      	ldr	r1, [r1, #20]
 80014e8:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80014ea:	bf41      	itttt	mi
 80014ec:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80014ee:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80014f0:	f042 0202 	orrmi.w	r2, r2, #2
 80014f4:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80014f6:	2204      	movs	r2, #4
 80014f8:	409a      	lsls	r2, r3
 80014fa:	4216      	tst	r6, r2
 80014fc:	d008      	beq.n	8001510 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80014fe:	6821      	ldr	r1, [r4, #0]
 8001500:	6809      	ldr	r1, [r1, #0]
 8001502:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001504:	bf41      	itttt	mi
 8001506:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001508:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 800150a:	f042 0204 	orrmi.w	r2, r2, #4
 800150e:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001510:	2210      	movs	r2, #16
 8001512:	409a      	lsls	r2, r3
 8001514:	4216      	tst	r6, r2
 8001516:	d010      	beq.n	800153a <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001518:	6823      	ldr	r3, [r4, #0]
 800151a:	6819      	ldr	r1, [r3, #0]
 800151c:	0709      	lsls	r1, r1, #28
 800151e:	d50c      	bpl.n	800153a <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001520:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	0350      	lsls	r0, r2, #13
 8001526:	d535      	bpl.n	8001594 <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	0319      	lsls	r1, r3, #12
 800152c:	d401      	bmi.n	8001532 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 800152e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001530:	e000      	b.n	8001534 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001532:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8001534:	b10b      	cbz	r3, 800153a <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8001536:	4620      	mov	r0, r4
 8001538:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800153a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800153c:	2220      	movs	r2, #32
 800153e:	408a      	lsls	r2, r1
 8001540:	4216      	tst	r6, r2
 8001542:	d038      	beq.n	80015b6 <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001544:	6823      	ldr	r3, [r4, #0]
 8001546:	6818      	ldr	r0, [r3, #0]
 8001548:	06c6      	lsls	r6, r0, #27
 800154a:	d534      	bpl.n	80015b6 <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800154c:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800154e:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8001552:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001554:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001556:	d125      	bne.n	80015a4 <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001558:	f022 0216 	bic.w	r2, r2, #22
 800155c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800155e:	695a      	ldr	r2, [r3, #20]
 8001560:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001564:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001566:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001568:	b90a      	cbnz	r2, 800156e <HAL_DMA_IRQHandler+0xc6>
 800156a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800156c:	b11a      	cbz	r2, 8001576 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	f022 0208 	bic.w	r2, r2, #8
 8001574:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001576:	233f      	movs	r3, #63	; 0x3f
 8001578:	408b      	lsls	r3, r1
 800157a:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 800157c:	2300      	movs	r3, #0
 800157e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8001582:	2301      	movs	r3, #1
 8001584:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8001588:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 800158a:	b10b      	cbz	r3, 8001590 <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 800158c:	4620      	mov	r0, r4
 800158e:	4798      	blx	r3
}
 8001590:	b003      	add	sp, #12
 8001592:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001598:	bf5e      	ittt	pl
 800159a:	681a      	ldrpl	r2, [r3, #0]
 800159c:	f022 0208 	bicpl.w	r2, r2, #8
 80015a0:	601a      	strpl	r2, [r3, #0]
 80015a2:	e7c4      	b.n	800152e <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80015a4:	0350      	lsls	r0, r2, #13
 80015a6:	d528      	bpl.n	80015fa <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	0319      	lsls	r1, r3, #12
 80015ac:	d432      	bmi.n	8001614 <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 80015ae:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 80015b0:	b10b      	cbz	r3, 80015b6 <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 80015b2:	4620      	mov	r0, r4
 80015b4:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80015b6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d0e9      	beq.n	8001590 <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80015bc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80015be:	07da      	lsls	r2, r3, #31
 80015c0:	d519      	bpl.n	80015f6 <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 80015c2:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 80015c4:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 80015c6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80015ca:	6813      	ldr	r3, [r2, #0]
 80015cc:	f023 0301 	bic.w	r3, r3, #1
 80015d0:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80015d2:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80015d6:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 80015da:	9b01      	ldr	r3, [sp, #4]
 80015dc:	3301      	adds	r3, #1
 80015de:	429f      	cmp	r7, r3
 80015e0:	9301      	str	r3, [sp, #4]
 80015e2:	d302      	bcc.n	80015ea <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80015e4:	6813      	ldr	r3, [r2, #0]
 80015e6:	07db      	lsls	r3, r3, #31
 80015e8:	d4f7      	bmi.n	80015da <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 80015ea:	2300      	movs	r3, #0
 80015ec:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80015f0:	2301      	movs	r3, #1
 80015f2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 80015f6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80015f8:	e7c7      	b.n	800158a <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8001600:	d108      	bne.n	8001614 <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001602:	6819      	ldr	r1, [r3, #0]
 8001604:	f021 0110 	bic.w	r1, r1, #16
 8001608:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800160a:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 800160c:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8001610:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8001614:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001616:	e7cb      	b.n	80015b0 <HAL_DMA_IRQHandler+0x108>
 8001618:	2000000c 	.word	0x2000000c

0800161c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800161c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001620:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001622:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001624:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80017d4 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001628:	4a68      	ldr	r2, [pc, #416]	; (80017cc <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800162a:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 80017d8 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800162e:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001630:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8001632:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001636:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8001638:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800163c:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8001640:	45b6      	cmp	lr, r6
 8001642:	f040 80ae 	bne.w	80017a2 <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001646:	684c      	ldr	r4, [r1, #4]
 8001648:	f024 0710 	bic.w	r7, r4, #16
 800164c:	2f02      	cmp	r7, #2
 800164e:	d116      	bne.n	800167e <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8001650:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001654:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001658:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800165c:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001660:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001664:	f04f 0c0f 	mov.w	ip, #15
 8001668:	fa0c fc0b 	lsl.w	ip, ip, fp
 800166c:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001670:	690d      	ldr	r5, [r1, #16]
 8001672:	fa05 f50b 	lsl.w	r5, r5, fp
 8001676:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 800167a:	f8ca 5020 	str.w	r5, [sl, #32]
 800167e:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001682:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8001684:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001688:	fa05 f50a 	lsl.w	r5, r5, sl
 800168c:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800168e:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001692:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001696:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800169a:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800169c:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016a0:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80016a2:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016a6:	d811      	bhi.n	80016cc <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 80016a8:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016aa:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016ae:	68cf      	ldr	r7, [r1, #12]
 80016b0:	fa07 fc0a 	lsl.w	ip, r7, sl
 80016b4:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80016b8:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80016ba:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016bc:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80016c0:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80016c4:	409f      	lsls	r7, r3
 80016c6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80016ca:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80016cc:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016ce:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016d0:	688f      	ldr	r7, [r1, #8]
 80016d2:	fa07 f70a 	lsl.w	r7, r7, sl
 80016d6:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80016d8:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016da:	00e5      	lsls	r5, r4, #3
 80016dc:	d561      	bpl.n	80017a2 <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016de:	f04f 0b00 	mov.w	fp, #0
 80016e2:	f8cd b00c 	str.w	fp, [sp, #12]
 80016e6:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016ea:	4d39      	ldr	r5, [pc, #228]	; (80017d0 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ec:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80016f0:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80016f4:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80016f8:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80016fc:	9703      	str	r7, [sp, #12]
 80016fe:	9f03      	ldr	r7, [sp, #12]
 8001700:	f023 0703 	bic.w	r7, r3, #3
 8001704:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001708:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800170c:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001710:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001714:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001718:	f04f 0e0f 	mov.w	lr, #15
 800171c:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001720:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001722:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001726:	d043      	beq.n	80017b0 <HAL_GPIO_Init+0x194>
 8001728:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800172c:	42a8      	cmp	r0, r5
 800172e:	d041      	beq.n	80017b4 <HAL_GPIO_Init+0x198>
 8001730:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001734:	42a8      	cmp	r0, r5
 8001736:	d03f      	beq.n	80017b8 <HAL_GPIO_Init+0x19c>
 8001738:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800173c:	42a8      	cmp	r0, r5
 800173e:	d03d      	beq.n	80017bc <HAL_GPIO_Init+0x1a0>
 8001740:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001744:	42a8      	cmp	r0, r5
 8001746:	d03b      	beq.n	80017c0 <HAL_GPIO_Init+0x1a4>
 8001748:	4548      	cmp	r0, r9
 800174a:	d03b      	beq.n	80017c4 <HAL_GPIO_Init+0x1a8>
 800174c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001750:	42a8      	cmp	r0, r5
 8001752:	d039      	beq.n	80017c8 <HAL_GPIO_Init+0x1ac>
 8001754:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001758:	42a8      	cmp	r0, r5
 800175a:	bf14      	ite	ne
 800175c:	2508      	movne	r5, #8
 800175e:	2507      	moveq	r5, #7
 8001760:	fa05 f50c 	lsl.w	r5, r5, ip
 8001764:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001768:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 800176a:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800176c:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800176e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001772:	bf0c      	ite	eq
 8001774:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001776:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8001778:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 800177a:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800177c:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001780:	bf0c      	ite	eq
 8001782:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001784:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8001786:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001788:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800178a:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800178e:	bf0c      	ite	eq
 8001790:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001792:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8001794:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8001796:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001798:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800179a:	bf54      	ite	pl
 800179c:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 800179e:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80017a0:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017a2:	3301      	adds	r3, #1
 80017a4:	2b10      	cmp	r3, #16
 80017a6:	f47f af44 	bne.w	8001632 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80017aa:	b005      	add	sp, #20
 80017ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017b0:	465d      	mov	r5, fp
 80017b2:	e7d5      	b.n	8001760 <HAL_GPIO_Init+0x144>
 80017b4:	2501      	movs	r5, #1
 80017b6:	e7d3      	b.n	8001760 <HAL_GPIO_Init+0x144>
 80017b8:	2502      	movs	r5, #2
 80017ba:	e7d1      	b.n	8001760 <HAL_GPIO_Init+0x144>
 80017bc:	2503      	movs	r5, #3
 80017be:	e7cf      	b.n	8001760 <HAL_GPIO_Init+0x144>
 80017c0:	2504      	movs	r5, #4
 80017c2:	e7cd      	b.n	8001760 <HAL_GPIO_Init+0x144>
 80017c4:	2505      	movs	r5, #5
 80017c6:	e7cb      	b.n	8001760 <HAL_GPIO_Init+0x144>
 80017c8:	2506      	movs	r5, #6
 80017ca:	e7c9      	b.n	8001760 <HAL_GPIO_Init+0x144>
 80017cc:	40013c00 	.word	0x40013c00
 80017d0:	40020000 	.word	0x40020000
 80017d4:	40023800 	.word	0x40023800
 80017d8:	40021400 	.word	0x40021400

080017dc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017dc:	b10a      	cbz	r2, 80017e2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017de:	6181      	str	r1, [r0, #24]
 80017e0:	4770      	bx	lr
 80017e2:	0409      	lsls	r1, r1, #16
 80017e4:	e7fb      	b.n	80017de <HAL_GPIO_WritePin+0x2>

080017e6 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80017e6:	6802      	ldr	r2, [r0, #0]
 80017e8:	6953      	ldr	r3, [r2, #20]
 80017ea:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 80017ee:	d00d      	beq.n	800180c <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017f0:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80017f4:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80017f6:	2304      	movs	r3, #4
 80017f8:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 80017fa:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 80017fc:	2300      	movs	r3, #0
 80017fe:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001800:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 8001804:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_ERROR;
 8001808:	2001      	movs	r0, #1
 800180a:	4770      	bx	lr
  }
  return HAL_OK;
 800180c:	4618      	mov	r0, r3
}
 800180e:	4770      	bx	lr

08001810 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8001810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001814:	4604      	mov	r4, r0
 8001816:	4617      	mov	r7, r2
 8001818:	4699      	mov	r9, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800181a:	f3c1 4807 	ubfx	r8, r1, #16, #8
 800181e:	b28e      	uxth	r6, r1
 8001820:	6825      	ldr	r5, [r4, #0]
 8001822:	f1b8 0f01 	cmp.w	r8, #1
 8001826:	bf0c      	ite	eq
 8001828:	696b      	ldreq	r3, [r5, #20]
 800182a:	69ab      	ldrne	r3, [r5, #24]
 800182c:	ea36 0303 	bics.w	r3, r6, r3
 8001830:	bf14      	ite	ne
 8001832:	2001      	movne	r0, #1
 8001834:	2000      	moveq	r0, #0
 8001836:	b908      	cbnz	r0, 800183c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 8001838:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800183c:	696b      	ldr	r3, [r5, #20]
 800183e:	055a      	lsls	r2, r3, #21
 8001840:	d512      	bpl.n	8001868 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001842:	682b      	ldr	r3, [r5, #0]
 8001844:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001848:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800184a:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 800184e:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001850:	2304      	movs	r3, #4
 8001852:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8001854:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 8001856:	2300      	movs	r3, #0
 8001858:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 800185a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 800185e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8001862:	2001      	movs	r0, #1
 8001864:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001868:	1c7b      	adds	r3, r7, #1
 800186a:	d0d9      	beq.n	8001820 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800186c:	b94f      	cbnz	r7, 8001882 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState = I2C_STATE_NONE;
 800186e:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8001870:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001872:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001874:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001878:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 800187c:	2003      	movs	r0, #3
 800187e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001882:	f7ff fb03 	bl	8000e8c <HAL_GetTick>
 8001886:	eba0 0009 	sub.w	r0, r0, r9
 800188a:	4287      	cmp	r7, r0
 800188c:	d2c8      	bcs.n	8001820 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 800188e:	e7ee      	b.n	800186e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

08001890 <I2C_WaitOnFlagUntilTimeout>:
{
 8001890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001894:	9e08      	ldr	r6, [sp, #32]
 8001896:	4604      	mov	r4, r0
 8001898:	4690      	mov	r8, r2
 800189a:	461f      	mov	r7, r3
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 800189c:	f3c1 4907 	ubfx	r9, r1, #16, #8
 80018a0:	b28d      	uxth	r5, r1
 80018a2:	6823      	ldr	r3, [r4, #0]
 80018a4:	f1b9 0f01 	cmp.w	r9, #1
 80018a8:	bf0c      	ite	eq
 80018aa:	695b      	ldreq	r3, [r3, #20]
 80018ac:	699b      	ldrne	r3, [r3, #24]
 80018ae:	ea35 0303 	bics.w	r3, r5, r3
 80018b2:	bf0c      	ite	eq
 80018b4:	2301      	moveq	r3, #1
 80018b6:	2300      	movne	r3, #0
 80018b8:	4543      	cmp	r3, r8
 80018ba:	d002      	beq.n	80018c2 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 80018bc:	2000      	movs	r0, #0
}
 80018be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 80018c2:	1c7b      	adds	r3, r7, #1
 80018c4:	d0ed      	beq.n	80018a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80018c6:	b95f      	cbnz	r7, 80018e0 <I2C_WaitOnFlagUntilTimeout+0x50>
        hi2c->PreviousState = I2C_STATE_NONE;
 80018c8:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 80018ca:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80018cc:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80018ce:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80018d2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 80018d6:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80018d8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80018dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80018e0:	f7ff fad4 	bl	8000e8c <HAL_GetTick>
 80018e4:	1b80      	subs	r0, r0, r6
 80018e6:	4287      	cmp	r7, r0
 80018e8:	d2db      	bcs.n	80018a2 <I2C_WaitOnFlagUntilTimeout+0x12>
 80018ea:	e7ed      	b.n	80018c8 <I2C_WaitOnFlagUntilTimeout+0x38>

080018ec <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 80018ec:	b570      	push	{r4, r5, r6, lr}
 80018ee:	4604      	mov	r4, r0
 80018f0:	460d      	mov	r5, r1
 80018f2:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80018f4:	6823      	ldr	r3, [r4, #0]
 80018f6:	695b      	ldr	r3, [r3, #20]
 80018f8:	061b      	lsls	r3, r3, #24
 80018fa:	d501      	bpl.n	8001900 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 80018fc:	2000      	movs	r0, #0
 80018fe:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001900:	4620      	mov	r0, r4
 8001902:	f7ff ff70 	bl	80017e6 <I2C_IsAcknowledgeFailed>
 8001906:	b9a8      	cbnz	r0, 8001934 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8001908:	1c6a      	adds	r2, r5, #1
 800190a:	d0f3      	beq.n	80018f4 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800190c:	b965      	cbnz	r5, 8001928 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800190e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001910:	f043 0320 	orr.w	r3, r3, #32
 8001914:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8001916:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001918:	2300      	movs	r3, #0
 800191a:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 800191c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001920:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8001924:	2003      	movs	r0, #3
 8001926:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001928:	f7ff fab0 	bl	8000e8c <HAL_GetTick>
 800192c:	1b80      	subs	r0, r0, r6
 800192e:	4285      	cmp	r5, r0
 8001930:	d2e0      	bcs.n	80018f4 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 8001932:	e7ec      	b.n	800190e <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8001934:	2001      	movs	r0, #1
}
 8001936:	bd70      	pop	{r4, r5, r6, pc}

08001938 <I2C_RequestMemoryWrite>:
{
 8001938:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800193c:	4615      	mov	r5, r2
  hi2c->Instance->CR1 |= I2C_CR1_START;
 800193e:	6802      	ldr	r2, [r0, #0]
{
 8001940:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8001942:	4698      	mov	r8, r3
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8001944:	6813      	ldr	r3, [r2, #0]
 8001946:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800194a:	6013      	str	r3, [r2, #0]
{
 800194c:	460f      	mov	r7, r1
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800194e:	9600      	str	r6, [sp, #0]
 8001950:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001952:	2200      	movs	r2, #0
 8001954:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8001958:	4604      	mov	r4, r0
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800195a:	f7ff ff99 	bl	8001890 <I2C_WaitOnFlagUntilTimeout>
 800195e:	b968      	cbnz	r0, 800197c <I2C_RequestMemoryWrite+0x44>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001960:	6823      	ldr	r3, [r4, #0]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001962:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001964:	491c      	ldr	r1, [pc, #112]	; (80019d8 <I2C_RequestMemoryWrite+0xa0>)
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001966:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 800196a:	611f      	str	r7, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800196c:	4620      	mov	r0, r4
 800196e:	4633      	mov	r3, r6
 8001970:	f7ff ff4e 	bl	8001810 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001974:	b130      	cbz	r0, 8001984 <I2C_RequestMemoryWrite+0x4c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001976:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001978:	2b04      	cmp	r3, #4
 800197a:	d018      	beq.n	80019ae <I2C_RequestMemoryWrite+0x76>
      return HAL_TIMEOUT;
 800197c:	2003      	movs	r0, #3
}
 800197e:	b004      	add	sp, #16
 8001980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001984:	6823      	ldr	r3, [r4, #0]
 8001986:	9003      	str	r0, [sp, #12]
 8001988:	695a      	ldr	r2, [r3, #20]
 800198a:	9203      	str	r2, [sp, #12]
 800198c:	699b      	ldr	r3, [r3, #24]
 800198e:	9303      	str	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001990:	4632      	mov	r2, r6
 8001992:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001994:	9b03      	ldr	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001996:	4620      	mov	r0, r4
 8001998:	f7ff ffa8 	bl	80018ec <I2C_WaitOnTXEFlagUntilTimeout>
 800199c:	b148      	cbz	r0, 80019b2 <I2C_RequestMemoryWrite+0x7a>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800199e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80019a0:	2b04      	cmp	r3, #4
 80019a2:	d1eb      	bne.n	800197c <I2C_RequestMemoryWrite+0x44>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80019a4:	6822      	ldr	r2, [r4, #0]
 80019a6:	6813      	ldr	r3, [r2, #0]
 80019a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019ac:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 80019ae:	2001      	movs	r0, #1
 80019b0:	e7e5      	b.n	800197e <I2C_RequestMemoryWrite+0x46>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80019b2:	f1b8 0f01 	cmp.w	r8, #1
 80019b6:	6823      	ldr	r3, [r4, #0]
 80019b8:	d102      	bne.n	80019c0 <I2C_RequestMemoryWrite+0x88>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80019ba:	b2ed      	uxtb	r5, r5
 80019bc:	611d      	str	r5, [r3, #16]
 80019be:	e7de      	b.n	800197e <I2C_RequestMemoryWrite+0x46>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80019c0:	0a2a      	lsrs	r2, r5, #8
 80019c2:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80019c4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80019c6:	4632      	mov	r2, r6
 80019c8:	4620      	mov	r0, r4
 80019ca:	f7ff ff8f 	bl	80018ec <I2C_WaitOnTXEFlagUntilTimeout>
 80019ce:	2800      	cmp	r0, #0
 80019d0:	d1e5      	bne.n	800199e <I2C_RequestMemoryWrite+0x66>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80019d2:	6823      	ldr	r3, [r4, #0]
 80019d4:	e7f1      	b.n	80019ba <I2C_RequestMemoryWrite+0x82>
 80019d6:	bf00      	nop
 80019d8:	00010002 	.word	0x00010002

080019dc <I2C_RequestMemoryRead>:
{
 80019dc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80019e0:	4698      	mov	r8, r3
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80019e2:	6803      	ldr	r3, [r0, #0]
{
 80019e4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80019e6:	4616      	mov	r6, r2
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80019ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_START;
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80019f6:	601a      	str	r2, [r3, #0]
{
 80019f8:	460f      	mov	r7, r1
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80019fa:	9500      	str	r5, [sp, #0]
 80019fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80019fe:	2200      	movs	r2, #0
 8001a00:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8001a04:	4604      	mov	r4, r0
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001a06:	f7ff ff43 	bl	8001890 <I2C_WaitOnFlagUntilTimeout>
 8001a0a:	b980      	cbnz	r0, 8001a2e <I2C_RequestMemoryRead+0x52>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001a0c:	6823      	ldr	r3, [r4, #0]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001a0e:	492f      	ldr	r1, [pc, #188]	; (8001acc <I2C_RequestMemoryRead+0xf0>)
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001a10:	b2ff      	uxtb	r7, r7
 8001a12:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
 8001a16:	611a      	str	r2, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001a18:	4620      	mov	r0, r4
 8001a1a:	462b      	mov	r3, r5
 8001a1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001a1e:	f7ff fef7 	bl	8001810 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a22:	b140      	cbz	r0, 8001a36 <I2C_RequestMemoryRead+0x5a>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a24:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a26:	2b04      	cmp	r3, #4
 8001a28:	d101      	bne.n	8001a2e <I2C_RequestMemoryRead+0x52>
      return HAL_ERROR;
 8001a2a:	2001      	movs	r0, #1
 8001a2c:	e000      	b.n	8001a30 <I2C_RequestMemoryRead+0x54>
      return HAL_TIMEOUT;
 8001a2e:	2003      	movs	r0, #3
}
 8001a30:	b004      	add	sp, #16
 8001a32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a36:	6823      	ldr	r3, [r4, #0]
 8001a38:	9003      	str	r0, [sp, #12]
 8001a3a:	695a      	ldr	r2, [r3, #20]
 8001a3c:	9203      	str	r2, [sp, #12]
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	9303      	str	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a42:	462a      	mov	r2, r5
 8001a44:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a46:	9b03      	ldr	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a48:	4620      	mov	r0, r4
 8001a4a:	f7ff ff4f 	bl	80018ec <I2C_WaitOnTXEFlagUntilTimeout>
 8001a4e:	b140      	cbz	r0, 8001a62 <I2C_RequestMemoryRead+0x86>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a50:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a52:	2b04      	cmp	r3, #4
 8001a54:	d1eb      	bne.n	8001a2e <I2C_RequestMemoryRead+0x52>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001a56:	6822      	ldr	r2, [r4, #0]
 8001a58:	6813      	ldr	r3, [r2, #0]
 8001a5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a5e:	6013      	str	r3, [r2, #0]
 8001a60:	e7e3      	b.n	8001a2a <I2C_RequestMemoryRead+0x4e>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001a62:	f1b8 0f01 	cmp.w	r8, #1
 8001a66:	6823      	ldr	r3, [r4, #0]
 8001a68:	d124      	bne.n	8001ab4 <I2C_RequestMemoryRead+0xd8>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001a6a:	b2f6      	uxtb	r6, r6
 8001a6c:	611e      	str	r6, [r3, #16]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a6e:	462a      	mov	r2, r5
 8001a70:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001a72:	4620      	mov	r0, r4
 8001a74:	f7ff ff3a 	bl	80018ec <I2C_WaitOnTXEFlagUntilTimeout>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	2800      	cmp	r0, #0
 8001a7c:	d1e8      	bne.n	8001a50 <I2C_RequestMemoryRead+0x74>
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8001a7e:	6821      	ldr	r1, [r4, #0]
 8001a80:	680b      	ldr	r3, [r1, #0]
 8001a82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a86:	600b      	str	r3, [r1, #0]
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001a88:	4620      	mov	r0, r4
 8001a8a:	9500      	str	r5, [sp, #0]
 8001a8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001a8e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001a92:	f7ff fefd 	bl	8001890 <I2C_WaitOnFlagUntilTimeout>
 8001a96:	2800      	cmp	r0, #0
 8001a98:	d1c9      	bne.n	8001a2e <I2C_RequestMemoryRead+0x52>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001a9a:	6823      	ldr	r3, [r4, #0]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001a9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001a9e:	490b      	ldr	r1, [pc, #44]	; (8001acc <I2C_RequestMemoryRead+0xf0>)
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001aa0:	f047 0701 	orr.w	r7, r7, #1
 8001aa4:	611f      	str	r7, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001aa6:	4620      	mov	r0, r4
 8001aa8:	462b      	mov	r3, r5
 8001aaa:	f7ff feb1 	bl	8001810 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001aae:	2800      	cmp	r0, #0
 8001ab0:	d1b8      	bne.n	8001a24 <I2C_RequestMemoryRead+0x48>
 8001ab2:	e7bd      	b.n	8001a30 <I2C_RequestMemoryRead+0x54>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001ab4:	0a32      	lsrs	r2, r6, #8
 8001ab6:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ab8:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001aba:	462a      	mov	r2, r5
 8001abc:	4620      	mov	r0, r4
 8001abe:	f7ff ff15 	bl	80018ec <I2C_WaitOnTXEFlagUntilTimeout>
 8001ac2:	2800      	cmp	r0, #0
 8001ac4:	d1c4      	bne.n	8001a50 <I2C_RequestMemoryRead+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001ac6:	6823      	ldr	r3, [r4, #0]
 8001ac8:	e7cf      	b.n	8001a6a <I2C_RequestMemoryRead+0x8e>
 8001aca:	bf00      	nop
 8001acc:	00010002 	.word	0x00010002

08001ad0 <I2C_WaitOnRXNEFlagUntilTimeout>:
{  
 8001ad0:	b570      	push	{r4, r5, r6, lr}
 8001ad2:	4604      	mov	r4, r0
 8001ad4:	460d      	mov	r5, r1
 8001ad6:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001ad8:	6820      	ldr	r0, [r4, #0]
 8001ada:	6943      	ldr	r3, [r0, #20]
 8001adc:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8001ae0:	d001      	beq.n	8001ae6 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8001ae2:	2000      	movs	r0, #0
}
 8001ae4:	bd70      	pop	{r4, r5, r6, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001ae6:	6942      	ldr	r2, [r0, #20]
 8001ae8:	06d2      	lsls	r2, r2, #27
 8001aea:	d50b      	bpl.n	8001b04 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001aec:	f06f 0210 	mvn.w	r2, #16
 8001af0:	6142      	str	r2, [r0, #20]
      hi2c->State= HAL_I2C_STATE_READY;
 8001af2:	2220      	movs	r2, #32
      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001af4:	6423      	str	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001af6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->PreviousState = I2C_STATE_NONE;
 8001afa:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8001afc:	2001      	movs	r0, #1
      hi2c->State= HAL_I2C_STATE_READY;
 8001afe:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8001b02:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001b04:	b95d      	cbnz	r5, 8001b1e <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b08:	f043 0320 	orr.w	r3, r3, #32
 8001b0c:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8001b0e:	2320      	movs	r3, #32
 8001b10:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      __HAL_UNLOCK(hi2c);
 8001b14:	2300      	movs	r3, #0
 8001b16:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8001b1a:	2003      	movs	r0, #3
 8001b1c:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001b1e:	f7ff f9b5 	bl	8000e8c <HAL_GetTick>
 8001b22:	1b80      	subs	r0, r0, r6
 8001b24:	4285      	cmp	r5, r0
 8001b26:	d2d7      	bcs.n	8001ad8 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 8001b28:	e7ed      	b.n	8001b06 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>

08001b2a <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 8001b2a:	b570      	push	{r4, r5, r6, lr}
 8001b2c:	4604      	mov	r4, r0
 8001b2e:	460d      	mov	r5, r1
 8001b30:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001b32:	6823      	ldr	r3, [r4, #0]
 8001b34:	695b      	ldr	r3, [r3, #20]
 8001b36:	075b      	lsls	r3, r3, #29
 8001b38:	d501      	bpl.n	8001b3e <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8001b3a:	2000      	movs	r0, #0
 8001b3c:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001b3e:	4620      	mov	r0, r4
 8001b40:	f7ff fe51 	bl	80017e6 <I2C_IsAcknowledgeFailed>
 8001b44:	b9a8      	cbnz	r0, 8001b72 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8001b46:	1c6a      	adds	r2, r5, #1
 8001b48:	d0f3      	beq.n	8001b32 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001b4a:	b965      	cbnz	r5, 8001b66 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b4e:	f043 0320 	orr.w	r3, r3, #32
 8001b52:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8001b54:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001b56:	2300      	movs	r3, #0
 8001b58:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001b5a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001b5e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8001b62:	2003      	movs	r0, #3
 8001b64:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001b66:	f7ff f991 	bl	8000e8c <HAL_GetTick>
 8001b6a:	1b80      	subs	r0, r0, r6
 8001b6c:	4285      	cmp	r5, r0
 8001b6e:	d2e0      	bcs.n	8001b32 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 8001b70:	e7ec      	b.n	8001b4c <I2C_WaitOnBTFFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8001b72:	2001      	movs	r0, #1
}
 8001b74:	bd70      	pop	{r4, r5, r6, pc}
	...

08001b78 <HAL_I2C_Init>:
{
 8001b78:	b570      	push	{r4, r5, r6, lr}
  if(hi2c == NULL)
 8001b7a:	4604      	mov	r4, r0
 8001b7c:	2800      	cmp	r0, #0
 8001b7e:	d062      	beq.n	8001c46 <HAL_I2C_Init+0xce>
  if(hi2c->State == HAL_I2C_STATE_RESET)
 8001b80:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001b84:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001b88:	b91b      	cbnz	r3, 8001b92 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8001b8a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001b8e:	f002 fcd3 	bl	8004538 <HAL_I2C_MspInit>
  __HAL_I2C_DISABLE(hi2c);
 8001b92:	6822      	ldr	r2, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001b94:	4e2d      	ldr	r6, [pc, #180]	; (8001c4c <HAL_I2C_Init+0xd4>)
  freqrange = I2C_FREQRANGE(pclk1);
 8001b96:	4d2e      	ldr	r5, [pc, #184]	; (8001c50 <HAL_I2C_Init+0xd8>)
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b98:	2324      	movs	r3, #36	; 0x24
 8001b9a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001b9e:	6813      	ldr	r3, [r2, #0]
 8001ba0:	f023 0301 	bic.w	r3, r3, #1
 8001ba4:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ba6:	f001 f9c1 	bl	8002f2c <HAL_RCC_GetPCLK1Freq>
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001baa:	6863      	ldr	r3, [r4, #4]
  hi2c->Instance->CR2 = freqrange;
 8001bac:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001bae:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001bb2:	42b3      	cmp	r3, r6
 8001bb4:	bf84      	itt	hi
 8001bb6:	f44f 7196 	movhi.w	r1, #300	; 0x12c
 8001bba:	4369      	mulhi	r1, r5
  hi2c->Instance->CR2 = freqrange;
 8001bbc:	6055      	str	r5, [r2, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001bbe:	bf91      	iteee	ls
 8001bc0:	1c69      	addls	r1, r5, #1
 8001bc2:	f44f 757a 	movhi.w	r5, #1000	; 0x3e8
 8001bc6:	fbb1 f1f5 	udivhi	r1, r1, r5
 8001bca:	3101      	addhi	r1, #1
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001bcc:	42b3      	cmp	r3, r6
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001bce:	6211      	str	r1, [r2, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001bd0:	d821      	bhi.n	8001c16 <HAL_I2C_Init+0x9e>
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	fbb0 f0f3 	udiv	r0, r0, r3
 8001bd8:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001bdc:	2b03      	cmp	r3, #3
 8001bde:	bf98      	it	ls
 8001be0:	2004      	movls	r0, #4
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001be2:	6a21      	ldr	r1, [r4, #32]
 8001be4:	69e3      	ldr	r3, [r4, #28]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001be6:	61d0      	str	r0, [r2, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001be8:	430b      	orrs	r3, r1
 8001bea:	6013      	str	r3, [r2, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8001bec:	68e1      	ldr	r1, [r4, #12]
 8001bee:	6923      	ldr	r3, [r4, #16]
 8001bf0:	430b      	orrs	r3, r1
 8001bf2:	6093      	str	r3, [r2, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8001bf4:	69a1      	ldr	r1, [r4, #24]
 8001bf6:	6963      	ldr	r3, [r4, #20]
 8001bf8:	430b      	orrs	r3, r1
 8001bfa:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8001bfc:	6813      	ldr	r3, [r2, #0]
 8001bfe:	f043 0301 	orr.w	r3, r3, #1
 8001c02:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c04:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8001c06:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c08:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c0a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c0e:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c10:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8001c14:	bd70      	pop	{r4, r5, r6, pc}
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001c16:	68a1      	ldr	r1, [r4, #8]
 8001c18:	b949      	cbnz	r1, 8001c2e <HAL_I2C_Init+0xb6>
 8001c1a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001c1e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001c22:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001c26:	b163      	cbz	r3, 8001c42 <HAL_I2C_Init+0xca>
 8001c28:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8001c2c:	e7d9      	b.n	8001be2 <HAL_I2C_Init+0x6a>
 8001c2e:	2119      	movs	r1, #25
 8001c30:	434b      	muls	r3, r1
 8001c32:	fbb0 f0f3 	udiv	r0, r0, r3
 8001c36:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001c3a:	b113      	cbz	r3, 8001c42 <HAL_I2C_Init+0xca>
 8001c3c:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8001c40:	e7cf      	b.n	8001be2 <HAL_I2C_Init+0x6a>
 8001c42:	2001      	movs	r0, #1
 8001c44:	e7cd      	b.n	8001be2 <HAL_I2C_Init+0x6a>
    return HAL_ERROR;
 8001c46:	2001      	movs	r0, #1
}
 8001c48:	bd70      	pop	{r4, r5, r6, pc}
 8001c4a:	bf00      	nop
 8001c4c:	000186a0 	.word	0x000186a0
 8001c50:	000f4240 	.word	0x000f4240

08001c54 <HAL_I2C_Mem_Write>:
{
 8001c54:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8001c58:	4604      	mov	r4, r0
 8001c5a:	469a      	mov	sl, r3
 8001c5c:	4688      	mov	r8, r1
 8001c5e:	4691      	mov	r9, r2
 8001c60:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  tickstart = HAL_GetTick();
 8001c62:	f7ff f913 	bl	8000e8c <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001c66:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001c6a:	2b20      	cmp	r3, #32
  tickstart = HAL_GetTick();
 8001c6c:	4605      	mov	r5, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001c6e:	d003      	beq.n	8001c78 <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 8001c70:	2002      	movs	r0, #2
}
 8001c72:	b002      	add	sp, #8
 8001c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c78:	9000      	str	r0, [sp, #0]
 8001c7a:	2319      	movs	r3, #25
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	493e      	ldr	r1, [pc, #248]	; (8001d78 <HAL_I2C_Mem_Write+0x124>)
 8001c80:	4620      	mov	r0, r4
 8001c82:	f7ff fe05 	bl	8001890 <I2C_WaitOnFlagUntilTimeout>
 8001c86:	2800      	cmp	r0, #0
 8001c88:	d1f2      	bne.n	8001c70 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 8001c8a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d0ee      	beq.n	8001c70 <HAL_I2C_Mem_Write+0x1c>
 8001c92:	2301      	movs	r3, #1
 8001c94:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c98:	6823      	ldr	r3, [r4, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001c9e:	bf5e      	ittt	pl
 8001ca0:	681a      	ldrpl	r2, [r3, #0]
 8001ca2:	f042 0201 	orrpl.w	r2, r2, #1
 8001ca6:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cae:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001cb0:	2321      	movs	r3, #33	; 0x21
 8001cb2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001cb6:	2340      	movs	r3, #64	; 0x40
 8001cb8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->pBuffPtr    = pData;
 8001cbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001cbe:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cc0:	2700      	movs	r7, #0
    hi2c->XferCount   = Size;
 8001cc2:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cc6:	6427      	str	r7, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8001cc8:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001cca:	4b2c      	ldr	r3, [pc, #176]	; (8001d7c <HAL_I2C_Mem_Write+0x128>)
 8001ccc:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001cce:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001cd0:	8523      	strh	r3, [r4, #40]	; 0x28
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001cd2:	9501      	str	r5, [sp, #4]
 8001cd4:	9600      	str	r6, [sp, #0]
 8001cd6:	4653      	mov	r3, sl
 8001cd8:	464a      	mov	r2, r9
 8001cda:	4641      	mov	r1, r8
 8001cdc:	4620      	mov	r0, r4
 8001cde:	f7ff fe2b 	bl	8001938 <I2C_RequestMemoryWrite>
 8001ce2:	2800      	cmp	r0, #0
 8001ce4:	d02a      	beq.n	8001d3c <HAL_I2C_Mem_Write+0xe8>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ce6:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001ce8:	f884 703c 	strb.w	r7, [r4, #60]	; 0x3c
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cec:	2b04      	cmp	r3, #4
 8001cee:	d107      	bne.n	8001d00 <HAL_I2C_Mem_Write+0xac>
        return HAL_ERROR;
 8001cf0:	2001      	movs	r0, #1
 8001cf2:	e7be      	b.n	8001c72 <HAL_I2C_Mem_Write+0x1e>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cf4:	f7ff fdfa 	bl	80018ec <I2C_WaitOnTXEFlagUntilTimeout>
 8001cf8:	b120      	cbz	r0, 8001d04 <HAL_I2C_Mem_Write+0xb0>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cfa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001cfc:	2b04      	cmp	r3, #4
 8001cfe:	d034      	beq.n	8001d6a <HAL_I2C_Mem_Write+0x116>
          return HAL_TIMEOUT;
 8001d00:	2003      	movs	r0, #3
 8001d02:	e7b6      	b.n	8001c72 <HAL_I2C_Mem_Write+0x1e>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001d04:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001d06:	6827      	ldr	r7, [r4, #0]
      hi2c->XferSize--;
 8001d08:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001d0a:	1c4b      	adds	r3, r1, #1
 8001d0c:	6263      	str	r3, [r4, #36]	; 0x24
 8001d0e:	780b      	ldrb	r3, [r1, #0]
 8001d10:	613b      	str	r3, [r7, #16]
      hi2c->XferCount--;
 8001d12:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001d14:	3b01      	subs	r3, #1
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001d1a:	697b      	ldr	r3, [r7, #20]
      hi2c->XferSize--;
 8001d1c:	1e50      	subs	r0, r2, #1
 8001d1e:	b280      	uxth	r0, r0
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001d20:	075b      	lsls	r3, r3, #29
      hi2c->XferSize--;
 8001d22:	8520      	strh	r0, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001d24:	d50a      	bpl.n	8001d3c <HAL_I2C_Mem_Write+0xe8>
 8001d26:	b148      	cbz	r0, 8001d3c <HAL_I2C_Mem_Write+0xe8>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001d28:	1c8b      	adds	r3, r1, #2
 8001d2a:	6263      	str	r3, [r4, #36]	; 0x24
 8001d2c:	784b      	ldrb	r3, [r1, #1]
 8001d2e:	613b      	str	r3, [r7, #16]
        hi2c->XferCount--;
 8001d30:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001d32:	3b01      	subs	r3, #1
        hi2c->XferSize--;
 8001d34:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 8001d36:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8001d38:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001d3a:	8563      	strh	r3, [r4, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 8001d3c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d3e:	462a      	mov	r2, r5
 8001d40:	4631      	mov	r1, r6
 8001d42:	4620      	mov	r0, r4
    while(hi2c->XferSize > 0U)
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d1d5      	bne.n	8001cf4 <HAL_I2C_Mem_Write+0xa0>
    if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d48:	f7ff feef 	bl	8001b2a <I2C_WaitOnBTFFlagUntilTimeout>
 8001d4c:	2800      	cmp	r0, #0
 8001d4e:	d1d4      	bne.n	8001cfa <HAL_I2C_Mem_Write+0xa6>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001d50:	6822      	ldr	r2, [r4, #0]
 8001d52:	6813      	ldr	r3, [r2, #0]
 8001d54:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d58:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001d5a:	2320      	movs	r3, #32
 8001d5c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8001d60:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d64:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 8001d68:	e783      	b.n	8001c72 <HAL_I2C_Mem_Write+0x1e>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001d6a:	6822      	ldr	r2, [r4, #0]
 8001d6c:	6813      	ldr	r3, [r2, #0]
 8001d6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d72:	6013      	str	r3, [r2, #0]
 8001d74:	e7bc      	b.n	8001cf0 <HAL_I2C_Mem_Write+0x9c>
 8001d76:	bf00      	nop
 8001d78:	00100002 	.word	0x00100002
 8001d7c:	ffff0000 	.word	0xffff0000

08001d80 <HAL_I2C_Mem_Read>:
{
 8001d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001d84:	4604      	mov	r4, r0
 8001d86:	b086      	sub	sp, #24
 8001d88:	469a      	mov	sl, r3
 8001d8a:	460d      	mov	r5, r1
 8001d8c:	4691      	mov	r9, r2
 8001d8e:	9f10      	ldr	r7, [sp, #64]	; 0x40
  tickstart = HAL_GetTick();
 8001d90:	f7ff f87c 	bl	8000e8c <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001d94:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001d98:	2b20      	cmp	r3, #32
  tickstart = HAL_GetTick();
 8001d9a:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001d9c:	d004      	beq.n	8001da8 <HAL_I2C_Mem_Read+0x28>
    return HAL_BUSY;
 8001d9e:	2502      	movs	r5, #2
}
 8001da0:	4628      	mov	r0, r5
 8001da2:	b006      	add	sp, #24
 8001da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001da8:	9000      	str	r0, [sp, #0]
 8001daa:	2319      	movs	r3, #25
 8001dac:	2201      	movs	r2, #1
 8001dae:	4979      	ldr	r1, [pc, #484]	; (8001f94 <HAL_I2C_Mem_Read+0x214>)
 8001db0:	4620      	mov	r0, r4
 8001db2:	f7ff fd6d 	bl	8001890 <I2C_WaitOnFlagUntilTimeout>
 8001db6:	2800      	cmp	r0, #0
 8001db8:	d1f1      	bne.n	8001d9e <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 8001dba:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d0ed      	beq.n	8001d9e <HAL_I2C_Mem_Read+0x1e>
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001dc8:	6823      	ldr	r3, [r4, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001dce:	bf5e      	ittt	pl
 8001dd0:	681a      	ldrpl	r2, [r3, #0]
 8001dd2:	f042 0201 	orrpl.w	r2, r2, #1
 8001dd6:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dde:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001de0:	2322      	movs	r3, #34	; 0x22
 8001de2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001de6:	2340      	movs	r3, #64	; 0x40
 8001de8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->pBuffPtr    = pData;
 8001dec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001dee:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001df0:	f04f 0800 	mov.w	r8, #0
    hi2c->XferCount   = Size;
 8001df4:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001df8:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8001dfc:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001dfe:	4b66      	ldr	r3, [pc, #408]	; (8001f98 <HAL_I2C_Mem_Read+0x218>)
 8001e00:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001e02:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001e04:	8523      	strh	r3, [r4, #40]	; 0x28
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e06:	4629      	mov	r1, r5
 8001e08:	9601      	str	r6, [sp, #4]
 8001e0a:	9700      	str	r7, [sp, #0]
 8001e0c:	4653      	mov	r3, sl
 8001e0e:	464a      	mov	r2, r9
 8001e10:	4620      	mov	r0, r4
 8001e12:	f7ff fde3 	bl	80019dc <I2C_RequestMemoryRead>
 8001e16:	4605      	mov	r5, r0
 8001e18:	b130      	cbz	r0, 8001e28 <HAL_I2C_Mem_Read+0xa8>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001e1c:	f884 803c 	strb.w	r8, [r4, #60]	; 0x3c
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e20:	2b04      	cmp	r3, #4
 8001e22:	d13a      	bne.n	8001e9a <HAL_I2C_Mem_Read+0x11a>
              return HAL_ERROR;
 8001e24:	2501      	movs	r5, #1
 8001e26:	e7bb      	b.n	8001da0 <HAL_I2C_Mem_Read+0x20>
    if(hi2c->XferSize == 0U)
 8001e28:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001e2a:	6823      	ldr	r3, [r4, #0]
 8001e2c:	b992      	cbnz	r2, 8001e54 <HAL_I2C_Mem_Read+0xd4>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e2e:	9002      	str	r0, [sp, #8]
 8001e30:	695a      	ldr	r2, [r3, #20]
 8001e32:	9202      	str	r2, [sp, #8]
 8001e34:	699a      	ldr	r2, [r3, #24]
 8001e36:	9202      	str	r2, [sp, #8]
 8001e38:	9a02      	ldr	r2, [sp, #8]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e40:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001e42:	2320      	movs	r3, #32
 8001e44:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8001e4e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8001e52:	e7a5      	b.n	8001da0 <HAL_I2C_Mem_Read+0x20>
    else if(hi2c->XferSize == 1U)
 8001e54:	2a01      	cmp	r2, #1
 8001e56:	d122      	bne.n	8001e9e <HAL_I2C_Mem_Read+0x11e>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e5e:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e60:	9003      	str	r0, [sp, #12]
 8001e62:	695a      	ldr	r2, [r3, #20]
 8001e64:	9203      	str	r2, [sp, #12]
 8001e66:	699a      	ldr	r2, [r3, #24]
 8001e68:	9203      	str	r2, [sp, #12]
 8001e6a:	9a03      	ldr	r2, [sp, #12]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e72:	601a      	str	r2, [r3, #0]
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e74:	f8df 8124 	ldr.w	r8, [pc, #292]	; 8001f9c <HAL_I2C_Mem_Read+0x21c>
    while(hi2c->XferSize > 0U)
 8001e78:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d0e1      	beq.n	8001e42 <HAL_I2C_Mem_Read+0xc2>
      if(hi2c->XferSize <= 3U)
 8001e7e:	2b03      	cmp	r3, #3
 8001e80:	d86b      	bhi.n	8001f5a <HAL_I2C_Mem_Read+0x1da>
        if(hi2c->XferSize== 1U)
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d123      	bne.n	8001ece <HAL_I2C_Mem_Read+0x14e>
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8001e86:	4632      	mov	r2, r6
 8001e88:	4639      	mov	r1, r7
 8001e8a:	4620      	mov	r0, r4
 8001e8c:	f7ff fe20 	bl	8001ad0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e90:	2800      	cmp	r0, #0
 8001e92:	d039      	beq.n	8001f08 <HAL_I2C_Mem_Read+0x188>
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8001e94:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e96:	2b20      	cmp	r3, #32
 8001e98:	d1c4      	bne.n	8001e24 <HAL_I2C_Mem_Read+0xa4>
              return HAL_TIMEOUT;
 8001e9a:	2503      	movs	r5, #3
 8001e9c:	e780      	b.n	8001da0 <HAL_I2C_Mem_Read+0x20>
    else if(hi2c->XferSize == 2U)
 8001e9e:	2a02      	cmp	r2, #2
 8001ea0:	d10e      	bne.n	8001ec0 <HAL_I2C_Mem_Read+0x140>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ea8:	601a      	str	r2, [r3, #0]
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001eb0:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001eb2:	9004      	str	r0, [sp, #16]
 8001eb4:	695a      	ldr	r2, [r3, #20]
 8001eb6:	9204      	str	r2, [sp, #16]
 8001eb8:	699b      	ldr	r3, [r3, #24]
 8001eba:	9304      	str	r3, [sp, #16]
 8001ebc:	9b04      	ldr	r3, [sp, #16]
 8001ebe:	e7d9      	b.n	8001e74 <HAL_I2C_Mem_Read+0xf4>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ec0:	9005      	str	r0, [sp, #20]
 8001ec2:	695a      	ldr	r2, [r3, #20]
 8001ec4:	9205      	str	r2, [sp, #20]
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	9305      	str	r3, [sp, #20]
 8001eca:	9b05      	ldr	r3, [sp, #20]
 8001ecc:	e7d2      	b.n	8001e74 <HAL_I2C_Mem_Read+0xf4>
        else if(hi2c->XferSize == 2U)
 8001ece:	2b02      	cmp	r3, #2
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ed0:	9600      	str	r6, [sp, #0]
 8001ed2:	463b      	mov	r3, r7
 8001ed4:	f04f 0200 	mov.w	r2, #0
 8001ed8:	4641      	mov	r1, r8
 8001eda:	4620      	mov	r0, r4
        else if(hi2c->XferSize == 2U)
 8001edc:	d122      	bne.n	8001f24 <HAL_I2C_Mem_Read+0x1a4>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ede:	f7ff fcd7 	bl	8001890 <I2C_WaitOnFlagUntilTimeout>
 8001ee2:	2800      	cmp	r0, #0
 8001ee4:	d1d9      	bne.n	8001e9a <HAL_I2C_Mem_Read+0x11a>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001ee6:	6823      	ldr	r3, [r4, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eee:	601a      	str	r2, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001ef0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001ef2:	691b      	ldr	r3, [r3, #16]
 8001ef4:	1c51      	adds	r1, r2, #1
 8001ef6:	6261      	str	r1, [r4, #36]	; 0x24
 8001ef8:	7013      	strb	r3, [r2, #0]
          hi2c->XferSize--;
 8001efa:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001efc:	3b01      	subs	r3, #1
 8001efe:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001f00:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001f02:	3b01      	subs	r3, #1
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	8563      	strh	r3, [r4, #42]	; 0x2a
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001f08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f0a:	1c5a      	adds	r2, r3, #1
 8001f0c:	6262      	str	r2, [r4, #36]	; 0x24
 8001f0e:	6822      	ldr	r2, [r4, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001f10:	6912      	ldr	r2, [r2, #16]
 8001f12:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001f14:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001f16:	3b01      	subs	r3, #1
 8001f18:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001f1a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001f1c:	3b01      	subs	r3, #1
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001f22:	e7a9      	b.n	8001e78 <HAL_I2C_Mem_Read+0xf8>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f24:	f7ff fcb4 	bl	8001890 <I2C_WaitOnFlagUntilTimeout>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	2800      	cmp	r0, #0
 8001f2c:	d1b5      	bne.n	8001e9a <HAL_I2C_Mem_Read+0x11a>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001f2e:	6823      	ldr	r3, [r4, #0]
 8001f30:	6819      	ldr	r1, [r3, #0]
 8001f32:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8001f36:	6019      	str	r1, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001f38:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001f3a:	691b      	ldr	r3, [r3, #16]
 8001f3c:	1c48      	adds	r0, r1, #1
 8001f3e:	6260      	str	r0, [r4, #36]	; 0x24
 8001f40:	700b      	strb	r3, [r1, #0]
          hi2c->XferSize--;
 8001f42:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f44:	9600      	str	r6, [sp, #0]
          hi2c->XferSize--;
 8001f46:	3b01      	subs	r3, #1
 8001f48:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001f4a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001f4c:	3b01      	subs	r3, #1
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	8563      	strh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f52:	4641      	mov	r1, r8
 8001f54:	463b      	mov	r3, r7
 8001f56:	4620      	mov	r0, r4
 8001f58:	e7c1      	b.n	8001ede <HAL_I2C_Mem_Read+0x15e>
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f5a:	4632      	mov	r2, r6
 8001f5c:	4639      	mov	r1, r7
 8001f5e:	4620      	mov	r0, r4
 8001f60:	f7ff fdb6 	bl	8001ad0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f64:	2800      	cmp	r0, #0
 8001f66:	d195      	bne.n	8001e94 <HAL_I2C_Mem_Read+0x114>
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001f68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f6a:	1c5a      	adds	r2, r3, #1
 8001f6c:	6262      	str	r2, [r4, #36]	; 0x24
 8001f6e:	6822      	ldr	r2, [r4, #0]
 8001f70:	6912      	ldr	r2, [r2, #16]
 8001f72:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8001f74:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001f76:	6822      	ldr	r2, [r4, #0]
        hi2c->XferSize--;
 8001f78:	3b01      	subs	r3, #1
 8001f7a:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001f7c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	8563      	strh	r3, [r4, #42]	; 0x2a
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001f84:	6953      	ldr	r3, [r2, #20]
 8001f86:	075b      	lsls	r3, r3, #29
 8001f88:	f57f af76 	bpl.w	8001e78 <HAL_I2C_Mem_Read+0xf8>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001f8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f8e:	1c59      	adds	r1, r3, #1
 8001f90:	6261      	str	r1, [r4, #36]	; 0x24
 8001f92:	e7bd      	b.n	8001f10 <HAL_I2C_Mem_Read+0x190>
 8001f94:	00100002 	.word	0x00100002
 8001f98:	ffff0000 	.word	0xffff0000
 8001f9c:	00010004 	.word	0x00010004

08001fa0 <HAL_I2C_IsDeviceReady>:
{
 8001fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fa4:	4604      	mov	r4, r0
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	4698      	mov	r8, r3
 8001faa:	4689      	mov	r9, r1
 8001fac:	4692      	mov	sl, r2
  tickstart = HAL_GetTick();
 8001fae:	f7fe ff6d 	bl	8000e8c <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001fb2:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001fb6:	2b20      	cmp	r3, #32
  tickstart = HAL_GetTick();
 8001fb8:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001fba:	d003      	beq.n	8001fc4 <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 8001fbc:	2002      	movs	r0, #2
}
 8001fbe:	b005      	add	sp, #20
 8001fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fc4:	9000      	str	r0, [sp, #0]
 8001fc6:	2319      	movs	r3, #25
 8001fc8:	2201      	movs	r2, #1
 8001fca:	494a      	ldr	r1, [pc, #296]	; (80020f4 <HAL_I2C_IsDeviceReady+0x154>)
 8001fcc:	4620      	mov	r0, r4
 8001fce:	f7ff fc5f 	bl	8001890 <I2C_WaitOnFlagUntilTimeout>
 8001fd2:	2800      	cmp	r0, #0
 8001fd4:	d1f2      	bne.n	8001fbc <HAL_I2C_IsDeviceReady+0x1c>
    __HAL_LOCK(hi2c);
 8001fd6:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d0ee      	beq.n	8001fbc <HAL_I2C_IsDeviceReady+0x1c>
 8001fde:	2301      	movs	r3, #1
 8001fe0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001fe4:	6823      	ldr	r3, [r4, #0]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fe6:	f8df b10c 	ldr.w	fp, [pc, #268]	; 80020f4 <HAL_I2C_IsDeviceReady+0x154>
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001fee:	bf5e      	ittt	pl
 8001ff0:	681a      	ldrpl	r2, [r3, #0]
 8001ff2:	f042 0201 	orrpl.w	r2, r2, #1
 8001ff6:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ffe:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002000:	2324      	movs	r3, #36	; 0x24
 8002002:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002006:	2500      	movs	r5, #0
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002008:	4b3b      	ldr	r3, [pc, #236]	; (80020f8 <HAL_I2C_IsDeviceReady+0x158>)
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800200a:	6425      	str	r5, [r4, #64]	; 0x40
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800200c:	f009 09fe 	and.w	r9, r9, #254	; 0xfe
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002010:	62e3      	str	r3, [r4, #44]	; 0x2c
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002012:	6822      	ldr	r2, [r4, #0]
 8002014:	6813      	ldr	r3, [r2, #0]
 8002016:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800201a:	6013      	str	r3, [r2, #0]
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800201c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002020:	9600      	str	r6, [sp, #0]
 8002022:	4643      	mov	r3, r8
 8002024:	2200      	movs	r2, #0
 8002026:	4620      	mov	r0, r4
 8002028:	f7ff fc32 	bl	8001890 <I2C_WaitOnFlagUntilTimeout>
 800202c:	b108      	cbz	r0, 8002032 <HAL_I2C_IsDeviceReady+0x92>
        return HAL_TIMEOUT;
 800202e:	2003      	movs	r0, #3
 8002030:	e7c5      	b.n	8001fbe <HAL_I2C_IsDeviceReady+0x1e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002032:	6823      	ldr	r3, [r4, #0]
 8002034:	f8c3 9010 	str.w	r9, [r3, #16]
      tickstart = HAL_GetTick();
 8002038:	f7fe ff28 	bl	8000e8c <HAL_GetTick>
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800203c:	6823      	ldr	r3, [r4, #0]
 800203e:	6959      	ldr	r1, [r3, #20]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002040:	695a      	ldr	r2, [r3, #20]
      tmp3 = hi2c->State;
 8002042:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
      tickstart = HAL_GetTick();
 8002046:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002048:	f3c1 0140 	ubfx	r1, r1, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800204c:	f3c2 2280 	ubfx	r2, r2, #10, #1
      tmp3 = hi2c->State;
 8002050:	b2db      	uxtb	r3, r3
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002052:	27a0      	movs	r7, #160	; 0xa0
      while((tmp1 == RESET) && (tmp2 == RESET) && (tmp3 != HAL_I2C_STATE_TIMEOUT))
 8002054:	b911      	cbnz	r1, 800205c <HAL_I2C_IsDeviceReady+0xbc>
 8002056:	b90a      	cbnz	r2, 800205c <HAL_I2C_IsDeviceReady+0xbc>
 8002058:	2ba0      	cmp	r3, #160	; 0xa0
 800205a:	d120      	bne.n	800209e <HAL_I2C_IsDeviceReady+0xfe>
      if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800205c:	6823      	ldr	r3, [r4, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 800205e:	2720      	movs	r7, #32
 8002060:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
      if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002064:	695a      	ldr	r2, [r3, #20]
 8002066:	f012 0f02 	tst.w	r2, #2
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002070:	601a      	str	r2, [r3, #0]
      if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002072:	d02a      	beq.n	80020ca <HAL_I2C_IsDeviceReady+0x12a>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002074:	2200      	movs	r2, #0
 8002076:	9203      	str	r2, [sp, #12]
 8002078:	695a      	ldr	r2, [r3, #20]
 800207a:	9203      	str	r2, [sp, #12]
 800207c:	699b      	ldr	r3, [r3, #24]
 800207e:	9303      	str	r3, [sp, #12]
 8002080:	9b03      	ldr	r3, [sp, #12]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002082:	9600      	str	r6, [sp, #0]
 8002084:	2319      	movs	r3, #25
 8002086:	2201      	movs	r2, #1
 8002088:	491a      	ldr	r1, [pc, #104]	; (80020f4 <HAL_I2C_IsDeviceReady+0x154>)
 800208a:	4620      	mov	r0, r4
 800208c:	f7ff fc00 	bl	8001890 <I2C_WaitOnFlagUntilTimeout>
 8002090:	2800      	cmp	r0, #0
 8002092:	d1cc      	bne.n	800202e <HAL_I2C_IsDeviceReady+0x8e>
        hi2c->State = HAL_I2C_STATE_READY;
 8002094:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8002098:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
        return HAL_OK;
 800209c:	e78f      	b.n	8001fbe <HAL_I2C_IsDeviceReady+0x1e>
        if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800209e:	f1b8 0f00 	cmp.w	r8, #0
 80020a2:	d10c      	bne.n	80020be <HAL_I2C_IsDeviceReady+0x11e>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80020a4:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80020a8:	6823      	ldr	r3, [r4, #0]
 80020aa:	6959      	ldr	r1, [r3, #20]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80020ac:	695a      	ldr	r2, [r3, #20]
        tmp3 = hi2c->State;
 80020ae:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80020b2:	f3c1 0140 	ubfx	r1, r1, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80020b6:	f3c2 2280 	ubfx	r2, r2, #10, #1
        tmp3 = hi2c->State;
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	e7ca      	b.n	8002054 <HAL_I2C_IsDeviceReady+0xb4>
        if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80020be:	f7fe fee5 	bl	8000e8c <HAL_GetTick>
 80020c2:	1b80      	subs	r0, r0, r6
 80020c4:	4580      	cmp	r8, r0
 80020c6:	d3ed      	bcc.n	80020a4 <HAL_I2C_IsDeviceReady+0x104>
 80020c8:	e7ee      	b.n	80020a8 <HAL_I2C_IsDeviceReady+0x108>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80020ce:	615a      	str	r2, [r3, #20]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020d0:	4659      	mov	r1, fp
 80020d2:	9600      	str	r6, [sp, #0]
 80020d4:	2319      	movs	r3, #25
 80020d6:	2201      	movs	r2, #1
 80020d8:	4620      	mov	r0, r4
 80020da:	f7ff fbd9 	bl	8001890 <I2C_WaitOnFlagUntilTimeout>
 80020de:	2800      	cmp	r0, #0
 80020e0:	d1a5      	bne.n	800202e <HAL_I2C_IsDeviceReady+0x8e>
 80020e2:	3501      	adds	r5, #1
    }while(I2C_Trials++ < Trials);
 80020e4:	45aa      	cmp	sl, r5
 80020e6:	d894      	bhi.n	8002012 <HAL_I2C_IsDeviceReady+0x72>
    __HAL_UNLOCK(hi2c);
 80020e8:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 80020ec:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
    return HAL_ERROR;
 80020f0:	2001      	movs	r0, #1
 80020f2:	e764      	b.n	8001fbe <HAL_I2C_IsDeviceReady+0x1e>
 80020f4:	00100002 	.word	0x00100002
 80020f8:	ffff0000 	.word	0xffff0000

080020fc <HAL_I2C_MasterTxCpltCallback>:
 80020fc:	4770      	bx	lr

080020fe <HAL_I2C_MasterRxCpltCallback>:
 80020fe:	4770      	bx	lr

08002100 <HAL_I2C_SlaveTxCpltCallback>:
 8002100:	4770      	bx	lr

08002102 <HAL_I2C_SlaveRxCpltCallback>:
 8002102:	4770      	bx	lr

08002104 <HAL_I2C_AddrCallback>:
{
 8002104:	4770      	bx	lr

08002106 <HAL_I2C_ListenCpltCallback>:
 8002106:	4770      	bx	lr

08002108 <HAL_I2C_MemTxCpltCallback>:
 8002108:	4770      	bx	lr

0800210a <HAL_I2C_MemRxCpltCallback>:
 800210a:	4770      	bx	lr

0800210c <HAL_I2C_ErrorCallback>:
 800210c:	4770      	bx	lr

0800210e <HAL_I2C_AbortCpltCallback>:
{
 800210e:	4770      	bx	lr

08002110 <I2C_ITError>:
  uint32_t CurrentState = hi2c->State;
 8002110:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
  if((CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002114:	3b29      	subs	r3, #41	; 0x29
 8002116:	2b01      	cmp	r3, #1
{
 8002118:	b510      	push	{r4, lr}
 800211a:	6803      	ldr	r3, [r0, #0]
 800211c:	4604      	mov	r4, r0
  if((CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800211e:	d839      	bhi.n	8002194 <I2C_ITError+0x84>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002120:	2200      	movs	r2, #0
 8002122:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002124:	2228      	movs	r2, #40	; 0x28
 8002126:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002130:	601a      	str	r2, [r3, #0]
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002132:	685a      	ldr	r2, [r3, #4]
 8002134:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8002138:	d054      	beq.n	80021e4 <I2C_ITError+0xd4>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800213a:	685a      	ldr	r2, [r3, #4]
    if(hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800213c:	6b60      	ldr	r0, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800213e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002142:	605a      	str	r2, [r3, #4]
    if(hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002144:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8002148:	2b01      	cmp	r3, #1
 800214a:	4b39      	ldr	r3, [pc, #228]	; (8002230 <I2C_ITError+0x120>)
 800214c:	d031      	beq.n	80021b2 <I2C_ITError+0xa2>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800214e:	6503      	str	r3, [r0, #80]	; 0x50
      if(HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002150:	f7ff f998 	bl	8001484 <HAL_DMA_Abort_IT>
 8002154:	b150      	cbz	r0, 800216c <I2C_ITError+0x5c>
        __HAL_I2C_DISABLE(hi2c);
 8002156:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002158:	6b60      	ldr	r0, [r4, #52]	; 0x34
        __HAL_I2C_DISABLE(hi2c);
 800215a:	6813      	ldr	r3, [r2, #0]
 800215c:	f023 0301 	bic.w	r3, r3, #1
 8002160:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8002162:	2320      	movs	r3, #32
 8002164:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002168:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800216a:	4798      	blx	r3
  if((hi2c->State == HAL_I2C_STATE_LISTEN) && ((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF))
 800216c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8002170:	2b28      	cmp	r3, #40	; 0x28
 8002172:	d10e      	bne.n	8002192 <I2C_ITError+0x82>
 8002174:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002176:	075b      	lsls	r3, r3, #29
 8002178:	d50b      	bpl.n	8002192 <I2C_ITError+0x82>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800217a:	4b2e      	ldr	r3, [pc, #184]	; (8002234 <I2C_ITError+0x124>)
 800217c:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800217e:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 8002180:	2300      	movs	r3, #0
 8002182:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 8002184:	4620      	mov	r0, r4
    hi2c->State = HAL_I2C_STATE_READY;
 8002186:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800218a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 800218e:	f7ff ffba 	bl	8002106 <HAL_I2C_ListenCpltCallback>
 8002192:	bd10      	pop	{r4, pc}
    if((hi2c->State != HAL_I2C_STATE_ABORT) && ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) != I2C_CR2_DMAEN))
 8002194:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8002198:	2a60      	cmp	r2, #96	; 0x60
 800219a:	d005      	beq.n	80021a8 <I2C_ITError+0x98>
 800219c:	685a      	ldr	r2, [r3, #4]
 800219e:	0512      	lsls	r2, r2, #20
      hi2c->State = HAL_I2C_STATE_READY;
 80021a0:	bf5c      	itt	pl
 80021a2:	2220      	movpl	r2, #32
 80021a4:	f880 203d 	strbpl.w	r2, [r0, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 80021a8:	2200      	movs	r2, #0
 80021aa:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021ac:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
 80021b0:	e7bb      	b.n	800212a <I2C_ITError+0x1a>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80021b2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80021b4:	6503      	str	r3, [r0, #80]	; 0x50
      if(HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80021b6:	f7ff f965 	bl	8001484 <HAL_DMA_Abort_IT>
 80021ba:	2800      	cmp	r0, #0
 80021bc:	d0d6      	beq.n	800216c <I2C_ITError+0x5c>
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80021be:	6822      	ldr	r2, [r4, #0]
 80021c0:	6953      	ldr	r3, [r2, #20]
 80021c2:	0658      	lsls	r0, r3, #25
 80021c4:	d504      	bpl.n	80021d0 <I2C_ITError+0xc0>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80021c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80021c8:	6912      	ldr	r2, [r2, #16]
 80021ca:	1c59      	adds	r1, r3, #1
 80021cc:	6261      	str	r1, [r4, #36]	; 0x24
 80021ce:	701a      	strb	r2, [r3, #0]
        __HAL_I2C_DISABLE(hi2c);
 80021d0:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80021d2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        __HAL_I2C_DISABLE(hi2c);
 80021d4:	6813      	ldr	r3, [r2, #0]
 80021d6:	f023 0301 	bic.w	r3, r3, #1
 80021da:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 80021dc:	2320      	movs	r3, #32
 80021de:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 80021e2:	e7c1      	b.n	8002168 <I2C_ITError+0x58>
  else if(hi2c->State == HAL_I2C_STATE_ABORT)
 80021e4:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 80021e8:	2960      	cmp	r1, #96	; 0x60
 80021ea:	d114      	bne.n	8002216 <I2C_ITError+0x106>
    hi2c->State = HAL_I2C_STATE_READY;
 80021ec:	2120      	movs	r1, #32
 80021ee:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021f2:	6422      	str	r2, [r4, #64]	; 0x40
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80021f4:	695a      	ldr	r2, [r3, #20]
 80021f6:	0651      	lsls	r1, r2, #25
 80021f8:	d504      	bpl.n	8002204 <I2C_ITError+0xf4>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80021fa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	1c51      	adds	r1, r2, #1
 8002200:	6261      	str	r1, [r4, #36]	; 0x24
 8002202:	7013      	strb	r3, [r2, #0]
    __HAL_I2C_DISABLE(hi2c);
 8002204:	6822      	ldr	r2, [r4, #0]
 8002206:	6813      	ldr	r3, [r2, #0]
 8002208:	f023 0301 	bic.w	r3, r3, #1
 800220c:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 800220e:	4620      	mov	r0, r4
 8002210:	f7ff ff7d 	bl	800210e <HAL_I2C_AbortCpltCallback>
 8002214:	e7aa      	b.n	800216c <I2C_ITError+0x5c>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002216:	695a      	ldr	r2, [r3, #20]
 8002218:	0652      	lsls	r2, r2, #25
 800221a:	d504      	bpl.n	8002226 <I2C_ITError+0x116>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800221c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800221e:	691b      	ldr	r3, [r3, #16]
 8002220:	1c51      	adds	r1, r2, #1
 8002222:	6261      	str	r1, [r4, #36]	; 0x24
 8002224:	7013      	strb	r3, [r2, #0]
    HAL_I2C_ErrorCallback(hi2c);
 8002226:	4620      	mov	r0, r4
 8002228:	f7ff ff70 	bl	800210c <HAL_I2C_ErrorCallback>
 800222c:	e79e      	b.n	800216c <I2C_ITError+0x5c>
 800222e:	bf00      	nop
 8002230:	08002a41 	.word	0x08002a41
 8002234:	ffff0000 	.word	0xffff0000

08002238 <HAL_I2C_EV_IRQHandler>:
  uint32_t sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002238:	6803      	ldr	r3, [r0, #0]
{
 800223a:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800223c:	699d      	ldr	r5, [r3, #24]
  uint32_t sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800223e:	6959      	ldr	r1, [r3, #20]
  uint32_t itsources    = READ_REG(hi2c->Instance->CR2);
 8002240:	685a      	ldr	r2, [r3, #4]
  uint32_t CurrentMode  = hi2c->Mode;
 8002242:	f890 403e 	ldrb.w	r4, [r0, #62]	; 0x3e
 8002246:	b2e4      	uxtb	r4, r4
  if((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002248:	2c10      	cmp	r4, #16
{
 800224a:	b08d      	sub	sp, #52	; 0x34
  if((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800224c:	d002      	beq.n	8002254 <HAL_I2C_EV_IRQHandler+0x1c>
 800224e:	2c40      	cmp	r4, #64	; 0x40
 8002250:	f040 8255 	bne.w	80026fe <HAL_I2C_EV_IRQHandler+0x4c6>
    if(((sr1itflags & I2C_FLAG_SB) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8002254:	f011 1f01 	tst.w	r1, #65537	; 0x10001
 8002258:	d066      	beq.n	8002328 <HAL_I2C_EV_IRQHandler+0xf0>
 800225a:	0597      	lsls	r7, r2, #22
 800225c:	d564      	bpl.n	8002328 <HAL_I2C_EV_IRQHandler+0xf0>
  if(hi2c->Mode == HAL_I2C_MODE_MEM)
 800225e:	f890 403e 	ldrb.w	r4, [r0, #62]	; 0x3e
 8002262:	2c40      	cmp	r4, #64	; 0x40
 8002264:	d143      	bne.n	80022ee <HAL_I2C_EV_IRQHandler+0xb6>
    if(hi2c->EventCount == 0U)
 8002266:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8002268:	2c00      	cmp	r4, #0
 800226a:	d13b      	bne.n	80022e4 <HAL_I2C_EV_IRQHandler+0xac>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800226c:	6c44      	ldr	r4, [r0, #68]	; 0x44
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800226e:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002272:	611c      	str	r4, [r3, #16]
    if((sr2itflags & I2C_FLAG_TRA) != RESET)
 8002274:	4e98      	ldr	r6, [pc, #608]	; (80024d8 <HAL_I2C_EV_IRQHandler+0x2a0>)
 8002276:	4c99      	ldr	r4, [pc, #612]	; (80024dc <HAL_I2C_EV_IRQHandler+0x2a4>)
 8002278:	402e      	ands	r6, r5
 800227a:	400c      	ands	r4, r1
 800227c:	2e00      	cmp	r6, #0
 800227e:	f000 819f 	beq.w	80025c0 <HAL_I2C_EV_IRQHandler+0x388>
      if(((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 8002282:	4d97      	ldr	r5, [pc, #604]	; (80024e0 <HAL_I2C_EV_IRQHandler+0x2a8>)
 8002284:	400d      	ands	r5, r1
 8002286:	2d00      	cmp	r5, #0
 8002288:	f000 8166 	beq.w	8002558 <HAL_I2C_EV_IRQHandler+0x320>
 800228c:	0555      	lsls	r5, r2, #21
 800228e:	f140 8163 	bpl.w	8002558 <HAL_I2C_EV_IRQHandler+0x320>
 8002292:	2c00      	cmp	r4, #0
 8002294:	f040 8160 	bne.w	8002558 <HAL_I2C_EV_IRQHandler+0x320>
  uint32_t CurrentState       = hi2c->State;
 8002298:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  if((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800229c:	8d05      	ldrh	r5, [r0, #40]	; 0x28
  uint32_t CurrentMode        = hi2c->Mode;
 800229e:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80022a2:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  uint32_t CurrentState       = hi2c->State;
 80022a4:	b2d2      	uxtb	r2, r2
  uint32_t CurrentMode        = hi2c->Mode;
 80022a6:	b2c9      	uxtb	r1, r1
  if((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80022a8:	2d00      	cmp	r5, #0
 80022aa:	f040 8105 	bne.w	80024b8 <HAL_I2C_EV_IRQHandler+0x280>
 80022ae:	2a21      	cmp	r2, #33	; 0x21
 80022b0:	f040 8104 	bne.w	80024bc <HAL_I2C_EV_IRQHandler+0x284>
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80022b4:	2c04      	cmp	r4, #4
 80022b6:	f000 816c 	beq.w	8002592 <HAL_I2C_EV_IRQHandler+0x35a>
 80022ba:	2c08      	cmp	r4, #8
 80022bc:	f000 8169 	beq.w	8002592 <HAL_I2C_EV_IRQHandler+0x35a>
 80022c0:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
 80022c4:	f000 8165 	beq.w	8002592 <HAL_I2C_EV_IRQHandler+0x35a>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80022c8:	685a      	ldr	r2, [r3, #4]
 80022ca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80022ce:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80022d0:	2311      	movs	r3, #17
 80022d2:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80022d4:	f880 503e 	strb.w	r5, [r0, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80022d8:	2320      	movs	r3, #32
 80022da:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80022de:	f7ff ff0d 	bl	80020fc <HAL_I2C_MasterTxCpltCallback>
 80022e2:	e0f6      	b.n	80024d2 <HAL_I2C_EV_IRQHandler+0x29a>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80022e4:	6c44      	ldr	r4, [r0, #68]	; 0x44
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80022e6:	f044 0401 	orr.w	r4, r4, #1
 80022ea:	b2e4      	uxtb	r4, r4
 80022ec:	e7c1      	b.n	8002272 <HAL_I2C_EV_IRQHandler+0x3a>
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022ee:	6904      	ldr	r4, [r0, #16]
 80022f0:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
 80022f4:	d105      	bne.n	8002302 <HAL_I2C_EV_IRQHandler+0xca>
      if(hi2c->State == HAL_I2C_STATE_BUSY_TX) 
 80022f6:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 80022fa:	2c21      	cmp	r4, #33	; 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80022fc:	6c44      	ldr	r4, [r0, #68]	; 0x44
      if(hi2c->State == HAL_I2C_STATE_BUSY_TX) 
 80022fe:	d1f2      	bne.n	80022e6 <HAL_I2C_EV_IRQHandler+0xae>
 8002300:	e7b5      	b.n	800226e <HAL_I2C_EV_IRQHandler+0x36>
      if(hi2c->EventCount == 0U)
 8002302:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8002304:	b934      	cbnz	r4, 8002314 <HAL_I2C_EV_IRQHandler+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002306:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002308:	11e4      	asrs	r4, r4, #7
 800230a:	f004 0406 	and.w	r4, r4, #6
 800230e:	f044 04f0 	orr.w	r4, r4, #240	; 0xf0
 8002312:	e7ae      	b.n	8002272 <HAL_I2C_EV_IRQHandler+0x3a>
      else if(hi2c->EventCount == 1U)
 8002314:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8002316:	2c01      	cmp	r4, #1
 8002318:	d1ac      	bne.n	8002274 <HAL_I2C_EV_IRQHandler+0x3c>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800231a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800231c:	11e4      	asrs	r4, r4, #7
 800231e:	f004 0406 	and.w	r4, r4, #6
 8002322:	f044 04f1 	orr.w	r4, r4, #241	; 0xf1
 8002326:	e7a4      	b.n	8002272 <HAL_I2C_EV_IRQHandler+0x3a>
    else if(((sr1itflags & I2C_FLAG_ADD10) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8002328:	4c6e      	ldr	r4, [pc, #440]	; (80024e4 <HAL_I2C_EV_IRQHandler+0x2ac>)
 800232a:	400c      	ands	r4, r1
 800232c:	b11c      	cbz	r4, 8002336 <HAL_I2C_EV_IRQHandler+0xfe>
 800232e:	0596      	lsls	r6, r2, #22
 8002330:	d501      	bpl.n	8002336 <HAL_I2C_EV_IRQHandler+0xfe>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002332:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002334:	e7d9      	b.n	80022ea <HAL_I2C_EV_IRQHandler+0xb2>
    else if(((sr1itflags & I2C_FLAG_ADDR) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8002336:	4c6c      	ldr	r4, [pc, #432]	; (80024e8 <HAL_I2C_EV_IRQHandler+0x2b0>)
 8002338:	400c      	ands	r4, r1
 800233a:	2c00      	cmp	r4, #0
 800233c:	d09a      	beq.n	8002274 <HAL_I2C_EV_IRQHandler+0x3c>
 800233e:	0594      	lsls	r4, r2, #22
 8002340:	d598      	bpl.n	8002274 <HAL_I2C_EV_IRQHandler+0x3c>
  uint32_t CurrentMode        = hi2c->Mode;
 8002342:	f890 403e 	ldrb.w	r4, [r0, #62]	; 0x3e
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002346:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  uint32_t Prev_State         = hi2c->PreviousState;
 8002348:	f8d0 e030 	ldr.w	lr, [r0, #48]	; 0x30
  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800234c:	f890 703d 	ldrb.w	r7, [r0, #61]	; 0x3d
 8002350:	2f22      	cmp	r7, #34	; 0x22
  uint32_t CurrentMode        = hi2c->Mode;
 8002352:	b2e4      	uxtb	r4, r4
  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002354:	f040 80a8 	bne.w	80024a8 <HAL_I2C_EV_IRQHandler+0x270>
    if((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002358:	6d07      	ldr	r7, [r0, #80]	; 0x50
 800235a:	b947      	cbnz	r7, 800236e <HAL_I2C_EV_IRQHandler+0x136>
 800235c:	2c40      	cmp	r4, #64	; 0x40
 800235e:	d106      	bne.n	800236e <HAL_I2C_EV_IRQHandler+0x136>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002360:	9701      	str	r7, [sp, #4]
 8002362:	695c      	ldr	r4, [r3, #20]
 8002364:	9401      	str	r4, [sp, #4]
 8002366:	699c      	ldr	r4, [r3, #24]
 8002368:	9401      	str	r4, [sp, #4]
 800236a:	9c01      	ldr	r4, [sp, #4]
 800236c:	e782      	b.n	8002274 <HAL_I2C_EV_IRQHandler+0x3c>
    else if((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800236e:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8002370:	b98c      	cbnz	r4, 8002396 <HAL_I2C_EV_IRQHandler+0x15e>
 8002372:	6907      	ldr	r7, [r0, #16]
 8002374:	f5b7 4f40 	cmp.w	r7, #49152	; 0xc000
 8002378:	d10d      	bne.n	8002396 <HAL_I2C_EV_IRQHandler+0x15e>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800237a:	9402      	str	r4, [sp, #8]
 800237c:	695c      	ldr	r4, [r3, #20]
 800237e:	9402      	str	r4, [sp, #8]
 8002380:	699c      	ldr	r4, [r3, #24]
 8002382:	9402      	str	r4, [sp, #8]
 8002384:	9c02      	ldr	r4, [sp, #8]
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002386:	681c      	ldr	r4, [r3, #0]
 8002388:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 800238c:	601c      	str	r4, [r3, #0]
      hi2c->EventCount++;
 800238e:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8002390:	3401      	adds	r4, #1
      hi2c->EventCount = 0U;
 8002392:	6504      	str	r4, [r0, #80]	; 0x50
 8002394:	e76e      	b.n	8002274 <HAL_I2C_EV_IRQHandler+0x3c>
      if(hi2c->XferCount == 0U)
 8002396:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 8002398:	b2a4      	uxth	r4, r4
 800239a:	b954      	cbnz	r4, 80023b2 <HAL_I2C_EV_IRQHandler+0x17a>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800239c:	9403      	str	r4, [sp, #12]
 800239e:	695c      	ldr	r4, [r3, #20]
 80023a0:	9403      	str	r4, [sp, #12]
 80023a2:	699c      	ldr	r4, [r3, #24]
 80023a4:	9403      	str	r4, [sp, #12]
 80023a6:	9c03      	ldr	r4, [sp, #12]
            hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80023a8:	681c      	ldr	r4, [r3, #0]
 80023aa:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 80023ae:	601c      	str	r4, [r3, #0]
 80023b0:	e019      	b.n	80023e6 <HAL_I2C_EV_IRQHandler+0x1ae>
      else if(hi2c->XferCount == 1U)   
 80023b2:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 80023b4:	b2a4      	uxth	r4, r4
 80023b6:	2c01      	cmp	r4, #1
 80023b8:	d142      	bne.n	8002440 <HAL_I2C_EV_IRQHandler+0x208>
        if(CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80023ba:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
 80023be:	d11b      	bne.n	80023f8 <HAL_I2C_EV_IRQHandler+0x1c0>
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80023c0:	681c      	ldr	r4, [r3, #0]
 80023c2:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 80023c6:	601c      	str	r4, [r3, #0]
          if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80023c8:	685c      	ldr	r4, [r3, #4]
 80023ca:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
 80023ce:	d00c      	beq.n	80023ea <HAL_I2C_EV_IRQHandler+0x1b2>
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80023d0:	681c      	ldr	r4, [r3, #0]
 80023d2:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 80023d6:	601c      	str	r4, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023d8:	2400      	movs	r4, #0
 80023da:	9404      	str	r4, [sp, #16]
 80023dc:	695c      	ldr	r4, [r3, #20]
 80023de:	9404      	str	r4, [sp, #16]
 80023e0:	699c      	ldr	r4, [r3, #24]
 80023e2:	9404      	str	r4, [sp, #16]
 80023e4:	9c04      	ldr	r4, [sp, #16]
      hi2c->EventCount = 0U;
 80023e6:	2400      	movs	r4, #0
 80023e8:	e7d3      	b.n	8002392 <HAL_I2C_EV_IRQHandler+0x15a>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023ea:	9405      	str	r4, [sp, #20]
 80023ec:	695c      	ldr	r4, [r3, #20]
 80023ee:	9405      	str	r4, [sp, #20]
 80023f0:	699c      	ldr	r4, [r3, #24]
 80023f2:	9405      	str	r4, [sp, #20]
 80023f4:	9c05      	ldr	r4, [sp, #20]
 80023f6:	e7d7      	b.n	80023a8 <HAL_I2C_EV_IRQHandler+0x170>
        else if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80023f8:	2e04      	cmp	r6, #4
 80023fa:	d015      	beq.n	8002428 <HAL_I2C_EV_IRQHandler+0x1f0>
 80023fc:	2e08      	cmp	r6, #8
 80023fe:	d013      	beq.n	8002428 <HAL_I2C_EV_IRQHandler+0x1f0>
          && (Prev_State != I2C_STATE_MASTER_BUSY_RX))
 8002400:	f1be 0f12 	cmp.w	lr, #18
 8002404:	d010      	beq.n	8002428 <HAL_I2C_EV_IRQHandler+0x1f0>
          if(hi2c->XferOptions != I2C_NEXT_FRAME)
 8002406:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002408:	2c02      	cmp	r4, #2
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800240a:	681c      	ldr	r4, [r3, #0]
 800240c:	bf14      	ite	ne
 800240e:	f424 6480 	bicne.w	r4, r4, #1024	; 0x400
            hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8002412:	f444 6480 	orreq.w	r4, r4, #1024	; 0x400
 8002416:	601c      	str	r4, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002418:	2400      	movs	r4, #0
 800241a:	9406      	str	r4, [sp, #24]
 800241c:	695c      	ldr	r4, [r3, #20]
 800241e:	9406      	str	r4, [sp, #24]
 8002420:	699c      	ldr	r4, [r3, #24]
 8002422:	9406      	str	r4, [sp, #24]
 8002424:	9c06      	ldr	r4, [sp, #24]
 8002426:	e7de      	b.n	80023e6 <HAL_I2C_EV_IRQHandler+0x1ae>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002428:	681c      	ldr	r4, [r3, #0]
 800242a:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 800242e:	601c      	str	r4, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002430:	2400      	movs	r4, #0
 8002432:	9407      	str	r4, [sp, #28]
 8002434:	695c      	ldr	r4, [r3, #20]
 8002436:	9407      	str	r4, [sp, #28]
 8002438:	699c      	ldr	r4, [r3, #24]
 800243a:	9407      	str	r4, [sp, #28]
 800243c:	9c07      	ldr	r4, [sp, #28]
 800243e:	e7b3      	b.n	80023a8 <HAL_I2C_EV_IRQHandler+0x170>
      else if(hi2c->XferCount == 2U)
 8002440:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 8002442:	b2a4      	uxth	r4, r4
 8002444:	2c02      	cmp	r4, #2
 8002446:	d11c      	bne.n	8002482 <HAL_I2C_EV_IRQHandler+0x24a>
        if(hi2c->XferOptions != I2C_NEXT_FRAME)
 8002448:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800244a:	2c02      	cmp	r4, #2
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800244c:	681c      	ldr	r4, [r3, #0]
 800244e:	bf1d      	ittte	ne
 8002450:	f424 6480 	bicne.w	r4, r4, #1024	; 0x400
 8002454:	601c      	strne	r4, [r3, #0]
          hi2c->Instance->CR1 |= I2C_CR1_POS;
 8002456:	681c      	ldrne	r4, [r3, #0]
          hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8002458:	f444 6480 	orreq.w	r4, r4, #1024	; 0x400
          hi2c->Instance->CR1 |= I2C_CR1_POS;
 800245c:	bf18      	it	ne
 800245e:	f444 6400 	orrne.w	r4, r4, #2048	; 0x800
          hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8002462:	601c      	str	r4, [r3, #0]
        if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002464:	685c      	ldr	r4, [r3, #4]
 8002466:	0527      	lsls	r7, r4, #20
          hi2c->Instance->CR2 |= I2C_CR2_LAST;
 8002468:	bf42      	ittt	mi
 800246a:	685c      	ldrmi	r4, [r3, #4]
 800246c:	f444 5480 	orrmi.w	r4, r4, #4096	; 0x1000
 8002470:	605c      	strmi	r4, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002472:	2400      	movs	r4, #0
 8002474:	9408      	str	r4, [sp, #32]
 8002476:	695c      	ldr	r4, [r3, #20]
 8002478:	9408      	str	r4, [sp, #32]
 800247a:	699c      	ldr	r4, [r3, #24]
 800247c:	9408      	str	r4, [sp, #32]
 800247e:	9c08      	ldr	r4, [sp, #32]
 8002480:	e7b1      	b.n	80023e6 <HAL_I2C_EV_IRQHandler+0x1ae>
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8002482:	681c      	ldr	r4, [r3, #0]
 8002484:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 8002488:	601c      	str	r4, [r3, #0]
        if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800248a:	685c      	ldr	r4, [r3, #4]
 800248c:	0526      	lsls	r6, r4, #20
          hi2c->Instance->CR2 |= I2C_CR2_LAST;
 800248e:	bf42      	ittt	mi
 8002490:	685c      	ldrmi	r4, [r3, #4]
 8002492:	f444 5480 	orrmi.w	r4, r4, #4096	; 0x1000
 8002496:	605c      	strmi	r4, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002498:	2400      	movs	r4, #0
 800249a:	9409      	str	r4, [sp, #36]	; 0x24
 800249c:	695c      	ldr	r4, [r3, #20]
 800249e:	9409      	str	r4, [sp, #36]	; 0x24
 80024a0:	699c      	ldr	r4, [r3, #24]
 80024a2:	9409      	str	r4, [sp, #36]	; 0x24
 80024a4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80024a6:	e79e      	b.n	80023e6 <HAL_I2C_EV_IRQHandler+0x1ae>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024a8:	2400      	movs	r4, #0
 80024aa:	940a      	str	r4, [sp, #40]	; 0x28
 80024ac:	695c      	ldr	r4, [r3, #20]
 80024ae:	940a      	str	r4, [sp, #40]	; 0x28
 80024b0:	699c      	ldr	r4, [r3, #24]
 80024b2:	940a      	str	r4, [sp, #40]	; 0x28
 80024b4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80024b6:	e6dd      	b.n	8002274 <HAL_I2C_EV_IRQHandler+0x3c>
  else if((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80024b8:	2a21      	cmp	r2, #33	; 0x21
 80024ba:	d003      	beq.n	80024c4 <HAL_I2C_EV_IRQHandler+0x28c>
 80024bc:	2940      	cmp	r1, #64	; 0x40
 80024be:	d108      	bne.n	80024d2 <HAL_I2C_EV_IRQHandler+0x29a>
    ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80024c0:	2a22      	cmp	r2, #34	; 0x22
 80024c2:	d106      	bne.n	80024d2 <HAL_I2C_EV_IRQHandler+0x29a>
    if(hi2c->XferCount == 0U)
 80024c4:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80024c6:	b292      	uxth	r2, r2
 80024c8:	b982      	cbnz	r2, 80024ec <HAL_I2C_EV_IRQHandler+0x2b4>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80024ca:	685a      	ldr	r2, [r3, #4]
 80024cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024d0:	605a      	str	r2, [r3, #4]
}
 80024d2:	b00d      	add	sp, #52	; 0x34
 80024d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024d6:	bf00      	nop
 80024d8:	00100004 	.word	0x00100004
 80024dc:	00010004 	.word	0x00010004
 80024e0:	00010080 	.word	0x00010080
 80024e4:	00010008 	.word	0x00010008
 80024e8:	00010002 	.word	0x00010002
      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 80024ec:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 80024f0:	2a40      	cmp	r2, #64	; 0x40
 80024f2:	d127      	bne.n	8002544 <HAL_I2C_EV_IRQHandler+0x30c>
        if(hi2c->EventCount == 0)
 80024f4:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80024f6:	b97a      	cbnz	r2, 8002518 <HAL_I2C_EV_IRQHandler+0x2e0>
          if(hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80024f8:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80024fa:	2a01      	cmp	r2, #1
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80024fc:	6c82      	ldr	r2, [r0, #72]	; 0x48
          if(hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80024fe:	d105      	bne.n	800250c <HAL_I2C_EV_IRQHandler+0x2d4>
 8002500:	b2d2      	uxtb	r2, r2
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002502:	611a      	str	r2, [r3, #16]
            hi2c->EventCount += 2;
 8002504:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002506:	3302      	adds	r3, #2
            hi2c->EventCount++;
 8002508:	6503      	str	r3, [r0, #80]	; 0x50
 800250a:	e7e2      	b.n	80024d2 <HAL_I2C_EV_IRQHandler+0x29a>
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800250c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002510:	611a      	str	r2, [r3, #16]
            hi2c->EventCount++;
 8002512:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002514:	3301      	adds	r3, #1
 8002516:	e7f7      	b.n	8002508 <HAL_I2C_EV_IRQHandler+0x2d0>
        else if(hi2c->EventCount == 1)
 8002518:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800251a:	2a01      	cmp	r2, #1
 800251c:	d102      	bne.n	8002524 <HAL_I2C_EV_IRQHandler+0x2ec>
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800251e:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8002520:	b2d2      	uxtb	r2, r2
 8002522:	e7f5      	b.n	8002510 <HAL_I2C_EV_IRQHandler+0x2d8>
        else if(hi2c->EventCount == 2)
 8002524:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8002526:	2a02      	cmp	r2, #2
 8002528:	d1d3      	bne.n	80024d2 <HAL_I2C_EV_IRQHandler+0x29a>
          if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800252a:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 800252e:	2a22      	cmp	r2, #34	; 0x22
 8002530:	d104      	bne.n	800253c <HAL_I2C_EV_IRQHandler+0x304>
            hi2c->Instance->CR1 |= I2C_CR1_START;
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	e7ca      	b.n	80024d2 <HAL_I2C_EV_IRQHandler+0x29a>
          else if(hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800253c:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8002540:	2a21      	cmp	r2, #33	; 0x21
 8002542:	d1c6      	bne.n	80024d2 <HAL_I2C_EV_IRQHandler+0x29a>
    hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8002544:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8002546:	1c51      	adds	r1, r2, #1
 8002548:	6241      	str	r1, [r0, #36]	; 0x24
 800254a:	7812      	ldrb	r2, [r2, #0]
 800254c:	611a      	str	r2, [r3, #16]
    hi2c->XferCount--;
 800254e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002550:	3b01      	subs	r3, #1
 8002552:	b29b      	uxth	r3, r3
 8002554:	8543      	strh	r3, [r0, #42]	; 0x2a
}
 8002556:	e7bc      	b.n	80024d2 <HAL_I2C_EV_IRQHandler+0x29a>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8002558:	2c00      	cmp	r4, #0
 800255a:	d0ba      	beq.n	80024d2 <HAL_I2C_EV_IRQHandler+0x29a>
 800255c:	0594      	lsls	r4, r2, #22
 800255e:	d5b8      	bpl.n	80024d2 <HAL_I2C_EV_IRQHandler+0x29a>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002560:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  if(hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002562:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8002566:	2a21      	cmp	r2, #33	; 0x21
 8002568:	d1b3      	bne.n	80024d2 <HAL_I2C_EV_IRQHandler+0x29a>
    if(hi2c->XferCount != 0U)
 800256a:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 800256c:	b292      	uxth	r2, r2
 800256e:	2a00      	cmp	r2, #0
 8002570:	d1e8      	bne.n	8002544 <HAL_I2C_EV_IRQHandler+0x30c>
      if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002572:	2904      	cmp	r1, #4
 8002574:	d00d      	beq.n	8002592 <HAL_I2C_EV_IRQHandler+0x35a>
 8002576:	2908      	cmp	r1, #8
 8002578:	d00b      	beq.n	8002592 <HAL_I2C_EV_IRQHandler+0x35a>
 800257a:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 800257e:	d008      	beq.n	8002592 <HAL_I2C_EV_IRQHandler+0x35a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002580:	6859      	ldr	r1, [r3, #4]
 8002582:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8002586:	6059      	str	r1, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002588:	2311      	movs	r3, #17
 800258a:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800258c:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
 8002590:	e6a2      	b.n	80022d8 <HAL_I2C_EV_IRQHandler+0xa0>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002592:	685a      	ldr	r2, [r3, #4]
 8002594:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002598:	605a      	str	r2, [r3, #4]
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025a0:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80025a2:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 80025a4:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80025a6:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80025a8:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
        if(hi2c->Mode == HAL_I2C_MODE_MEM)
 80025ac:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80025b0:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        if(hi2c->Mode == HAL_I2C_MODE_MEM)
 80025b4:	2a40      	cmp	r2, #64	; 0x40
 80025b6:	f47f ae92 	bne.w	80022de <HAL_I2C_EV_IRQHandler+0xa6>
          HAL_I2C_MemTxCpltCallback(hi2c);
 80025ba:	f7ff fda5 	bl	8002108 <HAL_I2C_MemTxCpltCallback>
 80025be:	e788      	b.n	80024d2 <HAL_I2C_EV_IRQHandler+0x29a>
      if(((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 80025c0:	4d90      	ldr	r5, [pc, #576]	; (8002804 <HAL_I2C_EV_IRQHandler+0x5cc>)
 80025c2:	400d      	ands	r5, r1
 80025c4:	2d00      	cmp	r5, #0
 80025c6:	d041      	beq.n	800264c <HAL_I2C_EV_IRQHandler+0x414>
 80025c8:	0551      	lsls	r1, r2, #21
 80025ca:	d53f      	bpl.n	800264c <HAL_I2C_EV_IRQHandler+0x414>
 80025cc:	2c00      	cmp	r4, #0
 80025ce:	d13d      	bne.n	800264c <HAL_I2C_EV_IRQHandler+0x414>
  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80025d0:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 80025d4:	2a22      	cmp	r2, #34	; 0x22
 80025d6:	f47f af7c 	bne.w	80024d2 <HAL_I2C_EV_IRQHandler+0x29a>
    tmp = hi2c->XferCount;
 80025da:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80025dc:	b292      	uxth	r2, r2
    if(tmp > 3U)
 80025de:	2a03      	cmp	r2, #3
 80025e0:	d913      	bls.n	800260a <HAL_I2C_EV_IRQHandler+0x3d2>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80025e2:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	1c51      	adds	r1, r2, #1
 80025e8:	6241      	str	r1, [r0, #36]	; 0x24
 80025ea:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 80025ec:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80025ee:	3b01      	subs	r3, #1
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	8543      	strh	r3, [r0, #42]	; 0x2a
      if(hi2c->XferCount == 3)
 80025f4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	2b03      	cmp	r3, #3
 80025fa:	f47f af6a 	bne.w	80024d2 <HAL_I2C_EV_IRQHandler+0x29a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80025fe:	6802      	ldr	r2, [r0, #0]
 8002600:	6853      	ldr	r3, [r2, #4]
 8002602:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002606:	6053      	str	r3, [r2, #4]
 8002608:	e763      	b.n	80024d2 <HAL_I2C_EV_IRQHandler+0x29a>
    else if((tmp == 1U) || (tmp == 0U))
 800260a:	2a01      	cmp	r2, #1
 800260c:	f63f af61 	bhi.w	80024d2 <HAL_I2C_EV_IRQHandler+0x29a>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002616:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002618:	685a      	ldr	r2, [r3, #4]
 800261a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800261e:	605a      	str	r2, [r3, #4]
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002620:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	1c51      	adds	r1, r2, #1
 8002626:	6241      	str	r1, [r0, #36]	; 0x24
 8002628:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 800262a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800262c:	3b01      	subs	r3, #1
 800262e:	b29b      	uxth	r3, r3
 8002630:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8002632:	2320      	movs	r3, #32
 8002634:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      hi2c->PreviousState = I2C_STATE_NONE;
 8002638:	6304      	str	r4, [r0, #48]	; 0x30
      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 800263a:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800263e:	f880 403e 	strb.w	r4, [r0, #62]	; 0x3e
      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8002642:	2b40      	cmp	r3, #64	; 0x40
    if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8002644:	d158      	bne.n	80026f8 <HAL_I2C_EV_IRQHandler+0x4c0>
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002646:	f7ff fd60 	bl	800210a <HAL_I2C_MemRxCpltCallback>
 800264a:	e742      	b.n	80024d2 <HAL_I2C_EV_IRQHandler+0x29a>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 800264c:	2c00      	cmp	r4, #0
 800264e:	f43f af40 	beq.w	80024d2 <HAL_I2C_EV_IRQHandler+0x29a>
 8002652:	0597      	lsls	r7, r2, #22
 8002654:	f57f af3d 	bpl.w	80024d2 <HAL_I2C_EV_IRQHandler+0x29a>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002658:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  if(hi2c->XferCount == 4U)
 800265a:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 800265c:	b292      	uxth	r2, r2
 800265e:	2a04      	cmp	r2, #4
 8002660:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8002662:	d108      	bne.n	8002676 <HAL_I2C_EV_IRQHandler+0x43e>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002664:	6859      	ldr	r1, [r3, #4]
 8002666:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800266a:	6059      	str	r1, [r3, #4]
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800266c:	1c51      	adds	r1, r2, #1
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	6241      	str	r1, [r0, #36]	; 0x24
 8002672:	7013      	strb	r3, [r2, #0]
 8002674:	e76b      	b.n	800254e <HAL_I2C_EV_IRQHandler+0x316>
  else if(hi2c->XferCount == 3U)
 8002676:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 8002678:	b2a4      	uxth	r4, r4
 800267a:	2c03      	cmp	r4, #3
 800267c:	d108      	bne.n	8002690 <HAL_I2C_EV_IRQHandler+0x458>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800267e:	6859      	ldr	r1, [r3, #4]
 8002680:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8002684:	6059      	str	r1, [r3, #4]
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002686:	6819      	ldr	r1, [r3, #0]
 8002688:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800268c:	6019      	str	r1, [r3, #0]
 800268e:	e7ed      	b.n	800266c <HAL_I2C_EV_IRQHandler+0x434>
  else if(hi2c->XferCount == 2U)
 8002690:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 8002692:	b2a4      	uxth	r4, r4
 8002694:	2c02      	cmp	r4, #2
 8002696:	d1e9      	bne.n	800266c <HAL_I2C_EV_IRQHandler+0x434>
    if((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME))
 8002698:	3901      	subs	r1, #1
 800269a:	2901      	cmp	r1, #1
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800269c:	6819      	ldr	r1, [r3, #0]
 800269e:	bf9d      	ittte	ls
 80026a0:	f421 6180 	bicls.w	r1, r1, #1024	; 0x400
 80026a4:	6019      	strls	r1, [r3, #0]
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80026a6:	6819      	ldrls	r1, [r3, #0]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80026a8:	f441 7100 	orrhi.w	r1, r1, #512	; 0x200
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80026ac:	bf98      	it	ls
 80026ae:	f441 7180 	orrls.w	r1, r1, #256	; 0x100
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80026b2:	6019      	str	r1, [r3, #0]
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	1c51      	adds	r1, r2, #1
 80026b8:	6241      	str	r1, [r0, #36]	; 0x24
 80026ba:	7013      	strb	r3, [r2, #0]
    hi2c->XferCount--;
 80026bc:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80026be:	3b01      	subs	r3, #1
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	8543      	strh	r3, [r0, #42]	; 0x2a
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80026c4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80026c6:	1c5a      	adds	r2, r3, #1
 80026c8:	6242      	str	r2, [r0, #36]	; 0x24
 80026ca:	6802      	ldr	r2, [r0, #0]
 80026cc:	6912      	ldr	r2, [r2, #16]
 80026ce:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 80026d0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80026d2:	6802      	ldr	r2, [r0, #0]
    hi2c->XferCount--;
 80026d4:	3b01      	subs	r3, #1
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	8543      	strh	r3, [r0, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80026da:	6853      	ldr	r3, [r2, #4]
 80026dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026e0:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80026e2:	2320      	movs	r3, #32
 80026e4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 80026e8:	2300      	movs	r3, #0
 80026ea:	6303      	str	r3, [r0, #48]	; 0x30
    if(hi2c->Mode == HAL_I2C_MODE_MEM)
 80026ec:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80026f0:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    if(hi2c->Mode == HAL_I2C_MODE_MEM)
 80026f4:	2a40      	cmp	r2, #64	; 0x40
 80026f6:	e7a5      	b.n	8002644 <HAL_I2C_EV_IRQHandler+0x40c>
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80026f8:	f7ff fd01 	bl	80020fe <HAL_I2C_MasterRxCpltCallback>
 80026fc:	e6e9      	b.n	80024d2 <HAL_I2C_EV_IRQHandler+0x29a>
    if(((sr1itflags & I2C_FLAG_ADDR) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80026fe:	4c42      	ldr	r4, [pc, #264]	; (8002808 <HAL_I2C_EV_IRQHandler+0x5d0>)
 8002700:	400c      	ands	r4, r1
 8002702:	b174      	cbz	r4, 8002722 <HAL_I2C_EV_IRQHandler+0x4ea>
 8002704:	0596      	lsls	r6, r2, #22
 8002706:	d50c      	bpl.n	8002722 <HAL_I2C_EV_IRQHandler+0x4ea>
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TRA) == RESET)
 8002708:	6999      	ldr	r1, [r3, #24]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_DUALF) == RESET)
 800270a:	699b      	ldr	r3, [r3, #24]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TRA) == RESET)
 800270c:	f081 0104 	eor.w	r1, r1, #4
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_DUALF) == RESET)
 8002710:	061d      	lsls	r5, r3, #24
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002712:	f3c1 0180 	ubfx	r1, r1, #2, #1
    SlaveAddrCode = hi2c->Init.OwnAddress1;
 8002716:	bf54      	ite	pl
 8002718:	8982      	ldrhpl	r2, [r0, #12]
    SlaveAddrCode = hi2c->Init.OwnAddress2;
 800271a:	8b02      	ldrhmi	r2, [r0, #24]
  HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800271c:	f7ff fcf2 	bl	8002104 <HAL_I2C_AddrCallback>
 8002720:	e6d7      	b.n	80024d2 <HAL_I2C_EV_IRQHandler+0x29a>
    else if(((sr1itflags & I2C_FLAG_STOPF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8002722:	4c3a      	ldr	r4, [pc, #232]	; (800280c <HAL_I2C_EV_IRQHandler+0x5d4>)
 8002724:	400c      	ands	r4, r1
 8002726:	2c00      	cmp	r4, #0
 8002728:	d074      	beq.n	8002814 <HAL_I2C_EV_IRQHandler+0x5dc>
 800272a:	0594      	lsls	r4, r2, #22
 800272c:	d572      	bpl.n	8002814 <HAL_I2C_EV_IRQHandler+0x5dc>
  uint32_t CurrentState = hi2c->State;
 800272e:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002732:	6859      	ldr	r1, [r3, #4]
 8002734:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8002738:	6059      	str	r1, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800273a:	2100      	movs	r1, #0
 800273c:	910b      	str	r1, [sp, #44]	; 0x2c
 800273e:	6959      	ldr	r1, [r3, #20]
 8002740:	910b      	str	r1, [sp, #44]	; 0x2c
 8002742:	6819      	ldr	r1, [r3, #0]
 8002744:	f041 0101 	orr.w	r1, r1, #1
 8002748:	6019      	str	r1, [r3, #0]
 800274a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800274c:	6819      	ldr	r1, [r3, #0]
 800274e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8002752:	6019      	str	r1, [r3, #0]
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002754:	6859      	ldr	r1, [r3, #4]
 8002756:	0509      	lsls	r1, r1, #20
  uint32_t CurrentState = hi2c->State;
 8002758:	b2d2      	uxtb	r2, r2
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800275a:	d50c      	bpl.n	8002776 <HAL_I2C_EV_IRQHandler+0x53e>
    if((hi2c->State == HAL_I2C_STATE_BUSY_RX) || (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800275c:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 8002760:	2922      	cmp	r1, #34	; 0x22
 8002762:	d003      	beq.n	800276c <HAL_I2C_EV_IRQHandler+0x534>
 8002764:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 8002768:	292a      	cmp	r1, #42	; 0x2a
 800276a:	d129      	bne.n	80027c0 <HAL_I2C_EV_IRQHandler+0x588>
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800276c:	6b81      	ldr	r1, [r0, #56]	; 0x38
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 800276e:	6809      	ldr	r1, [r1, #0]
 8002770:	6849      	ldr	r1, [r1, #4]
 8002772:	b289      	uxth	r1, r1
 8002774:	8541      	strh	r1, [r0, #42]	; 0x2a
  if(hi2c->XferCount != 0U)
 8002776:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 8002778:	b289      	uxth	r1, r1
 800277a:	b1e1      	cbz	r1, 80027b6 <HAL_I2C_EV_IRQHandler+0x57e>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800277c:	6959      	ldr	r1, [r3, #20]
 800277e:	074f      	lsls	r7, r1, #29
 8002780:	d508      	bpl.n	8002794 <HAL_I2C_EV_IRQHandler+0x55c>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002782:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	1c4c      	adds	r4, r1, #1
 8002788:	6244      	str	r4, [r0, #36]	; 0x24
 800278a:	700b      	strb	r3, [r1, #0]
      hi2c->XferCount--;
 800278c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800278e:	3b01      	subs	r3, #1
 8002790:	b29b      	uxth	r3, r3
 8002792:	8543      	strh	r3, [r0, #42]	; 0x2a
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002794:	6801      	ldr	r1, [r0, #0]
 8002796:	694b      	ldr	r3, [r1, #20]
 8002798:	065e      	lsls	r6, r3, #25
 800279a:	d508      	bpl.n	80027ae <HAL_I2C_EV_IRQHandler+0x576>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800279c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800279e:	6909      	ldr	r1, [r1, #16]
 80027a0:	1c5c      	adds	r4, r3, #1
 80027a2:	6244      	str	r4, [r0, #36]	; 0x24
 80027a4:	7019      	strb	r1, [r3, #0]
      hi2c->XferCount--;
 80027a6:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80027a8:	3b01      	subs	r3, #1
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80027ae:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80027b0:	f043 0304 	orr.w	r3, r3, #4
 80027b4:	6403      	str	r3, [r0, #64]	; 0x40
  if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80027b6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80027b8:	b123      	cbz	r3, 80027c4 <HAL_I2C_EV_IRQHandler+0x58c>
    I2C_ITError(hi2c);
 80027ba:	f7ff fca9 	bl	8002110 <I2C_ITError>
 80027be:	e688      	b.n	80024d2 <HAL_I2C_EV_IRQHandler+0x29a>
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80027c0:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80027c2:	e7d4      	b.n	800276e <HAL_I2C_EV_IRQHandler+0x536>
    if((CurrentState == HAL_I2C_STATE_LISTEN ) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN) || \
 80027c4:	f1a2 0128 	sub.w	r1, r2, #40	; 0x28
 80027c8:	2902      	cmp	r1, #2
 80027ca:	d80a      	bhi.n	80027e2 <HAL_I2C_EV_IRQHandler+0x5aa>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027cc:	4a10      	ldr	r2, [pc, #64]	; (8002810 <HAL_I2C_EV_IRQHandler+0x5d8>)
 80027ce:	62c2      	str	r2, [r0, #44]	; 0x2c
      hi2c->State = HAL_I2C_STATE_READY;
 80027d0:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 80027d2:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80027d4:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80027d8:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80027dc:	f7ff fc93 	bl	8002106 <HAL_I2C_ListenCpltCallback>
 80027e0:	e677      	b.n	80024d2 <HAL_I2C_EV_IRQHandler+0x29a>
      if((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80027e2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80027e4:	2b22      	cmp	r3, #34	; 0x22
 80027e6:	d002      	beq.n	80027ee <HAL_I2C_EV_IRQHandler+0x5b6>
 80027e8:	2a22      	cmp	r2, #34	; 0x22
 80027ea:	f47f ae72 	bne.w	80024d2 <HAL_I2C_EV_IRQHandler+0x29a>
        hi2c->PreviousState = I2C_STATE_NONE;
 80027ee:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 80027f0:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80027f2:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80027f4:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027f8:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80027fc:	f7ff fc81 	bl	8002102 <HAL_I2C_SlaveRxCpltCallback>
 8002800:	e667      	b.n	80024d2 <HAL_I2C_EV_IRQHandler+0x29a>
 8002802:	bf00      	nop
 8002804:	00010040 	.word	0x00010040
 8002808:	00010002 	.word	0x00010002
 800280c:	00010010 	.word	0x00010010
 8002810:	ffff0000 	.word	0xffff0000
    else if((sr2itflags & I2C_FLAG_TRA) != RESET)
 8002814:	4e39      	ldr	r6, [pc, #228]	; (80028fc <HAL_I2C_EV_IRQHandler+0x6c4>)
 8002816:	4c3a      	ldr	r4, [pc, #232]	; (8002900 <HAL_I2C_EV_IRQHandler+0x6c8>)
 8002818:	402e      	ands	r6, r5
 800281a:	400c      	ands	r4, r1
 800281c:	2e00      	cmp	r6, #0
 800281e:	d036      	beq.n	800288e <HAL_I2C_EV_IRQHandler+0x656>
      if(((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 8002820:	4d38      	ldr	r5, [pc, #224]	; (8002904 <HAL_I2C_EV_IRQHandler+0x6cc>)
 8002822:	400d      	ands	r5, r1
 8002824:	b33d      	cbz	r5, 8002876 <HAL_I2C_EV_IRQHandler+0x63e>
 8002826:	0555      	lsls	r5, r2, #21
 8002828:	d525      	bpl.n	8002876 <HAL_I2C_EV_IRQHandler+0x63e>
 800282a:	bb24      	cbnz	r4, 8002876 <HAL_I2C_EV_IRQHandler+0x63e>
  uint32_t CurrentState = hi2c->State;
 800282c:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
  if(hi2c->XferCount != 0U)
 8002830:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8002832:	b292      	uxth	r2, r2
  uint32_t CurrentState = hi2c->State;
 8002834:	b2c9      	uxtb	r1, r1
  if(hi2c->XferCount != 0U)
 8002836:	2a00      	cmp	r2, #0
 8002838:	f43f ae4b 	beq.w	80024d2 <HAL_I2C_EV_IRQHandler+0x29a>
    hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800283c:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800283e:	1c54      	adds	r4, r2, #1
 8002840:	6244      	str	r4, [r0, #36]	; 0x24
 8002842:	7812      	ldrb	r2, [r2, #0]
 8002844:	611a      	str	r2, [r3, #16]
    hi2c->XferCount--;
 8002846:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8002848:	3a01      	subs	r2, #1
 800284a:	b292      	uxth	r2, r2
 800284c:	8542      	strh	r2, [r0, #42]	; 0x2a
    if((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800284e:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8002850:	b292      	uxth	r2, r2
 8002852:	2a00      	cmp	r2, #0
 8002854:	f47f ae3d 	bne.w	80024d2 <HAL_I2C_EV_IRQHandler+0x29a>
 8002858:	2929      	cmp	r1, #41	; 0x29
 800285a:	f47f ae3a 	bne.w	80024d2 <HAL_I2C_EV_IRQHandler+0x29a>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800285e:	685a      	ldr	r2, [r3, #4]
 8002860:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002864:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002866:	2321      	movs	r3, #33	; 0x21
 8002868:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800286a:	2328      	movs	r3, #40	; 0x28
 800286c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002870:	f7ff fc46 	bl	8002100 <HAL_I2C_SlaveTxCpltCallback>
 8002874:	e62d      	b.n	80024d2 <HAL_I2C_EV_IRQHandler+0x29a>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8002876:	2c00      	cmp	r4, #0
 8002878:	f43f ae2b 	beq.w	80024d2 <HAL_I2C_EV_IRQHandler+0x29a>
 800287c:	0594      	lsls	r4, r2, #22
 800287e:	f57f ae28 	bpl.w	80024d2 <HAL_I2C_EV_IRQHandler+0x29a>
  if(hi2c->XferCount != 0U)
 8002882:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8002884:	b292      	uxth	r2, r2
 8002886:	2a00      	cmp	r2, #0
 8002888:	f47f ae5c 	bne.w	8002544 <HAL_I2C_EV_IRQHandler+0x30c>
 800288c:	e621      	b.n	80024d2 <HAL_I2C_EV_IRQHandler+0x29a>
      if(((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 800288e:	4d1e      	ldr	r5, [pc, #120]	; (8002908 <HAL_I2C_EV_IRQHandler+0x6d0>)
 8002890:	400d      	ands	r5, r1
 8002892:	b335      	cbz	r5, 80028e2 <HAL_I2C_EV_IRQHandler+0x6aa>
 8002894:	0551      	lsls	r1, r2, #21
 8002896:	d524      	bpl.n	80028e2 <HAL_I2C_EV_IRQHandler+0x6aa>
 8002898:	bb1c      	cbnz	r4, 80028e2 <HAL_I2C_EV_IRQHandler+0x6aa>
  uint32_t CurrentState = hi2c->State;
 800289a:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  if(hi2c->XferCount != 0U)
 800289e:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 80028a0:	b289      	uxth	r1, r1
  uint32_t CurrentState = hi2c->State;
 80028a2:	b2d2      	uxtb	r2, r2
  if(hi2c->XferCount != 0U)
 80028a4:	2900      	cmp	r1, #0
 80028a6:	f43f ae14 	beq.w	80024d2 <HAL_I2C_EV_IRQHandler+0x29a>
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80028aa:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	1c4c      	adds	r4, r1, #1
 80028b0:	6244      	str	r4, [r0, #36]	; 0x24
 80028b2:	700b      	strb	r3, [r1, #0]
    hi2c->XferCount--;
 80028b4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80028b6:	3b01      	subs	r3, #1
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	8543      	strh	r3, [r0, #42]	; 0x2a
    if((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80028bc:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80028be:	b29b      	uxth	r3, r3
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f47f ae06 	bne.w	80024d2 <HAL_I2C_EV_IRQHandler+0x29a>
 80028c6:	2a2a      	cmp	r2, #42	; 0x2a
 80028c8:	f47f ae03 	bne.w	80024d2 <HAL_I2C_EV_IRQHandler+0x29a>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80028cc:	6802      	ldr	r2, [r0, #0]
 80028ce:	6853      	ldr	r3, [r2, #4]
 80028d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80028d4:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80028d6:	2322      	movs	r3, #34	; 0x22
 80028d8:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80028da:	2328      	movs	r3, #40	; 0x28
 80028dc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 80028e0:	e78c      	b.n	80027fc <HAL_I2C_EV_IRQHandler+0x5c4>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80028e2:	2c00      	cmp	r4, #0
 80028e4:	f43f adf5 	beq.w	80024d2 <HAL_I2C_EV_IRQHandler+0x29a>
 80028e8:	0592      	lsls	r2, r2, #22
 80028ea:	f57f adf2 	bpl.w	80024d2 <HAL_I2C_EV_IRQHandler+0x29a>
  if(hi2c->XferCount != 0U)
 80028ee:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80028f0:	b292      	uxth	r2, r2
 80028f2:	2a00      	cmp	r2, #0
 80028f4:	f43f aded 	beq.w	80024d2 <HAL_I2C_EV_IRQHandler+0x29a>
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80028f8:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80028fa:	e6b7      	b.n	800266c <HAL_I2C_EV_IRQHandler+0x434>
 80028fc:	00100004 	.word	0x00100004
 8002900:	00010004 	.word	0x00010004
 8002904:	00010080 	.word	0x00010080
 8002908:	00010040 	.word	0x00010040

0800290c <HAL_I2C_ER_IRQHandler>:
{
 800290c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800290e:	6803      	ldr	r3, [r0, #0]
  if(((sr1itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 8002910:	4a49      	ldr	r2, [pc, #292]	; (8002a38 <HAL_I2C_ER_IRQHandler+0x12c>)
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002912:	695e      	ldr	r6, [r3, #20]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002914:	685d      	ldr	r5, [r3, #4]
  if(((sr1itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 8002916:	4216      	tst	r6, r2
{
 8002918:	4604      	mov	r4, r0
  if(((sr1itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 800291a:	d008      	beq.n	800292e <HAL_I2C_ER_IRQHandler+0x22>
 800291c:	05e8      	lsls	r0, r5, #23
 800291e:	d506      	bpl.n	800292e <HAL_I2C_ER_IRQHandler+0x22>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002920:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002922:	f042 0201 	orr.w	r2, r2, #1
 8002926:	6422      	str	r2, [r4, #64]	; 0x40
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002928:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800292c:	615a      	str	r2, [r3, #20]
  if(((sr1itflags & I2C_FLAG_ARLO) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 800292e:	f416 3f81 	tst.w	r6, #66048	; 0x10200
 8002932:	d008      	beq.n	8002946 <HAL_I2C_ER_IRQHandler+0x3a>
 8002934:	05e9      	lsls	r1, r5, #23
 8002936:	d506      	bpl.n	8002946 <HAL_I2C_ER_IRQHandler+0x3a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002938:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800293a:	f042 0202 	orr.w	r2, r2, #2
 800293e:	6422      	str	r2, [r4, #64]	; 0x40
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002940:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002944:	615a      	str	r2, [r3, #20]
  if(((sr1itflags & I2C_FLAG_AF) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 8002946:	f416 3f82 	tst.w	r6, #66560	; 0x10400
 800294a:	d036      	beq.n	80029ba <HAL_I2C_ER_IRQHandler+0xae>
 800294c:	05ea      	lsls	r2, r5, #23
 800294e:	d534      	bpl.n	80029ba <HAL_I2C_ER_IRQHandler+0xae>
    tmp1 = hi2c->Mode;
 8002950:	f894 703e 	ldrb.w	r7, [r4, #62]	; 0x3e
    tmp2 = hi2c->XferCount;
 8002954:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    tmp3 = hi2c->State;
 8002956:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
    tmp4 = hi2c->PreviousState;
 800295a:	6b20      	ldr	r0, [r4, #48]	; 0x30
    if((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800295c:	2f20      	cmp	r7, #32
    tmp2 = hi2c->XferCount;
 800295e:	b289      	uxth	r1, r1
    tmp3 = hi2c->State;
 8002960:	b2d2      	uxtb	r2, r2
    if((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002962:	d158      	bne.n	8002a16 <HAL_I2C_ER_IRQHandler+0x10a>
 8002964:	2900      	cmp	r1, #0
 8002966:	d156      	bne.n	8002a16 <HAL_I2C_ER_IRQHandler+0x10a>
 8002968:	f002 01f7 	and.w	r1, r2, #247	; 0xf7
 800296c:	2921      	cmp	r1, #33	; 0x21
 800296e:	d003      	beq.n	8002978 <HAL_I2C_ER_IRQHandler+0x6c>
      ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002970:	2a28      	cmp	r2, #40	; 0x28
 8002972:	d150      	bne.n	8002a16 <HAL_I2C_ER_IRQHandler+0x10a>
      ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002974:	2821      	cmp	r0, #33	; 0x21
 8002976:	d14e      	bne.n	8002a16 <HAL_I2C_ER_IRQHandler+0x10a>
  uint32_t CurrentState       = hi2c->State;
 8002978:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800297c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if(((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800297e:	2904      	cmp	r1, #4
  uint32_t CurrentState       = hi2c->State;
 8002980:	b2d2      	uxtb	r2, r2
  if(((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002982:	d001      	beq.n	8002988 <HAL_I2C_ER_IRQHandler+0x7c>
 8002984:	2908      	cmp	r1, #8
 8002986:	d12c      	bne.n	80029e2 <HAL_I2C_ER_IRQHandler+0xd6>
 8002988:	2a28      	cmp	r2, #40	; 0x28
 800298a:	d12a      	bne.n	80029e2 <HAL_I2C_ER_IRQHandler+0xd6>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800298c:	4a2b      	ldr	r2, [pc, #172]	; (8002a3c <HAL_I2C_ER_IRQHandler+0x130>)
 800298e:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002990:	685a      	ldr	r2, [r3, #4]
 8002992:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002996:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002998:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800299c:	615a      	str	r2, [r3, #20]
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029a4:	601a      	str	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 80029a6:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80029a8:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 80029aa:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 80029ac:	4620      	mov	r0, r4
    hi2c->State = HAL_I2C_STATE_READY;
 80029ae:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029b2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 80029b6:	f7ff fba6 	bl	8002106 <HAL_I2C_ListenCpltCallback>
  if(((sr1itflags & I2C_FLAG_OVR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 80029ba:	f416 3f84 	tst.w	r6, #67584	; 0x10800
 80029be:	d009      	beq.n	80029d4 <HAL_I2C_ER_IRQHandler+0xc8>
 80029c0:	05eb      	lsls	r3, r5, #23
 80029c2:	d507      	bpl.n	80029d4 <HAL_I2C_ER_IRQHandler+0xc8>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80029c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80029c6:	f043 0308 	orr.w	r3, r3, #8
 80029ca:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80029cc:	6823      	ldr	r3, [r4, #0]
 80029ce:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80029d2:	615a      	str	r2, [r3, #20]
  if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80029d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80029d6:	b373      	cbz	r3, 8002a36 <HAL_I2C_ER_IRQHandler+0x12a>
    I2C_ITError(hi2c);
 80029d8:	4620      	mov	r0, r4
}
 80029da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    I2C_ITError(hi2c);
 80029de:	f7ff bb97 	b.w	8002110 <I2C_ITError>
  else if(CurrentState == HAL_I2C_STATE_BUSY_TX)
 80029e2:	2a21      	cmp	r2, #33	; 0x21
 80029e4:	d123      	bne.n	8002a2e <HAL_I2C_ER_IRQHandler+0x122>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029e6:	4915      	ldr	r1, [pc, #84]	; (8002a3c <HAL_I2C_ER_IRQHandler+0x130>)
 80029e8:	62e1      	str	r1, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80029ea:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 80029ec:	2220      	movs	r2, #32
 80029ee:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029f2:	2200      	movs	r2, #0
 80029f4:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80029f8:	685a      	ldr	r2, [r3, #4]
 80029fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80029fe:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a00:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a04:	615a      	str	r2, [r3, #20]
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a0c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002a0e:	4620      	mov	r0, r4
 8002a10:	f7ff fb76 	bl	8002100 <HAL_I2C_SlaveTxCpltCallback>
 8002a14:	e7d1      	b.n	80029ba <HAL_I2C_ER_IRQHandler+0xae>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a16:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002a18:	f042 0204 	orr.w	r2, r2, #4
 8002a1c:	6422      	str	r2, [r4, #64]	; 0x40
      if(hi2c->Mode == HAL_I2C_MODE_MASTER)
 8002a1e:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8002a22:	2a10      	cmp	r2, #16
        SET_BIT(hi2c->Instance->CR1,I2C_CR1_STOP);
 8002a24:	bf02      	ittt	eq
 8002a26:	681a      	ldreq	r2, [r3, #0]
 8002a28:	f442 7200 	orreq.w	r2, r2, #512	; 0x200
 8002a2c:	601a      	streq	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a2e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a32:	615a      	str	r2, [r3, #20]
 8002a34:	e7c1      	b.n	80029ba <HAL_I2C_ER_IRQHandler+0xae>
 8002a36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a38:	00010100 	.word	0x00010100
 8002a3c:	ffff0000 	.word	0xffff0000

08002a40 <I2C_DMAAbort>:
  I2C_HandleTypeDef* hi2c = ( I2C_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a40:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8002a42:	b508      	push	{r3, lr}
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002a44:	6803      	ldr	r3, [r0, #0]
  hi2c->hdmatx->XferAbortCallback = NULL;
 8002a46:	6b41      	ldr	r1, [r0, #52]	; 0x34
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a4e:	601a      	str	r2, [r3, #0]
  hi2c->XferCount = 0U;
 8002a50:	2200      	movs	r2, #0
 8002a52:	8542      	strh	r2, [r0, #42]	; 0x2a
  hi2c->hdmatx->XferAbortCallback = NULL;
 8002a54:	650a      	str	r2, [r1, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 8002a56:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8002a58:	650a      	str	r2, [r1, #80]	; 0x50
  if(hi2c->State == HAL_I2C_STATE_ABORT)
 8002a5a:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 8002a5e:	2960      	cmp	r1, #96	; 0x60
 8002a60:	f04f 0120 	mov.w	r1, #32
    hi2c->State = HAL_I2C_STATE_READY;
 8002a64:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a68:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  if(hi2c->State == HAL_I2C_STATE_ABORT)
 8002a6c:	d107      	bne.n	8002a7e <I2C_DMAAbort+0x3e>
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a6e:	6402      	str	r2, [r0, #64]	; 0x40
    __HAL_I2C_DISABLE(hi2c);
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	f022 0201 	bic.w	r2, r2, #1
 8002a76:	601a      	str	r2, [r3, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8002a78:	f7ff fb49 	bl	800210e <HAL_I2C_AbortCpltCallback>
 8002a7c:	bd08      	pop	{r3, pc}
    __HAL_I2C_DISABLE(hi2c);
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	f022 0201 	bic.w	r2, r2, #1
 8002a84:	601a      	str	r2, [r3, #0]
    HAL_I2C_ErrorCallback(hi2c);
 8002a86:	f7ff fb41 	bl	800210c <HAL_I2C_ErrorCallback>
 8002a8a:	bd08      	pop	{r3, pc}

08002a8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a8c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a90:	4604      	mov	r4, r0
 8002a92:	b918      	cbnz	r0, 8002a9c <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8002a94:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8002a96:	b002      	add	sp, #8
 8002a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a9c:	6803      	ldr	r3, [r0, #0]
 8002a9e:	07dd      	lsls	r5, r3, #31
 8002aa0:	d410      	bmi.n	8002ac4 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aa2:	6823      	ldr	r3, [r4, #0]
 8002aa4:	0798      	lsls	r0, r3, #30
 8002aa6:	d458      	bmi.n	8002b5a <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002aa8:	6823      	ldr	r3, [r4, #0]
 8002aaa:	071a      	lsls	r2, r3, #28
 8002aac:	f100 809a 	bmi.w	8002be4 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ab0:	6823      	ldr	r3, [r4, #0]
 8002ab2:	075b      	lsls	r3, r3, #29
 8002ab4:	f100 80b8 	bmi.w	8002c28 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ab8:	69a2      	ldr	r2, [r4, #24]
 8002aba:	2a00      	cmp	r2, #0
 8002abc:	f040 8119 	bne.w	8002cf2 <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8002ac0:	2000      	movs	r0, #0
 8002ac2:	e7e8      	b.n	8002a96 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ac4:	4ba6      	ldr	r3, [pc, #664]	; (8002d60 <HAL_RCC_OscConfig+0x2d4>)
 8002ac6:	689a      	ldr	r2, [r3, #8]
 8002ac8:	f002 020c 	and.w	r2, r2, #12
 8002acc:	2a04      	cmp	r2, #4
 8002ace:	d007      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ad0:	689a      	ldr	r2, [r3, #8]
 8002ad2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ad6:	2a08      	cmp	r2, #8
 8002ad8:	d10a      	bne.n	8002af0 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	0259      	lsls	r1, r3, #9
 8002ade:	d507      	bpl.n	8002af0 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ae0:	4b9f      	ldr	r3, [pc, #636]	; (8002d60 <HAL_RCC_OscConfig+0x2d4>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	039a      	lsls	r2, r3, #14
 8002ae6:	d5dc      	bpl.n	8002aa2 <HAL_RCC_OscConfig+0x16>
 8002ae8:	6863      	ldr	r3, [r4, #4]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1d9      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x16>
 8002aee:	e7d1      	b.n	8002a94 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002af0:	6863      	ldr	r3, [r4, #4]
 8002af2:	4d9b      	ldr	r5, [pc, #620]	; (8002d60 <HAL_RCC_OscConfig+0x2d4>)
 8002af4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002af8:	d111      	bne.n	8002b1e <HAL_RCC_OscConfig+0x92>
 8002afa:	682b      	ldr	r3, [r5, #0]
 8002afc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b00:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002b02:	f7fe f9c3 	bl	8000e8c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b06:	4d96      	ldr	r5, [pc, #600]	; (8002d60 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8002b08:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b0a:	682b      	ldr	r3, [r5, #0]
 8002b0c:	039b      	lsls	r3, r3, #14
 8002b0e:	d4c8      	bmi.n	8002aa2 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b10:	f7fe f9bc 	bl	8000e8c <HAL_GetTick>
 8002b14:	1b80      	subs	r0, r0, r6
 8002b16:	2864      	cmp	r0, #100	; 0x64
 8002b18:	d9f7      	bls.n	8002b0a <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8002b1a:	2003      	movs	r0, #3
 8002b1c:	e7bb      	b.n	8002a96 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b1e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b22:	d104      	bne.n	8002b2e <HAL_RCC_OscConfig+0xa2>
 8002b24:	682b      	ldr	r3, [r5, #0]
 8002b26:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b2a:	602b      	str	r3, [r5, #0]
 8002b2c:	e7e5      	b.n	8002afa <HAL_RCC_OscConfig+0x6e>
 8002b2e:	682a      	ldr	r2, [r5, #0]
 8002b30:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002b34:	602a      	str	r2, [r5, #0]
 8002b36:	682a      	ldr	r2, [r5, #0]
 8002b38:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b3c:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d1df      	bne.n	8002b02 <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 8002b42:	f7fe f9a3 	bl	8000e8c <HAL_GetTick>
 8002b46:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b48:	682b      	ldr	r3, [r5, #0]
 8002b4a:	039f      	lsls	r7, r3, #14
 8002b4c:	d5a9      	bpl.n	8002aa2 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b4e:	f7fe f99d 	bl	8000e8c <HAL_GetTick>
 8002b52:	1b80      	subs	r0, r0, r6
 8002b54:	2864      	cmp	r0, #100	; 0x64
 8002b56:	d9f7      	bls.n	8002b48 <HAL_RCC_OscConfig+0xbc>
 8002b58:	e7df      	b.n	8002b1a <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b5a:	4b81      	ldr	r3, [pc, #516]	; (8002d60 <HAL_RCC_OscConfig+0x2d4>)
 8002b5c:	689a      	ldr	r2, [r3, #8]
 8002b5e:	f012 0f0c 	tst.w	r2, #12
 8002b62:	d007      	beq.n	8002b74 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b64:	689a      	ldr	r2, [r3, #8]
 8002b66:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b6a:	2a08      	cmp	r2, #8
 8002b6c:	d111      	bne.n	8002b92 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	025e      	lsls	r6, r3, #9
 8002b72:	d40e      	bmi.n	8002b92 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b74:	4b7a      	ldr	r3, [pc, #488]	; (8002d60 <HAL_RCC_OscConfig+0x2d4>)
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	0795      	lsls	r5, r2, #30
 8002b7a:	d502      	bpl.n	8002b82 <HAL_RCC_OscConfig+0xf6>
 8002b7c:	68e2      	ldr	r2, [r4, #12]
 8002b7e:	2a01      	cmp	r2, #1
 8002b80:	d188      	bne.n	8002a94 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	6921      	ldr	r1, [r4, #16]
 8002b86:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002b8a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8002b8e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b90:	e78a      	b.n	8002aa8 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b92:	68e2      	ldr	r2, [r4, #12]
 8002b94:	4b73      	ldr	r3, [pc, #460]	; (8002d64 <HAL_RCC_OscConfig+0x2d8>)
 8002b96:	b1b2      	cbz	r2, 8002bc6 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8002b98:	2201      	movs	r2, #1
 8002b9a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002b9c:	f7fe f976 	bl	8000e8c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ba0:	4d6f      	ldr	r5, [pc, #444]	; (8002d60 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8002ba2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ba4:	682b      	ldr	r3, [r5, #0]
 8002ba6:	0798      	lsls	r0, r3, #30
 8002ba8:	d507      	bpl.n	8002bba <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002baa:	682b      	ldr	r3, [r5, #0]
 8002bac:	6922      	ldr	r2, [r4, #16]
 8002bae:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002bb2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002bb6:	602b      	str	r3, [r5, #0]
 8002bb8:	e776      	b.n	8002aa8 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bba:	f7fe f967 	bl	8000e8c <HAL_GetTick>
 8002bbe:	1b80      	subs	r0, r0, r6
 8002bc0:	2802      	cmp	r0, #2
 8002bc2:	d9ef      	bls.n	8002ba4 <HAL_RCC_OscConfig+0x118>
 8002bc4:	e7a9      	b.n	8002b1a <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8002bc6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002bc8:	f7fe f960 	bl	8000e8c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bcc:	4d64      	ldr	r5, [pc, #400]	; (8002d60 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8002bce:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bd0:	682b      	ldr	r3, [r5, #0]
 8002bd2:	0799      	lsls	r1, r3, #30
 8002bd4:	f57f af68 	bpl.w	8002aa8 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bd8:	f7fe f958 	bl	8000e8c <HAL_GetTick>
 8002bdc:	1b80      	subs	r0, r0, r6
 8002bde:	2802      	cmp	r0, #2
 8002be0:	d9f6      	bls.n	8002bd0 <HAL_RCC_OscConfig+0x144>
 8002be2:	e79a      	b.n	8002b1a <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002be4:	6962      	ldr	r2, [r4, #20]
 8002be6:	4b60      	ldr	r3, [pc, #384]	; (8002d68 <HAL_RCC_OscConfig+0x2dc>)
 8002be8:	b17a      	cbz	r2, 8002c0a <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8002bea:	2201      	movs	r2, #1
 8002bec:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002bee:	f7fe f94d 	bl	8000e8c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bf2:	4d5b      	ldr	r5, [pc, #364]	; (8002d60 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8002bf4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bf6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002bf8:	079f      	lsls	r7, r3, #30
 8002bfa:	f53f af59 	bmi.w	8002ab0 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bfe:	f7fe f945 	bl	8000e8c <HAL_GetTick>
 8002c02:	1b80      	subs	r0, r0, r6
 8002c04:	2802      	cmp	r0, #2
 8002c06:	d9f6      	bls.n	8002bf6 <HAL_RCC_OscConfig+0x16a>
 8002c08:	e787      	b.n	8002b1a <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8002c0a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002c0c:	f7fe f93e 	bl	8000e8c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c10:	4d53      	ldr	r5, [pc, #332]	; (8002d60 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8002c12:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c14:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002c16:	0798      	lsls	r0, r3, #30
 8002c18:	f57f af4a 	bpl.w	8002ab0 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c1c:	f7fe f936 	bl	8000e8c <HAL_GetTick>
 8002c20:	1b80      	subs	r0, r0, r6
 8002c22:	2802      	cmp	r0, #2
 8002c24:	d9f6      	bls.n	8002c14 <HAL_RCC_OscConfig+0x188>
 8002c26:	e778      	b.n	8002b1a <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c28:	4b4d      	ldr	r3, [pc, #308]	; (8002d60 <HAL_RCC_OscConfig+0x2d4>)
 8002c2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c2c:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8002c30:	d128      	bne.n	8002c84 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c32:	9201      	str	r2, [sp, #4]
 8002c34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c36:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002c3a:	641a      	str	r2, [r3, #64]	; 0x40
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c42:	9301      	str	r3, [sp, #4]
 8002c44:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002c46:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c48:	4d48      	ldr	r5, [pc, #288]	; (8002d6c <HAL_RCC_OscConfig+0x2e0>)
 8002c4a:	682b      	ldr	r3, [r5, #0]
 8002c4c:	05d9      	lsls	r1, r3, #23
 8002c4e:	d51b      	bpl.n	8002c88 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c50:	68a3      	ldr	r3, [r4, #8]
 8002c52:	4d43      	ldr	r5, [pc, #268]	; (8002d60 <HAL_RCC_OscConfig+0x2d4>)
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d127      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x21c>
 8002c58:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002c5a:	f043 0301 	orr.w	r3, r3, #1
 8002c5e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002c60:	f7fe f914 	bl	8000e8c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c64:	4d3e      	ldr	r5, [pc, #248]	; (8002d60 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8002c66:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c68:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c6c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002c6e:	079b      	lsls	r3, r3, #30
 8002c70:	d539      	bpl.n	8002ce6 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8002c72:	2e00      	cmp	r6, #0
 8002c74:	f43f af20 	beq.w	8002ab8 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c78:	4a39      	ldr	r2, [pc, #228]	; (8002d60 <HAL_RCC_OscConfig+0x2d4>)
 8002c7a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002c7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c80:	6413      	str	r3, [r2, #64]	; 0x40
 8002c82:	e719      	b.n	8002ab8 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8002c84:	2600      	movs	r6, #0
 8002c86:	e7df      	b.n	8002c48 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c88:	682b      	ldr	r3, [r5, #0]
 8002c8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c8e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002c90:	f7fe f8fc 	bl	8000e8c <HAL_GetTick>
 8002c94:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c96:	682b      	ldr	r3, [r5, #0]
 8002c98:	05da      	lsls	r2, r3, #23
 8002c9a:	d4d9      	bmi.n	8002c50 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c9c:	f7fe f8f6 	bl	8000e8c <HAL_GetTick>
 8002ca0:	1bc0      	subs	r0, r0, r7
 8002ca2:	2802      	cmp	r0, #2
 8002ca4:	d9f7      	bls.n	8002c96 <HAL_RCC_OscConfig+0x20a>
 8002ca6:	e738      	b.n	8002b1a <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ca8:	2b05      	cmp	r3, #5
 8002caa:	d104      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x22a>
 8002cac:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002cae:	f043 0304 	orr.w	r3, r3, #4
 8002cb2:	672b      	str	r3, [r5, #112]	; 0x70
 8002cb4:	e7d0      	b.n	8002c58 <HAL_RCC_OscConfig+0x1cc>
 8002cb6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002cb8:	f022 0201 	bic.w	r2, r2, #1
 8002cbc:	672a      	str	r2, [r5, #112]	; 0x70
 8002cbe:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002cc0:	f022 0204 	bic.w	r2, r2, #4
 8002cc4:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1ca      	bne.n	8002c60 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8002cca:	f7fe f8df 	bl	8000e8c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cce:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002cd2:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cd4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002cd6:	0798      	lsls	r0, r3, #30
 8002cd8:	d5cb      	bpl.n	8002c72 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cda:	f7fe f8d7 	bl	8000e8c <HAL_GetTick>
 8002cde:	1bc0      	subs	r0, r0, r7
 8002ce0:	4540      	cmp	r0, r8
 8002ce2:	d9f7      	bls.n	8002cd4 <HAL_RCC_OscConfig+0x248>
 8002ce4:	e719      	b.n	8002b1a <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ce6:	f7fe f8d1 	bl	8000e8c <HAL_GetTick>
 8002cea:	1bc0      	subs	r0, r0, r7
 8002cec:	4540      	cmp	r0, r8
 8002cee:	d9bd      	bls.n	8002c6c <HAL_RCC_OscConfig+0x1e0>
 8002cf0:	e713      	b.n	8002b1a <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002cf2:	4d1b      	ldr	r5, [pc, #108]	; (8002d60 <HAL_RCC_OscConfig+0x2d4>)
 8002cf4:	68ab      	ldr	r3, [r5, #8]
 8002cf6:	f003 030c 	and.w	r3, r3, #12
 8002cfa:	2b08      	cmp	r3, #8
 8002cfc:	f43f aeca 	beq.w	8002a94 <HAL_RCC_OscConfig+0x8>
 8002d00:	4e1b      	ldr	r6, [pc, #108]	; (8002d70 <HAL_RCC_OscConfig+0x2e4>)
 8002d02:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d04:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8002d06:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d08:	d134      	bne.n	8002d74 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8002d0a:	f7fe f8bf 	bl	8000e8c <HAL_GetTick>
 8002d0e:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d10:	682b      	ldr	r3, [r5, #0]
 8002d12:	0199      	lsls	r1, r3, #6
 8002d14:	d41e      	bmi.n	8002d54 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d16:	6a22      	ldr	r2, [r4, #32]
 8002d18:	69e3      	ldr	r3, [r4, #28]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002d1e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002d22:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002d24:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002d28:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d2a:	4c0d      	ldr	r4, [pc, #52]	; (8002d60 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d2c:	0852      	lsrs	r2, r2, #1
 8002d2e:	3a01      	subs	r2, #1
 8002d30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002d34:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002d36:	2301      	movs	r3, #1
 8002d38:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002d3a:	f7fe f8a7 	bl	8000e8c <HAL_GetTick>
 8002d3e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d40:	6823      	ldr	r3, [r4, #0]
 8002d42:	019a      	lsls	r2, r3, #6
 8002d44:	f53f aebc 	bmi.w	8002ac0 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d48:	f7fe f8a0 	bl	8000e8c <HAL_GetTick>
 8002d4c:	1b40      	subs	r0, r0, r5
 8002d4e:	2802      	cmp	r0, #2
 8002d50:	d9f6      	bls.n	8002d40 <HAL_RCC_OscConfig+0x2b4>
 8002d52:	e6e2      	b.n	8002b1a <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d54:	f7fe f89a 	bl	8000e8c <HAL_GetTick>
 8002d58:	1bc0      	subs	r0, r0, r7
 8002d5a:	2802      	cmp	r0, #2
 8002d5c:	d9d8      	bls.n	8002d10 <HAL_RCC_OscConfig+0x284>
 8002d5e:	e6dc      	b.n	8002b1a <HAL_RCC_OscConfig+0x8e>
 8002d60:	40023800 	.word	0x40023800
 8002d64:	42470000 	.word	0x42470000
 8002d68:	42470e80 	.word	0x42470e80
 8002d6c:	40007000 	.word	0x40007000
 8002d70:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8002d74:	f7fe f88a 	bl	8000e8c <HAL_GetTick>
 8002d78:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d7a:	682b      	ldr	r3, [r5, #0]
 8002d7c:	019b      	lsls	r3, r3, #6
 8002d7e:	f57f ae9f 	bpl.w	8002ac0 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d82:	f7fe f883 	bl	8000e8c <HAL_GetTick>
 8002d86:	1b00      	subs	r0, r0, r4
 8002d88:	2802      	cmp	r0, #2
 8002d8a:	d9f6      	bls.n	8002d7a <HAL_RCC_OscConfig+0x2ee>
 8002d8c:	e6c5      	b.n	8002b1a <HAL_RCC_OscConfig+0x8e>
 8002d8e:	bf00      	nop

08002d90 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d90:	4913      	ldr	r1, [pc, #76]	; (8002de0 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8002d92:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d94:	688b      	ldr	r3, [r1, #8]
 8002d96:	f003 030c 	and.w	r3, r3, #12
 8002d9a:	2b04      	cmp	r3, #4
 8002d9c:	d003      	beq.n	8002da6 <HAL_RCC_GetSysClockFreq+0x16>
 8002d9e:	2b08      	cmp	r3, #8
 8002da0:	d003      	beq.n	8002daa <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002da2:	4810      	ldr	r0, [pc, #64]	; (8002de4 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002da4:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8002da6:	4810      	ldr	r0, [pc, #64]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x58>)
 8002da8:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002daa:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dac:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dae:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002db0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002db4:	bf14      	ite	ne
 8002db6:	480c      	ldrne	r0, [pc, #48]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002db8:	480a      	ldreq	r0, [pc, #40]	; (8002de4 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dba:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002dbe:	bf18      	it	ne
 8002dc0:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002dc2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dc6:	fba1 0100 	umull	r0, r1, r1, r0
 8002dca:	f7fd fe8d 	bl	8000ae8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002dce:	4b04      	ldr	r3, [pc, #16]	; (8002de0 <HAL_RCC_GetSysClockFreq+0x50>)
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8002dda:	fbb0 f0f3 	udiv	r0, r0, r3
 8002dde:	bd08      	pop	{r3, pc}
 8002de0:	40023800 	.word	0x40023800
 8002de4:	00f42400 	.word	0x00f42400
 8002de8:	007a1200 	.word	0x007a1200

08002dec <HAL_RCC_ClockConfig>:
{
 8002dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002df0:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8002df2:	4604      	mov	r4, r0
 8002df4:	b910      	cbnz	r0, 8002dfc <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002df6:	2001      	movs	r0, #1
 8002df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002dfc:	4b44      	ldr	r3, [pc, #272]	; (8002f10 <HAL_RCC_ClockConfig+0x124>)
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	f002 020f 	and.w	r2, r2, #15
 8002e04:	428a      	cmp	r2, r1
 8002e06:	d328      	bcc.n	8002e5a <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e08:	6821      	ldr	r1, [r4, #0]
 8002e0a:	078f      	lsls	r7, r1, #30
 8002e0c:	d42d      	bmi.n	8002e6a <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e0e:	07c8      	lsls	r0, r1, #31
 8002e10:	d440      	bmi.n	8002e94 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e12:	4b3f      	ldr	r3, [pc, #252]	; (8002f10 <HAL_RCC_ClockConfig+0x124>)
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	f002 020f 	and.w	r2, r2, #15
 8002e1a:	4295      	cmp	r5, r2
 8002e1c:	d366      	bcc.n	8002eec <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e1e:	6822      	ldr	r2, [r4, #0]
 8002e20:	0751      	lsls	r1, r2, #29
 8002e22:	d46c      	bmi.n	8002efe <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e24:	0713      	lsls	r3, r2, #28
 8002e26:	d507      	bpl.n	8002e38 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e28:	4a3a      	ldr	r2, [pc, #232]	; (8002f14 <HAL_RCC_ClockConfig+0x128>)
 8002e2a:	6921      	ldr	r1, [r4, #16]
 8002e2c:	6893      	ldr	r3, [r2, #8]
 8002e2e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002e32:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002e36:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e38:	f7ff ffaa 	bl	8002d90 <HAL_RCC_GetSysClockFreq>
 8002e3c:	4b35      	ldr	r3, [pc, #212]	; (8002f14 <HAL_RCC_ClockConfig+0x128>)
 8002e3e:	4a36      	ldr	r2, [pc, #216]	; (8002f18 <HAL_RCC_ClockConfig+0x12c>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002e46:	5cd3      	ldrb	r3, [r2, r3]
 8002e48:	40d8      	lsrs	r0, r3
 8002e4a:	4b34      	ldr	r3, [pc, #208]	; (8002f1c <HAL_RCC_ClockConfig+0x130>)
 8002e4c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002e4e:	2000      	movs	r0, #0
 8002e50:	f7fd ffd2 	bl	8000df8 <HAL_InitTick>
  return HAL_OK;
 8002e54:	2000      	movs	r0, #0
 8002e56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e5a:	b2ca      	uxtb	r2, r1
 8002e5c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 030f 	and.w	r3, r3, #15
 8002e64:	4299      	cmp	r1, r3
 8002e66:	d1c6      	bne.n	8002df6 <HAL_RCC_ClockConfig+0xa>
 8002e68:	e7ce      	b.n	8002e08 <HAL_RCC_ClockConfig+0x1c>
 8002e6a:	4b2a      	ldr	r3, [pc, #168]	; (8002f14 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e6c:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e70:	bf1e      	ittt	ne
 8002e72:	689a      	ldrne	r2, [r3, #8]
 8002e74:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8002e78:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e7a:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e7c:	bf42      	ittt	mi
 8002e7e:	689a      	ldrmi	r2, [r3, #8]
 8002e80:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8002e84:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e86:	689a      	ldr	r2, [r3, #8]
 8002e88:	68a0      	ldr	r0, [r4, #8]
 8002e8a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002e8e:	4302      	orrs	r2, r0
 8002e90:	609a      	str	r2, [r3, #8]
 8002e92:	e7bc      	b.n	8002e0e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e94:	6862      	ldr	r2, [r4, #4]
 8002e96:	4b1f      	ldr	r3, [pc, #124]	; (8002f14 <HAL_RCC_ClockConfig+0x128>)
 8002e98:	2a01      	cmp	r2, #1
 8002e9a:	d11d      	bne.n	8002ed8 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ea2:	d0a8      	beq.n	8002df6 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ea4:	4e1b      	ldr	r6, [pc, #108]	; (8002f14 <HAL_RCC_ClockConfig+0x128>)
 8002ea6:	68b3      	ldr	r3, [r6, #8]
 8002ea8:	f023 0303 	bic.w	r3, r3, #3
 8002eac:	4313      	orrs	r3, r2
 8002eae:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002eb0:	f7fd ffec 	bl	8000e8c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002eb4:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002eb8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eba:	68b3      	ldr	r3, [r6, #8]
 8002ebc:	6862      	ldr	r2, [r4, #4]
 8002ebe:	f003 030c 	and.w	r3, r3, #12
 8002ec2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002ec6:	d0a4      	beq.n	8002e12 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ec8:	f7fd ffe0 	bl	8000e8c <HAL_GetTick>
 8002ecc:	1bc0      	subs	r0, r0, r7
 8002ece:	4540      	cmp	r0, r8
 8002ed0:	d9f3      	bls.n	8002eba <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8002ed2:	2003      	movs	r0, #3
}
 8002ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ed8:	1e91      	subs	r1, r2, #2
 8002eda:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002edc:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ede:	d802      	bhi.n	8002ee6 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ee0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002ee4:	e7dd      	b.n	8002ea2 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ee6:	f013 0f02 	tst.w	r3, #2
 8002eea:	e7da      	b.n	8002ea2 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eec:	b2ea      	uxtb	r2, r5
 8002eee:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 030f 	and.w	r3, r3, #15
 8002ef6:	429d      	cmp	r5, r3
 8002ef8:	f47f af7d 	bne.w	8002df6 <HAL_RCC_ClockConfig+0xa>
 8002efc:	e78f      	b.n	8002e1e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002efe:	4905      	ldr	r1, [pc, #20]	; (8002f14 <HAL_RCC_ClockConfig+0x128>)
 8002f00:	68e0      	ldr	r0, [r4, #12]
 8002f02:	688b      	ldr	r3, [r1, #8]
 8002f04:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002f08:	4303      	orrs	r3, r0
 8002f0a:	608b      	str	r3, [r1, #8]
 8002f0c:	e78a      	b.n	8002e24 <HAL_RCC_ClockConfig+0x38>
 8002f0e:	bf00      	nop
 8002f10:	40023c00 	.word	0x40023c00
 8002f14:	40023800 	.word	0x40023800
 8002f18:	08005baa 	.word	0x08005baa
 8002f1c:	2000000c 	.word	0x2000000c

08002f20 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002f20:	4b01      	ldr	r3, [pc, #4]	; (8002f28 <HAL_RCC_GetHCLKFreq+0x8>)
 8002f22:	6818      	ldr	r0, [r3, #0]
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	2000000c 	.word	0x2000000c

08002f2c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f2c:	4b04      	ldr	r3, [pc, #16]	; (8002f40 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002f2e:	4a05      	ldr	r2, [pc, #20]	; (8002f44 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002f36:	5cd3      	ldrb	r3, [r2, r3]
 8002f38:	4a03      	ldr	r2, [pc, #12]	; (8002f48 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002f3a:	6810      	ldr	r0, [r2, #0]
}
 8002f3c:	40d8      	lsrs	r0, r3
 8002f3e:	4770      	bx	lr
 8002f40:	40023800 	.word	0x40023800
 8002f44:	08005bba 	.word	0x08005bba
 8002f48:	2000000c 	.word	0x2000000c

08002f4c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f4c:	4b04      	ldr	r3, [pc, #16]	; (8002f60 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002f4e:	4a05      	ldr	r2, [pc, #20]	; (8002f64 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002f56:	5cd3      	ldrb	r3, [r2, r3]
 8002f58:	4a03      	ldr	r2, [pc, #12]	; (8002f68 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002f5a:	6810      	ldr	r0, [r2, #0]
}
 8002f5c:	40d8      	lsrs	r0, r3
 8002f5e:	4770      	bx	lr
 8002f60:	40023800 	.word	0x40023800
 8002f64:	08005bba 	.word	0x08005bba
 8002f68:	2000000c 	.word	0x2000000c

08002f6c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f6c:	6a03      	ldr	r3, [r0, #32]
 8002f6e:	f023 0301 	bic.w	r3, r3, #1
 8002f72:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f74:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002f76:	6842      	ldr	r2, [r0, #4]
{
 8002f78:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f7a:	6984      	ldr	r4, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f7c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f7e:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002f82:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002f84:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8002f86:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8002f8a:	4323      	orrs	r3, r4

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002f8c:	4c0c      	ldr	r4, [pc, #48]	; (8002fc0 <TIM_OC1_SetConfig+0x54>)
 8002f8e:	42a0      	cmp	r0, r4
 8002f90:	d009      	beq.n	8002fa6 <TIM_OC1_SetConfig+0x3a>
 8002f92:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002f96:	42a0      	cmp	r0, r4
 8002f98:	d005      	beq.n	8002fa6 <TIM_OC1_SetConfig+0x3a>
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f9a:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002f9c:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002f9e:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8002fa0:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002fa2:	6203      	str	r3, [r0, #32]
} 
 8002fa4:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= OC_Config->OCNPolarity;
 8002fa6:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8002fa8:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 8002faa:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8002fae:	4323      	orrs	r3, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8002fb0:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002fb2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8002fb6:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8002fb8:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8002fbc:	4322      	orrs	r2, r4
 8002fbe:	e7ec      	b.n	8002f9a <TIM_OC1_SetConfig+0x2e>
 8002fc0:	40010000 	.word	0x40010000

08002fc4 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002fc4:	6a03      	ldr	r3, [r0, #32]
 8002fc6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fca:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fcc:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002fce:	6842      	ldr	r2, [r0, #4]
{
 8002fd0:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002fd2:	69c4      	ldr	r4, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fd4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8002fd6:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002fda:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002fdc:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8002fde:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002fe2:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002fe6:	4c0e      	ldr	r4, [pc, #56]	; (8003020 <TIM_OC3_SetConfig+0x5c>)
 8002fe8:	42a0      	cmp	r0, r4
 8002fea:	d009      	beq.n	8003000 <TIM_OC3_SetConfig+0x3c>
 8002fec:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002ff0:	42a0      	cmp	r0, r4
 8002ff2:	d005      	beq.n	8003000 <TIM_OC3_SetConfig+0x3c>
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ff4:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002ff6:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002ff8:	61c5      	str	r5, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8002ffa:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ffc:	6203      	str	r3, [r0, #32]
}
 8002ffe:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003000:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003002:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 8003004:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003008:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800300c:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800300e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003012:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8003014:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003018:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 800301c:	e7ea      	b.n	8002ff4 <TIM_OC3_SetConfig+0x30>
 800301e:	bf00      	nop
 8003020:	40010000 	.word	0x40010000

08003024 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003024:	6a03      	ldr	r3, [r0, #32]
 8003026:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800302a:	6203      	str	r3, [r0, #32]
{
 800302c:	b530      	push	{r4, r5, lr}
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800302e:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8003030:	6843      	ldr	r3, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003032:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003034:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003036:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800303a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800303e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8003040:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003044:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8003048:	4d09      	ldr	r5, [pc, #36]	; (8003070 <TIM_OC4_SetConfig+0x4c>)
 800304a:	42a8      	cmp	r0, r5
 800304c:	d009      	beq.n	8003062 <TIM_OC4_SetConfig+0x3e>
 800304e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003052:	42a8      	cmp	r0, r5
 8003054:	d005      	beq.n	8003062 <TIM_OC4_SetConfig+0x3e>
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003056:	6043      	str	r3, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003058:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 800305a:	61c2      	str	r2, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 800305c:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800305e:	6204      	str	r4, [r0, #32]
}
 8003060:	bd30      	pop	{r4, r5, pc}
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003062:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003064:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003068:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 800306c:	e7f3      	b.n	8003056 <TIM_OC4_SetConfig+0x32>
 800306e:	bf00      	nop
 8003070:	40010000 	.word	0x40010000

08003074 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003074:	6803      	ldr	r3, [r0, #0]
 8003076:	68da      	ldr	r2, [r3, #12]
 8003078:	f042 0201 	orr.w	r2, r2, #1
 800307c:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	f042 0201 	orr.w	r2, r2, #1
 8003084:	601a      	str	r2, [r3, #0]
}
 8003086:	2000      	movs	r0, #0
 8003088:	4770      	bx	lr

0800308a <HAL_TIM_PWM_MspInit>:
 800308a:	4770      	bx	lr

0800308c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800308c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003090:	2b01      	cmp	r3, #1
{
 8003092:	b570      	push	{r4, r5, r6, lr}
 8003094:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8003098:	d01c      	beq.n	80030d4 <HAL_TIM_ConfigClockSource+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 800309a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  tmpsmcr = htim->Instance->SMCR;
 800309e:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 80030a0:	2201      	movs	r2, #1
 80030a2:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  tmpsmcr = htim->Instance->SMCR;
 80030a6:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030a8:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80030ac:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80030b0:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 80030b2:	680a      	ldr	r2, [r1, #0]
 80030b4:	2a40      	cmp	r2, #64	; 0x40
 80030b6:	d079      	beq.n	80031ac <HAL_TIM_ConfigClockSource+0x120>
 80030b8:	d819      	bhi.n	80030ee <HAL_TIM_ConfigClockSource+0x62>
 80030ba:	2a10      	cmp	r2, #16
 80030bc:	f000 8093 	beq.w	80031e6 <HAL_TIM_ConfigClockSource+0x15a>
 80030c0:	d80a      	bhi.n	80030d8 <HAL_TIM_ConfigClockSource+0x4c>
 80030c2:	2a00      	cmp	r2, #0
 80030c4:	f000 8089 	beq.w	80031da <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 80030c8:	2301      	movs	r3, #1
 80030ca:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(htim);
 80030ce:	2300      	movs	r3, #0
 80030d0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 80030d4:	4618      	mov	r0, r3
}
 80030d6:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80030d8:	2a20      	cmp	r2, #32
 80030da:	f000 808a 	beq.w	80031f2 <HAL_TIM_ConfigClockSource+0x166>
 80030de:	2a30      	cmp	r2, #48	; 0x30
 80030e0:	d1f2      	bne.n	80030c8 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80030e2:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80030e4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80030e8:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 80030ec:	e036      	b.n	800315c <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 80030ee:	2a70      	cmp	r2, #112	; 0x70
 80030f0:	d036      	beq.n	8003160 <HAL_TIM_ConfigClockSource+0xd4>
 80030f2:	d81b      	bhi.n	800312c <HAL_TIM_ConfigClockSource+0xa0>
 80030f4:	2a50      	cmp	r2, #80	; 0x50
 80030f6:	d042      	beq.n	800317e <HAL_TIM_ConfigClockSource+0xf2>
 80030f8:	2a60      	cmp	r2, #96	; 0x60
 80030fa:	d1e5      	bne.n	80030c8 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030fc:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance, 
 80030fe:	684d      	ldr	r5, [r1, #4]
 8003100:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003102:	f024 0410 	bic.w	r4, r4, #16
 8003106:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003108:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800310a:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800310c:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003110:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003114:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003118:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800311c:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800311e:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8003120:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8003122:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8003126:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 800312a:	e017      	b.n	800315c <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 800312c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8003130:	d011      	beq.n	8003156 <HAL_TIM_ConfigClockSource+0xca>
 8003132:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8003136:	d1c7      	bne.n	80030c8 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8003138:	688a      	ldr	r2, [r1, #8]
 800313a:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800313c:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800313e:	68c9      	ldr	r1, [r1, #12]
 8003140:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003142:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8003146:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800314a:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800314c:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800314e:	689a      	ldr	r2, [r3, #8]
 8003150:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003154:	e002      	b.n	800315c <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8003156:	689a      	ldr	r2, [r3, #8]
 8003158:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 800315c:	609a      	str	r2, [r3, #8]
 800315e:	e7b3      	b.n	80030c8 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8003160:	688a      	ldr	r2, [r1, #8]
 8003162:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8003164:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8003166:	68c9      	ldr	r1, [r1, #12]
 8003168:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800316a:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800316e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003172:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8003174:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8003176:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003178:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 800317c:	e7ee      	b.n	800315c <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800317e:	684c      	ldr	r4, [r1, #4]
 8003180:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8003182:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003184:	6a1d      	ldr	r5, [r3, #32]
 8003186:	f025 0501 	bic.w	r5, r5, #1
 800318a:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 800318c:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800318e:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003192:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003196:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 800319a:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 800319c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800319e:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80031a0:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80031a2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80031a6:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 80031aa:	e7d7      	b.n	800315c <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80031ac:	684c      	ldr	r4, [r1, #4]
 80031ae:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80031b0:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031b2:	6a1d      	ldr	r5, [r3, #32]
 80031b4:	f025 0501 	bic.w	r5, r5, #1
 80031b8:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 80031ba:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031bc:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80031c0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80031c4:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80031c8:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 80031ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031cc:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80031ce:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80031d0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80031d4:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 80031d8:	e7c0      	b.n	800315c <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80031da:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80031dc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80031e0:	f042 0207 	orr.w	r2, r2, #7
 80031e4:	e7ba      	b.n	800315c <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80031e6:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80031e8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80031ec:	f042 0217 	orr.w	r2, r2, #23
 80031f0:	e7b4      	b.n	800315c <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80031f2:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80031f4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80031f8:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 80031fc:	e7ae      	b.n	800315c <HAL_TIM_ConfigClockSource+0xd0>

080031fe <HAL_TIM_OC_DelayElapsedCallback>:
 80031fe:	4770      	bx	lr

08003200 <HAL_TIM_IC_CaptureCallback>:
 8003200:	4770      	bx	lr

08003202 <HAL_TIM_PWM_PulseFinishedCallback>:
 8003202:	4770      	bx	lr

08003204 <HAL_TIM_TriggerCallback>:
 8003204:	4770      	bx	lr

08003206 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003206:	6803      	ldr	r3, [r0, #0]
 8003208:	691a      	ldr	r2, [r3, #16]
 800320a:	0791      	lsls	r1, r2, #30
{
 800320c:	b510      	push	{r4, lr}
 800320e:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003210:	d50e      	bpl.n	8003230 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8003212:	68da      	ldr	r2, [r3, #12]
 8003214:	0792      	lsls	r2, r2, #30
 8003216:	d50b      	bpl.n	8003230 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003218:	f06f 0202 	mvn.w	r2, #2
 800321c:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800321e:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003220:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003222:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003224:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003226:	d077      	beq.n	8003318 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8003228:	f7ff ffea 	bl	8003200 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800322c:	2300      	movs	r3, #0
 800322e:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003230:	6823      	ldr	r3, [r4, #0]
 8003232:	691a      	ldr	r2, [r3, #16]
 8003234:	0750      	lsls	r0, r2, #29
 8003236:	d510      	bpl.n	800325a <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8003238:	68da      	ldr	r2, [r3, #12]
 800323a:	0751      	lsls	r1, r2, #29
 800323c:	d50d      	bpl.n	800325a <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800323e:	f06f 0204 	mvn.w	r2, #4
 8003242:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003244:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003246:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003248:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800324c:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 800324e:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003250:	d068      	beq.n	8003324 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8003252:	f7ff ffd5 	bl	8003200 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003256:	2300      	movs	r3, #0
 8003258:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800325a:	6823      	ldr	r3, [r4, #0]
 800325c:	691a      	ldr	r2, [r3, #16]
 800325e:	0712      	lsls	r2, r2, #28
 8003260:	d50f      	bpl.n	8003282 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8003262:	68da      	ldr	r2, [r3, #12]
 8003264:	0710      	lsls	r0, r2, #28
 8003266:	d50c      	bpl.n	8003282 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003268:	f06f 0208 	mvn.w	r2, #8
 800326c:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800326e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003270:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003272:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003274:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8003276:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003278:	d05a      	beq.n	8003330 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800327a:	f7ff ffc1 	bl	8003200 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800327e:	2300      	movs	r3, #0
 8003280:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003282:	6823      	ldr	r3, [r4, #0]
 8003284:	691a      	ldr	r2, [r3, #16]
 8003286:	06d2      	lsls	r2, r2, #27
 8003288:	d510      	bpl.n	80032ac <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800328a:	68da      	ldr	r2, [r3, #12]
 800328c:	06d0      	lsls	r0, r2, #27
 800328e:	d50d      	bpl.n	80032ac <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003290:	f06f 0210 	mvn.w	r2, #16
 8003294:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003296:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003298:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800329a:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800329e:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 80032a0:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032a2:	d04b      	beq.n	800333c <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80032a4:	f7ff ffac 	bl	8003200 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032a8:	2300      	movs	r3, #0
 80032aa:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80032ac:	6823      	ldr	r3, [r4, #0]
 80032ae:	691a      	ldr	r2, [r3, #16]
 80032b0:	07d1      	lsls	r1, r2, #31
 80032b2:	d508      	bpl.n	80032c6 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80032b4:	68da      	ldr	r2, [r3, #12]
 80032b6:	07d2      	lsls	r2, r2, #31
 80032b8:	d505      	bpl.n	80032c6 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80032ba:	f06f 0201 	mvn.w	r2, #1
 80032be:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80032c0:	4620      	mov	r0, r4
 80032c2:	f001 fa21 	bl	8004708 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80032c6:	6823      	ldr	r3, [r4, #0]
 80032c8:	691a      	ldr	r2, [r3, #16]
 80032ca:	0610      	lsls	r0, r2, #24
 80032cc:	d508      	bpl.n	80032e0 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80032ce:	68da      	ldr	r2, [r3, #12]
 80032d0:	0611      	lsls	r1, r2, #24
 80032d2:	d505      	bpl.n	80032e0 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80032d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80032d8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80032da:	4620      	mov	r0, r4
 80032dc:	f000 f9cf 	bl	800367e <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80032e0:	6823      	ldr	r3, [r4, #0]
 80032e2:	691a      	ldr	r2, [r3, #16]
 80032e4:	0652      	lsls	r2, r2, #25
 80032e6:	d508      	bpl.n	80032fa <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80032e8:	68da      	ldr	r2, [r3, #12]
 80032ea:	0650      	lsls	r0, r2, #25
 80032ec:	d505      	bpl.n	80032fa <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032f2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80032f4:	4620      	mov	r0, r4
 80032f6:	f7ff ff85 	bl	8003204 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032fa:	6823      	ldr	r3, [r4, #0]
 80032fc:	691a      	ldr	r2, [r3, #16]
 80032fe:	0691      	lsls	r1, r2, #26
 8003300:	d522      	bpl.n	8003348 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8003302:	68da      	ldr	r2, [r3, #12]
 8003304:	0692      	lsls	r2, r2, #26
 8003306:	d51f      	bpl.n	8003348 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003308:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 800330c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800330e:	611a      	str	r2, [r3, #16]
}
 8003310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8003314:	f000 b9b2 	b.w	800367c <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003318:	f7ff ff71 	bl	80031fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800331c:	4620      	mov	r0, r4
 800331e:	f7ff ff70 	bl	8003202 <HAL_TIM_PWM_PulseFinishedCallback>
 8003322:	e783      	b.n	800322c <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003324:	f7ff ff6b 	bl	80031fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003328:	4620      	mov	r0, r4
 800332a:	f7ff ff6a 	bl	8003202 <HAL_TIM_PWM_PulseFinishedCallback>
 800332e:	e792      	b.n	8003256 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003330:	f7ff ff65 	bl	80031fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8003334:	4620      	mov	r0, r4
 8003336:	f7ff ff64 	bl	8003202 <HAL_TIM_PWM_PulseFinishedCallback>
 800333a:	e7a0      	b.n	800327e <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800333c:	f7ff ff5f 	bl	80031fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003340:	4620      	mov	r0, r4
 8003342:	f7ff ff5e 	bl	8003202 <HAL_TIM_PWM_PulseFinishedCallback>
 8003346:	e7af      	b.n	80032a8 <HAL_TIM_IRQHandler+0xa2>
 8003348:	bd10      	pop	{r4, pc}
	...

0800334c <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800334c:	4a2e      	ldr	r2, [pc, #184]	; (8003408 <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 800334e:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8003350:	4290      	cmp	r0, r2
 8003352:	d012      	beq.n	800337a <TIM_Base_SetConfig+0x2e>
 8003354:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003358:	d00f      	beq.n	800337a <TIM_Base_SetConfig+0x2e>
 800335a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800335e:	4290      	cmp	r0, r2
 8003360:	d00b      	beq.n	800337a <TIM_Base_SetConfig+0x2e>
 8003362:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003366:	4290      	cmp	r0, r2
 8003368:	d007      	beq.n	800337a <TIM_Base_SetConfig+0x2e>
 800336a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800336e:	4290      	cmp	r0, r2
 8003370:	d003      	beq.n	800337a <TIM_Base_SetConfig+0x2e>
 8003372:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003376:	4290      	cmp	r0, r2
 8003378:	d11d      	bne.n	80033b6 <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 800337a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800337c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003380:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8003382:	4a21      	ldr	r2, [pc, #132]	; (8003408 <TIM_Base_SetConfig+0xbc>)
 8003384:	4290      	cmp	r0, r2
 8003386:	d104      	bne.n	8003392 <TIM_Base_SetConfig+0x46>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003388:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800338a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800338e:	4313      	orrs	r3, r2
 8003390:	e028      	b.n	80033e4 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8003392:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003396:	d0f7      	beq.n	8003388 <TIM_Base_SetConfig+0x3c>
 8003398:	4a1c      	ldr	r2, [pc, #112]	; (800340c <TIM_Base_SetConfig+0xc0>)
 800339a:	4290      	cmp	r0, r2
 800339c:	d0f4      	beq.n	8003388 <TIM_Base_SetConfig+0x3c>
 800339e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80033a2:	4290      	cmp	r0, r2
 80033a4:	d0f0      	beq.n	8003388 <TIM_Base_SetConfig+0x3c>
 80033a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80033aa:	4290      	cmp	r0, r2
 80033ac:	d0ec      	beq.n	8003388 <TIM_Base_SetConfig+0x3c>
 80033ae:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80033b2:	4290      	cmp	r0, r2
 80033b4:	d0e8      	beq.n	8003388 <TIM_Base_SetConfig+0x3c>
 80033b6:	4a16      	ldr	r2, [pc, #88]	; (8003410 <TIM_Base_SetConfig+0xc4>)
 80033b8:	4290      	cmp	r0, r2
 80033ba:	d0e5      	beq.n	8003388 <TIM_Base_SetConfig+0x3c>
 80033bc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80033c0:	4290      	cmp	r0, r2
 80033c2:	d0e1      	beq.n	8003388 <TIM_Base_SetConfig+0x3c>
 80033c4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80033c8:	4290      	cmp	r0, r2
 80033ca:	d0dd      	beq.n	8003388 <TIM_Base_SetConfig+0x3c>
 80033cc:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80033d0:	4290      	cmp	r0, r2
 80033d2:	d0d9      	beq.n	8003388 <TIM_Base_SetConfig+0x3c>
 80033d4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80033d8:	4290      	cmp	r0, r2
 80033da:	d0d5      	beq.n	8003388 <TIM_Base_SetConfig+0x3c>
 80033dc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80033e0:	4290      	cmp	r0, r2
 80033e2:	d0d1      	beq.n	8003388 <TIM_Base_SetConfig+0x3c>
  TIMx->CR1 = tmpcr1;
 80033e4:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033e6:	688b      	ldr	r3, [r1, #8]
 80033e8:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80033ea:	680b      	ldr	r3, [r1, #0]
 80033ec:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80033ee:	4b06      	ldr	r3, [pc, #24]	; (8003408 <TIM_Base_SetConfig+0xbc>)
 80033f0:	4298      	cmp	r0, r3
 80033f2:	d006      	beq.n	8003402 <TIM_Base_SetConfig+0xb6>
 80033f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80033f8:	4298      	cmp	r0, r3
 80033fa:	d002      	beq.n	8003402 <TIM_Base_SetConfig+0xb6>
  TIMx->EGR = TIM_EGR_UG;
 80033fc:	2301      	movs	r3, #1
 80033fe:	6143      	str	r3, [r0, #20]
}
 8003400:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8003402:	690b      	ldr	r3, [r1, #16]
 8003404:	6303      	str	r3, [r0, #48]	; 0x30
 8003406:	e7f9      	b.n	80033fc <TIM_Base_SetConfig+0xb0>
 8003408:	40010000 	.word	0x40010000
 800340c:	40000400 	.word	0x40000400
 8003410:	40014000 	.word	0x40014000

08003414 <HAL_TIM_Base_Init>:
{ 
 8003414:	b510      	push	{r4, lr}
  if(htim == NULL)
 8003416:	4604      	mov	r4, r0
 8003418:	b1a0      	cbz	r0, 8003444 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800341a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800341e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003422:	b91b      	cbnz	r3, 800342c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003424:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8003428:	f001 fb58 	bl	8004adc <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 800342c:	2302      	movs	r3, #2
 800342e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8003432:	6820      	ldr	r0, [r4, #0]
 8003434:	1d21      	adds	r1, r4, #4
 8003436:	f7ff ff89 	bl	800334c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800343a:	2301      	movs	r3, #1
 800343c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8003440:	2000      	movs	r0, #0
 8003442:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003444:	2001      	movs	r0, #1
}
 8003446:	bd10      	pop	{r4, pc}

08003448 <HAL_TIM_PWM_Init>:
{
 8003448:	b510      	push	{r4, lr}
  if(htim == NULL)
 800344a:	4604      	mov	r4, r0
 800344c:	b1a0      	cbz	r0, 8003478 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800344e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003452:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003456:	b91b      	cbnz	r3, 8003460 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003458:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 800345c:	f7ff fe15 	bl	800308a <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;  
 8003460:	2302      	movs	r3, #2
 8003462:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8003466:	6820      	ldr	r0, [r4, #0]
 8003468:	1d21      	adds	r1, r4, #4
 800346a:	f7ff ff6f 	bl	800334c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800346e:	2301      	movs	r3, #1
 8003470:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8003474:	2000      	movs	r0, #0
 8003476:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003478:	2001      	movs	r0, #1
}  
 800347a:	bd10      	pop	{r4, pc}

0800347c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800347c:	6a03      	ldr	r3, [r0, #32]
 800347e:	f023 0310 	bic.w	r3, r3, #16
 8003482:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8003484:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8003486:	6842      	ldr	r2, [r0, #4]
{
 8003488:	b570      	push	{r4, r5, r6, lr}
  tmpccmrx = TIMx->CCMR1;
 800348a:	6984      	ldr	r4, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800348c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800348e:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003492:	ea44 2505 	orr.w	r5, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003496:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8003498:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800349c:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80034a0:	4c0d      	ldr	r4, [pc, #52]	; (80034d8 <TIM_OC2_SetConfig+0x5c>)
 80034a2:	42a0      	cmp	r0, r4
 80034a4:	d009      	beq.n	80034ba <TIM_OC2_SetConfig+0x3e>
 80034a6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80034aa:	42a0      	cmp	r0, r4
 80034ac:	d005      	beq.n	80034ba <TIM_OC2_SetConfig+0x3e>
  TIMx->CR2 = tmpcr2;
 80034ae:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 80034b0:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 80034b2:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80034b4:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80034b6:	6203      	str	r3, [r0, #32]
}
 80034b8:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80034ba:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80034bc:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 80034be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80034c2:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80034c6:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80034c8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80034cc:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 80034ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80034d2:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
 80034d6:	e7ea      	b.n	80034ae <TIM_OC2_SetConfig+0x32>
 80034d8:	40010000 	.word	0x40010000

080034dc <HAL_TIM_PWM_ConfigChannel>:
{
 80034dc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80034de:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80034e2:	2b01      	cmp	r3, #1
{
 80034e4:	4604      	mov	r4, r0
 80034e6:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80034ea:	d025      	beq.n	8003538 <HAL_TIM_PWM_ConfigChannel+0x5c>
 80034ec:	2301      	movs	r3, #1
 80034ee:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 80034f2:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  switch (Channel)
 80034f6:	2a0c      	cmp	r2, #12
 80034f8:	d818      	bhi.n	800352c <HAL_TIM_PWM_ConfigChannel+0x50>
 80034fa:	e8df f002 	tbb	[pc, r2]
 80034fe:	1707      	.short	0x1707
 8003500:	171e1717 	.word	0x171e1717
 8003504:	172f1717 	.word	0x172f1717
 8003508:	1717      	.short	0x1717
 800350a:	40          	.byte	0x40
 800350b:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800350c:	6820      	ldr	r0, [r4, #0]
 800350e:	f7ff fd2d 	bl	8002f6c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003512:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003514:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003516:	699a      	ldr	r2, [r3, #24]
 8003518:	f042 0208 	orr.w	r2, r2, #8
 800351c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800351e:	699a      	ldr	r2, [r3, #24]
 8003520:	f022 0204 	bic.w	r2, r2, #4
 8003524:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003526:	699a      	ldr	r2, [r3, #24]
 8003528:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800352a:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 800352c:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800352e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003530:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8003534:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 8003538:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800353a:	6820      	ldr	r0, [r4, #0]
 800353c:	f7ff ff9e 	bl	800347c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003540:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003542:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003544:	699a      	ldr	r2, [r3, #24]
 8003546:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800354a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800354c:	699a      	ldr	r2, [r3, #24]
 800354e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003552:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003554:	699a      	ldr	r2, [r3, #24]
 8003556:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800355a:	e7e6      	b.n	800352a <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800355c:	6820      	ldr	r0, [r4, #0]
 800355e:	f7ff fd31 	bl	8002fc4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003562:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8003564:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003566:	69da      	ldr	r2, [r3, #28]
 8003568:	f042 0208 	orr.w	r2, r2, #8
 800356c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800356e:	69da      	ldr	r2, [r3, #28]
 8003570:	f022 0204 	bic.w	r2, r2, #4
 8003574:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8003576:	69da      	ldr	r2, [r3, #28]
 8003578:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 800357a:	61da      	str	r2, [r3, #28]
    break;
 800357c:	e7d6      	b.n	800352c <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800357e:	6820      	ldr	r0, [r4, #0]
 8003580:	f7ff fd50 	bl	8003024 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003584:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8003586:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003588:	69da      	ldr	r2, [r3, #28]
 800358a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800358e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003590:	69da      	ldr	r2, [r3, #28]
 8003592:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003596:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8003598:	69da      	ldr	r2, [r3, #28]
 800359a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800359e:	e7ec      	b.n	800357a <HAL_TIM_PWM_ConfigChannel+0x9e>

080035a0 <TIM_CCxChannelCmd>:
  TIMx->CCER &= ~tmp;
 80035a0:	6a03      	ldr	r3, [r0, #32]
{
 80035a2:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << Channel;
 80035a4:	2401      	movs	r4, #1
 80035a6:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80035a8:	ea23 0304 	bic.w	r3, r3, r4
 80035ac:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80035ae:	6a03      	ldr	r3, [r0, #32]
 80035b0:	408a      	lsls	r2, r1
 80035b2:	431a      	orrs	r2, r3
 80035b4:	6202      	str	r2, [r0, #32]
 80035b6:	bd10      	pop	{r4, pc}

080035b8 <HAL_TIM_PWM_Start>:
{
 80035b8:	b510      	push	{r4, lr}
 80035ba:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80035bc:	2201      	movs	r2, #1
 80035be:	6800      	ldr	r0, [r0, #0]
 80035c0:	f7ff ffee 	bl	80035a0 <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 80035c4:	6823      	ldr	r3, [r4, #0]
 80035c6:	4a08      	ldr	r2, [pc, #32]	; (80035e8 <HAL_TIM_PWM_Start+0x30>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d003      	beq.n	80035d4 <HAL_TIM_PWM_Start+0x1c>
 80035cc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d103      	bne.n	80035dc <HAL_TIM_PWM_Start+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 80035d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035da:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	f042 0201 	orr.w	r2, r2, #1
 80035e2:	601a      	str	r2, [r3, #0]
} 
 80035e4:	2000      	movs	r0, #0
 80035e6:	bd10      	pop	{r4, pc}
 80035e8:	40010000 	.word	0x40010000

080035ec <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 80035ec:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80035f0:	2b01      	cmp	r3, #1
{
 80035f2:	b510      	push	{r4, lr}
 80035f4:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 80035f8:	d018      	beq.n	800362c <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 80035fa:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80035fe:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8003600:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8003602:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8003604:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8003606:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800360a:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 800360c:	685a      	ldr	r2, [r3, #4]
 800360e:	4322      	orrs	r2, r4
 8003610:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8003612:	689a      	ldr	r2, [r3, #8]
 8003614:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003618:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800361a:	689a      	ldr	r2, [r3, #8]
 800361c:	430a      	orrs	r2, r1
 800361e:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8003620:	2301      	movs	r3, #1
 8003622:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8003626:	2300      	movs	r3, #0
 8003628:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 800362c:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 800362e:	bd10      	pop	{r4, pc}

08003630 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8003630:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003634:	2b01      	cmp	r3, #1
 8003636:	d01f      	beq.n	8003678 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003638:	68cb      	ldr	r3, [r1, #12]
 800363a:	688a      	ldr	r2, [r1, #8]
 800363c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003640:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003642:	684a      	ldr	r2, [r1, #4]
 8003644:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003648:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800364a:	680a      	ldr	r2, [r1, #0]
 800364c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003650:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003652:	690a      	ldr	r2, [r1, #16]
 8003654:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003658:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800365a:	694a      	ldr	r2, [r1, #20]
 800365c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003660:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003662:	698a      	ldr	r2, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003664:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003668:	4313      	orrs	r3, r2
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800366a:	6802      	ldr	r2, [r0, #0]
 800366c:	6453      	str	r3, [r2, #68]	; 0x44
  
  __HAL_UNLOCK(htim);
 800366e:	2300      	movs	r3, #0
 8003670:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  return HAL_OK;
 8003674:	4618      	mov	r0, r3
 8003676:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003678:	2002      	movs	r0, #2
}
 800367a:	4770      	bx	lr

0800367c <HAL_TIMEx_CommutationCallback>:
 800367c:	4770      	bx	lr

0800367e <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800367e:	4770      	bx	lr

08003680 <USART_EndRxTransfer>:
  * @retval None
  */
static void USART_EndRxTransfer(USART_HandleTypeDef *husart)
{
  /* Disable RXNE, PE and ERR interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003680:	6803      	ldr	r3, [r0, #0]
 8003682:	68da      	ldr	r2, [r3, #12]
 8003684:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003688:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 800368a:	695a      	ldr	r2, [r3, #20]
 800368c:	f022 0201 	bic.w	r2, r2, #1
 8003690:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 8003692:	2301      	movs	r3, #1
 8003694:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 8003698:	4770      	bx	lr
	...

0800369c <HAL_USART_Init>:
{
 800369c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(husart == NULL)
 80036a0:	4605      	mov	r5, r0
 80036a2:	2800      	cmp	r0, #0
 80036a4:	f000 808c 	beq.w	80037c0 <HAL_USART_Init+0x124>
  if(husart->State == HAL_USART_STATE_RESET)
 80036a8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80036ac:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80036b0:	b91b      	cbnz	r3, 80036ba <HAL_USART_Init+0x1e>
    husart->Lock = HAL_UNLOCKED;
 80036b2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_USART_MspInit(husart);
 80036b6:	f001 fc19 	bl	8004eec <HAL_USART_MspInit>
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 80036ba:	682e      	ldr	r6, [r5, #0]
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE| husart->Init.CLKPolarity |
 80036bc:	69e9      	ldr	r1, [r5, #28]
  husart->State = HAL_USART_STATE_BUSY;
 80036be:	2302      	movs	r3, #2
 80036c0:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 80036c4:	68f3      	ldr	r3, [r6, #12]
 80036c6:	f023 030c 	bic.w	r3, r3, #12
 80036ca:	60f3      	str	r3, [r6, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE| husart->Init.CLKPolarity |
 80036cc:	69ab      	ldr	r3, [r5, #24]
  tmpreg = husart->Instance->CR2;
 80036ce:	6932      	ldr	r2, [r6, #16]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE| husart->Init.CLKPolarity |
 80036d0:	430b      	orrs	r3, r1
 80036d2:	6a29      	ldr	r1, [r5, #32]
 80036d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80036d8:	430b      	orrs	r3, r1
 80036da:	68e9      	ldr	r1, [r5, #12]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 80036dc:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE| husart->Init.CLKPolarity |
 80036e0:	430b      	orrs	r3, r1
 80036e2:	4313      	orrs	r3, r2
                       husart->Init.CLKPhase| husart->Init.CLKLastBit | husart->Init.StopBits);
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 80036e4:	6133      	str	r3, [r6, #16]
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
     Force OVER8 bit to 1 in order to reach the max USART frequencies */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 80036e6:	6929      	ldr	r1, [r5, #16]
 80036e8:	68ab      	ldr	r3, [r5, #8]
  tmpreg = husart->Instance->CR1;
 80036ea:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 80036ec:	430b      	orrs	r3, r1
 80036ee:	6969      	ldr	r1, [r5, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80036f0:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 80036f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80036f8:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 80036fc:	430b      	orrs	r3, r1
 80036fe:	4313      	orrs	r3, r2

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 8003700:	60f3      	str	r3, [r6, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 8003702:	6973      	ldr	r3, [r6, #20]
 8003704:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003708:	6173      	str	r3, [r6, #20]

  /*-------------------------- USART BRR Configuration -----------------------*/
#if defined(USART6) 
  if((husart->Instance == USART1) || (husart->Instance == USART6))
 800370a:	4b2f      	ldr	r3, [pc, #188]	; (80037c8 <HAL_USART_Init+0x12c>)
 800370c:	429e      	cmp	r6, r3
 800370e:	d003      	beq.n	8003718 <HAL_USART_Init+0x7c>
 8003710:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003714:	429e      	cmp	r6, r3
 8003716:	d13b      	bne.n	8003790 <HAL_USART_Init+0xf4>
  {
    husart->Instance->BRR = USART_BRR(HAL_RCC_GetPCLK2Freq(), husart->Init.BaudRate);
 8003718:	f7ff fc18 	bl	8002f4c <HAL_RCC_GetPCLK2Freq>
 800371c:	686f      	ldr	r7, [r5, #4]
 800371e:	2419      	movs	r4, #25
 8003720:	fb04 f300 	mul.w	r3, r4, r0
 8003724:	007f      	lsls	r7, r7, #1
 8003726:	f04f 0864 	mov.w	r8, #100	; 0x64
 800372a:	fbb3 f3f7 	udiv	r3, r3, r7
 800372e:	fbb3 f3f8 	udiv	r3, r3, r8
 8003732:	011f      	lsls	r7, r3, #4
 8003734:	f7ff fc0a 	bl	8002f4c <HAL_RCC_GetPCLK2Freq>
 8003738:	686b      	ldr	r3, [r5, #4]
 800373a:	4360      	muls	r0, r4
 800373c:	005b      	lsls	r3, r3, #1
 800373e:	fbb0 f9f3 	udiv	r9, r0, r3
 8003742:	f7ff fc03 	bl	8002f4c <HAL_RCC_GetPCLK2Freq>
    husart->Instance->BRR = USART_BRR(HAL_RCC_GetPCLK2Freq(), husart->Init.BaudRate);
  }	
#endif /* USART6 */	
  else
  {
    husart->Instance->BRR = USART_BRR(HAL_RCC_GetPCLK1Freq(), husart->Init.BaudRate);
 8003746:	686b      	ldr	r3, [r5, #4]
 8003748:	4360      	muls	r0, r4
 800374a:	005b      	lsls	r3, r3, #1
 800374c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003750:	fbb3 f3f8 	udiv	r3, r3, r8
 8003754:	fb08 9313 	mls	r3, r8, r3, r9
 8003758:	011b      	lsls	r3, r3, #4
 800375a:	3332      	adds	r3, #50	; 0x32
 800375c:	fbb3 f3f8 	udiv	r3, r3, r8
 8003760:	f003 030f 	and.w	r3, r3, #15
 8003764:	433b      	orrs	r3, r7
 8003766:	60b3      	str	r3, [r6, #8]
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 8003768:	682b      	ldr	r3, [r5, #0]
 800376a:	691a      	ldr	r2, [r3, #16]
 800376c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003770:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003772:	695a      	ldr	r2, [r3, #20]
 8003774:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003778:	615a      	str	r2, [r3, #20]
  __HAL_USART_ENABLE(husart);
 800377a:	68da      	ldr	r2, [r3, #12]
 800377c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003780:	60da      	str	r2, [r3, #12]
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8003782:	2000      	movs	r0, #0
  husart->State= HAL_USART_STATE_READY;
 8003784:	2301      	movs	r3, #1
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8003786:	6428      	str	r0, [r5, #64]	; 0x40
  husart->State= HAL_USART_STATE_READY;
 8003788:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  return HAL_OK;
 800378c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    husart->Instance->BRR = USART_BRR(HAL_RCC_GetPCLK1Freq(), husart->Init.BaudRate);
 8003790:	f7ff fbcc 	bl	8002f2c <HAL_RCC_GetPCLK1Freq>
 8003794:	686f      	ldr	r7, [r5, #4]
 8003796:	2419      	movs	r4, #25
 8003798:	fb04 f300 	mul.w	r3, r4, r0
 800379c:	007f      	lsls	r7, r7, #1
 800379e:	f04f 0864 	mov.w	r8, #100	; 0x64
 80037a2:	fbb3 f3f7 	udiv	r3, r3, r7
 80037a6:	fbb3 f3f8 	udiv	r3, r3, r8
 80037aa:	011f      	lsls	r7, r3, #4
 80037ac:	f7ff fbbe 	bl	8002f2c <HAL_RCC_GetPCLK1Freq>
 80037b0:	686b      	ldr	r3, [r5, #4]
 80037b2:	4360      	muls	r0, r4
 80037b4:	005b      	lsls	r3, r3, #1
 80037b6:	fbb0 f9f3 	udiv	r9, r0, r3
 80037ba:	f7ff fbb7 	bl	8002f2c <HAL_RCC_GetPCLK1Freq>
 80037be:	e7c2      	b.n	8003746 <HAL_USART_Init+0xaa>
    return HAL_ERROR;
 80037c0:	2001      	movs	r0, #1
}
 80037c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80037c6:	bf00      	nop
 80037c8:	40011000 	.word	0x40011000

080037cc <HAL_USART_TxCpltCallback>:
 80037cc:	4770      	bx	lr

080037ce <HAL_USART_RxCpltCallback>:
 80037ce:	4770      	bx	lr

080037d0 <USART_Receive_IT>:
  if(husart->State == HAL_USART_STATE_BUSY_RX)
 80037d0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80037d4:	2b22      	cmp	r3, #34	; 0x22
{
 80037d6:	b510      	push	{r4, lr}
  if(husart->State == HAL_USART_STATE_BUSY_RX)
 80037d8:	d146      	bne.n	8003868 <USART_Receive_IT+0x98>
    if(husart->Init.WordLength == USART_WORDLENGTH_9B)
 80037da:	6883      	ldr	r3, [r0, #8]
 80037dc:	6901      	ldr	r1, [r0, #16]
 80037de:	6802      	ldr	r2, [r0, #0]
 80037e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037e4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80037e6:	d12a      	bne.n	800383e <USART_Receive_IT+0x6e>
      if(husart->Init.Parity == USART_PARITY_NONE)
 80037e8:	bb21      	cbnz	r1, 8003834 <USART_Receive_IT+0x64>
        *tmp = (uint16_t)(husart->Instance->DR & (uint16_t)0x01FF);
 80037ea:	6851      	ldr	r1, [r2, #4]
 80037ec:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80037f0:	f823 1b02 	strh.w	r1, [r3], #2
        husart->pRxBuffPtr += 1U;
 80037f4:	62c3      	str	r3, [r0, #44]	; 0x2c
      if(--husart->RxXferCount != 0x00U)
 80037f6:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80037f8:	3b01      	subs	r3, #1
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	8643      	strh	r3, [r0, #50]	; 0x32
 80037fe:	b113      	cbz	r3, 8003806 <USART_Receive_IT+0x36>
        husart->Instance->DR = (DUMMY_DATA & (uint16_t)0x01FF);
 8003800:	f240 13ff 	movw	r3, #511	; 0x1ff
 8003804:	6053      	str	r3, [r2, #4]
    if(husart->RxXferCount == 0U)
 8003806:	8e44      	ldrh	r4, [r0, #50]	; 0x32
 8003808:	b2a4      	uxth	r4, r4
 800380a:	b98c      	cbnz	r4, 8003830 <USART_Receive_IT+0x60>
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 800380c:	6803      	ldr	r3, [r0, #0]
 800380e:	68da      	ldr	r2, [r3, #12]
 8003810:	f022 0220 	bic.w	r2, r2, #32
 8003814:	60da      	str	r2, [r3, #12]
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 8003816:	68da      	ldr	r2, [r3, #12]
 8003818:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800381c:	60da      	str	r2, [r3, #12]
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 800381e:	695a      	ldr	r2, [r3, #20]
 8003820:	f022 0201 	bic.w	r2, r2, #1
 8003824:	615a      	str	r2, [r3, #20]
      husart->State = HAL_USART_STATE_READY;
 8003826:	2301      	movs	r3, #1
 8003828:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_USART_RxCpltCallback(husart);
 800382c:	f7ff ffcf 	bl	80037ce <HAL_USART_RxCpltCallback>
    if(husart->RxXferCount == 0U)
 8003830:	2000      	movs	r0, #0
}
 8003832:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(husart->Instance->DR & (uint16_t)0x00FF);
 8003834:	6851      	ldr	r1, [r2, #4]
 8003836:	b2c9      	uxtb	r1, r1
 8003838:	f823 1b01 	strh.w	r1, [r3], #1
 800383c:	e7da      	b.n	80037f4 <USART_Receive_IT+0x24>
      if(husart->Init.Parity == USART_PARITY_NONE)
 800383e:	b969      	cbnz	r1, 800385c <USART_Receive_IT+0x8c>
        *husart->pRxBuffPtr++ = (uint8_t)(husart->Instance->DR & (uint8_t)0x00FF);
 8003840:	1c59      	adds	r1, r3, #1
 8003842:	6852      	ldr	r2, [r2, #4]
 8003844:	62c1      	str	r1, [r0, #44]	; 0x2c
        *husart->pRxBuffPtr++ = (uint8_t)(husart->Instance->DR & (uint8_t)0x007F);
 8003846:	701a      	strb	r2, [r3, #0]
      if(--husart->RxXferCount != 0x00U)
 8003848:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 800384a:	3b01      	subs	r3, #1
 800384c:	b29b      	uxth	r3, r3
 800384e:	8643      	strh	r3, [r0, #50]	; 0x32
 8003850:	2b00      	cmp	r3, #0
 8003852:	d0d8      	beq.n	8003806 <USART_Receive_IT+0x36>
        husart->Instance->DR = (DUMMY_DATA & (uint16_t)0x00FF);
 8003854:	6803      	ldr	r3, [r0, #0]
 8003856:	22ff      	movs	r2, #255	; 0xff
 8003858:	605a      	str	r2, [r3, #4]
 800385a:	e7d4      	b.n	8003806 <USART_Receive_IT+0x36>
        *husart->pRxBuffPtr++ = (uint8_t)(husart->Instance->DR & (uint8_t)0x007F);
 800385c:	6852      	ldr	r2, [r2, #4]
 800385e:	1c59      	adds	r1, r3, #1
 8003860:	62c1      	str	r1, [r0, #44]	; 0x2c
 8003862:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003866:	e7ee      	b.n	8003846 <USART_Receive_IT+0x76>
    return HAL_BUSY;
 8003868:	2002      	movs	r0, #2
 800386a:	bd10      	pop	{r4, pc}

0800386c <HAL_USART_TxRxCpltCallback>:
 800386c:	4770      	bx	lr

0800386e <USART_TransmitReceive_IT>:
  if(husart->State == HAL_USART_STATE_BUSY_TX_RX)
 800386e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003872:	2b32      	cmp	r3, #50	; 0x32
{
 8003874:	b510      	push	{r4, lr}
  if(husart->State == HAL_USART_STATE_BUSY_TX_RX)
 8003876:	d165      	bne.n	8003944 <USART_TransmitReceive_IT+0xd6>
    if(husart->TxXferCount != 0x00U)
 8003878:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800387a:	b29b      	uxth	r3, r3
 800387c:	b1e3      	cbz	r3, 80038b8 <USART_TransmitReceive_IT+0x4a>
      if(__HAL_USART_GET_FLAG(husart, USART_FLAG_TXE) != RESET)
 800387e:	6802      	ldr	r2, [r0, #0]
 8003880:	6813      	ldr	r3, [r2, #0]
 8003882:	0619      	lsls	r1, r3, #24
 8003884:	d518      	bpl.n	80038b8 <USART_TransmitReceive_IT+0x4a>
        if(husart->Init.WordLength == USART_WORDLENGTH_9B)
 8003886:	6883      	ldr	r3, [r0, #8]
 8003888:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800388c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800388e:	d144      	bne.n	800391a <USART_TransmitReceive_IT+0xac>
          husart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003890:	8819      	ldrh	r1, [r3, #0]
 8003892:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8003896:	6051      	str	r1, [r2, #4]
          if(husart->Init.Parity == USART_PARITY_NONE)
 8003898:	6901      	ldr	r1, [r0, #16]
 800389a:	2900      	cmp	r1, #0
 800389c:	d13b      	bne.n	8003916 <USART_TransmitReceive_IT+0xa8>
            husart->pTxBuffPtr += 2U;
 800389e:	3302      	adds	r3, #2
            husart->pTxBuffPtr += 1U;
 80038a0:	6243      	str	r3, [r0, #36]	; 0x24
        husart->TxXferCount--;
 80038a2:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80038a4:	3b01      	subs	r3, #1
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	8543      	strh	r3, [r0, #42]	; 0x2a
        if(husart->TxXferCount == 0U)
 80038aa:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	b91b      	cbnz	r3, 80038b8 <USART_TransmitReceive_IT+0x4a>
          CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 80038b0:	68d3      	ldr	r3, [r2, #12]
 80038b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038b6:	60d3      	str	r3, [r2, #12]
    if(husart->RxXferCount != 0x00U)
 80038b8:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	b1a3      	cbz	r3, 80038e8 <USART_TransmitReceive_IT+0x7a>
      if(__HAL_USART_GET_FLAG(husart, USART_FLAG_RXNE) != RESET)
 80038be:	6802      	ldr	r2, [r0, #0]
 80038c0:	6813      	ldr	r3, [r2, #0]
 80038c2:	069b      	lsls	r3, r3, #26
 80038c4:	d510      	bpl.n	80038e8 <USART_TransmitReceive_IT+0x7a>
        if(husart->Init.WordLength == USART_WORDLENGTH_9B)
 80038c6:	6883      	ldr	r3, [r0, #8]
 80038c8:	6901      	ldr	r1, [r0, #16]
 80038ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038ce:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80038d0:	d12c      	bne.n	800392c <USART_TransmitReceive_IT+0xbe>
            *tmp = (uint16_t)(husart->Instance->DR & (uint16_t)0x01FF);
 80038d2:	6852      	ldr	r2, [r2, #4]
          if(husart->Init.Parity == USART_PARITY_NONE)
 80038d4:	bb31      	cbnz	r1, 8003924 <USART_TransmitReceive_IT+0xb6>
            *tmp = (uint16_t)(husart->Instance->DR & (uint16_t)0x01FF);
 80038d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038da:	f823 2b02 	strh.w	r2, [r3], #2
            husart->pRxBuffPtr += 1U;
 80038de:	62c3      	str	r3, [r0, #44]	; 0x2c
        husart->RxXferCount--;
 80038e0:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80038e2:	3b01      	subs	r3, #1
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	8643      	strh	r3, [r0, #50]	; 0x32
    if(husart->RxXferCount == 0U)
 80038e8:	8e44      	ldrh	r4, [r0, #50]	; 0x32
 80038ea:	b2a4      	uxth	r4, r4
 80038ec:	b98c      	cbnz	r4, 8003912 <USART_TransmitReceive_IT+0xa4>
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 80038ee:	6803      	ldr	r3, [r0, #0]
 80038f0:	68da      	ldr	r2, [r3, #12]
 80038f2:	f022 0220 	bic.w	r2, r2, #32
 80038f6:	60da      	str	r2, [r3, #12]
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 80038f8:	68da      	ldr	r2, [r3, #12]
 80038fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038fe:	60da      	str	r2, [r3, #12]
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8003900:	695a      	ldr	r2, [r3, #20]
 8003902:	f022 0201 	bic.w	r2, r2, #1
 8003906:	615a      	str	r2, [r3, #20]
      husart->State = HAL_USART_STATE_READY;
 8003908:	2301      	movs	r3, #1
 800390a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_USART_TxRxCpltCallback(husart);
 800390e:	f7ff ffad 	bl	800386c <HAL_USART_TxRxCpltCallback>
    if(husart->RxXferCount == 0U)
 8003912:	2000      	movs	r0, #0
}
 8003914:	bd10      	pop	{r4, pc}
            husart->pTxBuffPtr += 1U;
 8003916:	3301      	adds	r3, #1
 8003918:	e7c2      	b.n	80038a0 <USART_TransmitReceive_IT+0x32>
          husart->Instance->DR = (uint8_t)(*husart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800391a:	1c59      	adds	r1, r3, #1
 800391c:	6241      	str	r1, [r0, #36]	; 0x24
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	6053      	str	r3, [r2, #4]
 8003922:	e7be      	b.n	80038a2 <USART_TransmitReceive_IT+0x34>
            *tmp = (uint16_t)(husart->Instance->DR & (uint16_t)0x00FF);
 8003924:	b2d2      	uxtb	r2, r2
 8003926:	f823 2b01 	strh.w	r2, [r3], #1
 800392a:	e7d8      	b.n	80038de <USART_TransmitReceive_IT+0x70>
          if(husart->Init.Parity == USART_PARITY_NONE)
 800392c:	b921      	cbnz	r1, 8003938 <USART_TransmitReceive_IT+0xca>
            *husart->pRxBuffPtr++ = (uint8_t)(husart->Instance->DR & (uint8_t)0x00FF);
 800392e:	1c59      	adds	r1, r3, #1
 8003930:	6852      	ldr	r2, [r2, #4]
 8003932:	62c1      	str	r1, [r0, #44]	; 0x2c
            *husart->pRxBuffPtr++ = (uint8_t)(husart->Instance->DR & (uint8_t)0x007F);
 8003934:	701a      	strb	r2, [r3, #0]
 8003936:	e7d3      	b.n	80038e0 <USART_TransmitReceive_IT+0x72>
 8003938:	6852      	ldr	r2, [r2, #4]
 800393a:	1c59      	adds	r1, r3, #1
 800393c:	62c1      	str	r1, [r0, #44]	; 0x2c
 800393e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003942:	e7f7      	b.n	8003934 <USART_TransmitReceive_IT+0xc6>
    return HAL_BUSY;
 8003944:	2002      	movs	r0, #2
 8003946:	bd10      	pop	{r4, pc}

08003948 <HAL_USART_ErrorCallback>:
 8003948:	4770      	bx	lr
	...

0800394c <HAL_USART_IRQHandler>:
  uint32_t isrflags = READ_REG(husart->Instance->SR);
 800394c:	6803      	ldr	r3, [r0, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its   = READ_REG(husart->Instance->CR1);
 8003950:	68d9      	ldr	r1, [r3, #12]
{
 8003952:	b570      	push	{r4, r5, r6, lr}
  if(errorflags == RESET)
 8003954:	0716      	lsls	r6, r2, #28
{
 8003956:	4604      	mov	r4, r0
  uint32_t cr3its   = READ_REG(husart->Instance->CR3);
 8003958:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 800395a:	d110      	bne.n	800397e <HAL_USART_IRQHandler+0x32>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800395c:	0696      	lsls	r6, r2, #26
 800395e:	d56a      	bpl.n	8003a36 <HAL_USART_IRQHandler+0xea>
 8003960:	068d      	lsls	r5, r1, #26
 8003962:	d568      	bpl.n	8003a36 <HAL_USART_IRQHandler+0xea>
      if(husart->State == HAL_USART_STATE_BUSY_RX)
 8003964:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003968:	2b22      	cmp	r3, #34	; 0x22
 800396a:	d103      	bne.n	8003974 <HAL_USART_IRQHandler+0x28>
}
 800396c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        USART_Receive_IT(husart);
 8003970:	f7ff bf2e 	b.w	80037d0 <USART_Receive_IT>
        USART_TransmitReceive_IT(husart);
 8003974:	4620      	mov	r0, r4
}
 8003976:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        USART_TransmitReceive_IT(husart);
 800397a:	f7ff bf78 	b.w	800386e <USART_TransmitReceive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800397e:	f015 0501 	ands.w	r5, r5, #1
 8003982:	d102      	bne.n	800398a <HAL_USART_IRQHandler+0x3e>
 8003984:	f411 7f90 	tst.w	r1, #288	; 0x120
 8003988:	d055      	beq.n	8003a36 <HAL_USART_IRQHandler+0xea>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800398a:	07d3      	lsls	r3, r2, #31
 800398c:	d505      	bpl.n	800399a <HAL_USART_IRQHandler+0x4e>
 800398e:	05ce      	lsls	r6, r1, #23
      husart->ErrorCode |= HAL_USART_ERROR_PE;
 8003990:	bf42      	ittt	mi
 8003992:	6c23      	ldrmi	r3, [r4, #64]	; 0x40
 8003994:	f043 0301 	orrmi.w	r3, r3, #1
 8003998:	6423      	strmi	r3, [r4, #64]	; 0x40
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800399a:	0750      	lsls	r0, r2, #29
 800399c:	d504      	bpl.n	80039a8 <HAL_USART_IRQHandler+0x5c>
 800399e:	b11d      	cbz	r5, 80039a8 <HAL_USART_IRQHandler+0x5c>
      husart->ErrorCode |= HAL_USART_ERROR_NE;
 80039a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80039a2:	f043 0302 	orr.w	r3, r3, #2
 80039a6:	6423      	str	r3, [r4, #64]	; 0x40
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039a8:	0793      	lsls	r3, r2, #30
 80039aa:	d504      	bpl.n	80039b6 <HAL_USART_IRQHandler+0x6a>
 80039ac:	b11d      	cbz	r5, 80039b6 <HAL_USART_IRQHandler+0x6a>
      husart->ErrorCode |= HAL_USART_ERROR_FE;
 80039ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80039b0:	f043 0304 	orr.w	r3, r3, #4
 80039b4:	6423      	str	r3, [r4, #64]	; 0x40
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039b6:	0716      	lsls	r6, r2, #28
 80039b8:	d504      	bpl.n	80039c4 <HAL_USART_IRQHandler+0x78>
 80039ba:	b11d      	cbz	r5, 80039c4 <HAL_USART_IRQHandler+0x78>
      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 80039bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80039be:	f043 0308 	orr.w	r3, r3, #8
 80039c2:	6423      	str	r3, [r4, #64]	; 0x40
    if(husart->ErrorCode != HAL_USART_ERROR_NONE)
 80039c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d075      	beq.n	8003ab6 <HAL_USART_IRQHandler+0x16a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039ca:	0695      	lsls	r5, r2, #26
 80039cc:	d508      	bpl.n	80039e0 <HAL_USART_IRQHandler+0x94>
 80039ce:	0688      	lsls	r0, r1, #26
 80039d0:	d506      	bpl.n	80039e0 <HAL_USART_IRQHandler+0x94>
        if(husart->State == HAL_USART_STATE_BUSY_RX)
 80039d2:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80039d6:	2b22      	cmp	r3, #34	; 0x22
          USART_Receive_IT(husart);
 80039d8:	4620      	mov	r0, r4
        if(husart->State == HAL_USART_STATE_BUSY_RX)
 80039da:	d121      	bne.n	8003a20 <HAL_USART_IRQHandler+0xd4>
          USART_Receive_IT(husart);
 80039dc:	f7ff fef8 	bl	80037d0 <USART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR);
 80039e0:	6823      	ldr	r3, [r4, #0]
 80039e2:	695d      	ldr	r5, [r3, #20]
      if(((husart->ErrorCode & HAL_USART_ERROR_ORE) != RESET) || dmarequest)
 80039e4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80039e6:	0711      	lsls	r1, r2, #28
        USART_EndRxTransfer(husart);
 80039e8:	4620      	mov	r0, r4
      if(((husart->ErrorCode & HAL_USART_ERROR_ORE) != RESET) || dmarequest)
 80039ea:	d402      	bmi.n	80039f2 <HAL_USART_IRQHandler+0xa6>
 80039ec:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 80039f0:	d01d      	beq.n	8003a2e <HAL_USART_IRQHandler+0xe2>
        USART_EndRxTransfer(husart);
 80039f2:	f7ff fe45 	bl	8003680 <USART_EndRxTransfer>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80039f6:	6823      	ldr	r3, [r4, #0]
 80039f8:	695a      	ldr	r2, [r3, #20]
 80039fa:	0652      	lsls	r2, r2, #25
 80039fc:	d513      	bpl.n	8003a26 <HAL_USART_IRQHandler+0xda>
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR);
 80039fe:	695a      	ldr	r2, [r3, #20]
          if(husart->hdmarx != NULL)
 8003a00:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR);
 8003a02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a06:	615a      	str	r2, [r3, #20]
          if(husart->hdmarx != NULL)
 8003a08:	b168      	cbz	r0, 8003a26 <HAL_USART_IRQHandler+0xda>
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 8003a0a:	4b2b      	ldr	r3, [pc, #172]	; (8003ab8 <HAL_USART_IRQHandler+0x16c>)
 8003a0c:	6503      	str	r3, [r0, #80]	; 0x50
            if(HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 8003a0e:	f7fd fd39 	bl	8001484 <HAL_DMA_Abort_IT>
 8003a12:	2800      	cmp	r0, #0
 8003a14:	d04f      	beq.n	8003ab6 <HAL_USART_IRQHandler+0x16a>
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 8003a16:	6ba0      	ldr	r0, [r4, #56]	; 0x38
}
 8003a18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 8003a1c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003a1e:	4718      	bx	r3
          USART_TransmitReceive_IT(husart);
 8003a20:	f7ff ff25 	bl	800386e <USART_TransmitReceive_IT>
 8003a24:	e7dc      	b.n	80039e0 <HAL_USART_IRQHandler+0x94>
            HAL_USART_ErrorCallback(husart);
 8003a26:	4620      	mov	r0, r4
 8003a28:	f7ff ff8e 	bl	8003948 <HAL_USART_ErrorCallback>
 8003a2c:	bd70      	pop	{r4, r5, r6, pc}
        HAL_USART_ErrorCallback(husart);
 8003a2e:	f7ff ff8b 	bl	8003948 <HAL_USART_ErrorCallback>
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 8003a32:	6425      	str	r5, [r4, #64]	; 0x40
 8003a34:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003a36:	0616      	lsls	r6, r2, #24
 8003a38:	d52b      	bpl.n	8003a92 <HAL_USART_IRQHandler+0x146>
 8003a3a:	060d      	lsls	r5, r1, #24
 8003a3c:	d529      	bpl.n	8003a92 <HAL_USART_IRQHandler+0x146>
    if(husart->State == HAL_USART_STATE_BUSY_TX)
 8003a3e:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8003a42:	2a12      	cmp	r2, #18
 8003a44:	d196      	bne.n	8003974 <HAL_USART_IRQHandler+0x28>
  if(husart->State == HAL_USART_STATE_BUSY_TX)
 8003a46:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8003a4a:	2a12      	cmp	r2, #18
 8003a4c:	d133      	bne.n	8003ab6 <HAL_USART_IRQHandler+0x16a>
    if(husart->Init.WordLength == USART_WORDLENGTH_9B)
 8003a4e:	68a2      	ldr	r2, [r4, #8]
 8003a50:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8003a54:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003a56:	d117      	bne.n	8003a88 <HAL_USART_IRQHandler+0x13c>
      husart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003a58:	8811      	ldrh	r1, [r2, #0]
 8003a5a:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8003a5e:	6059      	str	r1, [r3, #4]
      if(husart->Init.Parity == USART_PARITY_NONE)
 8003a60:	6921      	ldr	r1, [r4, #16]
 8003a62:	b979      	cbnz	r1, 8003a84 <HAL_USART_IRQHandler+0x138>
        husart->pTxBuffPtr += 2U;
 8003a64:	3202      	adds	r2, #2
        husart->pTxBuffPtr += 1U;
 8003a66:	6262      	str	r2, [r4, #36]	; 0x24
    if(--husart->TxXferCount == 0U)
 8003a68:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003a6a:	3a01      	subs	r2, #1
 8003a6c:	b292      	uxth	r2, r2
 8003a6e:	8562      	strh	r2, [r4, #42]	; 0x2a
 8003a70:	bb0a      	cbnz	r2, 8003ab6 <HAL_USART_IRQHandler+0x16a>
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 8003a72:	68da      	ldr	r2, [r3, #12]
 8003a74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a78:	60da      	str	r2, [r3, #12]
      SET_BIT(husart->Instance->CR1, USART_CR1_TCIE);
 8003a7a:	68da      	ldr	r2, [r3, #12]
 8003a7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a80:	60da      	str	r2, [r3, #12]
 8003a82:	bd70      	pop	{r4, r5, r6, pc}
        husart->pTxBuffPtr += 1U;
 8003a84:	3201      	adds	r2, #1
 8003a86:	e7ee      	b.n	8003a66 <HAL_USART_IRQHandler+0x11a>
      husart->Instance->DR = (uint8_t)(*husart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003a88:	1c51      	adds	r1, r2, #1
 8003a8a:	6261      	str	r1, [r4, #36]	; 0x24
 8003a8c:	7812      	ldrb	r2, [r2, #0]
 8003a8e:	605a      	str	r2, [r3, #4]
 8003a90:	e7ea      	b.n	8003a68 <HAL_USART_IRQHandler+0x11c>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003a92:	0650      	lsls	r0, r2, #25
 8003a94:	d50f      	bpl.n	8003ab6 <HAL_USART_IRQHandler+0x16a>
 8003a96:	064a      	lsls	r2, r1, #25
 8003a98:	d50d      	bpl.n	8003ab6 <HAL_USART_IRQHandler+0x16a>
  CLEAR_BIT(husart->Instance->CR1, USART_CR1_TCIE);
 8003a9a:	68da      	ldr	r2, [r3, #12]
 8003a9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003aa0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8003aa2:	695a      	ldr	r2, [r3, #20]
 8003aa4:	f022 0201 	bic.w	r2, r2, #1
 8003aa8:	615a      	str	r2, [r3, #20]
  husart->State = HAL_USART_STATE_READY;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  HAL_USART_TxCpltCallback(husart);
 8003ab0:	4620      	mov	r0, r4
 8003ab2:	f7ff fe8b 	bl	80037cc <HAL_USART_TxCpltCallback>
 8003ab6:	bd70      	pop	{r4, r5, r6, pc}
 8003ab8:	08003abd 	.word	0x08003abd

08003abc <USART_DMAAbortOnError>:
{
 8003abc:	b508      	push	{r3, lr}
  USART_HandleTypeDef* husart = ( USART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003abe:	6b80      	ldr	r0, [r0, #56]	; 0x38
  husart->RxXferCount = 0x00U;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	8643      	strh	r3, [r0, #50]	; 0x32
  husart->TxXferCount = 0x00U;
 8003ac4:	8543      	strh	r3, [r0, #42]	; 0x2a
  HAL_USART_ErrorCallback(husart);
 8003ac6:	f7ff ff3f 	bl	8003948 <HAL_USART_ErrorCallback>
 8003aca:	bd08      	pop	{r3, pc}

08003acc <invSqrt>:
float invSqrt(float x) {
	float halfx = 0.5f * x;
	float y = x;
	long i = *(long*)&y;
	i = 0x5f3759df - (i>>1);
	y = *(float*)&i;
 8003acc:	ee10 2a10 	vmov	r2, s0
 8003ad0:	4b08      	ldr	r3, [pc, #32]	; (8003af4 <invSqrt+0x28>)
	float halfx = 0.5f * x;
 8003ad2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	y = *(float*)&i;
 8003ad6:	eba3 0362 	sub.w	r3, r3, r2, asr #1
 8003ada:	ee07 3a10 	vmov	s14, r3
	float halfx = 0.5f * x;
 8003ade:	ee60 7a27 	vmul.f32	s15, s0, s15
	y = y * (1.5f - (halfx * y * y));
 8003ae2:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 8003ae6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003aea:	eea7 0a67 	vfms.f32	s0, s14, s15
	return y;
}
 8003aee:	ee20 0a07 	vmul.f32	s0, s0, s14
 8003af2:	4770      	bx	lr
 8003af4:	5f3759df 	.word	0x5f3759df

08003af8 <MPU6050_filter_Init>:
#include "MPU6050.h"
#include "Filter.h"

void MPU6050_filter_Init(Madgwick_6DOFparam *p0)
{
    p0->q0 = 1.0f;
 8003af8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003afc:	6043      	str	r3, [r0, #4]
    p0->q1 = 0.0f;
 8003afe:	2300      	movs	r3, #0
 8003b00:	6083      	str	r3, [r0, #8]
    p0->q2 = 0.0f;
 8003b02:	60c3      	str	r3, [r0, #12]
    p0->q3 = 0.0f;
 8003b04:	6103      	str	r3, [r0, #16]
 8003b06:	4770      	bx	lr

08003b08 <MPU6050_filter>:
}

void MPU6050_filter(MPU6050 *m0, Madgwick_6DOFparam *p0, RPY_filter* rpy0 , float beta0, float sampleFreq)
{
    // Rate of change of quaternion from gyroscope
    p0->qDot1 = 0.5f * (-p0->q1 * m0->GyroX - p0->q2 * m0->GyroY - p0->q3 * m0->GyroZ);
 8003b08:	ed90 5a0c 	vldr	s10, [r0, #48]	; 0x30
 8003b0c:	edd1 4a03 	vldr	s9, [r1, #12]
 8003b10:	ed90 6a0b 	vldr	s12, [r0, #44]	; 0x2c
 8003b14:	edd1 7a02 	vldr	s15, [r1, #8]
 8003b18:	edd0 5a0d 	vldr	s11, [r0, #52]	; 0x34
 8003b1c:	edd1 3a04 	vldr	s7, [r1, #16]
    p0->qDot2 = 0.5f * (p0->q0 * m0->GyroX + p0->q2 * m0->GyroZ - p0->q3 * m0->GyroY);
 8003b20:	ed91 4a01 	vldr	s8, [r1, #4]
    p0->qDot1 = 0.5f * (-p0->q1 * m0->GyroX - p0->q2 * m0->GyroY - p0->q3 * m0->GyroZ);
 8003b24:	ee25 7a64 	vnmul.f32	s14, s10, s9
{
 8003b28:	b570      	push	{r4, r5, r6, lr}
    p0->qDot1 = 0.5f * (-p0->q1 * m0->GyroX - p0->q2 * m0->GyroY - p0->q3 * m0->GyroZ);
 8003b2a:	eea7 7ac6 	vfms.f32	s14, s15, s12
{
 8003b2e:	4605      	mov	r5, r0
 8003b30:	460c      	mov	r4, r1
    p0->qDot1 = 0.5f * (-p0->q1 * m0->GyroX - p0->q2 * m0->GyroY - p0->q3 * m0->GyroZ);
 8003b32:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8003b36:	eea3 7ae5 	vfms.f32	s14, s7, s11
{
 8003b3a:	4616      	mov	r6, r2
 8003b3c:	ed2d 8b08 	vpush	{d8-d11}
    p0->qDot1 = 0.5f * (-p0->q1 * m0->GyroX - p0->q2 * m0->GyroY - p0->q3 * m0->GyroZ);
 8003b40:	ee27 7a26 	vmul.f32	s14, s14, s13
{
 8003b44:	eeb0 8a40 	vmov.f32	s16, s0
    p0->qDot1 = 0.5f * (-p0->q1 * m0->GyroX - p0->q2 * m0->GyroY - p0->q3 * m0->GyroZ);
 8003b48:	ed81 7a09 	vstr	s14, [r1, #36]	; 0x24
    p0->qDot2 = 0.5f * (p0->q0 * m0->GyroX + p0->q2 * m0->GyroZ - p0->q3 * m0->GyroY);
 8003b4c:	ee24 7aa5 	vmul.f32	s14, s9, s11
{
 8003b50:	b084      	sub	sp, #16
    p0->qDot2 = 0.5f * (p0->q0 * m0->GyroX + p0->q2 * m0->GyroZ - p0->q3 * m0->GyroY);
 8003b52:	eea6 7a04 	vfma.f32	s14, s12, s8
{
 8003b56:	eef0 8a60 	vmov.f32	s17, s1
    p0->qDot2 = 0.5f * (p0->q0 * m0->GyroX + p0->q2 * m0->GyroZ - p0->q3 * m0->GyroY);
 8003b5a:	eea5 7a63 	vfms.f32	s14, s10, s7
 8003b5e:	ed90 0a06 	vldr	s0, [r0, #24]
 8003b62:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003b66:	ed81 7a0a 	vstr	s14, [r1, #40]	; 0x28
    p0->qDot3 = 0.5f * (p0->q0 * m0->GyroY - p0->q1 * m0->GyroZ + p0->q3 * m0->GyroX);
 8003b6a:	ee25 7ae7 	vnmul.f32	s14, s11, s15
    p0->qDot4 = 0.5f * (p0->q0 * m0->GyroZ + p0->q1 * m0->GyroY - p0->q2 * m0->GyroX);
 8003b6e:	ee67 7a85 	vmul.f32	s15, s15, s10
    p0->qDot3 = 0.5f * (p0->q0 * m0->GyroY - p0->q1 * m0->GyroZ + p0->q3 * m0->GyroX);
 8003b72:	eea5 7a04 	vfma.f32	s14, s10, s8
    p0->qDot4 = 0.5f * (p0->q0 * m0->GyroZ + p0->q1 * m0->GyroY - p0->q2 * m0->GyroX);
 8003b76:	eee5 7a84 	vfma.f32	s15, s11, s8
    p0->qDot3 = 0.5f * (p0->q0 * m0->GyroY - p0->q1 * m0->GyroZ + p0->q3 * m0->GyroX);
 8003b7a:	eea6 7a23 	vfma.f32	s14, s12, s7
    p0->qDot4 = 0.5f * (p0->q0 * m0->GyroZ + p0->q1 * m0->GyroY - p0->q2 * m0->GyroX);
 8003b7e:	eee6 7a64 	vfms.f32	s15, s12, s9
    p0->qDot3 = 0.5f * (p0->q0 * m0->GyroY - p0->q1 * m0->GyroZ + p0->q3 * m0->GyroX);
 8003b82:	ee27 7a26 	vmul.f32	s14, s14, s13
    p0->qDot4 = 0.5f * (p0->q0 * m0->GyroZ + p0->q1 * m0->GyroY - p0->q2 * m0->GyroX);
 8003b86:	ee67 7aa6 	vmul.f32	s15, s15, s13
    p0->qDot3 = 0.5f * (p0->q0 * m0->GyroY - p0->q1 * m0->GyroZ + p0->q3 * m0->GyroX);
 8003b8a:	ed81 7a0b 	vstr	s14, [r1, #44]	; 0x2c

    // Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
    if (!((m0->AccX == 0.0f) && (m0->AccY == 0.0f) && (m0->AccZ == 0.0f)))
 8003b8e:	ed90 7a05 	vldr	s14, [r0, #20]
    p0->qDot4 = 0.5f * (p0->q0 * m0->GyroZ + p0->q1 * m0->GyroY - p0->q2 * m0->GyroX);
 8003b92:	edc1 7a0c 	vstr	s15, [r1, #48]	; 0x30
    if (!((m0->AccX == 0.0f) && (m0->AccY == 0.0f) && (m0->AccZ == 0.0f)))
 8003b96:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8003b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b9e:	edd0 7a07 	vldr	s15, [r0, #28]
 8003ba2:	d10a      	bne.n	8003bba <MPU6050_filter+0xb2>
 8003ba4:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bac:	d105      	bne.n	8003bba <MPU6050_filter+0xb2>
 8003bae:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bb6:	f000 80d8 	beq.w	8003d6a <MPU6050_filter+0x262>
    {
        // Normalise accelerometer measurement
        p0->recipNorm = invSqrt(m0->AccX * m0->AccX + m0->AccY * m0->AccY + m0->AccZ * m0->AccZ);
 8003bba:	ee20 0a00 	vmul.f32	s0, s0, s0
 8003bbe:	eea7 0a07 	vfma.f32	s0, s14, s14
 8003bc2:	eea7 0aa7 	vfma.f32	s0, s15, s15
 8003bc6:	f7ff ff81 	bl	8003acc <invSqrt>
        m0->AccX *= p0->recipNorm;
 8003bca:	edd5 6a05 	vldr	s13, [r5, #20]
        m0->AccY *= p0->recipNorm;
        m0->AccZ *= p0->recipNorm;
 8003bce:	edd5 7a07 	vldr	s15, [r5, #28]
        m0->AccY *= p0->recipNorm;
 8003bd2:	ed95 5a06 	vldr	s10, [r5, #24]

        // Auxiliary variables to avoid repeated arithmetic
        p0->_2q0 = 2.0f * p0->q0;
        p0->_2q1 = 2.0f * p0->q1;
        p0->_2q2 = 2.0f * p0->q2;
 8003bd6:	edd4 0a03 	vldr	s1, [r4, #12]
        p0->recipNorm = invSqrt(m0->AccX * m0->AccX + m0->AccY * m0->AccY + m0->AccZ * m0->AccZ);
 8003bda:	ed84 0a00 	vstr	s0, [r4]
        m0->AccX *= p0->recipNorm;
 8003bde:	ee20 2a26 	vmul.f32	s4, s0, s13
        p0->_2q2 = 2.0f * p0->q2;
 8003be2:	ee30 4aa0 	vadd.f32	s8, s1, s1
        m0->AccY *= p0->recipNorm;
 8003be6:	ee20 5a05 	vmul.f32	s10, s0, s10
        m0->AccZ *= p0->recipNorm;
 8003bea:	ee20 0a27 	vmul.f32	s0, s0, s15
        p0->_2q0 = 2.0f * p0->q0;
 8003bee:	edd4 7a01 	vldr	s15, [r4, #4]
        p0->_2q1 = 2.0f * p0->q1;
 8003bf2:	ed94 9a02 	vldr	s18, [r4, #8]
        p0->_2q3 = 2.0f * p0->q3;
 8003bf6:	edd4 3a04 	vldr	s7, [r4, #16]
        m0->AccY *= p0->recipNorm;
 8003bfa:	ed85 5a06 	vstr	s10, [r5, #24]
        p0->_4q0 = 4.0f * p0->q0;
 8003bfe:	eeb1 3a00 	vmov.f32	s6, #16	; 0x40800000  4.0
 8003c02:	ee27 6a83 	vmul.f32	s12, s15, s6
        p0->_4q2 = 4.0f * p0->q2;
        p0->_8q1 = 8.0f * p0->q1;
        p0->_8q2 = 8.0f * p0->q2;
        p0->q0q0 = p0->q0 * p0->q0;
        p0->q1q1 = p0->q1 * p0->q1;
        p0->q2q2 = p0->q2 * p0->q2;
 8003c06:	ee60 4aa0 	vmul.f32	s9, s1, s1
        p0->q3q3 = p0->q3 * p0->q3;

        // Gradient decent algorithm corrective step
        p0->s0 = p0->_4q0 * p0->q2q2 + p0->_2q2 * m0->AccX + p0->_4q0 * p0->q1q1 - p0->_2q1 * m0->AccY;
 8003c0a:	ee62 5a04 	vmul.f32	s11, s4, s8
        p0->q1q1 = p0->q1 * p0->q1;
 8003c0e:	ee69 2a09 	vmul.f32	s5, s18, s18
        p0->s0 = p0->_4q0 * p0->q2q2 + p0->_2q2 * m0->AccX + p0->_4q0 * p0->q1q1 - p0->_2q1 * m0->AccY;
 8003c12:	eee6 5a24 	vfma.f32	s11, s12, s9
        p0->_2q0 = 2.0f * p0->q0;
 8003c16:	ee37 7aa7 	vadd.f32	s14, s15, s15
        p0->_2q3 = 2.0f * p0->q3;
 8003c1a:	ee73 9aa3 	vadd.f32	s19, s7, s7
        p0->q0q0 = p0->q0 * p0->q0;
 8003c1e:	ee67 7aa7 	vmul.f32	s15, s15, s15
        m0->AccZ *= p0->recipNorm;
 8003c22:	ed85 0a07 	vstr	s0, [r5, #28]
        m0->AccX *= p0->recipNorm;
 8003c26:	ed85 2a05 	vstr	s4, [r5, #20]
        p0->_4q1 = 4.0f * p0->q1;
 8003c2a:	ee69 aa03 	vmul.f32	s21, s18, s6
        p0->q3q3 = p0->q3 * p0->q3;
 8003c2e:	ee23 aaa3 	vmul.f32	s20, s7, s7
        p0->s0 = p0->_4q0 * p0->q2q2 + p0->_2q2 * m0->AccX + p0->_4q0 * p0->q1q1 - p0->_2q1 * m0->AccY;
 8003c32:	eee6 5a22 	vfma.f32	s11, s12, s5
        p0->_4q0 = 4.0f * p0->q0;
 8003c36:	ed84 6a11 	vstr	s12, [r4, #68]	; 0x44
        p0->q0q0 = p0->q0 * p0->q0;
 8003c3a:	edc4 7a16 	vstr	s15, [r4, #88]	; 0x58
        p0->s1 = p0->_4q1 * p0->q3q3 - p0->_2q3 * m0->AccX + 4.0f * p0->q0q0 * p0->q1 - p0->_2q0 * m0->AccY - p0->_4q1 + p0->_8q1 * p0->q1q1 + p0->_8q1 * p0->q2q2 + p0->_4q1 * m0->AccZ;
 8003c3e:	ee27 6a83 	vmul.f32	s12, s15, s6
 8003c42:	ee69 7ac2 	vnmul.f32	s15, s19, s4
        p0->s0 = p0->_4q0 * p0->q2q2 + p0->_2q2 * m0->AccX + p0->_4q0 * p0->q1q1 - p0->_2q1 * m0->AccY;
 8003c46:	eeb1 5a45 	vneg.f32	s10, s10
        p0->s1 = p0->_4q1 * p0->q3q3 - p0->_2q3 * m0->AccX + 4.0f * p0->q0q0 * p0->q1 - p0->_2q0 * m0->AccY - p0->_4q1 + p0->_8q1 * p0->q1q1 + p0->_8q1 * p0->q2q2 + p0->_4q1 * m0->AccZ;
 8003c4a:	eeea 7a8a 	vfma.f32	s15, s21, s20
        p0->_2q0 = 2.0f * p0->q0;
 8003c4e:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
        p0->s1 = p0->_4q1 * p0->q3q3 - p0->_2q3 * m0->AccX + 4.0f * p0->q0q0 * p0->q1 - p0->_2q0 * m0->AccY - p0->_4q1 + p0->_8q1 * p0->q1q1 + p0->_8q1 * p0->q2q2 + p0->_4q1 * m0->AccZ;
 8003c52:	eee9 7a06 	vfma.f32	s15, s18, s12
        p0->_4q2 = 4.0f * p0->q2;
 8003c56:	ee60 1a83 	vmul.f32	s3, s1, s6
        p0->s1 = p0->_4q1 * p0->q3q3 - p0->_2q3 * m0->AccX + 4.0f * p0->q0q0 * p0->q1 - p0->_2q0 * m0->AccY - p0->_4q1 + p0->_8q1 * p0->q1q1 + p0->_8q1 * p0->q2q2 + p0->_4q1 * m0->AccZ;
 8003c5a:	eee5 7a07 	vfma.f32	s15, s10, s14
        p0->s2 = 4.0f * p0->q0q0 * p0->q2 + p0->_2q0 * m0->AccX + p0->_4q2 * p0->q3q3 - p0->_2q3 * m0->AccY - p0->_4q2 + p0->_8q2 * p0->q1q1 + p0->_8q2 * p0->q2q2 + p0->_4q2 * m0->AccZ;
 8003c5e:	ee22 7a07 	vmul.f32	s14, s4, s14
        p0->_8q1 = 8.0f * p0->q1;
 8003c62:	eeb2 1a00 	vmov.f32	s2, #32	; 0x41000000  8.0
        p0->s2 = 4.0f * p0->q0q0 * p0->q2 + p0->_2q0 * m0->AccX + p0->_4q2 * p0->q3q3 - p0->_2q3 * m0->AccY - p0->_4q2 + p0->_8q2 * p0->q1q1 + p0->_8q2 * p0->q2q2 + p0->_4q2 * m0->AccZ;
 8003c66:	eea0 7a86 	vfma.f32	s14, s1, s12
        p0->_8q1 = 8.0f * p0->q1;
 8003c6a:	ee29 ba01 	vmul.f32	s22, s18, s2
        p0->s2 = 4.0f * p0->q0q0 * p0->q2 + p0->_2q0 * m0->AccX + p0->_4q2 * p0->q3q3 - p0->_2q3 * m0->AccY - p0->_4q2 + p0->_8q2 * p0->q1q1 + p0->_8q2 * p0->q2q2 + p0->_4q2 * m0->AccZ;
 8003c6e:	eea1 7a8a 	vfma.f32	s14, s3, s20
        p0->s1 = p0->_4q1 * p0->q3q3 - p0->_2q3 * m0->AccX + 4.0f * p0->q0q0 * p0->q1 - p0->_2q0 * m0->AccY - p0->_4q1 + p0->_8q1 * p0->q1q1 + p0->_8q1 * p0->q2q2 + p0->_4q1 * m0->AccZ;
 8003c72:	ee77 7aea 	vsub.f32	s15, s15, s21
        p0->s2 = 4.0f * p0->q0q0 * p0->q2 + p0->_2q0 * m0->AccX + p0->_4q2 * p0->q3q3 - p0->_2q3 * m0->AccY - p0->_4q2 + p0->_8q2 * p0->q1q1 + p0->_8q2 * p0->q2q2 + p0->_4q2 * m0->AccZ;
 8003c76:	eea5 7a29 	vfma.f32	s14, s10, s19
        p0->s1 = p0->_4q1 * p0->q3q3 - p0->_2q3 * m0->AccX + 4.0f * p0->q0q0 * p0->q1 - p0->_2q0 * m0->AccY - p0->_4q1 + p0->_8q1 * p0->q1q1 + p0->_8q1 * p0->q2q2 + p0->_4q1 * m0->AccZ;
 8003c7a:	eeeb 7a22 	vfma.f32	s15, s22, s5
        p0->_8q2 = 8.0f * p0->q2;
 8003c7e:	ee20 1a81 	vmul.f32	s2, s1, s2
        p0->s2 = 4.0f * p0->q0q0 * p0->q2 + p0->_2q0 * m0->AccX + p0->_4q2 * p0->q3q3 - p0->_2q3 * m0->AccY - p0->_4q2 + p0->_8q2 * p0->q1q1 + p0->_8q2 * p0->q2q2 + p0->_4q2 * m0->AccZ;
 8003c82:	ee37 7a61 	vsub.f32	s14, s14, s3
        p0->s1 = p0->_4q1 * p0->q3q3 - p0->_2q3 * m0->AccX + 4.0f * p0->q0q0 * p0->q1 - p0->_2q0 * m0->AccY - p0->_4q1 + p0->_8q1 * p0->q1q1 + p0->_8q1 * p0->q2q2 + p0->_4q1 * m0->AccZ;
 8003c86:	eeeb 7a24 	vfma.f32	s15, s22, s9
        p0->s2 = 4.0f * p0->q0q0 * p0->q2 + p0->_2q0 * m0->AccX + p0->_4q2 * p0->q3q3 - p0->_2q3 * m0->AccY - p0->_4q2 + p0->_8q2 * p0->q1q1 + p0->_8q2 * p0->q2q2 + p0->_4q2 * m0->AccZ;
 8003c8a:	eea1 7a22 	vfma.f32	s14, s2, s5
        p0->_2q1 = 2.0f * p0->q1;
 8003c8e:	ee79 6a09 	vadd.f32	s13, s18, s18
        p0->s1 = p0->_4q1 * p0->q3q3 - p0->_2q3 * m0->AccX + 4.0f * p0->q0q0 * p0->q1 - p0->_2q0 * m0->AccY - p0->_4q1 + p0->_8q1 * p0->q1q1 + p0->_8q1 * p0->q2q2 + p0->_4q1 * m0->AccZ;
 8003c92:	eee0 7a2a 	vfma.f32	s15, s0, s21
        p0->s0 = p0->_4q0 * p0->q2q2 + p0->_2q2 * m0->AccX + p0->_4q0 * p0->q1q1 - p0->_2q1 * m0->AccY;
 8003c96:	eee5 5a26 	vfma.f32	s11, s10, s13
        p0->s2 = 4.0f * p0->q0q0 * p0->q2 + p0->_2q0 * m0->AccX + p0->_4q2 * p0->q3q3 - p0->_2q3 * m0->AccY - p0->_4q2 + p0->_8q2 * p0->q1q1 + p0->_8q2 * p0->q2q2 + p0->_4q2 * m0->AccZ;
 8003c9a:	eea1 7a24 	vfma.f32	s14, s2, s9
        p0->_2q1 = 2.0f * p0->q1;
 8003c9e:	edc4 6a0e 	vstr	s13, [r4, #56]	; 0x38
        p0->q1q1 = p0->q1 * p0->q1;
 8003ca2:	edc4 2a17 	vstr	s5, [r4, #92]	; 0x5c
        p0->s3 = 4.0f * p0->q1q1 * p0->q3 - p0->_2q1 * m0->AccX + 4.0f * p0->q2q2 * p0->q3 - p0->_2q2 * m0->AccY;
 8003ca6:	ee66 6ac2 	vnmul.f32	s13, s13, s4
 8003caa:	ee62 2a83 	vmul.f32	s5, s5, s6
        p0->s2 = 4.0f * p0->q0q0 * p0->q2 + p0->_2q0 * m0->AccX + p0->_4q2 * p0->q3q3 - p0->_2q3 * m0->AccY - p0->_4q2 + p0->_8q2 * p0->q1q1 + p0->_8q2 * p0->q2q2 + p0->_4q2 * m0->AccZ;
 8003cae:	eea0 7a21 	vfma.f32	s14, s0, s3
        p0->s3 = 4.0f * p0->q1q1 * p0->q3 - p0->_2q1 * m0->AccX + 4.0f * p0->q2q2 * p0->q3 - p0->_2q2 * m0->AccY;
 8003cb2:	eee3 6aa2 	vfma.f32	s13, s7, s5
        p0->recipNorm = invSqrt(p0->s0 * p0->s0 + p0->s1 * p0->s1 + p0->s2 * p0->s2 + p0->s3 * p0->s3); // normalise step magnitude
 8003cb6:	ee27 0aa7 	vmul.f32	s0, s15, s15
        p0->q2q2 = p0->q2 * p0->q2;
 8003cba:	edc4 4a18 	vstr	s9, [r4, #96]	; 0x60
        p0->s3 = 4.0f * p0->q1q1 * p0->q3 - p0->_2q1 * m0->AccX + 4.0f * p0->q2q2 * p0->q3 - p0->_2q2 * m0->AccY;
 8003cbe:	ee64 4a83 	vmul.f32	s9, s9, s6
        p0->recipNorm = invSqrt(p0->s0 * p0->s0 + p0->s1 * p0->s1 + p0->s2 * p0->s2 + p0->s3 * p0->s3); // normalise step magnitude
 8003cc2:	eea5 0aa5 	vfma.f32	s0, s11, s11
        p0->s3 = 4.0f * p0->q1q1 * p0->q3 - p0->_2q1 * m0->AccX + 4.0f * p0->q2q2 * p0->q3 - p0->_2q2 * m0->AccY;
 8003cc6:	eee3 6aa4 	vfma.f32	s13, s7, s9
        p0->recipNorm = invSqrt(p0->s0 * p0->s0 + p0->s1 * p0->s1 + p0->s2 * p0->s2 + p0->s3 * p0->s3); // normalise step magnitude
 8003cca:	eea7 0a07 	vfma.f32	s0, s14, s14
        p0->s3 = 4.0f * p0->q1q1 * p0->q3 - p0->_2q1 * m0->AccX + 4.0f * p0->q2q2 * p0->q3 - p0->_2q2 * m0->AccY;
 8003cce:	eee5 6a04 	vfma.f32	s13, s10, s8
        p0->s1 = p0->_4q1 * p0->q3q3 - p0->_2q3 * m0->AccX + 4.0f * p0->q0q0 * p0->q1 - p0->_2q0 * m0->AccY - p0->_4q1 + p0->_8q1 * p0->q1q1 + p0->_8q1 * p0->q2q2 + p0->_4q1 * m0->AccZ;
 8003cd2:	edc4 7a06 	vstr	s15, [r4, #24]
        p0->s2 = 4.0f * p0->q0q0 * p0->q2 + p0->_2q0 * m0->AccX + p0->_4q2 * p0->q3q3 - p0->_2q3 * m0->AccY - p0->_4q2 + p0->_8q2 * p0->q1q1 + p0->_8q2 * p0->q2q2 + p0->_4q2 * m0->AccZ;
 8003cd6:	ed84 7a07 	vstr	s14, [r4, #28]
        p0->s3 = 4.0f * p0->q1q1 * p0->q3 - p0->_2q1 * m0->AccX + 4.0f * p0->q2q2 * p0->q3 - p0->_2q2 * m0->AccY;
 8003cda:	edc4 6a08 	vstr	s13, [r4, #32]
        p0->recipNorm = invSqrt(p0->s0 * p0->s0 + p0->s1 * p0->s1 + p0->s2 * p0->s2 + p0->s3 * p0->s3); // normalise step magnitude
 8003cde:	eea6 0aa6 	vfma.f32	s0, s13, s13
        p0->_2q2 = 2.0f * p0->q2;
 8003ce2:	ed84 4a0f 	vstr	s8, [r4, #60]	; 0x3c
        p0->_2q3 = 2.0f * p0->q3;
 8003ce6:	edc4 9a10 	vstr	s19, [r4, #64]	; 0x40
        p0->_4q1 = 4.0f * p0->q1;
 8003cea:	edc4 aa12 	vstr	s21, [r4, #72]	; 0x48
        p0->_4q2 = 4.0f * p0->q2;
 8003cee:	edc4 1a13 	vstr	s3, [r4, #76]	; 0x4c
        p0->_8q1 = 8.0f * p0->q1;
 8003cf2:	ed84 ba14 	vstr	s22, [r4, #80]	; 0x50
        p0->_8q2 = 8.0f * p0->q2;
 8003cf6:	ed84 1a15 	vstr	s2, [r4, #84]	; 0x54
        p0->q3q3 = p0->q3 * p0->q3;
 8003cfa:	ed84 aa19 	vstr	s20, [r4, #100]	; 0x64
        p0->s0 = p0->_4q0 * p0->q2q2 + p0->_2q2 * m0->AccX + p0->_4q0 * p0->q1q1 - p0->_2q1 * m0->AccY;
 8003cfe:	edc4 5a05 	vstr	s11, [r4, #20]
        p0->recipNorm = invSqrt(p0->s0 * p0->s0 + p0->s1 * p0->s1 + p0->s2 * p0->s2 + p0->s3 * p0->s3); // normalise step magnitude
 8003d02:	f7ff fee3 	bl	8003acc <invSqrt>
        p0->s0 *= p0->recipNorm;
        p0->s1 *= p0->recipNorm;
        p0->s2 *= p0->recipNorm;
        p0->s3 *= p0->recipNorm;
 8003d06:	ed94 6a08 	vldr	s12, [r4, #32]
        p0->s0 *= p0->recipNorm;
 8003d0a:	edd4 6a05 	vldr	s13, [r4, #20]
        p0->s1 *= p0->recipNorm;
 8003d0e:	ed94 7a06 	vldr	s14, [r4, #24]
        p0->s2 *= p0->recipNorm;
 8003d12:	edd4 7a07 	vldr	s15, [r4, #28]
        p0->recipNorm = invSqrt(p0->s0 * p0->s0 + p0->s1 * p0->s1 + p0->s2 * p0->s2 + p0->s3 * p0->s3); // normalise step magnitude
 8003d16:	ed84 0a00 	vstr	s0, [r4]
        p0->s0 *= p0->recipNorm;
 8003d1a:	ee60 6a26 	vmul.f32	s13, s0, s13
        p0->s1 *= p0->recipNorm;
 8003d1e:	ee20 7a07 	vmul.f32	s14, s0, s14
        p0->s2 *= p0->recipNorm;
 8003d22:	ee60 7a27 	vmul.f32	s15, s0, s15
        p0->s3 *= p0->recipNorm;
 8003d26:	ee20 0a06 	vmul.f32	s0, s0, s12

        // Apply feedback step
        p0->qDot1 -= beta0 * p0->s0;
 8003d2a:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
        p0->s0 *= p0->recipNorm;
 8003d2e:	edc4 6a05 	vstr	s13, [r4, #20]
        p0->qDot1 -= beta0 * p0->s0;
 8003d32:	eea6 6ac8 	vfms.f32	s12, s13, s16
        p0->qDot2 -= beta0 * p0->s1;
 8003d36:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
        p0->s1 *= p0->recipNorm;
 8003d3a:	ed84 7a06 	vstr	s14, [r4, #24]
        p0->qDot2 -= beta0 * p0->s1;
 8003d3e:	eee7 6a48 	vfms.f32	s13, s14, s16
        p0->qDot3 -= beta0 * p0->s2;
 8003d42:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
        p0->s2 *= p0->recipNorm;
 8003d46:	edc4 7a07 	vstr	s15, [r4, #28]
        p0->qDot3 -= beta0 * p0->s2;
 8003d4a:	eea7 7ac8 	vfms.f32	s14, s15, s16
        p0->qDot4 -= beta0 * p0->s3;
 8003d4e:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
        p0->s3 *= p0->recipNorm;
 8003d52:	ed84 0a08 	vstr	s0, [r4, #32]
        p0->qDot4 -= beta0 * p0->s3;
 8003d56:	eee0 7a48 	vfms.f32	s15, s0, s16
        p0->qDot1 -= beta0 * p0->s0;
 8003d5a:	ed84 6a09 	vstr	s12, [r4, #36]	; 0x24
        p0->qDot2 -= beta0 * p0->s1;
 8003d5e:	edc4 6a0a 	vstr	s13, [r4, #40]	; 0x28
        p0->qDot3 -= beta0 * p0->s2;
 8003d62:	ed84 7a0b 	vstr	s14, [r4, #44]	; 0x2c
        p0->qDot4 -= beta0 * p0->s3;
 8003d66:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
    }

    // Integrate rate of change of quaternion to yield quaternion
    p0->q0 += p0->qDot1 * (1.0f / sampleFreq);
 8003d6a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8003d6e:	ee87 6aa8 	vdiv.f32	s12, s15, s17
 8003d72:	edd4 6a01 	vldr	s13, [r4, #4]
 8003d76:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
    p0->q1 += p0->qDot2 * (1.0f / sampleFreq);
 8003d7a:	ed94 0a02 	vldr	s0, [r4, #8]
    p0->q2 += p0->qDot3 * (1.0f / sampleFreq);
 8003d7e:	ed94 7a03 	vldr	s14, [r4, #12]
    p0->q3 += p0->qDot4 * (1.0f / sampleFreq);
 8003d82:	edd4 5a0c 	vldr	s11, [r4, #48]	; 0x30
    p0->q0 += p0->qDot1 * (1.0f / sampleFreq);
 8003d86:	eee7 6a86 	vfma.f32	s13, s15, s12
    p0->q1 += p0->qDot2 * (1.0f / sampleFreq);
 8003d8a:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
    p0->q0 += p0->qDot1 * (1.0f / sampleFreq);
 8003d8e:	edc4 6a01 	vstr	s13, [r4, #4]
    p0->q1 += p0->qDot2 * (1.0f / sampleFreq);
 8003d92:	eea6 0a27 	vfma.f32	s0, s12, s15
    p0->q2 += p0->qDot3 * (1.0f / sampleFreq);
 8003d96:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
    p0->q1 += p0->qDot2 * (1.0f / sampleFreq);
 8003d9a:	ed84 0a02 	vstr	s0, [r4, #8]

    // Normalise quaternion
    p0->recipNorm = invSqrt(p0->q0 * p0->q0 + p0->q1 * p0->q1 + p0->q2 * p0->q2 + p0->q3 * p0->q3);
 8003d9e:	ee20 0a00 	vmul.f32	s0, s0, s0
    p0->q2 += p0->qDot3 * (1.0f / sampleFreq);
 8003da2:	eea6 7a27 	vfma.f32	s14, s12, s15
    p0->recipNorm = invSqrt(p0->q0 * p0->q0 + p0->q1 * p0->q1 + p0->q2 * p0->q2 + p0->q3 * p0->q3);
 8003da6:	eea6 0aa6 	vfma.f32	s0, s13, s13
    p0->q3 += p0->qDot4 * (1.0f / sampleFreq);
 8003daa:	edd4 7a04 	vldr	s15, [r4, #16]
    p0->q2 += p0->qDot3 * (1.0f / sampleFreq);
 8003dae:	ed84 7a03 	vstr	s14, [r4, #12]
    p0->q3 += p0->qDot4 * (1.0f / sampleFreq);
 8003db2:	eee6 7a25 	vfma.f32	s15, s12, s11
    p0->recipNorm = invSqrt(p0->q0 * p0->q0 + p0->q1 * p0->q1 + p0->q2 * p0->q2 + p0->q3 * p0->q3);
 8003db6:	eea7 0a07 	vfma.f32	s0, s14, s14
    p0->q3 += p0->qDot4 * (1.0f / sampleFreq);
 8003dba:	edc4 7a04 	vstr	s15, [r4, #16]
    p0->recipNorm = invSqrt(p0->q0 * p0->q0 + p0->q1 * p0->q1 + p0->q2 * p0->q2 + p0->q3 * p0->q3);
 8003dbe:	eea7 0aa7 	vfma.f32	s0, s15, s15
 8003dc2:	f7ff fe83 	bl	8003acc <invSqrt>

    p0->q0 *= p0->recipNorm;
    p0->q1 *= p0->recipNorm;
 8003dc6:	edd4 8a02 	vldr	s17, [r4, #8]
    p0->q2 *= p0->recipNorm;
    p0->q3 *= p0->recipNorm;
 8003dca:	ed94 8a04 	vldr	s16, [r4, #16]
    p0->q0 *= p0->recipNorm;
 8003dce:	edd4 9a01 	vldr	s19, [r4, #4]
    p0->recipNorm = invSqrt(p0->q0 * p0->q0 + p0->q1 * p0->q1 + p0->q2 * p0->q2 + p0->q3 * p0->q3);
 8003dd2:	ed84 0a00 	vstr	s0, [r4]
    p0->q1 *= p0->recipNorm;
 8003dd6:	ee20 9a28 	vmul.f32	s18, s0, s17
    p0->q2 *= p0->recipNorm;
 8003dda:	edd4 8a03 	vldr	s17, [r4, #12]
    p0->q1 *= p0->recipNorm;
 8003dde:	ed84 9a02 	vstr	s18, [r4, #8]
    p0->q3 *= p0->recipNorm;
 8003de2:	ee20 8a08 	vmul.f32	s16, s0, s16
    p0->q2 *= p0->recipNorm;
 8003de6:	ee60 8a28 	vmul.f32	s17, s0, s17
    p0->q0 *= p0->recipNorm;
 8003dea:	ee60 9a29 	vmul.f32	s19, s0, s19

    // chuyen sang RPY
    rpy0->sinR = 2.0*((double)(p0->q0*p0->q1 + p0->q2*p0->q3 ));
 8003dee:	ee68 7a88 	vmul.f32	s15, s17, s16
    p0->q2 *= p0->recipNorm;
 8003df2:	edc4 8a03 	vstr	s17, [r4, #12]
    rpy0->sinR = 2.0*((double)(p0->q0*p0->q1 + p0->q2*p0->q3 ));
 8003df6:	eee9 7a89 	vfma.f32	s15, s19, s18
    p0->q0 *= p0->recipNorm;
 8003dfa:	edc4 9a01 	vstr	s19, [r4, #4]
    rpy0->sinR = 2.0*((double)(p0->q0*p0->q1 + p0->q2*p0->q3 ));
 8003dfe:	ee17 0a90 	vmov	r0, s15
    p0->q3 *= p0->recipNorm;
 8003e02:	ed84 8a04 	vstr	s16, [r4, #16]
    rpy0->sinR = 2.0*((double)(p0->q0*p0->q1 + p0->q2*p0->q3 ));
 8003e06:	f7fc fb43 	bl	8000490 <__aeabi_f2d>
    rpy0->cosR = 1- 2*((double)(p0->q1*p0->q1 + p0->q2*p0->q2));
 8003e0a:	ee28 aaa8 	vmul.f32	s20, s17, s17
    rpy0->sinR = 2.0*((double)(p0->q0*p0->q1 + p0->q2*p0->q3 ));
 8003e0e:	4602      	mov	r2, r0
 8003e10:	460b      	mov	r3, r1
 8003e12:	f7fc f9df 	bl	80001d4 <__adddf3>
    rpy0->cosR = 1- 2*((double)(p0->q1*p0->q1 + p0->q2*p0->q2));
 8003e16:	eef0 7a4a 	vmov.f32	s15, s20
 8003e1a:	eee9 7a09 	vfma.f32	s15, s18, s18
    rpy0->sinR = 2.0*((double)(p0->q0*p0->q1 + p0->q2*p0->q3 ));
 8003e1e:	e9c6 0106 	strd	r0, r1, [r6, #24]
 8003e22:	e9cd 0102 	strd	r0, r1, [sp, #8]
    rpy0->cosR = 1- 2*((double)(p0->q1*p0->q1 + p0->q2*p0->q2));
 8003e26:	ee17 0a90 	vmov	r0, s15
 8003e2a:	f7fc fb31 	bl	8000490 <__aeabi_f2d>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	460b      	mov	r3, r1
 8003e32:	f7fc f9cf 	bl	80001d4 <__adddf3>
 8003e36:	4602      	mov	r2, r0
 8003e38:	460b      	mov	r3, r1
 8003e3a:	2000      	movs	r0, #0
 8003e3c:	4934      	ldr	r1, [pc, #208]	; (8003f10 <MPU6050_filter+0x408>)
 8003e3e:	f7fc f9c7 	bl	80001d0 <__aeabi_dsub>

    rpy0->sinP = 2*((double)(p0->q0*p0->q2 - p0->q1*p0->q3));
 8003e42:	ee68 7a49 	vnmul.f32	s15, s16, s18
    rpy0->cosR = 1- 2*((double)(p0->q1*p0->q1 + p0->q2*p0->q2));
 8003e46:	e9c6 0108 	strd	r0, r1, [r6, #32]
    rpy0->sinP = 2*((double)(p0->q0*p0->q2 - p0->q1*p0->q3));
 8003e4a:	eee9 7aa8 	vfma.f32	s15, s19, s17
    rpy0->cosR = 1- 2*((double)(p0->q1*p0->q1 + p0->q2*p0->q2));
 8003e4e:	e9cd 0100 	strd	r0, r1, [sp]
    rpy0->sinP = 2*((double)(p0->q0*p0->q2 - p0->q1*p0->q3));
 8003e52:	ee17 0a90 	vmov	r0, s15
 8003e56:	f7fc fb1b 	bl	8000490 <__aeabi_f2d>

    rpy0->sinY = 2*((double)(p0->q0*p0->q3 - p0->q1*p0->q2));
 8003e5a:	ee68 8ac9 	vnmul.f32	s17, s17, s18
    rpy0->sinP = 2*((double)(p0->q0*p0->q2 - p0->q1*p0->q3));
 8003e5e:	4602      	mov	r2, r0
 8003e60:	460b      	mov	r3, r1
    rpy0->sinY = 2*((double)(p0->q0*p0->q3 - p0->q1*p0->q2));
 8003e62:	eee9 8a88 	vfma.f32	s17, s19, s16
    rpy0->sinP = 2*((double)(p0->q0*p0->q2 - p0->q1*p0->q3));
 8003e66:	f7fc f9b5 	bl	80001d4 <__adddf3>
 8003e6a:	e9c6 010a 	strd	r0, r1, [r6, #40]	; 0x28
    rpy0->sinY = 2*((double)(p0->q0*p0->q3 - p0->q1*p0->q2));
 8003e6e:	ee18 0a90 	vmov	r0, s17
 8003e72:	f7fc fb0d 	bl	8000490 <__aeabi_f2d>
    rpy0->cosY = 1- 2*((double)(p0->q2*p0->q2 + p0->q3*p0->q3));
 8003e76:	eea8 aa08 	vfma.f32	s20, s16, s16
    rpy0->sinY = 2*((double)(p0->q0*p0->q3 - p0->q1*p0->q2));
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	f7fc f9a9 	bl	80001d4 <__adddf3>
 8003e82:	e9c6 010e 	strd	r0, r1, [r6, #56]	; 0x38
    rpy0->cosY = 1- 2*((double)(p0->q2*p0->q2 + p0->q3*p0->q3));
 8003e86:	ee1a 0a10 	vmov	r0, s20
 8003e8a:	f7fc fb01 	bl	8000490 <__aeabi_f2d>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	460b      	mov	r3, r1
 8003e92:	f7fc f99f 	bl	80001d4 <__adddf3>
 8003e96:	4602      	mov	r2, r0
 8003e98:	460b      	mov	r3, r1
 8003e9a:	2000      	movs	r0, #0
 8003e9c:	491c      	ldr	r1, [pc, #112]	; (8003f10 <MPU6050_filter+0x408>)
 8003e9e:	f7fc f997 	bl	80001d0 <__aeabi_dsub>

/* CAN SUA LAI CHO NAY  */
    rpy0->R = atan2(rpy0->sinR,rpy0->cosR)*57.29578;
 8003ea2:	ed9d 1b00 	vldr	d1, [sp]
    rpy0->cosY = 1- 2*((double)(p0->q2*p0->q2 + p0->q3*p0->q3));
 8003ea6:	e9c6 010c 	strd	r0, r1, [r6, #48]	; 0x30
    rpy0->R = atan2(rpy0->sinR,rpy0->cosR)*57.29578;
 8003eaa:	ed9d 0b02 	vldr	d0, [sp, #8]
 8003eae:	f001 f8ff 	bl	80050b0 <atan2>
 8003eb2:	a315      	add	r3, pc, #84	; (adr r3, 8003f08 <MPU6050_filter+0x400>)
 8003eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb8:	ec51 0b10 	vmov	r0, r1, d0
 8003ebc:	f7fc fb3c 	bl	8000538 <__aeabi_dmul>
    rpy0->P = asin(rpy0->sinP)*57.29578;
 8003ec0:	ed96 0b0a 	vldr	d0, [r6, #40]	; 0x28
    rpy0->R = atan2(rpy0->sinR,rpy0->cosR)*57.29578;
 8003ec4:	e9c6 0100 	strd	r0, r1, [r6]
    rpy0->P = asin(rpy0->sinP)*57.29578;
 8003ec8:	f001 f89a 	bl	8005000 <asin>
 8003ecc:	a30e      	add	r3, pc, #56	; (adr r3, 8003f08 <MPU6050_filter+0x400>)
 8003ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed2:	ec51 0b10 	vmov	r0, r1, d0
 8003ed6:	f7fc fb2f 	bl	8000538 <__aeabi_dmul>
    rpy0->Y = atan2(rpy0->sinY,rpy0->cosY)*57.29578;
 8003eda:	ed96 1b0c 	vldr	d1, [r6, #48]	; 0x30
    rpy0->P = asin(rpy0->sinP)*57.29578;
 8003ede:	e9c6 0102 	strd	r0, r1, [r6, #8]
    rpy0->Y = atan2(rpy0->sinY,rpy0->cosY)*57.29578;
 8003ee2:	ed96 0b0e 	vldr	d0, [r6, #56]	; 0x38
 8003ee6:	f001 f8e3 	bl	80050b0 <atan2>
 8003eea:	a307      	add	r3, pc, #28	; (adr r3, 8003f08 <MPU6050_filter+0x400>)
 8003eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef0:	ec51 0b10 	vmov	r0, r1, d0
 8003ef4:	f7fc fb20 	bl	8000538 <__aeabi_dmul>
 8003ef8:	e9c6 0104 	strd	r0, r1, [r6, #16]
}
 8003efc:	b004      	add	sp, #16
 8003efe:	ecbd 8b08 	vpop	{d8-d11}
 8003f02:	bd70      	pop	{r4, r5, r6, pc}
 8003f04:	f3af 8000 	nop.w
 8003f08:	1e7967cb 	.word	0x1e7967cb
 8003f0c:	404ca5dc 	.word	0x404ca5dc
 8003f10:	3ff00000 	.word	0x3ff00000

08003f14 <i2cWrite>:
int flag = 1;
uint8_t buffer[2];        // buffer to transfer to i2c
HAL_StatusTypeDef status; // flag to check transaction complete
uint8_t ref[14];          // check data that have been read
void i2cWrite(I2C_HandleTypeDef *hi2c, uint16_t address, uint16_t reg, uint8_t *data, uint8_t data_length)
{
 8003f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f16:	b085      	sub	sp, #20
    status = HAL_OK;
    flag = 1;
    status = HAL_I2C_Mem_Write(hi2c, address, reg, I2C_MEMADD_SIZE_8BIT, data, data_length, 1000);
 8003f18:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
 8003f1c:	f8cd e008 	str.w	lr, [sp, #8]
 8003f20:	f89d e028 	ldrb.w	lr, [sp, #40]	; 0x28
    status = HAL_OK;
 8003f24:	4e07      	ldr	r6, [pc, #28]	; (8003f44 <i2cWrite+0x30>)
    flag = 1;
 8003f26:	4c08      	ldr	r4, [pc, #32]	; (8003f48 <i2cWrite+0x34>)
 8003f28:	2701      	movs	r7, #1
    status = HAL_I2C_Mem_Write(hi2c, address, reg, I2C_MEMADD_SIZE_8BIT, data, data_length, 1000);
 8003f2a:	e88d 4008 	stmia.w	sp, {r3, lr}
    status = HAL_OK;
 8003f2e:	2500      	movs	r5, #0
    status = HAL_I2C_Mem_Write(hi2c, address, reg, I2C_MEMADD_SIZE_8BIT, data, data_length, 1000);
 8003f30:	463b      	mov	r3, r7
    status = HAL_OK;
 8003f32:	7035      	strb	r5, [r6, #0]
    flag = 1;
 8003f34:	6027      	str	r7, [r4, #0]
    status = HAL_I2C_Mem_Write(hi2c, address, reg, I2C_MEMADD_SIZE_8BIT, data, data_length, 1000);
 8003f36:	f7fd fe8d 	bl	8001c54 <HAL_I2C_Mem_Write>
 8003f3a:	7030      	strb	r0, [r6, #0]
    if (status != HAL_OK)
 8003f3c:	b100      	cbz	r0, 8003f40 <i2cWrite+0x2c>
    {
        flag = 0;
 8003f3e:	6025      	str	r5, [r4, #0]
    }
}
 8003f40:	b005      	add	sp, #20
 8003f42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f44:	200000bc 	.word	0x200000bc
 8003f48:	20000008 	.word	0x20000008

08003f4c <i2cRead>:

void i2cRead(I2C_HandleTypeDef *hi2c, uint16_t address, uint16_t reg, uint8_t *data, uint8_t data_length)
{
 8003f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f4e:	b085      	sub	sp, #20
    status = HAL_OK;
    flag = 1;
    status = HAL_I2C_Mem_Read(hi2c, address, reg, I2C_MEMADD_SIZE_8BIT, data, data_length, 1000);
 8003f50:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
 8003f54:	f8cd e008 	str.w	lr, [sp, #8]
 8003f58:	f89d e028 	ldrb.w	lr, [sp, #40]	; 0x28
    status = HAL_OK;
 8003f5c:	4e07      	ldr	r6, [pc, #28]	; (8003f7c <i2cRead+0x30>)
    flag = 1;
 8003f5e:	4c08      	ldr	r4, [pc, #32]	; (8003f80 <i2cRead+0x34>)
 8003f60:	2701      	movs	r7, #1
    status = HAL_I2C_Mem_Read(hi2c, address, reg, I2C_MEMADD_SIZE_8BIT, data, data_length, 1000);
 8003f62:	e88d 4008 	stmia.w	sp, {r3, lr}
    status = HAL_OK;
 8003f66:	2500      	movs	r5, #0
    status = HAL_I2C_Mem_Read(hi2c, address, reg, I2C_MEMADD_SIZE_8BIT, data, data_length, 1000);
 8003f68:	463b      	mov	r3, r7
    status = HAL_OK;
 8003f6a:	7035      	strb	r5, [r6, #0]
    flag = 1;
 8003f6c:	6027      	str	r7, [r4, #0]
    status = HAL_I2C_Mem_Read(hi2c, address, reg, I2C_MEMADD_SIZE_8BIT, data, data_length, 1000);
 8003f6e:	f7fd ff07 	bl	8001d80 <HAL_I2C_Mem_Read>
 8003f72:	7030      	strb	r0, [r6, #0]
    if (status != HAL_OK)
 8003f74:	b100      	cbz	r0, 8003f78 <i2cRead+0x2c>
    {
        flag = 0;
 8003f76:	6025      	str	r5, [r4, #0]
    }
}
 8003f78:	b005      	add	sp, #20
 8003f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f7c:	200000bc 	.word	0x200000bc
 8003f80:	20000008 	.word	0x20000008

08003f84 <MPU6050_Init>:

void MPU6050_Init(I2C_HandleTypeDef *hi2c, MPU6050 *mpu, Acc_Set_Sense AccSensitivity, Gyro_Set_Sense GyroSensitivity)
{
 8003f84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f88:	461f      	mov	r7, r3
    iscalibrated = 0;
 8003f8a:	4b42      	ldr	r3, [pc, #264]	; (8004094 <MPU6050_Init+0x110>)
{
 8003f8c:	4690      	mov	r8, r2
    iscalibrated = 0;
 8003f8e:	2200      	movs	r2, #0
{
 8003f90:	4605      	mov	r5, r0
 8003f92:	460c      	mov	r4, r1
    iscalibrated = 0;
 8003f94:	601a      	str	r2, [r3, #0]
    uint8_t temp;
    while (HAL_I2C_IsDeviceReady(hi2c, MPU6050_ADDRESS, 1, 100));
 8003f96:	2364      	movs	r3, #100	; 0x64
 8003f98:	2201      	movs	r2, #1
 8003f9a:	21d0      	movs	r1, #208	; 0xd0
 8003f9c:	4628      	mov	r0, r5
 8003f9e:	f7fd ffff 	bl	8001fa0 <HAL_I2C_IsDeviceReady>
 8003fa2:	4682      	mov	sl, r0
 8003fa4:	2800      	cmp	r0, #0
 8003fa6:	d1f6      	bne.n	8003f96 <MPU6050_Init+0x12>
    i2cRead(hi2c, MPU6050_ADDRESS, MPU6050_WHO_AM_I, &temp, 1);
 8003fa8:	2601      	movs	r6, #1
    //while(temp==MPU6050_WHO_AM_I);
    buffer[0] = 0x00;
 8003faa:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 80040a8 <MPU6050_Init+0x124>
    i2cRead(hi2c, MPU6050_ADDRESS, MPU6050_WHO_AM_I, &temp, 1);
 8003fae:	9600      	str	r6, [sp, #0]
 8003fb0:	f10d 030f 	add.w	r3, sp, #15
 8003fb4:	2275      	movs	r2, #117	; 0x75
 8003fb6:	21d0      	movs	r1, #208	; 0xd0
 8003fb8:	4628      	mov	r0, r5
 8003fba:	f7ff ffc7 	bl	8003f4c <i2cRead>

    i2cWrite(hi2c, MPU6050_ADDRESS, MPU6050_PWR_MGMT_1, buffer, 1);
 8003fbe:	464b      	mov	r3, r9
 8003fc0:	226b      	movs	r2, #107	; 0x6b
 8003fc2:	21d0      	movs	r1, #208	; 0xd0
 8003fc4:	4628      	mov	r0, r5
 8003fc6:	9600      	str	r6, [sp, #0]
    buffer[0] = 0x00;
 8003fc8:	f889 a000 	strb.w	sl, [r9]
    i2cWrite(hi2c, MPU6050_ADDRESS, MPU6050_PWR_MGMT_1, buffer, 1);
 8003fcc:	f7ff ffa2 	bl	8003f14 <i2cWrite>
    //config samping rate
    buffer[0] = 0x01; //Set the sample rate to 1kHz - 1kHz/(1+0) = 1kHz
    buffer[1] = 0x03; // Disable FSYNC and set Gyro to 41kHz filtering and 1kHz sampling
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	f889 3001 	strb.w	r3, [r9, #1]
    i2cWrite(hi2c, MPU6050_ADDRESS, MPU6050_SMPLRT_DIV, buffer, 2);
 8003fd6:	2302      	movs	r3, #2
 8003fd8:	9300      	str	r3, [sp, #0]
 8003fda:	2219      	movs	r2, #25
 8003fdc:	464b      	mov	r3, r9
 8003fde:	21d0      	movs	r1, #208	; 0xd0
 8003fe0:	4628      	mov	r0, r5
    buffer[0] = 0x01; //Set the sample rate to 1kHz - 1kHz/(1+0) = 1kHz
 8003fe2:	f889 6000 	strb.w	r6, [r9]
    i2cWrite(hi2c, MPU6050_ADDRESS, MPU6050_SMPLRT_DIV, buffer, 2);
 8003fe6:	f7ff ff95 	bl	8003f14 <i2cWrite>

    // config accelerometer
    i2cRead(hi2c, MPU6050_ADDRESS, MPU6050_ACCEL_CONFIG, &temp, 1);
 8003fea:	f10d 030f 	add.w	r3, sp, #15
 8003fee:	221c      	movs	r2, #28
 8003ff0:	21d0      	movs	r1, #208	; 0xd0
 8003ff2:	4628      	mov	r0, r5
 8003ff4:	9600      	str	r6, [sp, #0]
 8003ff6:	f7ff ffa9 	bl	8003f4c <i2cRead>
    temp = (temp & 0xE7) | (uint8_t)AccSensitivity << 3;
 8003ffa:	f89d 300f 	ldrb.w	r3, [sp, #15]
    i2cWrite(hi2c, MPU6050_ADDRESS, MPU6050_ACCEL_CONFIG, &temp, 1);
 8003ffe:	9600      	str	r6, [sp, #0]
    temp = (temp & 0xE7) | (uint8_t)AccSensitivity << 3;
 8004000:	f023 0318 	bic.w	r3, r3, #24
 8004004:	ea43 03c8 	orr.w	r3, r3, r8, lsl #3
 8004008:	f88d 300f 	strb.w	r3, [sp, #15]
    i2cWrite(hi2c, MPU6050_ADDRESS, MPU6050_ACCEL_CONFIG, &temp, 1);
 800400c:	221c      	movs	r2, #28
 800400e:	f10d 030f 	add.w	r3, sp, #15
 8004012:	21d0      	movs	r1, #208	; 0xd0
 8004014:	4628      	mov	r0, r5
 8004016:	f7ff ff7d 	bl	8003f14 <i2cWrite>

    // config gyroscope
    i2cRead(hi2c, MPU6050_ADDRESS, MPU6050_GYRO_CONFIG, &temp, 1);
 800401a:	f10d 030f 	add.w	r3, sp, #15
 800401e:	221b      	movs	r2, #27
 8004020:	21d0      	movs	r1, #208	; 0xd0
 8004022:	4628      	mov	r0, r5
 8004024:	9600      	str	r6, [sp, #0]
 8004026:	f7ff ff91 	bl	8003f4c <i2cRead>
    temp = (temp & 0xE7) | (uint8_t)GyroSensitivity << 3;
 800402a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    i2cWrite(hi2c, MPU6050_ADDRESS, MPU6050_GYRO_CONFIG, &temp, 1);
 800402e:	9600      	str	r6, [sp, #0]
    temp = (temp & 0xE7) | (uint8_t)GyroSensitivity << 3;
 8004030:	f023 0318 	bic.w	r3, r3, #24
 8004034:	ea43 03c7 	orr.w	r3, r3, r7, lsl #3
 8004038:	f88d 300f 	strb.w	r3, [sp, #15]
    i2cWrite(hi2c, MPU6050_ADDRESS, MPU6050_GYRO_CONFIG, &temp, 1);
 800403c:	221b      	movs	r2, #27
 800403e:	f10d 030f 	add.w	r3, sp, #15
 8004042:	21d0      	movs	r1, #208	; 0xd0
 8004044:	4628      	mov	r0, r5
 8004046:	f7ff ff65 	bl	8003f14 <i2cWrite>
    switch (AccSensitivity)
 800404a:	f1b8 0f03 	cmp.w	r8, #3
 800404e:	d806      	bhi.n	800405e <MPU6050_Init+0xda>
 8004050:	e8df f008 	tbb	[pc, r8]
 8004054:	110e0b02 	.word	0x110e0b02
    {
    case Acc_2G:
        mpu->Acc_factor = (float)1 / MPU6050_ACCE_SENS_2;
 8004058:	f04f 5362 	mov.w	r3, #947912704	; 0x38800000
        break;
    case Acc_8G:
        mpu->Acc_factor = (float)1 / MPU6050_ACCE_SENS_8;
        break;
    case Acc_16G:
        mpu->Acc_factor = (float)1 / MPU6050_ACCE_SENS_16;
 800405c:	6063      	str	r3, [r4, #4]
    default:
        break;
    }

    switch (GyroSensitivity)
 800405e:	2f03      	cmp	r7, #3
 8004060:	d80e      	bhi.n	8004080 <MPU6050_Init+0xfc>
 8004062:	e8df f007 	tbb	[pc, r7]
 8004066:	100b      	.short	0x100b
 8004068:	1412      	.short	0x1412
        mpu->Acc_factor = (float)1 / MPU6050_ACCE_SENS_4;
 800406a:	f04f 5364 	mov.w	r3, #956301312	; 0x39000000
 800406e:	e7f5      	b.n	800405c <MPU6050_Init+0xd8>
        mpu->Acc_factor = (float)1 / MPU6050_ACCE_SENS_8;
 8004070:	f04f 5366 	mov.w	r3, #964689920	; 0x39800000
 8004074:	e7f2      	b.n	800405c <MPU6050_Init+0xd8>
        mpu->Acc_factor = (float)1 / MPU6050_ACCE_SENS_16;
 8004076:	f04f 5368 	mov.w	r3, #973078528	; 0x3a000000
 800407a:	e7ef      	b.n	800405c <MPU6050_Init+0xd8>
    {
    case Gyro_250s:
        mpu->Gyro_factor = (float)1 / MPU6050_GYRO_SENS_250;
 800407c:	4b06      	ldr	r3, [pc, #24]	; (8004098 <MPU6050_Init+0x114>)
        break;
    case Gyro_1000s:
        mpu->Gyro_factor = (float)1 / MPU6050_GYRO_SENS_1000;
        break;
    case Gyro_2000s:
        mpu->Gyro_factor = (float)1 / MPU6050_GYRO_SENS_2000;
 800407e:	6023      	str	r3, [r4, #0]
    default:
        break;
    }
}
 8004080:	b004      	add	sp, #16
 8004082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        mpu->Gyro_factor = (float)1 / MPU6050_GYRO_SENS_500;
 8004086:	4b05      	ldr	r3, [pc, #20]	; (800409c <MPU6050_Init+0x118>)
 8004088:	e7f9      	b.n	800407e <MPU6050_Init+0xfa>
        mpu->Gyro_factor = (float)1 / MPU6050_GYRO_SENS_1000;
 800408a:	4b05      	ldr	r3, [pc, #20]	; (80040a0 <MPU6050_Init+0x11c>)
 800408c:	e7f7      	b.n	800407e <MPU6050_Init+0xfa>
        mpu->Gyro_factor = (float)1 / MPU6050_GYRO_SENS_2000;
 800408e:	4b05      	ldr	r3, [pc, #20]	; (80040a4 <MPU6050_Init+0x120>)
 8004090:	e7f5      	b.n	800407e <MPU6050_Init+0xfa>
 8004092:	bf00      	nop
 8004094:	200000a0 	.word	0x200000a0
 8004098:	3bf9ffff 	.word	0x3bf9ffff
 800409c:	3c79ffff 	.word	0x3c79ffff
 80040a0:	3cf9ffff 	.word	0x3cf9ffff
 80040a4:	3d79ffff 	.word	0x3d79ffff
 80040a8:	200000ba 	.word	0x200000ba

080040ac <MPU6050_ReadRawAll>:
    mpu->GyroY_raw = (int32_t)(data[2] << 8 | data[3]);
    mpu->GyroZ_raw = (int32_t)(data[4] << 8 | data[5]);
}

void MPU6050_ReadRawAll(I2C_HandleTypeDef *hi2c, MPU6050 *mpu)
{
 80040ac:	b530      	push	{r4, r5, lr}
 80040ae:	b087      	sub	sp, #28
    uint8_t data[14];
    int16_t temp;

    i2cRead(hi2c, MPU6050_ADDRESS, MPU6050_ACCEL_XOUT_H, data, 14);
 80040b0:	230e      	movs	r3, #14
{
 80040b2:	460c      	mov	r4, r1
    i2cRead(hi2c, MPU6050_ADDRESS, MPU6050_ACCEL_XOUT_H, data, 14);
 80040b4:	9300      	str	r3, [sp, #0]
 80040b6:	223b      	movs	r2, #59	; 0x3b
 80040b8:	ab02      	add	r3, sp, #8
 80040ba:	21d0      	movs	r1, #208	; 0xd0
 80040bc:	f7ff ff46 	bl	8003f4c <i2cRead>
    mpu->AccX_raw = ((int32_t)(data[0] << 8 | data[1]));
 80040c0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    //	mpu->temperature = (float)((float)((int16_t)temp) / (float)340.0 + (float)36.53);
    /* Format gyroscope data */
    mpu->GyroX_raw = ((int32_t)(data[8] << 8 | data[9]));
    mpu->GyroY_raw = ((int32_t)(data[10] << 8 | data[11]));
    mpu->GyroZ_raw = ((int32_t)(data[12] << 8 | data[13]));
    memcpy(&ref, &data, 14);
 80040c4:	4a16      	ldr	r2, [pc, #88]	; (8004120 <MPU6050_ReadRawAll+0x74>)
    mpu->AccX_raw = ((int32_t)(data[0] << 8 | data[1]));
 80040c6:	ba5b      	rev16	r3, r3
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	60a3      	str	r3, [r4, #8]
    mpu->AccY_raw = ((int32_t)(data[2] << 8 | data[3]));
 80040cc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80040d0:	ba5b      	rev16	r3, r3
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	60e3      	str	r3, [r4, #12]
    mpu->AccZ_raw = ((int32_t)(data[4] << 8 | data[5]));
 80040d6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80040da:	ba5b      	rev16	r3, r3
 80040dc:	b29b      	uxth	r3, r3
 80040de:	6123      	str	r3, [r4, #16]
    mpu->GyroX_raw = ((int32_t)(data[8] << 8 | data[9]));
 80040e0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80040e4:	ba5b      	rev16	r3, r3
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	6223      	str	r3, [r4, #32]
    mpu->GyroY_raw = ((int32_t)(data[10] << 8 | data[11]));
 80040ea:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80040ee:	ba5b      	rev16	r3, r3
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	6263      	str	r3, [r4, #36]	; 0x24
    mpu->GyroZ_raw = ((int32_t)(data[12] << 8 | data[13]));
 80040f4:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80040f8:	ba5b      	rev16	r3, r3
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	62a3      	str	r3, [r4, #40]	; 0x28
    memcpy(&ref, &data, 14);
 80040fe:	ad04      	add	r5, sp, #16
 8004100:	ab02      	add	r3, sp, #8
 8004102:	461c      	mov	r4, r3
 8004104:	cc03      	ldmia	r4!, {r0, r1}
 8004106:	42ac      	cmp	r4, r5
 8004108:	6010      	str	r0, [r2, #0]
 800410a:	6051      	str	r1, [r2, #4]
 800410c:	4623      	mov	r3, r4
 800410e:	f102 0208 	add.w	r2, r2, #8
 8004112:	d1f6      	bne.n	8004102 <MPU6050_ReadRawAll+0x56>
 8004114:	6820      	ldr	r0, [r4, #0]
 8004116:	6010      	str	r0, [r2, #0]
 8004118:	88a3      	ldrh	r3, [r4, #4]
 800411a:	8093      	strh	r3, [r2, #4]
}
 800411c:	b007      	add	sp, #28
 800411e:	bd30      	pop	{r4, r5, pc}
 8004120:	200000ac 	.word	0x200000ac

08004124 <MPU6050_ReadNormAll>:

// calculate offset of imu
void MPU6050_ReadNormAll(I2C_HandleTypeDef *hi2c, MPU6050 *mpu)
{
 8004124:	b510      	push	{r4, lr}
 8004126:	460c      	mov	r4, r1
    MPU6050_ReadRawAll(hi2c, mpu);
 8004128:	f7ff ffc0 	bl	80040ac <MPU6050_ReadRawAll>
    mpu->GyroX = (float)mpu->GyroX_raw * mpu->Gyro_factor - Gyro_offset[0] * iscalibrated * mpu->Gyro_factor;
 800412c:	4a26      	ldr	r2, [pc, #152]	; (80041c8 <MPU6050_ReadNormAll+0xa4>)
 800412e:	4b27      	ldr	r3, [pc, #156]	; (80041cc <MPU6050_ReadNormAll+0xa8>)
 8004130:	edd2 7a00 	vldr	s15, [r2]
 8004134:	ed93 7a00 	vldr	s14, [r3]
 8004138:	edd4 6a00 	vldr	s13, [r4]
 800413c:	ed94 6a08 	vldr	s12, [r4, #32]
 8004140:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004144:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8004148:	ee27 7a27 	vmul.f32	s14, s14, s15
 800414c:	ee26 7ac7 	vnmul.f32	s14, s13, s14
 8004150:	eea6 7a26 	vfma.f32	s14, s12, s13
    mpu->GyroY = (float)mpu->GyroY_raw * mpu->Gyro_factor - Gyro_offset[1] * iscalibrated * mpu->Gyro_factor;
 8004154:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
    mpu->GyroX = (float)mpu->GyroX_raw * mpu->Gyro_factor - Gyro_offset[0] * iscalibrated * mpu->Gyro_factor;
 8004158:	ed84 7a0b 	vstr	s14, [r4, #44]	; 0x2c
    mpu->GyroY = (float)mpu->GyroY_raw * mpu->Gyro_factor - Gyro_offset[1] * iscalibrated * mpu->Gyro_factor;
 800415c:	ed93 7a01 	vldr	s14, [r3, #4]
 8004160:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004164:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8004168:	ee26 7ac7 	vnmul.f32	s14, s13, s14
 800416c:	eea6 7a86 	vfma.f32	s14, s13, s12
 8004170:	ed84 7a0c 	vstr	s14, [r4, #48]	; 0x30
    mpu->GyroZ = (float)mpu->GyroZ_raw * mpu->Gyro_factor - Gyro_offset[2] * iscalibrated * mpu->Gyro_factor;
 8004174:	ed93 7a02 	vldr	s14, [r3, #8]
 8004178:	ee67 7a87 	vmul.f32	s15, s15, s14
 800417c:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8004180:	ee66 7ae7 	vnmul.f32	s15, s13, s15
 8004184:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004188:	eee6 7a87 	vfma.f32	s15, s13, s14
    mpu->AccX = (float)mpu->AccX_raw * mpu->Acc_factor;
 800418c:	edd4 6a01 	vldr	s13, [r4, #4]
    mpu->GyroZ = (float)mpu->GyroZ_raw * mpu->Gyro_factor - Gyro_offset[2] * iscalibrated * mpu->Gyro_factor;
 8004190:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
    mpu->AccX = (float)mpu->AccX_raw * mpu->Acc_factor;
 8004194:	edd4 7a02 	vldr	s15, [r4, #8]
 8004198:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    mpu->AccY = (float)mpu->AccY_raw * mpu->Acc_factor;
 800419c:	edd4 7a03 	vldr	s15, [r4, #12]
    mpu->AccX = (float)mpu->AccX_raw * mpu->Acc_factor;
 80041a0:	ee27 7a26 	vmul.f32	s14, s14, s13
 80041a4:	ed84 7a05 	vstr	s14, [r4, #20]
    mpu->AccY = (float)mpu->AccY_raw * mpu->Acc_factor;
 80041a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    mpu->AccZ = (float)mpu->AccZ_raw * mpu->Acc_factor;
 80041ac:	edd4 7a04 	vldr	s15, [r4, #16]
 80041b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    mpu->AccY = (float)mpu->AccY_raw * mpu->Acc_factor;
 80041b4:	ee27 7a26 	vmul.f32	s14, s14, s13
    mpu->AccZ = (float)mpu->AccZ_raw * mpu->Acc_factor;
 80041b8:	ee67 7aa6 	vmul.f32	s15, s15, s13
    mpu->AccY = (float)mpu->AccY_raw * mpu->Acc_factor;
 80041bc:	ed84 7a06 	vstr	s14, [r4, #24]
    mpu->AccZ = (float)mpu->AccZ_raw * mpu->Acc_factor;
 80041c0:	edc4 7a07 	vstr	s15, [r4, #28]
 80041c4:	bd10      	pop	{r4, pc}
 80041c6:	bf00      	nop
 80041c8:	200000a0 	.word	0x200000a0
 80041cc:	20000094 	.word	0x20000094

080041d0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80041d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
 80041d2:	4813      	ldr	r0, [pc, #76]	; (8004220 <MX_ADC1_Init+0x50>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80041d4:	4b13      	ldr	r3, [pc, #76]	; (8004224 <MX_ADC1_Init+0x54>)
 80041d6:	2400      	movs	r4, #0
 80041d8:	e880 0018 	stmia.w	r0, {r3, r4}
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80041dc:	4b12      	ldr	r3, [pc, #72]	; (8004228 <MX_ADC1_Init+0x58>)
 80041de:	6283      	str	r3, [r0, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
 80041e0:	2301      	movs	r3, #1
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80041e2:	6084      	str	r4, [r0, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80041e4:	6104      	str	r4, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80041e6:	6184      	str	r4, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80041e8:	6204      	str	r4, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80041ea:	62c4      	str	r4, [r0, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80041ec:	60c4      	str	r4, [r0, #12]
  hadc1.Init.NbrOfConversion = 1;
 80041ee:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80041f0:	6304      	str	r4, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80041f2:	6143      	str	r3, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80041f4:	f7fc fe64 	bl	8000ec0 <HAL_ADC_Init>
 80041f8:	b118      	cbz	r0, 8004202 <MX_ADC1_Init+0x32>
  {
    _Error_Handler(__FILE__, __LINE__);
 80041fa:	2149      	movs	r1, #73	; 0x49
 80041fc:	480b      	ldr	r0, [pc, #44]	; (800422c <MX_ADC1_Init+0x5c>)
 80041fe:	f000 fb7f 	bl	8004900 <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = 1;
 8004202:	2301      	movs	r3, #1
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004204:	4669      	mov	r1, sp
 8004206:	4806      	ldr	r0, [pc, #24]	; (8004220 <MX_ADC1_Init+0x50>)
  sConfig.Channel = ADC_CHANNEL_0;
 8004208:	9400      	str	r4, [sp, #0]
  sConfig.Rank = 1;
 800420a:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800420c:	9402      	str	r4, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800420e:	f7fc ff93 	bl	8001138 <HAL_ADC_ConfigChannel>
 8004212:	b118      	cbz	r0, 800421c <MX_ADC1_Init+0x4c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004214:	2153      	movs	r1, #83	; 0x53
 8004216:	4805      	ldr	r0, [pc, #20]	; (800422c <MX_ADC1_Init+0x5c>)
 8004218:	f000 fb72 	bl	8004900 <_Error_Handler>
  }

}
 800421c:	b004      	add	sp, #16
 800421e:	bd10      	pop	{r4, pc}
 8004220:	20000108 	.word	0x20000108
 8004224:	40012000 	.word	0x40012000
 8004228:	0f000001 	.word	0x0f000001
 800422c:	08005b90 	.word	0x08005b90

08004230 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8004230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc2.Instance = ADC2;
 8004232:	4814      	ldr	r0, [pc, #80]	; (8004284 <MX_ADC2_Init+0x54>)
 8004234:	4b14      	ldr	r3, [pc, #80]	; (8004288 <MX_ADC2_Init+0x58>)
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
  hadc2.Init.ScanConvMode = DISABLE;
  hadc2.Init.ContinuousConvMode = DISABLE;
  hadc2.Init.DiscontinuousConvMode = DISABLE;
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004236:	4a15      	ldr	r2, [pc, #84]	; (800428c <MX_ADC2_Init+0x5c>)
  hadc2.Instance = ADC2;
 8004238:	6003      	str	r3, [r0, #0]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800423a:	6282      	str	r2, [r0, #40]	; 0x28
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800423c:	2300      	movs	r3, #0
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc2.Init.NbrOfConversion = 1;
 800423e:	2201      	movs	r2, #1
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8004240:	6043      	str	r3, [r0, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8004242:	6083      	str	r3, [r0, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8004244:	6103      	str	r3, [r0, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8004246:	6183      	str	r3, [r0, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8004248:	6203      	str	r3, [r0, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800424a:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800424c:	60c3      	str	r3, [r0, #12]
  hadc2.Init.NbrOfConversion = 1;
 800424e:	61c2      	str	r2, [r0, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8004250:	6303      	str	r3, [r0, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004252:	6142      	str	r2, [r0, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8004254:	f7fc fe34 	bl	8000ec0 <HAL_ADC_Init>
 8004258:	b118      	cbz	r0, 8004262 <MX_ADC2_Init+0x32>
  {
    _Error_Handler(__FILE__, __LINE__);
 800425a:	216c      	movs	r1, #108	; 0x6c
 800425c:	480c      	ldr	r0, [pc, #48]	; (8004290 <MX_ADC2_Init+0x60>)
 800425e:	f000 fb4f 	bl	8004900 <_Error_Handler>

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_2;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8004262:	2102      	movs	r1, #2
 8004264:	2201      	movs	r2, #1
 8004266:	2300      	movs	r3, #0
 8004268:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800426c:	4805      	ldr	r0, [pc, #20]	; (8004284 <MX_ADC2_Init+0x54>)
 800426e:	4669      	mov	r1, sp
 8004270:	f7fc ff62 	bl	8001138 <HAL_ADC_ConfigChannel>
 8004274:	b118      	cbz	r0, 800427e <MX_ADC2_Init+0x4e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004276:	2176      	movs	r1, #118	; 0x76
 8004278:	4805      	ldr	r0, [pc, #20]	; (8004290 <MX_ADC2_Init+0x60>)
 800427a:	f000 fb41 	bl	8004900 <_Error_Handler>
  }

}
 800427e:	b005      	add	sp, #20
 8004280:	f85d fb04 	ldr.w	pc, [sp], #4
 8004284:	200000c0 	.word	0x200000c0
 8004288:	40012100 	.word	0x40012100
 800428c:	0f000001 	.word	0x0f000001
 8004290:	08005b90 	.word	0x08005b90

08004294 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8004294:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(adcHandle->Instance==ADC1)
 8004296:	6803      	ldr	r3, [r0, #0]
 8004298:	4a19      	ldr	r2, [pc, #100]	; (8004300 <HAL_ADC_MspInit+0x6c>)
 800429a:	4293      	cmp	r3, r2
{
 800429c:	b088      	sub	sp, #32
  if(adcHandle->Instance==ADC1)
 800429e:	d11e      	bne.n	80042de <HAL_ADC_MspInit+0x4a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80042a0:	4b18      	ldr	r3, [pc, #96]	; (8004304 <HAL_ADC_MspInit+0x70>)
 80042a2:	2400      	movs	r4, #0
 80042a4:	9401      	str	r4, [sp, #4]
 80042a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042ac:	645a      	str	r2, [r3, #68]	; 0x44
 80042ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042b4:	9301      	str	r3, [sp, #4]
 80042b6:	9b01      	ldr	r3, [sp, #4]
  
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0
    PA4     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 80042b8:	2311      	movs	r3, #17
    __HAL_RCC_ADC2_CLK_ENABLE();
  
    /**ADC2 GPIO Configuration    
    PA2     ------> ADC2_IN2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80042ba:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042bc:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80042be:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042c0:	4811      	ldr	r0, [pc, #68]	; (8004308 <HAL_ADC_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80042c2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042c4:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042c6:	f7fd f9a9 	bl	800161c <HAL_GPIO_Init>

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80042ca:	2012      	movs	r0, #18
 80042cc:	4622      	mov	r2, r4
 80042ce:	4621      	mov	r1, r4
 80042d0:	f7fc ffdc 	bl	800128c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80042d4:	2012      	movs	r0, #18
 80042d6:	f7fd f80d 	bl	80012f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80042da:	b008      	add	sp, #32
 80042dc:	bd10      	pop	{r4, pc}
  else if(adcHandle->Instance==ADC2)
 80042de:	4a0b      	ldr	r2, [pc, #44]	; (800430c <HAL_ADC_MspInit+0x78>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d1fa      	bne.n	80042da <HAL_ADC_MspInit+0x46>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80042e4:	4b07      	ldr	r3, [pc, #28]	; (8004304 <HAL_ADC_MspInit+0x70>)
 80042e6:	2400      	movs	r4, #0
 80042e8:	9402      	str	r4, [sp, #8]
 80042ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042f0:	645a      	str	r2, [r3, #68]	; 0x44
 80042f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042f8:	9302      	str	r3, [sp, #8]
 80042fa:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80042fc:	2304      	movs	r3, #4
 80042fe:	e7dc      	b.n	80042ba <HAL_ADC_MspInit+0x26>
 8004300:	40012000 	.word	0x40012000
 8004304:	40023800 	.word	0x40023800
 8004308:	40020000 	.word	0x40020000
 800430c:	40012100 	.word	0x40012100

08004310 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8004310:	b513      	push	{r0, r1, r4, lr}
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004312:	4b17      	ldr	r3, [pc, #92]	; (8004370 <MX_DMA_Init+0x60>)
 8004314:	2400      	movs	r4, #0
 8004316:	9401      	str	r4, [sp, #4]
 8004318:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800431a:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800431e:	631a      	str	r2, [r3, #48]	; 0x30
 8004320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004322:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8004326:	4622      	mov	r2, r4
 8004328:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 800432a:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800432c:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 800432e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8004330:	f7fc ffac 	bl	800128c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8004334:	200b      	movs	r0, #11
 8004336:	f7fc ffdd 	bl	80012f4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800433a:	4622      	mov	r2, r4
 800433c:	4621      	mov	r1, r4
 800433e:	200d      	movs	r0, #13
 8004340:	f7fc ffa4 	bl	800128c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8004344:	200d      	movs	r0, #13
 8004346:	f7fc ffd5 	bl	80012f4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800434a:	4622      	mov	r2, r4
 800434c:	4621      	mov	r1, r4
 800434e:	2011      	movs	r0, #17
 8004350:	f7fc ff9c 	bl	800128c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8004354:	2011      	movs	r0, #17
 8004356:	f7fc ffcd 	bl	80012f4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 800435a:	4622      	mov	r2, r4
 800435c:	4621      	mov	r1, r4
 800435e:	202f      	movs	r0, #47	; 0x2f
 8004360:	f7fc ff94 	bl	800128c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8004364:	202f      	movs	r0, #47	; 0x2f
 8004366:	f7fc ffc5 	bl	80012f4 <HAL_NVIC_EnableIRQ>

}
 800436a:	b002      	add	sp, #8
 800436c:	bd10      	pop	{r4, pc}
 800436e:	bf00      	nop
 8004370:	40023800 	.word	0x40023800

08004374 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004374:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004378:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800437a:	2400      	movs	r4, #0
 800437c:	4b45      	ldr	r3, [pc, #276]	; (8004494 <MX_GPIO_Init+0x120>)
 800437e:	9401      	str	r4, [sp, #4]
 8004380:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_1, GPIO_PIN_RESET);
 8004382:	4e45      	ldr	r6, [pc, #276]	; (8004498 <MX_GPIO_Init+0x124>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8004384:	f8df 9118 	ldr.w	r9, [pc, #280]	; 80044a0 <MX_GPIO_Init+0x12c>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN1C_Pin|EN2C_Pin, GPIO_PIN_RESET);
 8004388:	f8df 8118 	ldr.w	r8, [pc, #280]	; 80044a4 <MX_GPIO_Init+0x130>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, EN1A_Pin|EN1B_Pin|EN2A_Pin|EN2B_Pin 
 800438c:	4f43      	ldr	r7, [pc, #268]	; (800449c <MX_GPIO_Init+0x128>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800438e:	f042 0210 	orr.w	r2, r2, #16
 8004392:	631a      	str	r2, [r3, #48]	; 0x30
 8004394:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004396:	f002 0210 	and.w	r2, r2, #16
 800439a:	9201      	str	r2, [sp, #4]
 800439c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800439e:	9402      	str	r4, [sp, #8]
 80043a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043a2:	f042 0204 	orr.w	r2, r2, #4
 80043a6:	631a      	str	r2, [r3, #48]	; 0x30
 80043a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043aa:	f002 0204 	and.w	r2, r2, #4
 80043ae:	9202      	str	r2, [sp, #8]
 80043b0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80043b2:	9403      	str	r4, [sp, #12]
 80043b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80043ba:	631a      	str	r2, [r3, #48]	; 0x30
 80043bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043be:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80043c2:	9203      	str	r2, [sp, #12]
 80043c4:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80043c6:	9404      	str	r4, [sp, #16]
 80043c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043ca:	f042 0201 	orr.w	r2, r2, #1
 80043ce:	631a      	str	r2, [r3, #48]	; 0x30
 80043d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043d2:	f002 0201 	and.w	r2, r2, #1
 80043d6:	9204      	str	r2, [sp, #16]
 80043d8:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80043da:	9405      	str	r4, [sp, #20]
 80043dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043de:	f042 0202 	orr.w	r2, r2, #2
 80043e2:	631a      	str	r2, [r3, #48]	; 0x30
 80043e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043e6:	f002 0202 	and.w	r2, r2, #2
 80043ea:	9205      	str	r2, [sp, #20]
 80043ec:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80043ee:	9406      	str	r4, [sp, #24]
 80043f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043f2:	f042 0208 	orr.w	r2, r2, #8
 80043f6:	631a      	str	r2, [r3, #48]	; 0x30
 80043f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043fa:	f003 0308 	and.w	r3, r3, #8
 80043fe:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_1, GPIO_PIN_RESET);
 8004400:	4622      	mov	r2, r4
 8004402:	4630      	mov	r0, r6
 8004404:	212a      	movs	r1, #42	; 0x2a
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004406:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_1, GPIO_PIN_RESET);
 8004408:	f7fd f9e8 	bl	80017dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800440c:	4622      	mov	r2, r4
 800440e:	4648      	mov	r0, r9
 8004410:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004414:	f7fd f9e2 	bl	80017dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, EN1C_Pin|EN2C_Pin, GPIO_PIN_RESET);
 8004418:	4622      	mov	r2, r4
 800441a:	4640      	mov	r0, r8
 800441c:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8004420:	f7fd f9dc 	bl	80017dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, EN1A_Pin|EN1B_Pin|EN2A_Pin|EN2B_Pin 
 8004424:	4622      	mov	r2, r4
 8004426:	4638      	mov	r0, r7
 8004428:	213f      	movs	r1, #63	; 0x3f
 800442a:	f7fd f9d7 	bl	80017dc <HAL_GPIO_WritePin>
                          |EN3A_Pin|EN3B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE4 PE6 PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_0;
 800442e:	2355      	movs	r3, #85	; 0x55
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004430:	a907      	add	r1, sp, #28
 8004432:	4630      	mov	r0, r6

  /*Configure GPIO pins : PE3 PE5 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004434:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_0;
 8004436:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004438:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800443a:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800443c:	f7fd f8ee 	bl	800161c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_1;
 8004440:	232a      	movs	r3, #42	; 0x2a
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004442:	a907      	add	r1, sp, #28
 8004444:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_1;
 8004446:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004448:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800444a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800444c:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800444e:	f7fd f8e5 	bl	800161c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004452:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004456:	a907      	add	r1, sp, #28
 8004458:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800445a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800445c:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800445e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004460:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004462:	f7fd f8db 	bl	800161c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = EN1C_Pin|EN2C_Pin;
 8004466:	f44f 63a0 	mov.w	r3, #1280	; 0x500
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800446a:	a907      	add	r1, sp, #28
 800446c:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = EN1C_Pin|EN2C_Pin;
 800446e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004470:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004472:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004474:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004476:	f7fd f8d1 	bl	800161c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin 
                           PDPin PDPin */
  GPIO_InitStruct.Pin = EN1A_Pin|EN1B_Pin|EN2A_Pin|EN2B_Pin 
 800447a:	233f      	movs	r3, #63	; 0x3f
                          |EN3A_Pin|EN3B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800447c:	a907      	add	r1, sp, #28
 800447e:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = EN1A_Pin|EN1B_Pin|EN2A_Pin|EN2B_Pin 
 8004480:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004482:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004484:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004486:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004488:	f7fd f8c8 	bl	800161c <HAL_GPIO_Init>

}
 800448c:	b00d      	add	sp, #52	; 0x34
 800448e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004492:	bf00      	nop
 8004494:	40023800 	.word	0x40023800
 8004498:	40021000 	.word	0x40021000
 800449c:	40020c00 	.word	0x40020c00
 80044a0:	40020800 	.word	0x40020800
 80044a4:	40020000 	.word	0x40020000

080044a8 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c2_rx;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80044a8:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 80044aa:	480d      	ldr	r0, [pc, #52]	; (80044e0 <MX_I2C1_Init+0x38>)
  hi2c1.Init.ClockSpeed = 400000;
 80044ac:	4b0d      	ldr	r3, [pc, #52]	; (80044e4 <MX_I2C1_Init+0x3c>)
 80044ae:	f8df e03c 	ldr.w	lr, [pc, #60]	; 80044ec <MX_I2C1_Init+0x44>
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80044b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 400000;
 80044b6:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80044ba:	2300      	movs	r3, #0
 80044bc:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80044be:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80044c0:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80044c2:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80044c4:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80044c6:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80044c8:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80044ca:	f7fd fb55 	bl	8001b78 <HAL_I2C_Init>
 80044ce:	b128      	cbz	r0, 80044dc <MX_I2C1_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 80044d0:	2148      	movs	r1, #72	; 0x48
 80044d2:	4805      	ldr	r0, [pc, #20]	; (80044e8 <MX_I2C1_Init+0x40>)
  }

}
 80044d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 80044d8:	f000 ba12 	b.w	8004900 <_Error_Handler>
 80044dc:	bd08      	pop	{r3, pc}
 80044de:	bf00      	nop
 80044e0:	200001b0 	.word	0x200001b0
 80044e4:	40005400 	.word	0x40005400
 80044e8:	08005b9d 	.word	0x08005b9d
 80044ec:	00061a80 	.word	0x00061a80

080044f0 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80044f0:	b508      	push	{r3, lr}

  hi2c2.Instance = I2C2;
 80044f2:	480d      	ldr	r0, [pc, #52]	; (8004528 <MX_I2C2_Init+0x38>)
  hi2c2.Init.ClockSpeed = 400000;
 80044f4:	4b0d      	ldr	r3, [pc, #52]	; (800452c <MX_I2C2_Init+0x3c>)
 80044f6:	f8df e03c 	ldr.w	lr, [pc, #60]	; 8004534 <MX_I2C2_Init+0x44>
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80044fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c2.Init.ClockSpeed = 400000;
 80044fe:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004502:	2300      	movs	r3, #0
 8004504:	6083      	str	r3, [r0, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8004506:	60c3      	str	r3, [r0, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004508:	6102      	str	r2, [r0, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800450a:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800450c:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800450e:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004510:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004512:	f7fd fb31 	bl	8001b78 <HAL_I2C_Init>
 8004516:	b128      	cbz	r0, 8004524 <MX_I2C2_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004518:	215b      	movs	r1, #91	; 0x5b
 800451a:	4805      	ldr	r0, [pc, #20]	; (8004530 <MX_I2C2_Init+0x40>)
  }

}
 800451c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8004520:	f000 b9ee 	b.w	8004900 <_Error_Handler>
 8004524:	bd08      	pop	{r3, pc}
 8004526:	bf00      	nop
 8004528:	20000204 	.word	0x20000204
 800452c:	40005800 	.word	0x40005800
 8004530:	08005b9d 	.word	0x08005b9d
 8004534:	00061a80 	.word	0x00061a80

08004538 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004538:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C1)
 800453a:	6803      	ldr	r3, [r0, #0]
 800453c:	4a65      	ldr	r2, [pc, #404]	; (80046d4 <HAL_I2C_MspInit+0x19c>)
 800453e:	4293      	cmp	r3, r2
{
 8004540:	b089      	sub	sp, #36	; 0x24
 8004542:	4605      	mov	r5, r0
  if(i2cHandle->Instance==I2C1)
 8004544:	d162      	bne.n	800460c <HAL_I2C_MspInit+0xd4>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004546:	23c0      	movs	r3, #192	; 0xc0
 8004548:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800454a:	2312      	movs	r3, #18
 800454c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800454e:	2301      	movs	r3, #1
 8004550:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004552:	2303      	movs	r3, #3
 8004554:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004556:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004558:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800455a:	485f      	ldr	r0, [pc, #380]	; (80046d8 <HAL_I2C_MspInit+0x1a0>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800455c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800455e:	f7fd f85d 	bl	800161c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004562:	2300      	movs	r3, #0
 8004564:	4a5d      	ldr	r2, [pc, #372]	; (80046dc <HAL_I2C_MspInit+0x1a4>)
 8004566:	9301      	str	r3, [sp, #4]
 8004568:	6c11      	ldr	r1, [r2, #64]	; 0x40
  
    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 800456a:	4c5d      	ldr	r4, [pc, #372]	; (80046e0 <HAL_I2C_MspInit+0x1a8>)
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 800456c:	485d      	ldr	r0, [pc, #372]	; (80046e4 <HAL_I2C_MspInit+0x1ac>)
    __HAL_RCC_I2C1_CLK_ENABLE();
 800456e:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
 8004572:	6411      	str	r1, [r2, #64]	; 0x40
 8004574:	6c12      	ldr	r2, [r2, #64]	; 0x40
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004576:	60a3      	str	r3, [r4, #8]
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004578:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800457c:	9201      	str	r2, [sp, #4]
 800457e:	9a01      	ldr	r2, [sp, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004580:	60e3      	str	r3, [r4, #12]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8004582:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004586:	e884 0005 	stmia.w	r4, {r0, r2}
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800458a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800458e:	4620      	mov	r0, r4
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004590:	6122      	str	r2, [r4, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004592:	6163      	str	r3, [r4, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004594:	61a3      	str	r3, [r4, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8004596:	61e3      	str	r3, [r4, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004598:	6223      	str	r3, [r4, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800459a:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800459c:	f7fc fef4 	bl	8001388 <HAL_DMA_Init>
 80045a0:	b118      	cbz	r0, 80045aa <HAL_I2C_MspInit+0x72>
    {
      _Error_Handler(__FILE__, __LINE__);
 80045a2:	2186      	movs	r1, #134	; 0x86
 80045a4:	4850      	ldr	r0, [pc, #320]	; (80046e8 <HAL_I2C_MspInit+0x1b0>)
 80045a6:	f000 f9ab 	bl	8004900 <_Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 80045aa:	63ac      	str	r4, [r5, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80045ac:	494f      	ldr	r1, [pc, #316]	; (80046ec <HAL_I2C_MspInit+0x1b4>)
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 80045ae:	63a5      	str	r5, [r4, #56]	; 0x38
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 80045b0:	4c4f      	ldr	r4, [pc, #316]	; (80046f0 <HAL_I2C_MspInit+0x1b8>)
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80045b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80045b6:	2340      	movs	r3, #64	; 0x40
 80045b8:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80045bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80045c0:	2300      	movs	r3, #0
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80045c2:	6122      	str	r2, [r4, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_i2c1_tx.Init.Mode = DMA_CIRCULAR;
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80045c4:	4620      	mov	r0, r4
    hdma_i2c1_tx.Init.Mode = DMA_CIRCULAR;
 80045c6:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80045ca:	60e3      	str	r3, [r4, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80045cc:	6163      	str	r3, [r4, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80045ce:	61a3      	str	r3, [r4, #24]
    hdma_i2c1_tx.Init.Mode = DMA_CIRCULAR;
 80045d0:	61e2      	str	r2, [r4, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80045d2:	6223      	str	r3, [r4, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80045d4:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80045d6:	f7fc fed7 	bl	8001388 <HAL_DMA_Init>
 80045da:	b118      	cbz	r0, 80045e4 <HAL_I2C_MspInit+0xac>
    {
      _Error_Handler(__FILE__, __LINE__);
 80045dc:	2198      	movs	r1, #152	; 0x98
 80045de:	4842      	ldr	r0, [pc, #264]	; (80046e8 <HAL_I2C_MspInit+0x1b0>)
 80045e0:	f000 f98e 	bl	8004900 <_Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80045e4:	2200      	movs	r2, #0
 80045e6:	4611      	mov	r1, r2
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80045e8:	636c      	str	r4, [r5, #52]	; 0x34
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80045ea:	201f      	movs	r0, #31
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80045ec:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80045ee:	f7fc fe4d 	bl	800128c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80045f2:	201f      	movs	r0, #31
 80045f4:	f7fc fe7e 	bl	80012f4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80045f8:	2200      	movs	r2, #0
 80045fa:	2020      	movs	r0, #32
 80045fc:	4611      	mov	r1, r2
 80045fe:	f7fc fe45 	bl	800128c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8004602:	2020      	movs	r0, #32

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8004604:	f7fc fe76 	bl	80012f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8004608:	b009      	add	sp, #36	; 0x24
 800460a:	bd30      	pop	{r4, r5, pc}
  else if(i2cHandle->Instance==I2C2)
 800460c:	4a39      	ldr	r2, [pc, #228]	; (80046f4 <HAL_I2C_MspInit+0x1bc>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d1fa      	bne.n	8004608 <HAL_I2C_MspInit+0xd0>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004612:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004616:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004618:	2312      	movs	r3, #18
 800461a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800461c:	2301      	movs	r3, #1
 800461e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004620:	2303      	movs	r3, #3
 8004622:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004624:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004626:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004628:	482b      	ldr	r0, [pc, #172]	; (80046d8 <HAL_I2C_MspInit+0x1a0>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800462a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800462c:	f7fc fff6 	bl	800161c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004630:	2300      	movs	r3, #0
 8004632:	4a2a      	ldr	r2, [pc, #168]	; (80046dc <HAL_I2C_MspInit+0x1a4>)
 8004634:	9302      	str	r3, [sp, #8]
 8004636:	6c11      	ldr	r1, [r2, #64]	; 0x40
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 8004638:	4c2f      	ldr	r4, [pc, #188]	; (80046f8 <HAL_I2C_MspInit+0x1c0>)
    __HAL_RCC_I2C2_CLK_ENABLE();
 800463a:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 800463e:	6411      	str	r1, [r2, #64]	; 0x40
 8004640:	6c12      	ldr	r2, [r2, #64]	; 0x40
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8004642:	492e      	ldr	r1, [pc, #184]	; (80046fc <HAL_I2C_MspInit+0x1c4>)
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004644:	60a3      	str	r3, [r4, #8]
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004646:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 800464a:	9202      	str	r2, [sp, #8]
 800464c:	9a02      	ldr	r2, [sp, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800464e:	60e3      	str	r3, [r4, #12]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8004650:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8004654:	e884 0006 	stmia.w	r4, {r1, r2}
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8004658:	4620      	mov	r0, r4
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800465a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800465e:	6122      	str	r2, [r4, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004660:	6163      	str	r3, [r4, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004662:	61a3      	str	r3, [r4, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8004664:	61e3      	str	r3, [r4, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004666:	6223      	str	r3, [r4, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004668:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 800466a:	f7fc fe8d 	bl	8001388 <HAL_DMA_Init>
 800466e:	b118      	cbz	r0, 8004678 <HAL_I2C_MspInit+0x140>
      _Error_Handler(__FILE__, __LINE__);
 8004670:	21c8      	movs	r1, #200	; 0xc8
 8004672:	481d      	ldr	r0, [pc, #116]	; (80046e8 <HAL_I2C_MspInit+0x1b0>)
 8004674:	f000 f944 	bl	8004900 <_Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 8004678:	63ac      	str	r4, [r5, #56]	; 0x38
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800467a:	4b21      	ldr	r3, [pc, #132]	; (8004700 <HAL_I2C_MspInit+0x1c8>)
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 800467c:	63a5      	str	r5, [r4, #56]	; 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 800467e:	4c21      	ldr	r4, [pc, #132]	; (8004704 <HAL_I2C_MspInit+0x1cc>)
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004680:	f04f 6c60 	mov.w	ip, #234881024	; 0xe000000
 8004684:	f04f 0e40 	mov.w	lr, #64	; 0x40
 8004688:	e884 5008 	stmia.w	r4, {r3, ip, lr}
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800468c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004690:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8004692:	4620      	mov	r0, r4
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004694:	60e3      	str	r3, [r4, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004696:	6122      	str	r2, [r4, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004698:	6163      	str	r3, [r4, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800469a:	61a3      	str	r3, [r4, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 800469c:	61e3      	str	r3, [r4, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800469e:	6223      	str	r3, [r4, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80046a0:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 80046a2:	f7fc fe71 	bl	8001388 <HAL_DMA_Init>
 80046a6:	b118      	cbz	r0, 80046b0 <HAL_I2C_MspInit+0x178>
      _Error_Handler(__FILE__, __LINE__);
 80046a8:	21da      	movs	r1, #218	; 0xda
 80046aa:	480f      	ldr	r0, [pc, #60]	; (80046e8 <HAL_I2C_MspInit+0x1b0>)
 80046ac:	f000 f928 	bl	8004900 <_Error_Handler>
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80046b0:	2200      	movs	r2, #0
 80046b2:	4611      	mov	r1, r2
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 80046b4:	636c      	str	r4, [r5, #52]	; 0x34
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80046b6:	2021      	movs	r0, #33	; 0x21
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 80046b8:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80046ba:	f7fc fde7 	bl	800128c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80046be:	2021      	movs	r0, #33	; 0x21
 80046c0:	f7fc fe18 	bl	80012f4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 80046c4:	2200      	movs	r2, #0
 80046c6:	2022      	movs	r0, #34	; 0x22
 80046c8:	4611      	mov	r1, r2
 80046ca:	f7fc fddf 	bl	800128c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80046ce:	2022      	movs	r0, #34	; 0x22
 80046d0:	e798      	b.n	8004604 <HAL_I2C_MspInit+0xcc>
 80046d2:	bf00      	nop
 80046d4:	40005400 	.word	0x40005400
 80046d8:	40020400 	.word	0x40020400
 80046dc:	40023800 	.word	0x40023800
 80046e0:	20000318 	.word	0x20000318
 80046e4:	40026010 	.word	0x40026010
 80046e8:	08005b9d 	.word	0x08005b9d
 80046ec:	400260a0 	.word	0x400260a0
 80046f0:	20000150 	.word	0x20000150
 80046f4:	40005800 	.word	0x40005800
 80046f8:	20000258 	.word	0x20000258
 80046fc:	40026040 	.word	0x40026040
 8004700:	400260b8 	.word	0x400260b8
 8004704:	200002b8 	.word	0x200002b8

08004708 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{

    if (htim->Instance == htim10.Instance)
 8004708:	4b16      	ldr	r3, [pc, #88]	; (8004764 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800470a:	6802      	ldr	r2, [r0, #0]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	429a      	cmp	r2, r3
{
 8004710:	b510      	push	{r4, lr}
    if (htim->Instance == htim10.Instance)
 8004712:	d126      	bne.n	8004762 <HAL_TIM_PeriodElapsedCallback+0x5a>
        //out = mpu.GyroY / 90;

        //bgc_bldchdl(&bldc1, out);
        //bgc_SVPWM(&bldc1 , 200);

        if (deg0 == 1000)
 8004714:	4b14      	ldr	r3, [pc, #80]	; (8004768 <HAL_TIM_PeriodElapsedCallback+0x60>)
        {
            deg0 = 0;
        }
        MPU6050_ReadNormAll(&hi2c1,&mpu);
        MPU6050_filter (&mpu, &filter1 , &rpy1 , 0.5f , 500.0f);
 8004716:	4c15      	ldr	r4, [pc, #84]	; (800476c <HAL_TIM_PeriodElapsedCallback+0x64>)
        if (deg0 == 1000)
 8004718:	681a      	ldr	r2, [r3, #0]
        MPU6050_ReadNormAll(&hi2c1,&mpu);
 800471a:	4915      	ldr	r1, [pc, #84]	; (8004770 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800471c:	4815      	ldr	r0, [pc, #84]	; (8004774 <HAL_TIM_PeriodElapsedCallback+0x6c>)
        if (deg0 == 1000)
 800471e:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
            deg0 = 0;
 8004722:	bf04      	itt	eq
 8004724:	2200      	moveq	r2, #0
 8004726:	601a      	streq	r2, [r3, #0]
        MPU6050_ReadNormAll(&hi2c1,&mpu);
 8004728:	f7ff fcfc 	bl	8004124 <MPU6050_ReadNormAll>
        MPU6050_filter (&mpu, &filter1 , &rpy1 , 0.5f , 500.0f);
 800472c:	eddf 0a12 	vldr	s1, [pc, #72]	; 8004778 <HAL_TIM_PeriodElapsedCallback+0x70>
 8004730:	4912      	ldr	r1, [pc, #72]	; (800477c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8004732:	480f      	ldr	r0, [pc, #60]	; (8004770 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8004734:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8004738:	4622      	mov	r2, r4
 800473a:	f7ff f9e5 	bl	8003b08 <MPU6050_filter>


        //MadgwickAHRSupdateIMU( mpu.GyroX, mpu.GyroY,mpu.GyroZ, mpu.AccX,mpu.AccY,mpu.AccZ);
        //qua2Euler();

        dutya=rpy1.R;
 800473e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8004742:	f7fc f9a9 	bl	8000a98 <__aeabi_d2iz>
 8004746:	4b0e      	ldr	r3, [pc, #56]	; (8004780 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8004748:	6018      	str	r0, [r3, #0]
        dutyb=rpy1.P;
 800474a:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 800474e:	f7fc f9a3 	bl	8000a98 <__aeabi_d2iz>
 8004752:	4b0c      	ldr	r3, [pc, #48]	; (8004784 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8004754:	6018      	str	r0, [r3, #0]
        dutyc=rpy1.Y;
 8004756:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 800475a:	f7fc f99d 	bl	8000a98 <__aeabi_d2iz>
 800475e:	4b0a      	ldr	r3, [pc, #40]	; (8004788 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8004760:	6018      	str	r0, [r3, #0]
 8004762:	bd10      	pop	{r4, pc}
 8004764:	200004ac 	.word	0x200004ac
 8004768:	200000a4 	.word	0x200000a4
 800476c:	20000430 	.word	0x20000430
 8004770:	200003f0 	.word	0x200003f0
 8004774:	200001b0 	.word	0x200001b0
 8004778:	43fa0000 	.word	0x43fa0000
 800477c:	2000037c 	.word	0x2000037c
 8004780:	2000042c 	.word	0x2000042c
 8004784:	200003ec 	.word	0x200003ec
 8004788:	200003e8 	.word	0x200003e8

0800478c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800478c:	b530      	push	{r4, r5, lr}
 800478e:	b095      	sub	sp, #84	; 0x54
    RCC_OscInitTypeDef RCC_OscInitStruct;
    RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004790:	4b26      	ldr	r3, [pc, #152]	; (800482c <SystemClock_Config+0xa0>)
 8004792:	2100      	movs	r1, #0
 8004794:	9101      	str	r1, [sp, #4]
 8004796:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004798:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800479c:	641a      	str	r2, [r3, #64]	; 0x40
 800479e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047a4:	9301      	str	r3, [sp, #4]
 80047a6:	9b01      	ldr	r3, [sp, #4]

    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80047a8:	4b21      	ldr	r3, [pc, #132]	; (8004830 <SystemClock_Config+0xa4>)
 80047aa:	9102      	str	r1, [sp, #8]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047b2:	601a      	str	r2, [r3, #0]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047ba:	9302      	str	r3, [sp, #8]
 80047bc:	9b02      	ldr	r3, [sp, #8]

    /**Initializes the CPU, AHB and APB busses clocks 
*/
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80047be:	2301      	movs	r3, #1
 80047c0:	9308      	str	r3, [sp, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80047c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80047c6:	9309      	str	r3, [sp, #36]	; 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80047c8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80047cc:	2502      	movs	r5, #2
    RCC_OscInitStruct.PLL.PLLM = 4;
 80047ce:	2404      	movs	r4, #4
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80047d0:	930f      	str	r3, [sp, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLN = 168;
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
    RCC_OscInitStruct.PLL.PLLQ = 4;
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80047d2:	a808      	add	r0, sp, #32
    RCC_OscInitStruct.PLL.PLLN = 168;
 80047d4:	23a8      	movs	r3, #168	; 0xa8
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80047d6:	950e      	str	r5, [sp, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLM = 4;
 80047d8:	9410      	str	r4, [sp, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLN = 168;
 80047da:	9311      	str	r3, [sp, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80047dc:	9512      	str	r5, [sp, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ = 4;
 80047de:	9413      	str	r4, [sp, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80047e0:	f7fe f954 	bl	8002a8c <HAL_RCC_OscConfig>
 80047e4:	b100      	cbz	r0, 80047e8 <SystemClock_Config+0x5c>
 80047e6:	e7fe      	b.n	80047e6 <SystemClock_Config+0x5a>
        _Error_Handler(__FILE__, __LINE__);
    }

    /**Initializes the CPU, AHB and APB busses clocks 
*/
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK 
 80047e8:	230f      	movs	r3, #15
 80047ea:	9303      	str	r3, [sp, #12]
                                    | RCC_CLOCKTYPE_SYSCLK 
                                    | RCC_CLOCKTYPE_PCLK1 
                                    | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80047ec:	9005      	str	r0, [sp, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80047ee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80047f2:	2105      	movs	r1, #5
 80047f4:	a803      	add	r0, sp, #12
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80047f6:	9504      	str	r5, [sp, #16]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80047f8:	9306      	str	r3, [sp, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80047fa:	9307      	str	r3, [sp, #28]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80047fc:	f7fe faf6 	bl	8002dec <HAL_RCC_ClockConfig>
 8004800:	4605      	mov	r5, r0
 8004802:	b100      	cbz	r0, 8004806 <SystemClock_Config+0x7a>
 8004804:	e7fe      	b.n	8004804 <SystemClock_Config+0x78>
        _Error_Handler(__FILE__, __LINE__);
    }

    /**Configure the Systick interrupt time 
*/
    HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 8004806:	f7fe fb8b 	bl	8002f20 <HAL_RCC_GetHCLKFreq>
 800480a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800480e:	fbb0 f0f3 	udiv	r0, r0, r3
 8004812:	f7fc fd7b 	bl	800130c <HAL_SYSTICK_Config>

    /**Configure the Systick 
*/
    HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8004816:	4620      	mov	r0, r4
 8004818:	f7fc fd8e 	bl	8001338 <HAL_SYSTICK_CLKSourceConfig>

    /* SysTick_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800481c:	462a      	mov	r2, r5
 800481e:	4629      	mov	r1, r5
 8004820:	f04f 30ff 	mov.w	r0, #4294967295
 8004824:	f7fc fd32 	bl	800128c <HAL_NVIC_SetPriority>
}
 8004828:	b015      	add	sp, #84	; 0x54
 800482a:	bd30      	pop	{r4, r5, pc}
 800482c:	40023800 	.word	0x40023800
 8004830:	40007000 	.word	0x40007000

08004834 <main>:
{
 8004834:	b508      	push	{r3, lr}
    HAL_Init();
 8004836:	f7fc fb03 	bl	8000e40 <HAL_Init>
    SystemClock_Config();
 800483a:	f7ff ffa7 	bl	800478c <SystemClock_Config>
    MX_GPIO_Init();
 800483e:	f7ff fd99 	bl	8004374 <MX_GPIO_Init>
    MX_DMA_Init();
 8004842:	f7ff fd65 	bl	8004310 <MX_DMA_Init>
    MX_ADC1_Init();
 8004846:	f7ff fcc3 	bl	80041d0 <MX_ADC1_Init>
    MX_I2C1_Init();
 800484a:	f7ff fe2d 	bl	80044a8 <MX_I2C1_Init>
    MX_I2C2_Init();
 800484e:	f7ff fe4f 	bl	80044f0 <MX_I2C2_Init>
    MX_TIM1_Init();
 8004852:	f000 f9e7 	bl	8004c24 <MX_TIM1_Init>
    MX_TIM3_Init();
 8004856:	f000 fa61 	bl	8004d1c <MX_TIM3_Init>
    MX_TIM4_Init();
 800485a:	f000 fac3 	bl	8004de4 <MX_TIM4_Init>
    MX_USART3_Init();
 800485e:	f000 fb25 	bl	8004eac <MX_USART3_Init>
    MX_TIM10_Init();
 8004862:	f000 f91f 	bl	8004aa4 <MX_TIM10_Init>
    MX_ADC2_Init();
 8004866:	f7ff fce3 	bl	8004230 <MX_ADC2_Init>
    MPU6050_filter_Init(&filter1);
 800486a:	481e      	ldr	r0, [pc, #120]	; (80048e4 <main+0xb0>)
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800486c:	4d1e      	ldr	r5, [pc, #120]	; (80048e8 <main+0xb4>)
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800486e:	4c1f      	ldr	r4, [pc, #124]	; (80048ec <main+0xb8>)
    MPU6050_filter_Init(&filter1);
 8004870:	f7ff f942 	bl	8003af8 <MPU6050_filter_Init>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_SET);
 8004874:	2201      	movs	r2, #1
 8004876:	2102      	movs	r1, #2
 8004878:	481d      	ldr	r0, [pc, #116]	; (80048f0 <main+0xbc>)
 800487a:	f7fc ffaf 	bl	80017dc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);
 800487e:	2201      	movs	r2, #1
 8004880:	2108      	movs	r1, #8
 8004882:	481b      	ldr	r0, [pc, #108]	; (80048f0 <main+0xbc>)
 8004884:	f7fc ffaa 	bl	80017dc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_SET);
 8004888:	2201      	movs	r2, #1
 800488a:	2120      	movs	r1, #32
 800488c:	4818      	ldr	r0, [pc, #96]	; (80048f0 <main+0xbc>)
 800488e:	f7fc ffa5 	bl	80017dc <HAL_GPIO_WritePin>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8004892:	2100      	movs	r1, #0
 8004894:	4628      	mov	r0, r5
 8004896:	f7fe fe8f 	bl	80035b8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800489a:	2100      	movs	r1, #0
 800489c:	4620      	mov	r0, r4
 800489e:	f7fe fe8b 	bl	80035b8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80048a2:	2104      	movs	r1, #4
 80048a4:	4620      	mov	r0, r4
 80048a6:	f7fe fe87 	bl	80035b8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80048aa:	2108      	movs	r1, #8
 80048ac:	4620      	mov	r0, r4
 80048ae:	f7fe fe83 	bl	80035b8 <HAL_TIM_PWM_Start>
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 400);
 80048b2:	682b      	ldr	r3, [r5, #0]
 80048b4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80048b8:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 150);
 80048ba:	6823      	ldr	r3, [r4, #0]
 80048bc:	2296      	movs	r2, #150	; 0x96
 80048be:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 80048c0:	2200      	movs	r2, #0
 80048c2:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_Delay(500);
 80048c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 80048c8:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_Delay(500);
 80048ca:	f7fc fae5 	bl	8000e98 <HAL_Delay>
    HAL_TIM_Base_Start_IT(&htim10);
 80048ce:	4809      	ldr	r0, [pc, #36]	; (80048f4 <main+0xc0>)
 80048d0:	f7fe fbd0 	bl	8003074 <HAL_TIM_Base_Start_IT>
    MPU6050_Init(&hi2c1,&mpu,Acc_8G,Gyro_2000s);
 80048d4:	2303      	movs	r3, #3
 80048d6:	2202      	movs	r2, #2
 80048d8:	4907      	ldr	r1, [pc, #28]	; (80048f8 <main+0xc4>)
 80048da:	4808      	ldr	r0, [pc, #32]	; (80048fc <main+0xc8>)
 80048dc:	f7ff fb52 	bl	8003f84 <MPU6050_Init>
 80048e0:	e7fe      	b.n	80048e0 <main+0xac>
 80048e2:	bf00      	nop
 80048e4:	2000037c 	.word	0x2000037c
 80048e8:	20000470 	.word	0x20000470
 80048ec:	200004e8 	.word	0x200004e8
 80048f0:	40020c00 	.word	0x40020c00
 80048f4:	200004ac 	.word	0x200004ac
 80048f8:	200003f0 	.word	0x200003f0
 80048fc:	200001b0 	.word	0x200001b0

08004900 <_Error_Handler>:
 * @param  file: The file name as string.
 * @param  line: The line in file as a number.
 * @retval None
 */
void _Error_Handler(char *file, int line)
{
 8004900:	e7fe      	b.n	8004900 <_Error_Handler>
	...

08004904 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004904:	b513      	push	{r0, r1, r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004906:	4b22      	ldr	r3, [pc, #136]	; (8004990 <HAL_MspInit+0x8c>)
 8004908:	2400      	movs	r4, #0
 800490a:	9400      	str	r4, [sp, #0]
 800490c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800490e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004912:	645a      	str	r2, [r3, #68]	; 0x44
 8004914:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004916:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800491a:	9200      	str	r2, [sp, #0]
 800491c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800491e:	9401      	str	r4, [sp, #4]
 8004920:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004922:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004926:	641a      	str	r2, [r3, #64]	; 0x40
 8004928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800492e:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004930:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 8004932:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004934:	f7fc fc98 	bl	8001268 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8004938:	4622      	mov	r2, r4
 800493a:	4621      	mov	r1, r4
 800493c:	f06f 000b 	mvn.w	r0, #11
 8004940:	f7fc fca4 	bl	800128c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8004944:	4622      	mov	r2, r4
 8004946:	4621      	mov	r1, r4
 8004948:	f06f 000a 	mvn.w	r0, #10
 800494c:	f7fc fc9e 	bl	800128c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8004950:	4622      	mov	r2, r4
 8004952:	4621      	mov	r1, r4
 8004954:	f06f 0009 	mvn.w	r0, #9
 8004958:	f7fc fc98 	bl	800128c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800495c:	4622      	mov	r2, r4
 800495e:	4621      	mov	r1, r4
 8004960:	f06f 0004 	mvn.w	r0, #4
 8004964:	f7fc fc92 	bl	800128c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8004968:	4622      	mov	r2, r4
 800496a:	4621      	mov	r1, r4
 800496c:	f06f 0003 	mvn.w	r0, #3
 8004970:	f7fc fc8c 	bl	800128c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8004974:	4622      	mov	r2, r4
 8004976:	4621      	mov	r1, r4
 8004978:	f06f 0001 	mvn.w	r0, #1
 800497c:	f7fc fc86 	bl	800128c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8004980:	4622      	mov	r2, r4
 8004982:	4621      	mov	r1, r4
 8004984:	f04f 30ff 	mov.w	r0, #4294967295
 8004988:	f7fc fc80 	bl	800128c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800498c:	b002      	add	sp, #8
 800498e:	bd10      	pop	{r4, pc}
 8004990:	40023800 	.word	0x40023800

08004994 <NMI_Handler>:
 8004994:	4770      	bx	lr

08004996 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8004996:	e7fe      	b.n	8004996 <HardFault_Handler>

08004998 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8004998:	e7fe      	b.n	8004998 <MemManage_Handler>

0800499a <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800499a:	e7fe      	b.n	800499a <BusFault_Handler>

0800499c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800499c:	e7fe      	b.n	800499c <UsageFault_Handler>

0800499e <SVC_Handler>:
 800499e:	4770      	bx	lr

080049a0 <DebugMon_Handler>:
 80049a0:	4770      	bx	lr

080049a2 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80049a2:	4770      	bx	lr

080049a4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80049a4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80049a6:	f7fc fa65 	bl	8000e74 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80049aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80049ae:	f7fc bcd0 	b.w	8001352 <HAL_SYSTICK_IRQHandler>
	...

080049b4 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80049b4:	4801      	ldr	r0, [pc, #4]	; (80049bc <DMA1_Stream0_IRQHandler+0x8>)
 80049b6:	f7fc bd77 	b.w	80014a8 <HAL_DMA_IRQHandler>
 80049ba:	bf00      	nop
 80049bc:	20000318 	.word	0x20000318

080049c0 <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 80049c0:	4801      	ldr	r0, [pc, #4]	; (80049c8 <DMA1_Stream2_IRQHandler+0x8>)
 80049c2:	f7fc bd71 	b.w	80014a8 <HAL_DMA_IRQHandler>
 80049c6:	bf00      	nop
 80049c8:	20000258 	.word	0x20000258

080049cc <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80049cc:	4801      	ldr	r0, [pc, #4]	; (80049d4 <DMA1_Stream6_IRQHandler+0x8>)
 80049ce:	f7fc bd6b 	b.w	80014a8 <HAL_DMA_IRQHandler>
 80049d2:	bf00      	nop
 80049d4:	20000150 	.word	0x20000150

080049d8 <ADC_IRQHandler>:

/**
* @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
*/
void ADC_IRQHandler(void)
{
 80049d8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80049da:	4804      	ldr	r0, [pc, #16]	; (80049ec <ADC_IRQHandler+0x14>)
 80049dc:	f7fc fb17 	bl	800100e <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80049e0:	4803      	ldr	r0, [pc, #12]	; (80049f0 <ADC_IRQHandler+0x18>)
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80049e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_ADC_IRQHandler(&hadc2);
 80049e6:	f7fc bb12 	b.w	800100e <HAL_ADC_IRQHandler>
 80049ea:	bf00      	nop
 80049ec:	20000108 	.word	0x20000108
 80049f0:	200000c0 	.word	0x200000c0

080049f4 <TIM1_UP_TIM10_IRQHandler>:

/**
* @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
*/
void TIM1_UP_TIM10_IRQHandler(void)
{
 80049f4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80049f6:	4804      	ldr	r0, [pc, #16]	; (8004a08 <TIM1_UP_TIM10_IRQHandler+0x14>)
 80049f8:	f7fe fc05 	bl	8003206 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80049fc:	4803      	ldr	r0, [pc, #12]	; (8004a0c <TIM1_UP_TIM10_IRQHandler+0x18>)
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80049fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim10);
 8004a02:	f7fe bc00 	b.w	8003206 <HAL_TIM_IRQHandler>
 8004a06:	bf00      	nop
 8004a08:	20000524 	.word	0x20000524
 8004a0c:	200004ac 	.word	0x200004ac

08004a10 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004a10:	4801      	ldr	r0, [pc, #4]	; (8004a18 <I2C1_EV_IRQHandler+0x8>)
 8004a12:	f7fd bc11 	b.w	8002238 <HAL_I2C_EV_IRQHandler>
 8004a16:	bf00      	nop
 8004a18:	200001b0 	.word	0x200001b0

08004a1c <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004a1c:	4801      	ldr	r0, [pc, #4]	; (8004a24 <I2C1_ER_IRQHandler+0x8>)
 8004a1e:	f7fd bf75 	b.w	800290c <HAL_I2C_ER_IRQHandler>
 8004a22:	bf00      	nop
 8004a24:	200001b0 	.word	0x200001b0

08004a28 <I2C2_EV_IRQHandler>:
void I2C2_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8004a28:	4801      	ldr	r0, [pc, #4]	; (8004a30 <I2C2_EV_IRQHandler+0x8>)
 8004a2a:	f7fd bc05 	b.w	8002238 <HAL_I2C_EV_IRQHandler>
 8004a2e:	bf00      	nop
 8004a30:	20000204 	.word	0x20000204

08004a34 <I2C2_ER_IRQHandler>:
void I2C2_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8004a34:	4801      	ldr	r0, [pc, #4]	; (8004a3c <I2C2_ER_IRQHandler+0x8>)
 8004a36:	f7fd bf69 	b.w	800290c <HAL_I2C_ER_IRQHandler>
 8004a3a:	bf00      	nop
 8004a3c:	20000204 	.word	0x20000204

08004a40 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_USART_IRQHandler(&husart3);
 8004a40:	4801      	ldr	r0, [pc, #4]	; (8004a48 <USART3_IRQHandler+0x8>)
 8004a42:	f7fe bf83 	b.w	800394c <HAL_USART_IRQHandler>
 8004a46:	bf00      	nop
 8004a48:	20000560 	.word	0x20000560

08004a4c <DMA1_Stream7_IRQHandler>:
void DMA1_Stream7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8004a4c:	4801      	ldr	r0, [pc, #4]	; (8004a54 <DMA1_Stream7_IRQHandler+0x8>)
 8004a4e:	f7fc bd2b 	b.w	80014a8 <HAL_DMA_IRQHandler>
 8004a52:	bf00      	nop
 8004a54:	200002b8 	.word	0x200002b8

08004a58 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004a58:	490f      	ldr	r1, [pc, #60]	; (8004a98 <SystemInit+0x40>)
 8004a5a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004a5e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004a62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004a66:	4b0d      	ldr	r3, [pc, #52]	; (8004a9c <SystemInit+0x44>)
 8004a68:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004a6a:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8004a6c:	f042 0201 	orr.w	r2, r2, #1
 8004a70:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8004a72:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8004a7a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004a7e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004a80:	4a07      	ldr	r2, [pc, #28]	; (8004aa0 <SystemInit+0x48>)
 8004a82:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004a8a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004a8c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004a8e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004a92:	608b      	str	r3, [r1, #8]
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop
 8004a98:	e000ed00 	.word	0xe000ed00
 8004a9c:	40023800 	.word	0x40023800
 8004aa0:	24003010 	.word	0x24003010

08004aa4 <MX_TIM10_Init>:
}
/* TIM10 init function */
void MX_TIM10_Init(void)
{

  htim10.Instance = TIM10;
 8004aa4:	480a      	ldr	r0, [pc, #40]	; (8004ad0 <MX_TIM10_Init+0x2c>)
  htim10.Init.Prescaler = 83;
 8004aa6:	490b      	ldr	r1, [pc, #44]	; (8004ad4 <MX_TIM10_Init+0x30>)
{
 8004aa8:	b508      	push	{r3, lr}
  htim10.Init.Prescaler = 83;
 8004aaa:	2353      	movs	r3, #83	; 0x53
 8004aac:	e880 000a 	stmia.w	r0, {r1, r3}
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim10.Init.Period = 999;
 8004ab0:	f240 32e7 	movw	r2, #999	; 0x3e7
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	6083      	str	r3, [r0, #8]
  htim10.Init.Period = 999;
 8004ab8:	60c2      	str	r2, [r0, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004aba:	6103      	str	r3, [r0, #16]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8004abc:	f7fe fcaa 	bl	8003414 <HAL_TIM_Base_Init>
 8004ac0:	b128      	cbz	r0, 8004ace <MX_TIM10_Init+0x2a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004ac2:	21fb      	movs	r1, #251	; 0xfb
 8004ac4:	4804      	ldr	r0, [pc, #16]	; (8004ad8 <MX_TIM10_Init+0x34>)
  }

}
 8004ac6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8004aca:	f7ff bf19 	b.w	8004900 <_Error_Handler>
 8004ace:	bd08      	pop	{r3, pc}
 8004ad0:	200004ac 	.word	0x200004ac
 8004ad4:	40014400 	.word	0x40014400
 8004ad8:	08005bc2 	.word	0x08005bc2

08004adc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004adc:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  if(tim_baseHandle->Instance==TIM1)
 8004ade:	6803      	ldr	r3, [r0, #0]
 8004ae0:	4a24      	ldr	r2, [pc, #144]	; (8004b74 <HAL_TIM_Base_MspInit+0x98>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d113      	bne.n	8004b0e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004ae6:	4b24      	ldr	r3, [pc, #144]	; (8004b78 <HAL_TIM_Base_MspInit+0x9c>)
 8004ae8:	2200      	movs	r2, #0
 8004aea:	9200      	str	r2, [sp, #0]
 8004aec:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004aee:	f041 0101 	orr.w	r1, r1, #1
 8004af2:	6459      	str	r1, [r3, #68]	; 0x44
 8004af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004af6:	f003 0301 	and.w	r3, r3, #1
 8004afa:	9300      	str	r3, [sp, #0]
 8004afc:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8004afe:	4611      	mov	r1, r2
 8004b00:	2019      	movs	r0, #25
 8004b02:	f7fc fbc3 	bl	800128c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004b06:	2019      	movs	r0, #25
 8004b08:	f7fc fbf4 	bl	80012f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8004b0c:	e00e      	b.n	8004b2c <HAL_TIM_Base_MspInit+0x50>
  else if(tim_baseHandle->Instance==TIM3)
 8004b0e:	4a1b      	ldr	r2, [pc, #108]	; (8004b7c <HAL_TIM_Base_MspInit+0xa0>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d10e      	bne.n	8004b32 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004b14:	2300      	movs	r3, #0
 8004b16:	9301      	str	r3, [sp, #4]
 8004b18:	4b17      	ldr	r3, [pc, #92]	; (8004b78 <HAL_TIM_Base_MspInit+0x9c>)
 8004b1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b1c:	f042 0202 	orr.w	r2, r2, #2
 8004b20:	641a      	str	r2, [r3, #64]	; 0x40
 8004b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b24:	f003 0302 	and.w	r3, r3, #2
 8004b28:	9301      	str	r3, [sp, #4]
 8004b2a:	9b01      	ldr	r3, [sp, #4]
}
 8004b2c:	b005      	add	sp, #20
 8004b2e:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(tim_baseHandle->Instance==TIM4)
 8004b32:	4a13      	ldr	r2, [pc, #76]	; (8004b80 <HAL_TIM_Base_MspInit+0xa4>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d10c      	bne.n	8004b52 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004b38:	2300      	movs	r3, #0
 8004b3a:	9302      	str	r3, [sp, #8]
 8004b3c:	4b0e      	ldr	r3, [pc, #56]	; (8004b78 <HAL_TIM_Base_MspInit+0x9c>)
 8004b3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b40:	f042 0204 	orr.w	r2, r2, #4
 8004b44:	641a      	str	r2, [r3, #64]	; 0x40
 8004b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b48:	f003 0304 	and.w	r3, r3, #4
 8004b4c:	9302      	str	r3, [sp, #8]
 8004b4e:	9b02      	ldr	r3, [sp, #8]
 8004b50:	e7ec      	b.n	8004b2c <HAL_TIM_Base_MspInit+0x50>
  else if(tim_baseHandle->Instance==TIM10)
 8004b52:	4a0c      	ldr	r2, [pc, #48]	; (8004b84 <HAL_TIM_Base_MspInit+0xa8>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d1e9      	bne.n	8004b2c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8004b58:	4b07      	ldr	r3, [pc, #28]	; (8004b78 <HAL_TIM_Base_MspInit+0x9c>)
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	9203      	str	r2, [sp, #12]
 8004b5e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004b60:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8004b64:	6459      	str	r1, [r3, #68]	; 0x44
 8004b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b6c:	9303      	str	r3, [sp, #12]
 8004b6e:	9b03      	ldr	r3, [sp, #12]
 8004b70:	e7c5      	b.n	8004afe <HAL_TIM_Base_MspInit+0x22>
 8004b72:	bf00      	nop
 8004b74:	40010000 	.word	0x40010000
 8004b78:	40023800 	.word	0x40023800
 8004b7c:	40000400 	.word	0x40000400
 8004b80:	40000800 	.word	0x40000800
 8004b84:	40014400 	.word	0x40014400

08004b88 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004b88:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(timHandle->Instance==TIM1)
 8004b8a:	6803      	ldr	r3, [r0, #0]
 8004b8c:	4a1e      	ldr	r2, [pc, #120]	; (8004c08 <HAL_TIM_MspPostInit+0x80>)
 8004b8e:	4293      	cmp	r3, r2
{
 8004b90:	b086      	sub	sp, #24
  if(timHandle->Instance==TIM1)
 8004b92:	d110      	bne.n	8004bb6 <HAL_TIM_MspPostInit+0x2e>
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 8004b94:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 8004b98:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004b9a:	2312      	movs	r3, #18
 8004b9c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004ba6:	4819      	ldr	r0, [pc, #100]	; (8004c0c <HAL_TIM_MspPostInit+0x84>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004bac:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004bae:	f7fc fd35 	bl	800161c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8004bb2:	b006      	add	sp, #24
 8004bb4:	bd70      	pop	{r4, r5, r6, pc}
  else if(timHandle->Instance==TIM3)
 8004bb6:	4a16      	ldr	r2, [pc, #88]	; (8004c10 <HAL_TIM_MspPostInit+0x88>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d115      	bne.n	8004be8 <HAL_TIM_MspPostInit+0x60>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bbc:	2402      	movs	r4, #2
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004bbe:	23c0      	movs	r3, #192	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bc0:	2600      	movs	r6, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bc2:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bc4:	a901      	add	r1, sp, #4
 8004bc6:	4813      	ldr	r0, [pc, #76]	; (8004c14 <HAL_TIM_MspPostInit+0x8c>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004bc8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bca:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bcc:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bce:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004bd0:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bd2:	f7fc fd23 	bl	800161c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bda:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bdc:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bde:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004be0:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004be2:	a901      	add	r1, sp, #4
 8004be4:	480c      	ldr	r0, [pc, #48]	; (8004c18 <HAL_TIM_MspPostInit+0x90>)
 8004be6:	e7e2      	b.n	8004bae <HAL_TIM_MspPostInit+0x26>
  else if(timHandle->Instance==TIM4)
 8004be8:	4a0c      	ldr	r2, [pc, #48]	; (8004c1c <HAL_TIM_MspPostInit+0x94>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d1e1      	bne.n	8004bb2 <HAL_TIM_MspPostInit+0x2a>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8004bee:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bf2:	2200      	movs	r2, #0
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8004bf4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bf6:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bf8:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bfa:	2203      	movs	r2, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bfc:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bfe:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004c00:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004c02:	a901      	add	r1, sp, #4
 8004c04:	4806      	ldr	r0, [pc, #24]	; (8004c20 <HAL_TIM_MspPostInit+0x98>)
 8004c06:	e7d2      	b.n	8004bae <HAL_TIM_MspPostInit+0x26>
 8004c08:	40010000 	.word	0x40010000
 8004c0c:	40021000 	.word	0x40021000
 8004c10:	40000400 	.word	0x40000400
 8004c14:	40020000 	.word	0x40020000
 8004c18:	40020400 	.word	0x40020400
 8004c1c:	40000800 	.word	0x40000800
 8004c20:	40020c00 	.word	0x40020c00

08004c24 <MX_TIM1_Init>:
{
 8004c24:	b500      	push	{lr}
  htim1.Instance = TIM1;
 8004c26:	483a      	ldr	r0, [pc, #232]	; (8004d10 <MX_TIM1_Init+0xec>)
  htim1.Init.Prescaler = 6;
 8004c28:	493a      	ldr	r1, [pc, #232]	; (8004d14 <MX_TIM1_Init+0xf0>)
 8004c2a:	2306      	movs	r3, #6
{
 8004c2c:	b095      	sub	sp, #84	; 0x54
  htim1.Init.Prescaler = 6;
 8004c2e:	e880 000a 	stmia.w	r0, {r1, r3}
  htim1.Init.Period = 399;
 8004c32:	f240 128f 	movw	r2, #399	; 0x18f
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c36:	2300      	movs	r3, #0
 8004c38:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 399;
 8004c3a:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c3c:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8004c3e:	6143      	str	r3, [r0, #20]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004c40:	f7fe fbe8 	bl	8003414 <HAL_TIM_Base_Init>
 8004c44:	b118      	cbz	r0, 8004c4e <MX_TIM1_Init+0x2a>
    _Error_Handler(__FILE__, __LINE__);
 8004c46:	2144      	movs	r1, #68	; 0x44
 8004c48:	4833      	ldr	r0, [pc, #204]	; (8004d18 <MX_TIM1_Init+0xf4>)
 8004c4a:	f7ff fe59 	bl	8004900 <_Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004c4e:	a914      	add	r1, sp, #80	; 0x50
 8004c50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c54:	f841 3d48 	str.w	r3, [r1, #-72]!
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004c58:	482d      	ldr	r0, [pc, #180]	; (8004d10 <MX_TIM1_Init+0xec>)
 8004c5a:	f7fe fa17 	bl	800308c <HAL_TIM_ConfigClockSource>
 8004c5e:	b118      	cbz	r0, 8004c68 <MX_TIM1_Init+0x44>
    _Error_Handler(__FILE__, __LINE__);
 8004c60:	214a      	movs	r1, #74	; 0x4a
 8004c62:	482d      	ldr	r0, [pc, #180]	; (8004d18 <MX_TIM1_Init+0xf4>)
 8004c64:	f7ff fe4c 	bl	8004900 <_Error_Handler>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004c68:	4829      	ldr	r0, [pc, #164]	; (8004d10 <MX_TIM1_Init+0xec>)
 8004c6a:	f7fe fbed 	bl	8003448 <HAL_TIM_PWM_Init>
 8004c6e:	b118      	cbz	r0, 8004c78 <MX_TIM1_Init+0x54>
    _Error_Handler(__FILE__, __LINE__);
 8004c70:	214f      	movs	r1, #79	; 0x4f
 8004c72:	4829      	ldr	r0, [pc, #164]	; (8004d18 <MX_TIM1_Init+0xf4>)
 8004c74:	f7ff fe44 	bl	8004900 <_Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c78:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004c7a:	4669      	mov	r1, sp
 8004c7c:	4824      	ldr	r0, [pc, #144]	; (8004d10 <MX_TIM1_Init+0xec>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c7e:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c80:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004c82:	f7fe fcb3 	bl	80035ec <HAL_TIMEx_MasterConfigSynchronization>
 8004c86:	b118      	cbz	r0, 8004c90 <MX_TIM1_Init+0x6c>
    _Error_Handler(__FILE__, __LINE__);
 8004c88:	2156      	movs	r1, #86	; 0x56
 8004c8a:	4823      	ldr	r0, [pc, #140]	; (8004d18 <MX_TIM1_Init+0xf4>)
 8004c8c:	f7ff fe38 	bl	8004900 <_Error_Handler>
  sConfigOC.Pulse = 0;
 8004c90:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004c92:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004c94:	a906      	add	r1, sp, #24
 8004c96:	481e      	ldr	r0, [pc, #120]	; (8004d10 <MX_TIM1_Init+0xec>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004c98:	9306      	str	r3, [sp, #24]
  sConfigOC.Pulse = 0;
 8004c9a:	9207      	str	r2, [sp, #28]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004c9c:	9208      	str	r2, [sp, #32]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004c9e:	9209      	str	r2, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004ca0:	920a      	str	r2, [sp, #40]	; 0x28
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004ca2:	920b      	str	r2, [sp, #44]	; 0x2c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004ca4:	920c      	str	r2, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004ca6:	f7fe fc19 	bl	80034dc <HAL_TIM_PWM_ConfigChannel>
 8004caa:	b118      	cbz	r0, 8004cb4 <MX_TIM1_Init+0x90>
    _Error_Handler(__FILE__, __LINE__);
 8004cac:	2162      	movs	r1, #98	; 0x62
 8004cae:	481a      	ldr	r0, [pc, #104]	; (8004d18 <MX_TIM1_Init+0xf4>)
 8004cb0:	f7ff fe26 	bl	8004900 <_Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004cb4:	2204      	movs	r2, #4
 8004cb6:	a906      	add	r1, sp, #24
 8004cb8:	4815      	ldr	r0, [pc, #84]	; (8004d10 <MX_TIM1_Init+0xec>)
 8004cba:	f7fe fc0f 	bl	80034dc <HAL_TIM_PWM_ConfigChannel>
 8004cbe:	b118      	cbz	r0, 8004cc8 <MX_TIM1_Init+0xa4>
    _Error_Handler(__FILE__, __LINE__);
 8004cc0:	2167      	movs	r1, #103	; 0x67
 8004cc2:	4815      	ldr	r0, [pc, #84]	; (8004d18 <MX_TIM1_Init+0xf4>)
 8004cc4:	f7ff fe1c 	bl	8004900 <_Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004cc8:	2208      	movs	r2, #8
 8004cca:	a906      	add	r1, sp, #24
 8004ccc:	4810      	ldr	r0, [pc, #64]	; (8004d10 <MX_TIM1_Init+0xec>)
 8004cce:	f7fe fc05 	bl	80034dc <HAL_TIM_PWM_ConfigChannel>
 8004cd2:	b118      	cbz	r0, 8004cdc <MX_TIM1_Init+0xb8>
    _Error_Handler(__FILE__, __LINE__);
 8004cd4:	216c      	movs	r1, #108	; 0x6c
 8004cd6:	4810      	ldr	r0, [pc, #64]	; (8004d18 <MX_TIM1_Init+0xf4>)
 8004cd8:	f7ff fe12 	bl	8004900 <_Error_Handler>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004cdc:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004cde:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004ce2:	a90d      	add	r1, sp, #52	; 0x34
 8004ce4:	480a      	ldr	r0, [pc, #40]	; (8004d10 <MX_TIM1_Init+0xec>)
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004ce6:	930d      	str	r3, [sp, #52]	; 0x34
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004ce8:	930e      	str	r3, [sp, #56]	; 0x38
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004cea:	930f      	str	r3, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.DeadTime = 0;
 8004cec:	9310      	str	r3, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004cee:	9311      	str	r3, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004cf0:	9212      	str	r2, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004cf2:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004cf4:	f7fe fc9c 	bl	8003630 <HAL_TIMEx_ConfigBreakDeadTime>
 8004cf8:	b118      	cbz	r0, 8004d02 <MX_TIM1_Init+0xde>
    _Error_Handler(__FILE__, __LINE__);
 8004cfa:	2178      	movs	r1, #120	; 0x78
 8004cfc:	4806      	ldr	r0, [pc, #24]	; (8004d18 <MX_TIM1_Init+0xf4>)
 8004cfe:	f7ff fdff 	bl	8004900 <_Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 8004d02:	4803      	ldr	r0, [pc, #12]	; (8004d10 <MX_TIM1_Init+0xec>)
 8004d04:	f7ff ff40 	bl	8004b88 <HAL_TIM_MspPostInit>
}
 8004d08:	b015      	add	sp, #84	; 0x54
 8004d0a:	f85d fb04 	ldr.w	pc, [sp], #4
 8004d0e:	bf00      	nop
 8004d10:	20000524 	.word	0x20000524
 8004d14:	40010000 	.word	0x40010000
 8004d18:	08005bc2 	.word	0x08005bc2

08004d1c <MX_TIM3_Init>:
{
 8004d1c:	b500      	push	{lr}
  htim3.Instance = TIM3;
 8004d1e:	482e      	ldr	r0, [pc, #184]	; (8004dd8 <MX_TIM3_Init+0xbc>)
  htim3.Init.Prescaler = 6;
 8004d20:	492e      	ldr	r1, [pc, #184]	; (8004ddc <MX_TIM3_Init+0xc0>)
 8004d22:	2306      	movs	r3, #6
{
 8004d24:	b08f      	sub	sp, #60	; 0x3c
  htim3.Init.Prescaler = 6;
 8004d26:	e880 000a 	stmia.w	r0, {r1, r3}
  htim3.Init.Period = 399;
 8004d2a:	f240 128f 	movw	r2, #399	; 0x18f
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 399;
 8004d32:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d34:	6103      	str	r3, [r0, #16]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004d36:	f7fe fb6d 	bl	8003414 <HAL_TIM_Base_Init>
 8004d3a:	b118      	cbz	r0, 8004d44 <MX_TIM3_Init+0x28>
    _Error_Handler(__FILE__, __LINE__);
 8004d3c:	218c      	movs	r1, #140	; 0x8c
 8004d3e:	4828      	ldr	r0, [pc, #160]	; (8004de0 <MX_TIM3_Init+0xc4>)
 8004d40:	f7ff fdde 	bl	8004900 <_Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004d44:	a90e      	add	r1, sp, #56	; 0x38
 8004d46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d4a:	f841 3d2c 	str.w	r3, [r1, #-44]!
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004d4e:	4822      	ldr	r0, [pc, #136]	; (8004dd8 <MX_TIM3_Init+0xbc>)
 8004d50:	f7fe f99c 	bl	800308c <HAL_TIM_ConfigClockSource>
 8004d54:	b118      	cbz	r0, 8004d5e <MX_TIM3_Init+0x42>
    _Error_Handler(__FILE__, __LINE__);
 8004d56:	2192      	movs	r1, #146	; 0x92
 8004d58:	4821      	ldr	r0, [pc, #132]	; (8004de0 <MX_TIM3_Init+0xc4>)
 8004d5a:	f7ff fdd1 	bl	8004900 <_Error_Handler>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004d5e:	481e      	ldr	r0, [pc, #120]	; (8004dd8 <MX_TIM3_Init+0xbc>)
 8004d60:	f7fe fb72 	bl	8003448 <HAL_TIM_PWM_Init>
 8004d64:	b118      	cbz	r0, 8004d6e <MX_TIM3_Init+0x52>
    _Error_Handler(__FILE__, __LINE__);
 8004d66:	2197      	movs	r1, #151	; 0x97
 8004d68:	481d      	ldr	r0, [pc, #116]	; (8004de0 <MX_TIM3_Init+0xc4>)
 8004d6a:	f7ff fdc9 	bl	8004900 <_Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d6e:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004d70:	a901      	add	r1, sp, #4
 8004d72:	4819      	ldr	r0, [pc, #100]	; (8004dd8 <MX_TIM3_Init+0xbc>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d74:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d76:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004d78:	f7fe fc38 	bl	80035ec <HAL_TIMEx_MasterConfigSynchronization>
 8004d7c:	b118      	cbz	r0, 8004d86 <MX_TIM3_Init+0x6a>
    _Error_Handler(__FILE__, __LINE__);
 8004d7e:	219e      	movs	r1, #158	; 0x9e
 8004d80:	4817      	ldr	r0, [pc, #92]	; (8004de0 <MX_TIM3_Init+0xc4>)
 8004d82:	f7ff fdbd 	bl	8004900 <_Error_Handler>
  sConfigOC.Pulse = 0;
 8004d86:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004d88:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004d8a:	a907      	add	r1, sp, #28
 8004d8c:	4812      	ldr	r0, [pc, #72]	; (8004dd8 <MX_TIM3_Init+0xbc>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004d8e:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 0;
 8004d90:	9208      	str	r2, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004d92:	9209      	str	r2, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004d94:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004d96:	f7fe fba1 	bl	80034dc <HAL_TIM_PWM_ConfigChannel>
 8004d9a:	b118      	cbz	r0, 8004da4 <MX_TIM3_Init+0x88>
    _Error_Handler(__FILE__, __LINE__);
 8004d9c:	21a7      	movs	r1, #167	; 0xa7
 8004d9e:	4810      	ldr	r0, [pc, #64]	; (8004de0 <MX_TIM3_Init+0xc4>)
 8004da0:	f7ff fdae 	bl	8004900 <_Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004da4:	2204      	movs	r2, #4
 8004da6:	a907      	add	r1, sp, #28
 8004da8:	480b      	ldr	r0, [pc, #44]	; (8004dd8 <MX_TIM3_Init+0xbc>)
 8004daa:	f7fe fb97 	bl	80034dc <HAL_TIM_PWM_ConfigChannel>
 8004dae:	b118      	cbz	r0, 8004db8 <MX_TIM3_Init+0x9c>
    _Error_Handler(__FILE__, __LINE__);
 8004db0:	21ac      	movs	r1, #172	; 0xac
 8004db2:	480b      	ldr	r0, [pc, #44]	; (8004de0 <MX_TIM3_Init+0xc4>)
 8004db4:	f7ff fda4 	bl	8004900 <_Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004db8:	2208      	movs	r2, #8
 8004dba:	a907      	add	r1, sp, #28
 8004dbc:	4806      	ldr	r0, [pc, #24]	; (8004dd8 <MX_TIM3_Init+0xbc>)
 8004dbe:	f7fe fb8d 	bl	80034dc <HAL_TIM_PWM_ConfigChannel>
 8004dc2:	b118      	cbz	r0, 8004dcc <MX_TIM3_Init+0xb0>
    _Error_Handler(__FILE__, __LINE__);
 8004dc4:	21b1      	movs	r1, #177	; 0xb1
 8004dc6:	4806      	ldr	r0, [pc, #24]	; (8004de0 <MX_TIM3_Init+0xc4>)
 8004dc8:	f7ff fd9a 	bl	8004900 <_Error_Handler>
  HAL_TIM_MspPostInit(&htim3);
 8004dcc:	4802      	ldr	r0, [pc, #8]	; (8004dd8 <MX_TIM3_Init+0xbc>)
 8004dce:	f7ff fedb 	bl	8004b88 <HAL_TIM_MspPostInit>
}
 8004dd2:	b00f      	add	sp, #60	; 0x3c
 8004dd4:	f85d fb04 	ldr.w	pc, [sp], #4
 8004dd8:	200004e8 	.word	0x200004e8
 8004ddc:	40000400 	.word	0x40000400
 8004de0:	08005bc2 	.word	0x08005bc2

08004de4 <MX_TIM4_Init>:
{
 8004de4:	b500      	push	{lr}
  htim4.Instance = TIM4;
 8004de6:	482e      	ldr	r0, [pc, #184]	; (8004ea0 <MX_TIM4_Init+0xbc>)
  htim4.Init.Prescaler = 6;
 8004de8:	492e      	ldr	r1, [pc, #184]	; (8004ea4 <MX_TIM4_Init+0xc0>)
 8004dea:	2306      	movs	r3, #6
{
 8004dec:	b08f      	sub	sp, #60	; 0x3c
  htim4.Init.Prescaler = 6;
 8004dee:	e880 000a 	stmia.w	r0, {r1, r3}
  htim4.Init.Period = 399;
 8004df2:	f240 128f 	movw	r2, #399	; 0x18f
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004df6:	2300      	movs	r3, #0
 8004df8:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 399;
 8004dfa:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004dfc:	6103      	str	r3, [r0, #16]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004dfe:	f7fe fb09 	bl	8003414 <HAL_TIM_Base_Init>
 8004e02:	b118      	cbz	r0, 8004e0c <MX_TIM4_Init+0x28>
    _Error_Handler(__FILE__, __LINE__);
 8004e04:	21c5      	movs	r1, #197	; 0xc5
 8004e06:	4828      	ldr	r0, [pc, #160]	; (8004ea8 <MX_TIM4_Init+0xc4>)
 8004e08:	f7ff fd7a 	bl	8004900 <_Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004e0c:	a90e      	add	r1, sp, #56	; 0x38
 8004e0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e12:	f841 3d2c 	str.w	r3, [r1, #-44]!
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004e16:	4822      	ldr	r0, [pc, #136]	; (8004ea0 <MX_TIM4_Init+0xbc>)
 8004e18:	f7fe f938 	bl	800308c <HAL_TIM_ConfigClockSource>
 8004e1c:	b118      	cbz	r0, 8004e26 <MX_TIM4_Init+0x42>
    _Error_Handler(__FILE__, __LINE__);
 8004e1e:	21cb      	movs	r1, #203	; 0xcb
 8004e20:	4821      	ldr	r0, [pc, #132]	; (8004ea8 <MX_TIM4_Init+0xc4>)
 8004e22:	f7ff fd6d 	bl	8004900 <_Error_Handler>
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004e26:	481e      	ldr	r0, [pc, #120]	; (8004ea0 <MX_TIM4_Init+0xbc>)
 8004e28:	f7fe fb0e 	bl	8003448 <HAL_TIM_PWM_Init>
 8004e2c:	b118      	cbz	r0, 8004e36 <MX_TIM4_Init+0x52>
    _Error_Handler(__FILE__, __LINE__);
 8004e2e:	21d0      	movs	r1, #208	; 0xd0
 8004e30:	481d      	ldr	r0, [pc, #116]	; (8004ea8 <MX_TIM4_Init+0xc4>)
 8004e32:	f7ff fd65 	bl	8004900 <_Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e36:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004e38:	a901      	add	r1, sp, #4
 8004e3a:	4819      	ldr	r0, [pc, #100]	; (8004ea0 <MX_TIM4_Init+0xbc>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e3c:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e3e:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004e40:	f7fe fbd4 	bl	80035ec <HAL_TIMEx_MasterConfigSynchronization>
 8004e44:	b118      	cbz	r0, 8004e4e <MX_TIM4_Init+0x6a>
    _Error_Handler(__FILE__, __LINE__);
 8004e46:	21d7      	movs	r1, #215	; 0xd7
 8004e48:	4817      	ldr	r0, [pc, #92]	; (8004ea8 <MX_TIM4_Init+0xc4>)
 8004e4a:	f7ff fd59 	bl	8004900 <_Error_Handler>
  sConfigOC.Pulse = 0;
 8004e4e:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004e50:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004e52:	a907      	add	r1, sp, #28
 8004e54:	4812      	ldr	r0, [pc, #72]	; (8004ea0 <MX_TIM4_Init+0xbc>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004e56:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 0;
 8004e58:	9208      	str	r2, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004e5a:	9209      	str	r2, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004e5c:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004e5e:	f7fe fb3d 	bl	80034dc <HAL_TIM_PWM_ConfigChannel>
 8004e62:	b118      	cbz	r0, 8004e6c <MX_TIM4_Init+0x88>
    _Error_Handler(__FILE__, __LINE__);
 8004e64:	21e0      	movs	r1, #224	; 0xe0
 8004e66:	4810      	ldr	r0, [pc, #64]	; (8004ea8 <MX_TIM4_Init+0xc4>)
 8004e68:	f7ff fd4a 	bl	8004900 <_Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004e6c:	2204      	movs	r2, #4
 8004e6e:	a907      	add	r1, sp, #28
 8004e70:	480b      	ldr	r0, [pc, #44]	; (8004ea0 <MX_TIM4_Init+0xbc>)
 8004e72:	f7fe fb33 	bl	80034dc <HAL_TIM_PWM_ConfigChannel>
 8004e76:	b118      	cbz	r0, 8004e80 <MX_TIM4_Init+0x9c>
    _Error_Handler(__FILE__, __LINE__);
 8004e78:	21e5      	movs	r1, #229	; 0xe5
 8004e7a:	480b      	ldr	r0, [pc, #44]	; (8004ea8 <MX_TIM4_Init+0xc4>)
 8004e7c:	f7ff fd40 	bl	8004900 <_Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004e80:	2208      	movs	r2, #8
 8004e82:	a907      	add	r1, sp, #28
 8004e84:	4806      	ldr	r0, [pc, #24]	; (8004ea0 <MX_TIM4_Init+0xbc>)
 8004e86:	f7fe fb29 	bl	80034dc <HAL_TIM_PWM_ConfigChannel>
 8004e8a:	b118      	cbz	r0, 8004e94 <MX_TIM4_Init+0xb0>
    _Error_Handler(__FILE__, __LINE__);
 8004e8c:	21ea      	movs	r1, #234	; 0xea
 8004e8e:	4806      	ldr	r0, [pc, #24]	; (8004ea8 <MX_TIM4_Init+0xc4>)
 8004e90:	f7ff fd36 	bl	8004900 <_Error_Handler>
  HAL_TIM_MspPostInit(&htim4);
 8004e94:	4802      	ldr	r0, [pc, #8]	; (8004ea0 <MX_TIM4_Init+0xbc>)
 8004e96:	f7ff fe77 	bl	8004b88 <HAL_TIM_MspPostInit>
}
 8004e9a:	b00f      	add	sp, #60	; 0x3c
 8004e9c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004ea0:	20000470 	.word	0x20000470
 8004ea4:	40000800 	.word	0x40000800
 8004ea8:	08005bc2 	.word	0x08005bc2

08004eac <MX_USART3_Init>:

USART_HandleTypeDef husart3;

/* USART3 init function */
void MX_USART3_Init(void)
{
 8004eac:	b508      	push	{r3, lr}

  husart3.Instance = USART3;
 8004eae:	480c      	ldr	r0, [pc, #48]	; (8004ee0 <MX_USART3_Init+0x34>)
  husart3.Init.BaudRate = 115200;
 8004eb0:	4b0c      	ldr	r3, [pc, #48]	; (8004ee4 <MX_USART3_Init+0x38>)
 8004eb2:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8004eb6:	e880 4008 	stmia.w	r0, {r3, lr}
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
  husart3.Init.StopBits = USART_STOPBITS_1;
  husart3.Init.Parity = USART_PARITY_NONE;
  husart3.Init.Mode = USART_MODE_TX_RX;
 8004eba:	220c      	movs	r2, #12
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	6083      	str	r3, [r0, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 8004ec0:	60c3      	str	r3, [r0, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 8004ec2:	6103      	str	r3, [r0, #16]
  husart3.Init.Mode = USART_MODE_TX_RX;
 8004ec4:	6142      	str	r2, [r0, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_LOW;
 8004ec6:	6183      	str	r3, [r0, #24]
  husart3.Init.CLKPhase = USART_PHASE_1EDGE;
 8004ec8:	61c3      	str	r3, [r0, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8004eca:	6203      	str	r3, [r0, #32]
  if (HAL_USART_Init(&husart3) != HAL_OK)
 8004ecc:	f7fe fbe6 	bl	800369c <HAL_USART_Init>
 8004ed0:	b128      	cbz	r0, 8004ede <MX_USART3_Init+0x32>
  {
    _Error_Handler(__FILE__, __LINE__);
 8004ed2:	2142      	movs	r1, #66	; 0x42
 8004ed4:	4804      	ldr	r0, [pc, #16]	; (8004ee8 <MX_USART3_Init+0x3c>)
  }

}
 8004ed6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8004eda:	f7ff bd11 	b.w	8004900 <_Error_Handler>
 8004ede:	bd08      	pop	{r3, pc}
 8004ee0:	20000560 	.word	0x20000560
 8004ee4:	40004800 	.word	0x40004800
 8004ee8:	08005bcf 	.word	0x08005bcf

08004eec <HAL_USART_MspInit>:

void HAL_USART_MspInit(USART_HandleTypeDef* usartHandle)
{
 8004eec:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(usartHandle->Instance==USART3)
 8004eee:	6802      	ldr	r2, [r0, #0]
 8004ef0:	4b19      	ldr	r3, [pc, #100]	; (8004f58 <HAL_USART_MspInit+0x6c>)
 8004ef2:	429a      	cmp	r2, r3
{
 8004ef4:	b087      	sub	sp, #28
  if(usartHandle->Instance==USART3)
 8004ef6:	d12d      	bne.n	8004f54 <HAL_USART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004ef8:	2400      	movs	r4, #0
 8004efa:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 8004efe:	9400      	str	r4, [sp, #0]
 8004f00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f02:	4816      	ldr	r0, [pc, #88]	; (8004f5c <HAL_USART_MspInit+0x70>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8004f04:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004f08:	641a      	str	r2, [r3, #64]	; 0x40
 8004f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f0c:	9403      	str	r4, [sp, #12]
    __HAL_RCC_USART3_CLK_ENABLE();
 8004f0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f12:	9300      	str	r3, [sp, #0]
 8004f14:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f16:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004f18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f1c:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004f1e:	2507      	movs	r5, #7
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f20:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004f22:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f24:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f26:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004f28:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f2a:	f7fc fb77 	bl	800161c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004f2e:	f44f 7340 	mov.w	r3, #768	; 0x300
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004f32:	a901      	add	r1, sp, #4
 8004f34:	480a      	ldr	r0, [pc, #40]	; (8004f60 <HAL_USART_MspInit+0x74>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004f36:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f38:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f3a:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f3c:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004f3e:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004f40:	f7fc fb6c 	bl	800161c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8004f44:	2027      	movs	r0, #39	; 0x27
 8004f46:	4622      	mov	r2, r4
 8004f48:	4621      	mov	r1, r4
 8004f4a:	f7fc f99f 	bl	800128c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004f4e:	2027      	movs	r0, #39	; 0x27
 8004f50:	f7fc f9d0 	bl	80012f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004f54:	b007      	add	sp, #28
 8004f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f58:	40004800 	.word	0x40004800
 8004f5c:	40020400 	.word	0x40020400
 8004f60:	40020c00 	.word	0x40020c00

08004f64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004f64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004f9c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004f68:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004f6a:	e003      	b.n	8004f74 <LoopCopyDataInit>

08004f6c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004f6c:	4b0c      	ldr	r3, [pc, #48]	; (8004fa0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004f6e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004f70:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004f72:	3104      	adds	r1, #4

08004f74 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004f74:	480b      	ldr	r0, [pc, #44]	; (8004fa4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004f76:	4b0c      	ldr	r3, [pc, #48]	; (8004fa8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004f78:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004f7a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004f7c:	d3f6      	bcc.n	8004f6c <CopyDataInit>
  ldr  r2, =_sbss
 8004f7e:	4a0b      	ldr	r2, [pc, #44]	; (8004fac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004f80:	e002      	b.n	8004f88 <LoopFillZerobss>

08004f82 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004f82:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004f84:	f842 3b04 	str.w	r3, [r2], #4

08004f88 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004f88:	4b09      	ldr	r3, [pc, #36]	; (8004fb0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004f8a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004f8c:	d3f9      	bcc.n	8004f82 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004f8e:	f7ff fd63 	bl	8004a58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004f92:	f000 f811 	bl	8004fb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004f96:	f7ff fc4d 	bl	8004834 <main>
  bx  lr    
 8004f9a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004f9c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004fa0:	08005c38 	.word	0x08005c38
  ldr  r0, =_sdata
 8004fa4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004fa8:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8004fac:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8004fb0:	200005a4 	.word	0x200005a4

08004fb4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004fb4:	e7fe      	b.n	8004fb4 <CAN1_RX0_IRQHandler>
	...

08004fb8 <__libc_init_array>:
 8004fb8:	b570      	push	{r4, r5, r6, lr}
 8004fba:	4e0d      	ldr	r6, [pc, #52]	; (8004ff0 <__libc_init_array+0x38>)
 8004fbc:	4c0d      	ldr	r4, [pc, #52]	; (8004ff4 <__libc_init_array+0x3c>)
 8004fbe:	1ba4      	subs	r4, r4, r6
 8004fc0:	10a4      	asrs	r4, r4, #2
 8004fc2:	2500      	movs	r5, #0
 8004fc4:	42a5      	cmp	r5, r4
 8004fc6:	d109      	bne.n	8004fdc <__libc_init_array+0x24>
 8004fc8:	4e0b      	ldr	r6, [pc, #44]	; (8004ff8 <__libc_init_array+0x40>)
 8004fca:	4c0c      	ldr	r4, [pc, #48]	; (8004ffc <__libc_init_array+0x44>)
 8004fcc:	f000 fdce 	bl	8005b6c <_init>
 8004fd0:	1ba4      	subs	r4, r4, r6
 8004fd2:	10a4      	asrs	r4, r4, #2
 8004fd4:	2500      	movs	r5, #0
 8004fd6:	42a5      	cmp	r5, r4
 8004fd8:	d105      	bne.n	8004fe6 <__libc_init_array+0x2e>
 8004fda:	bd70      	pop	{r4, r5, r6, pc}
 8004fdc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004fe0:	4798      	blx	r3
 8004fe2:	3501      	adds	r5, #1
 8004fe4:	e7ee      	b.n	8004fc4 <__libc_init_array+0xc>
 8004fe6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004fea:	4798      	blx	r3
 8004fec:	3501      	adds	r5, #1
 8004fee:	e7f2      	b.n	8004fd6 <__libc_init_array+0x1e>
 8004ff0:	08005c30 	.word	0x08005c30
 8004ff4:	08005c30 	.word	0x08005c30
 8004ff8:	08005c30 	.word	0x08005c30
 8004ffc:	08005c34 	.word	0x08005c34

08005000 <asin>:
 8005000:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005002:	ed2d 8b02 	vpush	{d8}
 8005006:	4e26      	ldr	r6, [pc, #152]	; (80050a0 <asin+0xa0>)
 8005008:	b08b      	sub	sp, #44	; 0x2c
 800500a:	ec55 4b10 	vmov	r4, r5, d0
 800500e:	f000 f853 	bl	80050b8 <__ieee754_asin>
 8005012:	f996 3000 	ldrsb.w	r3, [r6]
 8005016:	eeb0 8a40 	vmov.f32	s16, s0
 800501a:	eef0 8a60 	vmov.f32	s17, s1
 800501e:	3301      	adds	r3, #1
 8005020:	d036      	beq.n	8005090 <asin+0x90>
 8005022:	4622      	mov	r2, r4
 8005024:	462b      	mov	r3, r5
 8005026:	4620      	mov	r0, r4
 8005028:	4629      	mov	r1, r5
 800502a:	f7fb fd1f 	bl	8000a6c <__aeabi_dcmpun>
 800502e:	4607      	mov	r7, r0
 8005030:	bb70      	cbnz	r0, 8005090 <asin+0x90>
 8005032:	ec45 4b10 	vmov	d0, r4, r5
 8005036:	f000 fd7f 	bl	8005b38 <fabs>
 800503a:	2200      	movs	r2, #0
 800503c:	4b19      	ldr	r3, [pc, #100]	; (80050a4 <asin+0xa4>)
 800503e:	ec51 0b10 	vmov	r0, r1, d0
 8005042:	f7fb fd09 	bl	8000a58 <__aeabi_dcmpgt>
 8005046:	b318      	cbz	r0, 8005090 <asin+0x90>
 8005048:	2301      	movs	r3, #1
 800504a:	9300      	str	r3, [sp, #0]
 800504c:	4816      	ldr	r0, [pc, #88]	; (80050a8 <asin+0xa8>)
 800504e:	4b17      	ldr	r3, [pc, #92]	; (80050ac <asin+0xac>)
 8005050:	9301      	str	r3, [sp, #4]
 8005052:	9708      	str	r7, [sp, #32]
 8005054:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8005058:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800505c:	f000 fd78 	bl	8005b50 <nan>
 8005060:	f996 3000 	ldrsb.w	r3, [r6]
 8005064:	2b02      	cmp	r3, #2
 8005066:	ed8d 0b06 	vstr	d0, [sp, #24]
 800506a:	d104      	bne.n	8005076 <asin+0x76>
 800506c:	f000 fd78 	bl	8005b60 <__errno>
 8005070:	2321      	movs	r3, #33	; 0x21
 8005072:	6003      	str	r3, [r0, #0]
 8005074:	e004      	b.n	8005080 <asin+0x80>
 8005076:	4668      	mov	r0, sp
 8005078:	f000 fd65 	bl	8005b46 <matherr>
 800507c:	2800      	cmp	r0, #0
 800507e:	d0f5      	beq.n	800506c <asin+0x6c>
 8005080:	9b08      	ldr	r3, [sp, #32]
 8005082:	b11b      	cbz	r3, 800508c <asin+0x8c>
 8005084:	f000 fd6c 	bl	8005b60 <__errno>
 8005088:	9b08      	ldr	r3, [sp, #32]
 800508a:	6003      	str	r3, [r0, #0]
 800508c:	ed9d 8b06 	vldr	d8, [sp, #24]
 8005090:	eeb0 0a48 	vmov.f32	s0, s16
 8005094:	eef0 0a68 	vmov.f32	s1, s17
 8005098:	b00b      	add	sp, #44	; 0x2c
 800509a:	ecbd 8b02 	vpop	{d8}
 800509e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050a0:	20000010 	.word	0x20000010
 80050a4:	3ff00000 	.word	0x3ff00000
 80050a8:	08005ba9 	.word	0x08005ba9
 80050ac:	08005bde 	.word	0x08005bde

080050b0 <atan2>:
 80050b0:	f000 ba0e 	b.w	80054d0 <__ieee754_atan2>
 80050b4:	0000      	movs	r0, r0
	...

080050b8 <__ieee754_asin>:
 80050b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050bc:	ec55 4b10 	vmov	r4, r5, d0
 80050c0:	4bcb      	ldr	r3, [pc, #812]	; (80053f0 <__ieee754_asin+0x338>)
 80050c2:	b085      	sub	sp, #20
 80050c4:	f025 4b00 	bic.w	fp, r5, #2147483648	; 0x80000000
 80050c8:	459b      	cmp	fp, r3
 80050ca:	9501      	str	r5, [sp, #4]
 80050cc:	dd32      	ble.n	8005134 <__ieee754_asin+0x7c>
 80050ce:	ee10 3a10 	vmov	r3, s0
 80050d2:	f10b 4b40 	add.w	fp, fp, #3221225472	; 0xc0000000
 80050d6:	f50b 1b80 	add.w	fp, fp, #1048576	; 0x100000
 80050da:	ea5b 0303 	orrs.w	r3, fp, r3
 80050de:	d117      	bne.n	8005110 <__ieee754_asin+0x58>
 80050e0:	a3a9      	add	r3, pc, #676	; (adr r3, 8005388 <__ieee754_asin+0x2d0>)
 80050e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e6:	ee10 0a10 	vmov	r0, s0
 80050ea:	4629      	mov	r1, r5
 80050ec:	f7fb fa24 	bl	8000538 <__aeabi_dmul>
 80050f0:	a3a7      	add	r3, pc, #668	; (adr r3, 8005390 <__ieee754_asin+0x2d8>)
 80050f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f6:	4606      	mov	r6, r0
 80050f8:	460f      	mov	r7, r1
 80050fa:	4620      	mov	r0, r4
 80050fc:	4629      	mov	r1, r5
 80050fe:	f7fb fa1b 	bl	8000538 <__aeabi_dmul>
 8005102:	4602      	mov	r2, r0
 8005104:	460b      	mov	r3, r1
 8005106:	4630      	mov	r0, r6
 8005108:	4639      	mov	r1, r7
 800510a:	f7fb f863 	bl	80001d4 <__adddf3>
 800510e:	e00a      	b.n	8005126 <__ieee754_asin+0x6e>
 8005110:	ee10 2a10 	vmov	r2, s0
 8005114:	462b      	mov	r3, r5
 8005116:	4620      	mov	r0, r4
 8005118:	4629      	mov	r1, r5
 800511a:	f7fb f859 	bl	80001d0 <__aeabi_dsub>
 800511e:	4602      	mov	r2, r0
 8005120:	460b      	mov	r3, r1
 8005122:	f7fb fb33 	bl	800078c <__aeabi_ddiv>
 8005126:	4604      	mov	r4, r0
 8005128:	460d      	mov	r5, r1
 800512a:	ec45 4b10 	vmov	d0, r4, r5
 800512e:	b005      	add	sp, #20
 8005130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005134:	4baf      	ldr	r3, [pc, #700]	; (80053f4 <__ieee754_asin+0x33c>)
 8005136:	459b      	cmp	fp, r3
 8005138:	dc11      	bgt.n	800515e <__ieee754_asin+0xa6>
 800513a:	f1bb 5f79 	cmp.w	fp, #1044381696	; 0x3e400000
 800513e:	f280 80b0 	bge.w	80052a2 <__ieee754_asin+0x1ea>
 8005142:	a395      	add	r3, pc, #596	; (adr r3, 8005398 <__ieee754_asin+0x2e0>)
 8005144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005148:	ee10 0a10 	vmov	r0, s0
 800514c:	4629      	mov	r1, r5
 800514e:	f7fb f841 	bl	80001d4 <__adddf3>
 8005152:	2200      	movs	r2, #0
 8005154:	4ba8      	ldr	r3, [pc, #672]	; (80053f8 <__ieee754_asin+0x340>)
 8005156:	f7fb fc7f 	bl	8000a58 <__aeabi_dcmpgt>
 800515a:	2800      	cmp	r0, #0
 800515c:	d1e5      	bne.n	800512a <__ieee754_asin+0x72>
 800515e:	ec45 4b10 	vmov	d0, r4, r5
 8005162:	f000 fce9 	bl	8005b38 <fabs>
 8005166:	2000      	movs	r0, #0
 8005168:	ec53 2b10 	vmov	r2, r3, d0
 800516c:	49a2      	ldr	r1, [pc, #648]	; (80053f8 <__ieee754_asin+0x340>)
 800516e:	f7fb f82f 	bl	80001d0 <__aeabi_dsub>
 8005172:	2200      	movs	r2, #0
 8005174:	4ba1      	ldr	r3, [pc, #644]	; (80053fc <__ieee754_asin+0x344>)
 8005176:	f7fb f9df 	bl	8000538 <__aeabi_dmul>
 800517a:	a389      	add	r3, pc, #548	; (adr r3, 80053a0 <__ieee754_asin+0x2e8>)
 800517c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005180:	4604      	mov	r4, r0
 8005182:	460d      	mov	r5, r1
 8005184:	f7fb f9d8 	bl	8000538 <__aeabi_dmul>
 8005188:	a387      	add	r3, pc, #540	; (adr r3, 80053a8 <__ieee754_asin+0x2f0>)
 800518a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800518e:	f7fb f821 	bl	80001d4 <__adddf3>
 8005192:	4622      	mov	r2, r4
 8005194:	462b      	mov	r3, r5
 8005196:	f7fb f9cf 	bl	8000538 <__aeabi_dmul>
 800519a:	a385      	add	r3, pc, #532	; (adr r3, 80053b0 <__ieee754_asin+0x2f8>)
 800519c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a0:	f7fb f816 	bl	80001d0 <__aeabi_dsub>
 80051a4:	4622      	mov	r2, r4
 80051a6:	462b      	mov	r3, r5
 80051a8:	f7fb f9c6 	bl	8000538 <__aeabi_dmul>
 80051ac:	a382      	add	r3, pc, #520	; (adr r3, 80053b8 <__ieee754_asin+0x300>)
 80051ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b2:	f7fb f80f 	bl	80001d4 <__adddf3>
 80051b6:	4622      	mov	r2, r4
 80051b8:	462b      	mov	r3, r5
 80051ba:	f7fb f9bd 	bl	8000538 <__aeabi_dmul>
 80051be:	a380      	add	r3, pc, #512	; (adr r3, 80053c0 <__ieee754_asin+0x308>)
 80051c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c4:	f7fb f804 	bl	80001d0 <__aeabi_dsub>
 80051c8:	4622      	mov	r2, r4
 80051ca:	462b      	mov	r3, r5
 80051cc:	f7fb f9b4 	bl	8000538 <__aeabi_dmul>
 80051d0:	a37d      	add	r3, pc, #500	; (adr r3, 80053c8 <__ieee754_asin+0x310>)
 80051d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d6:	f7fa fffd 	bl	80001d4 <__adddf3>
 80051da:	4622      	mov	r2, r4
 80051dc:	462b      	mov	r3, r5
 80051de:	f7fb f9ab 	bl	8000538 <__aeabi_dmul>
 80051e2:	a37b      	add	r3, pc, #492	; (adr r3, 80053d0 <__ieee754_asin+0x318>)
 80051e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e8:	4680      	mov	r8, r0
 80051ea:	4689      	mov	r9, r1
 80051ec:	4620      	mov	r0, r4
 80051ee:	4629      	mov	r1, r5
 80051f0:	f7fb f9a2 	bl	8000538 <__aeabi_dmul>
 80051f4:	a378      	add	r3, pc, #480	; (adr r3, 80053d8 <__ieee754_asin+0x320>)
 80051f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051fa:	f7fa ffe9 	bl	80001d0 <__aeabi_dsub>
 80051fe:	4622      	mov	r2, r4
 8005200:	462b      	mov	r3, r5
 8005202:	f7fb f999 	bl	8000538 <__aeabi_dmul>
 8005206:	a376      	add	r3, pc, #472	; (adr r3, 80053e0 <__ieee754_asin+0x328>)
 8005208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800520c:	f7fa ffe2 	bl	80001d4 <__adddf3>
 8005210:	4622      	mov	r2, r4
 8005212:	462b      	mov	r3, r5
 8005214:	f7fb f990 	bl	8000538 <__aeabi_dmul>
 8005218:	a373      	add	r3, pc, #460	; (adr r3, 80053e8 <__ieee754_asin+0x330>)
 800521a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800521e:	f7fa ffd7 	bl	80001d0 <__aeabi_dsub>
 8005222:	4622      	mov	r2, r4
 8005224:	462b      	mov	r3, r5
 8005226:	f7fb f987 	bl	8000538 <__aeabi_dmul>
 800522a:	2200      	movs	r2, #0
 800522c:	4b72      	ldr	r3, [pc, #456]	; (80053f8 <__ieee754_asin+0x340>)
 800522e:	f7fa ffd1 	bl	80001d4 <__adddf3>
 8005232:	ec45 4b10 	vmov	d0, r4, r5
 8005236:	460b      	mov	r3, r1
 8005238:	4602      	mov	r2, r0
 800523a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800523e:	f000 fa21 	bl	8005684 <__ieee754_sqrt>
 8005242:	496f      	ldr	r1, [pc, #444]	; (8005400 <__ieee754_asin+0x348>)
 8005244:	458b      	cmp	fp, r1
 8005246:	ec57 6b10 	vmov	r6, r7, d0
 800524a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800524e:	f340 80d9 	ble.w	8005404 <__ieee754_asin+0x34c>
 8005252:	4640      	mov	r0, r8
 8005254:	4649      	mov	r1, r9
 8005256:	f7fb fa99 	bl	800078c <__aeabi_ddiv>
 800525a:	4632      	mov	r2, r6
 800525c:	463b      	mov	r3, r7
 800525e:	f7fb f96b 	bl	8000538 <__aeabi_dmul>
 8005262:	4632      	mov	r2, r6
 8005264:	463b      	mov	r3, r7
 8005266:	f7fa ffb5 	bl	80001d4 <__adddf3>
 800526a:	4602      	mov	r2, r0
 800526c:	460b      	mov	r3, r1
 800526e:	f7fa ffb1 	bl	80001d4 <__adddf3>
 8005272:	a347      	add	r3, pc, #284	; (adr r3, 8005390 <__ieee754_asin+0x2d8>)
 8005274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005278:	f7fa ffaa 	bl	80001d0 <__aeabi_dsub>
 800527c:	4602      	mov	r2, r0
 800527e:	460b      	mov	r3, r1
 8005280:	a141      	add	r1, pc, #260	; (adr r1, 8005388 <__ieee754_asin+0x2d0>)
 8005282:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005286:	f7fa ffa3 	bl	80001d0 <__aeabi_dsub>
 800528a:	9b01      	ldr	r3, [sp, #4]
 800528c:	2b00      	cmp	r3, #0
 800528e:	bfdc      	itt	le
 8005290:	4602      	movle	r2, r0
 8005292:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8005296:	4604      	mov	r4, r0
 8005298:	460d      	mov	r5, r1
 800529a:	bfdc      	itt	le
 800529c:	4614      	movle	r4, r2
 800529e:	461d      	movle	r5, r3
 80052a0:	e743      	b.n	800512a <__ieee754_asin+0x72>
 80052a2:	ee10 2a10 	vmov	r2, s0
 80052a6:	ee10 0a10 	vmov	r0, s0
 80052aa:	462b      	mov	r3, r5
 80052ac:	4629      	mov	r1, r5
 80052ae:	f7fb f943 	bl	8000538 <__aeabi_dmul>
 80052b2:	a33b      	add	r3, pc, #236	; (adr r3, 80053a0 <__ieee754_asin+0x2e8>)
 80052b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b8:	4606      	mov	r6, r0
 80052ba:	460f      	mov	r7, r1
 80052bc:	f7fb f93c 	bl	8000538 <__aeabi_dmul>
 80052c0:	a339      	add	r3, pc, #228	; (adr r3, 80053a8 <__ieee754_asin+0x2f0>)
 80052c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c6:	f7fa ff85 	bl	80001d4 <__adddf3>
 80052ca:	4632      	mov	r2, r6
 80052cc:	463b      	mov	r3, r7
 80052ce:	f7fb f933 	bl	8000538 <__aeabi_dmul>
 80052d2:	a337      	add	r3, pc, #220	; (adr r3, 80053b0 <__ieee754_asin+0x2f8>)
 80052d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d8:	f7fa ff7a 	bl	80001d0 <__aeabi_dsub>
 80052dc:	4632      	mov	r2, r6
 80052de:	463b      	mov	r3, r7
 80052e0:	f7fb f92a 	bl	8000538 <__aeabi_dmul>
 80052e4:	a334      	add	r3, pc, #208	; (adr r3, 80053b8 <__ieee754_asin+0x300>)
 80052e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ea:	f7fa ff73 	bl	80001d4 <__adddf3>
 80052ee:	4632      	mov	r2, r6
 80052f0:	463b      	mov	r3, r7
 80052f2:	f7fb f921 	bl	8000538 <__aeabi_dmul>
 80052f6:	a332      	add	r3, pc, #200	; (adr r3, 80053c0 <__ieee754_asin+0x308>)
 80052f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052fc:	f7fa ff68 	bl	80001d0 <__aeabi_dsub>
 8005300:	4632      	mov	r2, r6
 8005302:	463b      	mov	r3, r7
 8005304:	f7fb f918 	bl	8000538 <__aeabi_dmul>
 8005308:	a32f      	add	r3, pc, #188	; (adr r3, 80053c8 <__ieee754_asin+0x310>)
 800530a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800530e:	f7fa ff61 	bl	80001d4 <__adddf3>
 8005312:	4632      	mov	r2, r6
 8005314:	463b      	mov	r3, r7
 8005316:	f7fb f90f 	bl	8000538 <__aeabi_dmul>
 800531a:	a32d      	add	r3, pc, #180	; (adr r3, 80053d0 <__ieee754_asin+0x318>)
 800531c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005320:	4680      	mov	r8, r0
 8005322:	4689      	mov	r9, r1
 8005324:	4630      	mov	r0, r6
 8005326:	4639      	mov	r1, r7
 8005328:	f7fb f906 	bl	8000538 <__aeabi_dmul>
 800532c:	a32a      	add	r3, pc, #168	; (adr r3, 80053d8 <__ieee754_asin+0x320>)
 800532e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005332:	f7fa ff4d 	bl	80001d0 <__aeabi_dsub>
 8005336:	4632      	mov	r2, r6
 8005338:	463b      	mov	r3, r7
 800533a:	f7fb f8fd 	bl	8000538 <__aeabi_dmul>
 800533e:	a328      	add	r3, pc, #160	; (adr r3, 80053e0 <__ieee754_asin+0x328>)
 8005340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005344:	f7fa ff46 	bl	80001d4 <__adddf3>
 8005348:	4632      	mov	r2, r6
 800534a:	463b      	mov	r3, r7
 800534c:	f7fb f8f4 	bl	8000538 <__aeabi_dmul>
 8005350:	a325      	add	r3, pc, #148	; (adr r3, 80053e8 <__ieee754_asin+0x330>)
 8005352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005356:	f7fa ff3b 	bl	80001d0 <__aeabi_dsub>
 800535a:	4632      	mov	r2, r6
 800535c:	463b      	mov	r3, r7
 800535e:	f7fb f8eb 	bl	8000538 <__aeabi_dmul>
 8005362:	2200      	movs	r2, #0
 8005364:	4b24      	ldr	r3, [pc, #144]	; (80053f8 <__ieee754_asin+0x340>)
 8005366:	f7fa ff35 	bl	80001d4 <__adddf3>
 800536a:	4602      	mov	r2, r0
 800536c:	460b      	mov	r3, r1
 800536e:	4640      	mov	r0, r8
 8005370:	4649      	mov	r1, r9
 8005372:	f7fb fa0b 	bl	800078c <__aeabi_ddiv>
 8005376:	4622      	mov	r2, r4
 8005378:	462b      	mov	r3, r5
 800537a:	f7fb f8dd 	bl	8000538 <__aeabi_dmul>
 800537e:	4602      	mov	r2, r0
 8005380:	460b      	mov	r3, r1
 8005382:	4620      	mov	r0, r4
 8005384:	4629      	mov	r1, r5
 8005386:	e6c0      	b.n	800510a <__ieee754_asin+0x52>
 8005388:	54442d18 	.word	0x54442d18
 800538c:	3ff921fb 	.word	0x3ff921fb
 8005390:	33145c07 	.word	0x33145c07
 8005394:	3c91a626 	.word	0x3c91a626
 8005398:	8800759c 	.word	0x8800759c
 800539c:	7e37e43c 	.word	0x7e37e43c
 80053a0:	0dfdf709 	.word	0x0dfdf709
 80053a4:	3f023de1 	.word	0x3f023de1
 80053a8:	7501b288 	.word	0x7501b288
 80053ac:	3f49efe0 	.word	0x3f49efe0
 80053b0:	b5688f3b 	.word	0xb5688f3b
 80053b4:	3fa48228 	.word	0x3fa48228
 80053b8:	0e884455 	.word	0x0e884455
 80053bc:	3fc9c155 	.word	0x3fc9c155
 80053c0:	03eb6f7d 	.word	0x03eb6f7d
 80053c4:	3fd4d612 	.word	0x3fd4d612
 80053c8:	55555555 	.word	0x55555555
 80053cc:	3fc55555 	.word	0x3fc55555
 80053d0:	b12e9282 	.word	0xb12e9282
 80053d4:	3fb3b8c5 	.word	0x3fb3b8c5
 80053d8:	1b8d0159 	.word	0x1b8d0159
 80053dc:	3fe6066c 	.word	0x3fe6066c
 80053e0:	9c598ac8 	.word	0x9c598ac8
 80053e4:	40002ae5 	.word	0x40002ae5
 80053e8:	1c8a2d4b 	.word	0x1c8a2d4b
 80053ec:	40033a27 	.word	0x40033a27
 80053f0:	3fefffff 	.word	0x3fefffff
 80053f4:	3fdfffff 	.word	0x3fdfffff
 80053f8:	3ff00000 	.word	0x3ff00000
 80053fc:	3fe00000 	.word	0x3fe00000
 8005400:	3fef3332 	.word	0x3fef3332
 8005404:	4640      	mov	r0, r8
 8005406:	4649      	mov	r1, r9
 8005408:	f7fb f9c0 	bl	800078c <__aeabi_ddiv>
 800540c:	4632      	mov	r2, r6
 800540e:	4680      	mov	r8, r0
 8005410:	4689      	mov	r9, r1
 8005412:	463b      	mov	r3, r7
 8005414:	4630      	mov	r0, r6
 8005416:	4639      	mov	r1, r7
 8005418:	f7fa fedc 	bl	80001d4 <__adddf3>
 800541c:	4602      	mov	r2, r0
 800541e:	460b      	mov	r3, r1
 8005420:	4640      	mov	r0, r8
 8005422:	4649      	mov	r1, r9
 8005424:	f7fb f888 	bl	8000538 <__aeabi_dmul>
 8005428:	f04f 0a00 	mov.w	sl, #0
 800542c:	4680      	mov	r8, r0
 800542e:	4689      	mov	r9, r1
 8005430:	4652      	mov	r2, sl
 8005432:	463b      	mov	r3, r7
 8005434:	4650      	mov	r0, sl
 8005436:	4639      	mov	r1, r7
 8005438:	f7fb f87e 	bl	8000538 <__aeabi_dmul>
 800543c:	4602      	mov	r2, r0
 800543e:	460b      	mov	r3, r1
 8005440:	4620      	mov	r0, r4
 8005442:	4629      	mov	r1, r5
 8005444:	f7fa fec4 	bl	80001d0 <__aeabi_dsub>
 8005448:	4652      	mov	r2, sl
 800544a:	4604      	mov	r4, r0
 800544c:	460d      	mov	r5, r1
 800544e:	463b      	mov	r3, r7
 8005450:	4630      	mov	r0, r6
 8005452:	4639      	mov	r1, r7
 8005454:	f7fa febe 	bl	80001d4 <__adddf3>
 8005458:	4602      	mov	r2, r0
 800545a:	460b      	mov	r3, r1
 800545c:	4620      	mov	r0, r4
 800545e:	4629      	mov	r1, r5
 8005460:	f7fb f994 	bl	800078c <__aeabi_ddiv>
 8005464:	4602      	mov	r2, r0
 8005466:	460b      	mov	r3, r1
 8005468:	f7fa feb4 	bl	80001d4 <__adddf3>
 800546c:	4602      	mov	r2, r0
 800546e:	460b      	mov	r3, r1
 8005470:	a113      	add	r1, pc, #76	; (adr r1, 80054c0 <__ieee754_asin+0x408>)
 8005472:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005476:	f7fa feab 	bl	80001d0 <__aeabi_dsub>
 800547a:	4602      	mov	r2, r0
 800547c:	460b      	mov	r3, r1
 800547e:	4640      	mov	r0, r8
 8005480:	4649      	mov	r1, r9
 8005482:	f7fa fea5 	bl	80001d0 <__aeabi_dsub>
 8005486:	4652      	mov	r2, sl
 8005488:	4604      	mov	r4, r0
 800548a:	460d      	mov	r5, r1
 800548c:	463b      	mov	r3, r7
 800548e:	4650      	mov	r0, sl
 8005490:	4639      	mov	r1, r7
 8005492:	f7fa fe9f 	bl	80001d4 <__adddf3>
 8005496:	4602      	mov	r2, r0
 8005498:	460b      	mov	r3, r1
 800549a:	a10b      	add	r1, pc, #44	; (adr r1, 80054c8 <__ieee754_asin+0x410>)
 800549c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80054a0:	f7fa fe96 	bl	80001d0 <__aeabi_dsub>
 80054a4:	4602      	mov	r2, r0
 80054a6:	460b      	mov	r3, r1
 80054a8:	4620      	mov	r0, r4
 80054aa:	4629      	mov	r1, r5
 80054ac:	f7fa fe90 	bl	80001d0 <__aeabi_dsub>
 80054b0:	4602      	mov	r2, r0
 80054b2:	460b      	mov	r3, r1
 80054b4:	a104      	add	r1, pc, #16	; (adr r1, 80054c8 <__ieee754_asin+0x410>)
 80054b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80054ba:	e6e4      	b.n	8005286 <__ieee754_asin+0x1ce>
 80054bc:	f3af 8000 	nop.w
 80054c0:	33145c07 	.word	0x33145c07
 80054c4:	3c91a626 	.word	0x3c91a626
 80054c8:	54442d18 	.word	0x54442d18
 80054cc:	3fe921fb 	.word	0x3fe921fb

080054d0 <__ieee754_atan2>:
 80054d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054d4:	ec57 6b11 	vmov	r6, r7, d1
 80054d8:	4273      	negs	r3, r6
 80054da:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80054de:	4333      	orrs	r3, r6
 80054e0:	f8df c19c 	ldr.w	ip, [pc, #412]	; 8005680 <__ieee754_atan2+0x1b0>
 80054e4:	ec51 0b10 	vmov	r0, r1, d0
 80054e8:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80054ec:	4563      	cmp	r3, ip
 80054ee:	ee11 8a10 	vmov	r8, s2
 80054f2:	ee10 9a10 	vmov	r9, s0
 80054f6:	468e      	mov	lr, r1
 80054f8:	d807      	bhi.n	800550a <__ieee754_atan2+0x3a>
 80054fa:	4244      	negs	r4, r0
 80054fc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005500:	4304      	orrs	r4, r0
 8005502:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8005506:	4564      	cmp	r4, ip
 8005508:	d907      	bls.n	800551a <__ieee754_atan2+0x4a>
 800550a:	4632      	mov	r2, r6
 800550c:	463b      	mov	r3, r7
 800550e:	f7fa fe61 	bl	80001d4 <__adddf3>
 8005512:	ec41 0b10 	vmov	d0, r0, r1
 8005516:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800551a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800551e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005522:	4334      	orrs	r4, r6
 8005524:	d103      	bne.n	800552e <__ieee754_atan2+0x5e>
 8005526:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800552a:	f000 b95d 	b.w	80057e8 <atan>
 800552e:	17bc      	asrs	r4, r7, #30
 8005530:	f004 0402 	and.w	r4, r4, #2
 8005534:	ea59 0903 	orrs.w	r9, r9, r3
 8005538:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800553c:	d107      	bne.n	800554e <__ieee754_atan2+0x7e>
 800553e:	2c02      	cmp	r4, #2
 8005540:	d030      	beq.n	80055a4 <__ieee754_atan2+0xd4>
 8005542:	2c03      	cmp	r4, #3
 8005544:	d1e5      	bne.n	8005512 <__ieee754_atan2+0x42>
 8005546:	a13c      	add	r1, pc, #240	; (adr r1, 8005638 <__ieee754_atan2+0x168>)
 8005548:	e9d1 0100 	ldrd	r0, r1, [r1]
 800554c:	e7e1      	b.n	8005512 <__ieee754_atan2+0x42>
 800554e:	ea58 0802 	orrs.w	r8, r8, r2
 8005552:	d106      	bne.n	8005562 <__ieee754_atan2+0x92>
 8005554:	f1be 0f00 	cmp.w	lr, #0
 8005558:	da6a      	bge.n	8005630 <__ieee754_atan2+0x160>
 800555a:	a139      	add	r1, pc, #228	; (adr r1, 8005640 <__ieee754_atan2+0x170>)
 800555c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005560:	e7d7      	b.n	8005512 <__ieee754_atan2+0x42>
 8005562:	4562      	cmp	r2, ip
 8005564:	d122      	bne.n	80055ac <__ieee754_atan2+0xdc>
 8005566:	4293      	cmp	r3, r2
 8005568:	d111      	bne.n	800558e <__ieee754_atan2+0xbe>
 800556a:	2c02      	cmp	r4, #2
 800556c:	d007      	beq.n	800557e <__ieee754_atan2+0xae>
 800556e:	2c03      	cmp	r4, #3
 8005570:	d009      	beq.n	8005586 <__ieee754_atan2+0xb6>
 8005572:	2c01      	cmp	r4, #1
 8005574:	d156      	bne.n	8005624 <__ieee754_atan2+0x154>
 8005576:	a134      	add	r1, pc, #208	; (adr r1, 8005648 <__ieee754_atan2+0x178>)
 8005578:	e9d1 0100 	ldrd	r0, r1, [r1]
 800557c:	e7c9      	b.n	8005512 <__ieee754_atan2+0x42>
 800557e:	a134      	add	r1, pc, #208	; (adr r1, 8005650 <__ieee754_atan2+0x180>)
 8005580:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005584:	e7c5      	b.n	8005512 <__ieee754_atan2+0x42>
 8005586:	a134      	add	r1, pc, #208	; (adr r1, 8005658 <__ieee754_atan2+0x188>)
 8005588:	e9d1 0100 	ldrd	r0, r1, [r1]
 800558c:	e7c1      	b.n	8005512 <__ieee754_atan2+0x42>
 800558e:	2c02      	cmp	r4, #2
 8005590:	d008      	beq.n	80055a4 <__ieee754_atan2+0xd4>
 8005592:	2c03      	cmp	r4, #3
 8005594:	d0d7      	beq.n	8005546 <__ieee754_atan2+0x76>
 8005596:	2c01      	cmp	r4, #1
 8005598:	f04f 0000 	mov.w	r0, #0
 800559c:	d146      	bne.n	800562c <__ieee754_atan2+0x15c>
 800559e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80055a2:	e7b6      	b.n	8005512 <__ieee754_atan2+0x42>
 80055a4:	a12e      	add	r1, pc, #184	; (adr r1, 8005660 <__ieee754_atan2+0x190>)
 80055a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80055aa:	e7b2      	b.n	8005512 <__ieee754_atan2+0x42>
 80055ac:	4563      	cmp	r3, ip
 80055ae:	d0d1      	beq.n	8005554 <__ieee754_atan2+0x84>
 80055b0:	1a9b      	subs	r3, r3, r2
 80055b2:	151b      	asrs	r3, r3, #20
 80055b4:	2b3c      	cmp	r3, #60	; 0x3c
 80055b6:	dc1e      	bgt.n	80055f6 <__ieee754_atan2+0x126>
 80055b8:	2f00      	cmp	r7, #0
 80055ba:	da01      	bge.n	80055c0 <__ieee754_atan2+0xf0>
 80055bc:	333c      	adds	r3, #60	; 0x3c
 80055be:	db1e      	blt.n	80055fe <__ieee754_atan2+0x12e>
 80055c0:	4632      	mov	r2, r6
 80055c2:	463b      	mov	r3, r7
 80055c4:	f7fb f8e2 	bl	800078c <__aeabi_ddiv>
 80055c8:	ec41 0b10 	vmov	d0, r0, r1
 80055cc:	f000 fab4 	bl	8005b38 <fabs>
 80055d0:	f000 f90a 	bl	80057e8 <atan>
 80055d4:	ec51 0b10 	vmov	r0, r1, d0
 80055d8:	2c01      	cmp	r4, #1
 80055da:	d013      	beq.n	8005604 <__ieee754_atan2+0x134>
 80055dc:	2c02      	cmp	r4, #2
 80055de:	d014      	beq.n	800560a <__ieee754_atan2+0x13a>
 80055e0:	2c00      	cmp	r4, #0
 80055e2:	d096      	beq.n	8005512 <__ieee754_atan2+0x42>
 80055e4:	a320      	add	r3, pc, #128	; (adr r3, 8005668 <__ieee754_atan2+0x198>)
 80055e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ea:	f7fa fdf1 	bl	80001d0 <__aeabi_dsub>
 80055ee:	a31c      	add	r3, pc, #112	; (adr r3, 8005660 <__ieee754_atan2+0x190>)
 80055f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f4:	e013      	b.n	800561e <__ieee754_atan2+0x14e>
 80055f6:	a11e      	add	r1, pc, #120	; (adr r1, 8005670 <__ieee754_atan2+0x1a0>)
 80055f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80055fc:	e7ec      	b.n	80055d8 <__ieee754_atan2+0x108>
 80055fe:	2000      	movs	r0, #0
 8005600:	2100      	movs	r1, #0
 8005602:	e7e9      	b.n	80055d8 <__ieee754_atan2+0x108>
 8005604:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8005608:	e783      	b.n	8005512 <__ieee754_atan2+0x42>
 800560a:	a317      	add	r3, pc, #92	; (adr r3, 8005668 <__ieee754_atan2+0x198>)
 800560c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005610:	f7fa fdde 	bl	80001d0 <__aeabi_dsub>
 8005614:	4602      	mov	r2, r0
 8005616:	460b      	mov	r3, r1
 8005618:	a111      	add	r1, pc, #68	; (adr r1, 8005660 <__ieee754_atan2+0x190>)
 800561a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800561e:	f7fa fdd7 	bl	80001d0 <__aeabi_dsub>
 8005622:	e776      	b.n	8005512 <__ieee754_atan2+0x42>
 8005624:	a114      	add	r1, pc, #80	; (adr r1, 8005678 <__ieee754_atan2+0x1a8>)
 8005626:	e9d1 0100 	ldrd	r0, r1, [r1]
 800562a:	e772      	b.n	8005512 <__ieee754_atan2+0x42>
 800562c:	2100      	movs	r1, #0
 800562e:	e770      	b.n	8005512 <__ieee754_atan2+0x42>
 8005630:	a10f      	add	r1, pc, #60	; (adr r1, 8005670 <__ieee754_atan2+0x1a0>)
 8005632:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005636:	e76c      	b.n	8005512 <__ieee754_atan2+0x42>
 8005638:	54442d18 	.word	0x54442d18
 800563c:	c00921fb 	.word	0xc00921fb
 8005640:	54442d18 	.word	0x54442d18
 8005644:	bff921fb 	.word	0xbff921fb
 8005648:	54442d18 	.word	0x54442d18
 800564c:	bfe921fb 	.word	0xbfe921fb
 8005650:	7f3321d2 	.word	0x7f3321d2
 8005654:	4002d97c 	.word	0x4002d97c
 8005658:	7f3321d2 	.word	0x7f3321d2
 800565c:	c002d97c 	.word	0xc002d97c
 8005660:	54442d18 	.word	0x54442d18
 8005664:	400921fb 	.word	0x400921fb
 8005668:	33145c07 	.word	0x33145c07
 800566c:	3ca1a626 	.word	0x3ca1a626
 8005670:	54442d18 	.word	0x54442d18
 8005674:	3ff921fb 	.word	0x3ff921fb
 8005678:	54442d18 	.word	0x54442d18
 800567c:	3fe921fb 	.word	0x3fe921fb
 8005680:	7ff00000 	.word	0x7ff00000

08005684 <__ieee754_sqrt>:
 8005684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005688:	ec55 4b10 	vmov	r4, r5, d0
 800568c:	4e54      	ldr	r6, [pc, #336]	; (80057e0 <__ieee754_sqrt+0x15c>)
 800568e:	43ae      	bics	r6, r5
 8005690:	ee10 0a10 	vmov	r0, s0
 8005694:	462b      	mov	r3, r5
 8005696:	462a      	mov	r2, r5
 8005698:	4621      	mov	r1, r4
 800569a:	d113      	bne.n	80056c4 <__ieee754_sqrt+0x40>
 800569c:	ee10 2a10 	vmov	r2, s0
 80056a0:	462b      	mov	r3, r5
 80056a2:	ee10 0a10 	vmov	r0, s0
 80056a6:	4629      	mov	r1, r5
 80056a8:	f7fa ff46 	bl	8000538 <__aeabi_dmul>
 80056ac:	4602      	mov	r2, r0
 80056ae:	460b      	mov	r3, r1
 80056b0:	4620      	mov	r0, r4
 80056b2:	4629      	mov	r1, r5
 80056b4:	f7fa fd8e 	bl	80001d4 <__adddf3>
 80056b8:	4604      	mov	r4, r0
 80056ba:	460d      	mov	r5, r1
 80056bc:	ec45 4b10 	vmov	d0, r4, r5
 80056c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056c4:	2d00      	cmp	r5, #0
 80056c6:	dc10      	bgt.n	80056ea <__ieee754_sqrt+0x66>
 80056c8:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80056cc:	4330      	orrs	r0, r6
 80056ce:	d0f5      	beq.n	80056bc <__ieee754_sqrt+0x38>
 80056d0:	b15d      	cbz	r5, 80056ea <__ieee754_sqrt+0x66>
 80056d2:	ee10 2a10 	vmov	r2, s0
 80056d6:	462b      	mov	r3, r5
 80056d8:	4620      	mov	r0, r4
 80056da:	4629      	mov	r1, r5
 80056dc:	f7fa fd78 	bl	80001d0 <__aeabi_dsub>
 80056e0:	4602      	mov	r2, r0
 80056e2:	460b      	mov	r3, r1
 80056e4:	f7fb f852 	bl	800078c <__aeabi_ddiv>
 80056e8:	e7e6      	b.n	80056b8 <__ieee754_sqrt+0x34>
 80056ea:	151b      	asrs	r3, r3, #20
 80056ec:	d10c      	bne.n	8005708 <__ieee754_sqrt+0x84>
 80056ee:	2a00      	cmp	r2, #0
 80056f0:	d06d      	beq.n	80057ce <__ieee754_sqrt+0x14a>
 80056f2:	2000      	movs	r0, #0
 80056f4:	02d6      	lsls	r6, r2, #11
 80056f6:	d56e      	bpl.n	80057d6 <__ieee754_sqrt+0x152>
 80056f8:	1e44      	subs	r4, r0, #1
 80056fa:	1b1b      	subs	r3, r3, r4
 80056fc:	f1c0 0420 	rsb	r4, r0, #32
 8005700:	fa21 f404 	lsr.w	r4, r1, r4
 8005704:	4322      	orrs	r2, r4
 8005706:	4081      	lsls	r1, r0
 8005708:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800570c:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8005710:	07dd      	lsls	r5, r3, #31
 8005712:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005716:	bf42      	ittt	mi
 8005718:	0052      	lslmi	r2, r2, #1
 800571a:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 800571e:	0049      	lslmi	r1, r1, #1
 8005720:	1058      	asrs	r0, r3, #1
 8005722:	2500      	movs	r5, #0
 8005724:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 8005728:	441a      	add	r2, r3
 800572a:	0049      	lsls	r1, r1, #1
 800572c:	2316      	movs	r3, #22
 800572e:	462c      	mov	r4, r5
 8005730:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8005734:	19a7      	adds	r7, r4, r6
 8005736:	4297      	cmp	r7, r2
 8005738:	bfde      	ittt	le
 800573a:	1bd2      	suble	r2, r2, r7
 800573c:	19bc      	addle	r4, r7, r6
 800573e:	19ad      	addle	r5, r5, r6
 8005740:	0052      	lsls	r2, r2, #1
 8005742:	3b01      	subs	r3, #1
 8005744:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8005748:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800574c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8005750:	d1f0      	bne.n	8005734 <__ieee754_sqrt+0xb0>
 8005752:	f04f 0e20 	mov.w	lr, #32
 8005756:	469c      	mov	ip, r3
 8005758:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800575c:	42a2      	cmp	r2, r4
 800575e:	eb06 070c 	add.w	r7, r6, ip
 8005762:	dc02      	bgt.n	800576a <__ieee754_sqrt+0xe6>
 8005764:	d112      	bne.n	800578c <__ieee754_sqrt+0x108>
 8005766:	428f      	cmp	r7, r1
 8005768:	d810      	bhi.n	800578c <__ieee754_sqrt+0x108>
 800576a:	2f00      	cmp	r7, #0
 800576c:	eb07 0c06 	add.w	ip, r7, r6
 8005770:	da34      	bge.n	80057dc <__ieee754_sqrt+0x158>
 8005772:	f1bc 0f00 	cmp.w	ip, #0
 8005776:	db31      	blt.n	80057dc <__ieee754_sqrt+0x158>
 8005778:	f104 0801 	add.w	r8, r4, #1
 800577c:	1b12      	subs	r2, r2, r4
 800577e:	428f      	cmp	r7, r1
 8005780:	bf88      	it	hi
 8005782:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8005786:	1bc9      	subs	r1, r1, r7
 8005788:	4433      	add	r3, r6
 800578a:	4644      	mov	r4, r8
 800578c:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 8005790:	f1be 0e01 	subs.w	lr, lr, #1
 8005794:	443a      	add	r2, r7
 8005796:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800579a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800579e:	d1dd      	bne.n	800575c <__ieee754_sqrt+0xd8>
 80057a0:	430a      	orrs	r2, r1
 80057a2:	d006      	beq.n	80057b2 <__ieee754_sqrt+0x12e>
 80057a4:	1c5c      	adds	r4, r3, #1
 80057a6:	bf13      	iteet	ne
 80057a8:	3301      	addne	r3, #1
 80057aa:	3501      	addeq	r5, #1
 80057ac:	4673      	moveq	r3, lr
 80057ae:	f023 0301 	bicne.w	r3, r3, #1
 80057b2:	106a      	asrs	r2, r5, #1
 80057b4:	085b      	lsrs	r3, r3, #1
 80057b6:	07e9      	lsls	r1, r5, #31
 80057b8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80057bc:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80057c0:	bf48      	it	mi
 80057c2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80057c6:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80057ca:	461c      	mov	r4, r3
 80057cc:	e776      	b.n	80056bc <__ieee754_sqrt+0x38>
 80057ce:	0aca      	lsrs	r2, r1, #11
 80057d0:	3b15      	subs	r3, #21
 80057d2:	0549      	lsls	r1, r1, #21
 80057d4:	e78b      	b.n	80056ee <__ieee754_sqrt+0x6a>
 80057d6:	0052      	lsls	r2, r2, #1
 80057d8:	3001      	adds	r0, #1
 80057da:	e78b      	b.n	80056f4 <__ieee754_sqrt+0x70>
 80057dc:	46a0      	mov	r8, r4
 80057de:	e7cd      	b.n	800577c <__ieee754_sqrt+0xf8>
 80057e0:	7ff00000 	.word	0x7ff00000
 80057e4:	00000000 	.word	0x00000000

080057e8 <atan>:
 80057e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057ec:	ec55 4b10 	vmov	r4, r5, d0
 80057f0:	4bc7      	ldr	r3, [pc, #796]	; (8005b10 <atan+0x328>)
 80057f2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80057f6:	429e      	cmp	r6, r3
 80057f8:	46ab      	mov	fp, r5
 80057fa:	dd18      	ble.n	800582e <atan+0x46>
 80057fc:	4ac5      	ldr	r2, [pc, #788]	; (8005b14 <atan+0x32c>)
 80057fe:	4296      	cmp	r6, r2
 8005800:	dc01      	bgt.n	8005806 <atan+0x1e>
 8005802:	d109      	bne.n	8005818 <atan+0x30>
 8005804:	b144      	cbz	r4, 8005818 <atan+0x30>
 8005806:	4622      	mov	r2, r4
 8005808:	462b      	mov	r3, r5
 800580a:	4620      	mov	r0, r4
 800580c:	4629      	mov	r1, r5
 800580e:	f7fa fce1 	bl	80001d4 <__adddf3>
 8005812:	4604      	mov	r4, r0
 8005814:	460d      	mov	r5, r1
 8005816:	e006      	b.n	8005826 <atan+0x3e>
 8005818:	f1bb 0f00 	cmp.w	fp, #0
 800581c:	f300 813a 	bgt.w	8005a94 <atan+0x2ac>
 8005820:	a59f      	add	r5, pc, #636	; (adr r5, 8005aa0 <atan+0x2b8>)
 8005822:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005826:	ec45 4b10 	vmov	d0, r4, r5
 800582a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800582e:	4bba      	ldr	r3, [pc, #744]	; (8005b18 <atan+0x330>)
 8005830:	429e      	cmp	r6, r3
 8005832:	dc14      	bgt.n	800585e <atan+0x76>
 8005834:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8005838:	429e      	cmp	r6, r3
 800583a:	dc0d      	bgt.n	8005858 <atan+0x70>
 800583c:	a39a      	add	r3, pc, #616	; (adr r3, 8005aa8 <atan+0x2c0>)
 800583e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005842:	ee10 0a10 	vmov	r0, s0
 8005846:	4629      	mov	r1, r5
 8005848:	f7fa fcc4 	bl	80001d4 <__adddf3>
 800584c:	2200      	movs	r2, #0
 800584e:	4bb3      	ldr	r3, [pc, #716]	; (8005b1c <atan+0x334>)
 8005850:	f7fb f902 	bl	8000a58 <__aeabi_dcmpgt>
 8005854:	2800      	cmp	r0, #0
 8005856:	d1e6      	bne.n	8005826 <atan+0x3e>
 8005858:	f04f 3aff 	mov.w	sl, #4294967295
 800585c:	e02b      	b.n	80058b6 <atan+0xce>
 800585e:	f000 f96b 	bl	8005b38 <fabs>
 8005862:	4baf      	ldr	r3, [pc, #700]	; (8005b20 <atan+0x338>)
 8005864:	429e      	cmp	r6, r3
 8005866:	ec55 4b10 	vmov	r4, r5, d0
 800586a:	f300 80bf 	bgt.w	80059ec <atan+0x204>
 800586e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8005872:	429e      	cmp	r6, r3
 8005874:	f300 80a0 	bgt.w	80059b8 <atan+0x1d0>
 8005878:	ee10 2a10 	vmov	r2, s0
 800587c:	ee10 0a10 	vmov	r0, s0
 8005880:	462b      	mov	r3, r5
 8005882:	4629      	mov	r1, r5
 8005884:	f7fa fca6 	bl	80001d4 <__adddf3>
 8005888:	2200      	movs	r2, #0
 800588a:	4ba4      	ldr	r3, [pc, #656]	; (8005b1c <atan+0x334>)
 800588c:	f7fa fca0 	bl	80001d0 <__aeabi_dsub>
 8005890:	2200      	movs	r2, #0
 8005892:	4606      	mov	r6, r0
 8005894:	460f      	mov	r7, r1
 8005896:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800589a:	4620      	mov	r0, r4
 800589c:	4629      	mov	r1, r5
 800589e:	f7fa fc99 	bl	80001d4 <__adddf3>
 80058a2:	4602      	mov	r2, r0
 80058a4:	460b      	mov	r3, r1
 80058a6:	4630      	mov	r0, r6
 80058a8:	4639      	mov	r1, r7
 80058aa:	f7fa ff6f 	bl	800078c <__aeabi_ddiv>
 80058ae:	f04f 0a00 	mov.w	sl, #0
 80058b2:	4604      	mov	r4, r0
 80058b4:	460d      	mov	r5, r1
 80058b6:	4622      	mov	r2, r4
 80058b8:	462b      	mov	r3, r5
 80058ba:	4620      	mov	r0, r4
 80058bc:	4629      	mov	r1, r5
 80058be:	f7fa fe3b 	bl	8000538 <__aeabi_dmul>
 80058c2:	4602      	mov	r2, r0
 80058c4:	460b      	mov	r3, r1
 80058c6:	4680      	mov	r8, r0
 80058c8:	4689      	mov	r9, r1
 80058ca:	f7fa fe35 	bl	8000538 <__aeabi_dmul>
 80058ce:	a378      	add	r3, pc, #480	; (adr r3, 8005ab0 <atan+0x2c8>)
 80058d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d4:	4606      	mov	r6, r0
 80058d6:	460f      	mov	r7, r1
 80058d8:	f7fa fe2e 	bl	8000538 <__aeabi_dmul>
 80058dc:	a376      	add	r3, pc, #472	; (adr r3, 8005ab8 <atan+0x2d0>)
 80058de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e2:	f7fa fc77 	bl	80001d4 <__adddf3>
 80058e6:	4632      	mov	r2, r6
 80058e8:	463b      	mov	r3, r7
 80058ea:	f7fa fe25 	bl	8000538 <__aeabi_dmul>
 80058ee:	a374      	add	r3, pc, #464	; (adr r3, 8005ac0 <atan+0x2d8>)
 80058f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f4:	f7fa fc6e 	bl	80001d4 <__adddf3>
 80058f8:	4632      	mov	r2, r6
 80058fa:	463b      	mov	r3, r7
 80058fc:	f7fa fe1c 	bl	8000538 <__aeabi_dmul>
 8005900:	a371      	add	r3, pc, #452	; (adr r3, 8005ac8 <atan+0x2e0>)
 8005902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005906:	f7fa fc65 	bl	80001d4 <__adddf3>
 800590a:	4632      	mov	r2, r6
 800590c:	463b      	mov	r3, r7
 800590e:	f7fa fe13 	bl	8000538 <__aeabi_dmul>
 8005912:	a36f      	add	r3, pc, #444	; (adr r3, 8005ad0 <atan+0x2e8>)
 8005914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005918:	f7fa fc5c 	bl	80001d4 <__adddf3>
 800591c:	4632      	mov	r2, r6
 800591e:	463b      	mov	r3, r7
 8005920:	f7fa fe0a 	bl	8000538 <__aeabi_dmul>
 8005924:	a36c      	add	r3, pc, #432	; (adr r3, 8005ad8 <atan+0x2f0>)
 8005926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800592a:	f7fa fc53 	bl	80001d4 <__adddf3>
 800592e:	4642      	mov	r2, r8
 8005930:	464b      	mov	r3, r9
 8005932:	f7fa fe01 	bl	8000538 <__aeabi_dmul>
 8005936:	a36a      	add	r3, pc, #424	; (adr r3, 8005ae0 <atan+0x2f8>)
 8005938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800593c:	4680      	mov	r8, r0
 800593e:	4689      	mov	r9, r1
 8005940:	4630      	mov	r0, r6
 8005942:	4639      	mov	r1, r7
 8005944:	f7fa fdf8 	bl	8000538 <__aeabi_dmul>
 8005948:	a367      	add	r3, pc, #412	; (adr r3, 8005ae8 <atan+0x300>)
 800594a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800594e:	f7fa fc3f 	bl	80001d0 <__aeabi_dsub>
 8005952:	4632      	mov	r2, r6
 8005954:	463b      	mov	r3, r7
 8005956:	f7fa fdef 	bl	8000538 <__aeabi_dmul>
 800595a:	a365      	add	r3, pc, #404	; (adr r3, 8005af0 <atan+0x308>)
 800595c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005960:	f7fa fc36 	bl	80001d0 <__aeabi_dsub>
 8005964:	4632      	mov	r2, r6
 8005966:	463b      	mov	r3, r7
 8005968:	f7fa fde6 	bl	8000538 <__aeabi_dmul>
 800596c:	a362      	add	r3, pc, #392	; (adr r3, 8005af8 <atan+0x310>)
 800596e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005972:	f7fa fc2d 	bl	80001d0 <__aeabi_dsub>
 8005976:	4632      	mov	r2, r6
 8005978:	463b      	mov	r3, r7
 800597a:	f7fa fddd 	bl	8000538 <__aeabi_dmul>
 800597e:	a360      	add	r3, pc, #384	; (adr r3, 8005b00 <atan+0x318>)
 8005980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005984:	f7fa fc24 	bl	80001d0 <__aeabi_dsub>
 8005988:	4632      	mov	r2, r6
 800598a:	463b      	mov	r3, r7
 800598c:	f7fa fdd4 	bl	8000538 <__aeabi_dmul>
 8005990:	f1ba 3fff 	cmp.w	sl, #4294967295
 8005994:	4602      	mov	r2, r0
 8005996:	460b      	mov	r3, r1
 8005998:	d155      	bne.n	8005a46 <atan+0x25e>
 800599a:	4640      	mov	r0, r8
 800599c:	4649      	mov	r1, r9
 800599e:	f7fa fc19 	bl	80001d4 <__adddf3>
 80059a2:	4622      	mov	r2, r4
 80059a4:	462b      	mov	r3, r5
 80059a6:	f7fa fdc7 	bl	8000538 <__aeabi_dmul>
 80059aa:	4602      	mov	r2, r0
 80059ac:	460b      	mov	r3, r1
 80059ae:	4620      	mov	r0, r4
 80059b0:	4629      	mov	r1, r5
 80059b2:	f7fa fc0d 	bl	80001d0 <__aeabi_dsub>
 80059b6:	e72c      	b.n	8005812 <atan+0x2a>
 80059b8:	ee10 0a10 	vmov	r0, s0
 80059bc:	2200      	movs	r2, #0
 80059be:	4b57      	ldr	r3, [pc, #348]	; (8005b1c <atan+0x334>)
 80059c0:	4629      	mov	r1, r5
 80059c2:	f7fa fc05 	bl	80001d0 <__aeabi_dsub>
 80059c6:	2200      	movs	r2, #0
 80059c8:	4606      	mov	r6, r0
 80059ca:	460f      	mov	r7, r1
 80059cc:	4b53      	ldr	r3, [pc, #332]	; (8005b1c <atan+0x334>)
 80059ce:	4620      	mov	r0, r4
 80059d0:	4629      	mov	r1, r5
 80059d2:	f7fa fbff 	bl	80001d4 <__adddf3>
 80059d6:	4602      	mov	r2, r0
 80059d8:	460b      	mov	r3, r1
 80059da:	4630      	mov	r0, r6
 80059dc:	4639      	mov	r1, r7
 80059de:	f7fa fed5 	bl	800078c <__aeabi_ddiv>
 80059e2:	f04f 0a01 	mov.w	sl, #1
 80059e6:	4604      	mov	r4, r0
 80059e8:	460d      	mov	r5, r1
 80059ea:	e764      	b.n	80058b6 <atan+0xce>
 80059ec:	4b4d      	ldr	r3, [pc, #308]	; (8005b24 <atan+0x33c>)
 80059ee:	429e      	cmp	r6, r3
 80059f0:	dc1d      	bgt.n	8005a2e <atan+0x246>
 80059f2:	ee10 0a10 	vmov	r0, s0
 80059f6:	2200      	movs	r2, #0
 80059f8:	4b4b      	ldr	r3, [pc, #300]	; (8005b28 <atan+0x340>)
 80059fa:	4629      	mov	r1, r5
 80059fc:	f7fa fbe8 	bl	80001d0 <__aeabi_dsub>
 8005a00:	2200      	movs	r2, #0
 8005a02:	4606      	mov	r6, r0
 8005a04:	460f      	mov	r7, r1
 8005a06:	4b48      	ldr	r3, [pc, #288]	; (8005b28 <atan+0x340>)
 8005a08:	4620      	mov	r0, r4
 8005a0a:	4629      	mov	r1, r5
 8005a0c:	f7fa fd94 	bl	8000538 <__aeabi_dmul>
 8005a10:	2200      	movs	r2, #0
 8005a12:	4b42      	ldr	r3, [pc, #264]	; (8005b1c <atan+0x334>)
 8005a14:	f7fa fbde 	bl	80001d4 <__adddf3>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	460b      	mov	r3, r1
 8005a1c:	4630      	mov	r0, r6
 8005a1e:	4639      	mov	r1, r7
 8005a20:	f7fa feb4 	bl	800078c <__aeabi_ddiv>
 8005a24:	f04f 0a02 	mov.w	sl, #2
 8005a28:	4604      	mov	r4, r0
 8005a2a:	460d      	mov	r5, r1
 8005a2c:	e743      	b.n	80058b6 <atan+0xce>
 8005a2e:	462b      	mov	r3, r5
 8005a30:	ee10 2a10 	vmov	r2, s0
 8005a34:	2000      	movs	r0, #0
 8005a36:	493d      	ldr	r1, [pc, #244]	; (8005b2c <atan+0x344>)
 8005a38:	f7fa fea8 	bl	800078c <__aeabi_ddiv>
 8005a3c:	f04f 0a03 	mov.w	sl, #3
 8005a40:	4604      	mov	r4, r0
 8005a42:	460d      	mov	r5, r1
 8005a44:	e737      	b.n	80058b6 <atan+0xce>
 8005a46:	4640      	mov	r0, r8
 8005a48:	4649      	mov	r1, r9
 8005a4a:	f7fa fbc3 	bl	80001d4 <__adddf3>
 8005a4e:	4622      	mov	r2, r4
 8005a50:	462b      	mov	r3, r5
 8005a52:	f7fa fd71 	bl	8000538 <__aeabi_dmul>
 8005a56:	4e36      	ldr	r6, [pc, #216]	; (8005b30 <atan+0x348>)
 8005a58:	4b36      	ldr	r3, [pc, #216]	; (8005b34 <atan+0x34c>)
 8005a5a:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8005a5e:	4456      	add	r6, sl
 8005a60:	449a      	add	sl, r3
 8005a62:	e9da 2300 	ldrd	r2, r3, [sl]
 8005a66:	f7fa fbb3 	bl	80001d0 <__aeabi_dsub>
 8005a6a:	4622      	mov	r2, r4
 8005a6c:	462b      	mov	r3, r5
 8005a6e:	f7fa fbaf 	bl	80001d0 <__aeabi_dsub>
 8005a72:	4602      	mov	r2, r0
 8005a74:	460b      	mov	r3, r1
 8005a76:	e9d6 0100 	ldrd	r0, r1, [r6]
 8005a7a:	f7fa fba9 	bl	80001d0 <__aeabi_dsub>
 8005a7e:	f1bb 0f00 	cmp.w	fp, #0
 8005a82:	4604      	mov	r4, r0
 8005a84:	460d      	mov	r5, r1
 8005a86:	f6bf aece 	bge.w	8005826 <atan+0x3e>
 8005a8a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005a8e:	4604      	mov	r4, r0
 8005a90:	461d      	mov	r5, r3
 8005a92:	e6c8      	b.n	8005826 <atan+0x3e>
 8005a94:	a51c      	add	r5, pc, #112	; (adr r5, 8005b08 <atan+0x320>)
 8005a96:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005a9a:	e6c4      	b.n	8005826 <atan+0x3e>
 8005a9c:	f3af 8000 	nop.w
 8005aa0:	54442d18 	.word	0x54442d18
 8005aa4:	bff921fb 	.word	0xbff921fb
 8005aa8:	8800759c 	.word	0x8800759c
 8005aac:	7e37e43c 	.word	0x7e37e43c
 8005ab0:	e322da11 	.word	0xe322da11
 8005ab4:	3f90ad3a 	.word	0x3f90ad3a
 8005ab8:	24760deb 	.word	0x24760deb
 8005abc:	3fa97b4b 	.word	0x3fa97b4b
 8005ac0:	a0d03d51 	.word	0xa0d03d51
 8005ac4:	3fb10d66 	.word	0x3fb10d66
 8005ac8:	c54c206e 	.word	0xc54c206e
 8005acc:	3fb745cd 	.word	0x3fb745cd
 8005ad0:	920083ff 	.word	0x920083ff
 8005ad4:	3fc24924 	.word	0x3fc24924
 8005ad8:	5555550d 	.word	0x5555550d
 8005adc:	3fd55555 	.word	0x3fd55555
 8005ae0:	2c6a6c2f 	.word	0x2c6a6c2f
 8005ae4:	bfa2b444 	.word	0xbfa2b444
 8005ae8:	52defd9a 	.word	0x52defd9a
 8005aec:	3fadde2d 	.word	0x3fadde2d
 8005af0:	af749a6d 	.word	0xaf749a6d
 8005af4:	3fb3b0f2 	.word	0x3fb3b0f2
 8005af8:	fe231671 	.word	0xfe231671
 8005afc:	3fbc71c6 	.word	0x3fbc71c6
 8005b00:	9998ebc4 	.word	0x9998ebc4
 8005b04:	3fc99999 	.word	0x3fc99999
 8005b08:	54442d18 	.word	0x54442d18
 8005b0c:	3ff921fb 	.word	0x3ff921fb
 8005b10:	440fffff 	.word	0x440fffff
 8005b14:	7ff00000 	.word	0x7ff00000
 8005b18:	3fdbffff 	.word	0x3fdbffff
 8005b1c:	3ff00000 	.word	0x3ff00000
 8005b20:	3ff2ffff 	.word	0x3ff2ffff
 8005b24:	40037fff 	.word	0x40037fff
 8005b28:	3ff80000 	.word	0x3ff80000
 8005b2c:	bff00000 	.word	0xbff00000
 8005b30:	08005be8 	.word	0x08005be8
 8005b34:	08005c08 	.word	0x08005c08

08005b38 <fabs>:
 8005b38:	ec53 2b10 	vmov	r2, r3, d0
 8005b3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b40:	ec43 2b10 	vmov	d0, r2, r3
 8005b44:	4770      	bx	lr

08005b46 <matherr>:
 8005b46:	2000      	movs	r0, #0
 8005b48:	4770      	bx	lr
 8005b4a:	0000      	movs	r0, r0
 8005b4c:	0000      	movs	r0, r0
	...

08005b50 <nan>:
 8005b50:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8005b58 <nan+0x8>
 8005b54:	4770      	bx	lr
 8005b56:	bf00      	nop
 8005b58:	00000000 	.word	0x00000000
 8005b5c:	7ff80000 	.word	0x7ff80000

08005b60 <__errno>:
 8005b60:	4b01      	ldr	r3, [pc, #4]	; (8005b68 <__errno+0x8>)
 8005b62:	6818      	ldr	r0, [r3, #0]
 8005b64:	4770      	bx	lr
 8005b66:	bf00      	nop
 8005b68:	20000014 	.word	0x20000014

08005b6c <_init>:
 8005b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b6e:	bf00      	nop
 8005b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b72:	bc08      	pop	{r3}
 8005b74:	469e      	mov	lr, r3
 8005b76:	4770      	bx	lr

08005b78 <_fini>:
 8005b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b7a:	bf00      	nop
 8005b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b7e:	bc08      	pop	{r3}
 8005b80:	469e      	mov	lr, r3
 8005b82:	4770      	bx	lr
